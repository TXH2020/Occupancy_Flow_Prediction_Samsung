2024-05-28 10:36:50.888065: I tensorflow/core/platform/cpu_feature_guard.cc:182] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
/raid/STrajNet/strajnet/lib/python3.10/site-packages/tensorflow_addons/utils/tfa_eol_msg.py:23: UserWarning: 

TensorFlow Addons (TFA) has ended development and introduction of new features.
TFA has entered a minimal maintenance and release mode until a planned end of life in May 2024.
Please modify downstream libraries to take dependencies from other repositories in our TensorFlow community (e.g. Keras, Keras-CV, and Keras-NLP). 

For more information see: https://github.com/tensorflow/addons/issues/2807 

  warnings.warn(
/raid/STrajNet/strajnet/lib/python3.10/site-packages/tensorflow_addons/utils/ensure_tf_install.py:53: UserWarning: Tensorflow Addons supports using Python ops for all Tensorflow versions above or equal to 2.13.0 and strictly below 2.16.0 (nightly versions are not supported). 
 The versions of TensorFlow you are currently using is 2.12.0 and is not supported. 
Some things might work, some things might not.
If you were to encounter a bug, do not file an issue.
If you want to make sure you're using a tested and supported configuration, either change the TensorFlow version or the TensorFlow Addons's version. 
You can find the compatibility matrix in TensorFlow Addon's readme:
https://github.com/tensorflow/addons
  warnings.warn(
2024-05-28 10:37:31.651902: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1635] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 12968 MB memory:  -> device: 0, name: Tesla V100-DGXS-32GB, pci bus id: 0000:07:00.0, compute capability: 7.0
2024-05-28 10:38:22.522216: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:38:22.595083: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:38:22.595362: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:38:28.253064: I tensorflow/compiler/xla/stream_executor/cuda/cuda_dnn.cc:424] Loaded cuDNN version 8700
2024-05-28 10:38:29.307773: I tensorflow/compiler/xla/service/service.cc:169] XLA service 0x7f01dc071c60 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:
2024-05-28 10:38:29.307842: I tensorflow/compiler/xla/service/service.cc:177]   StreamExecutor device (0): Tesla V100-DGXS-32GB, Compute Capability 7.0
2024-05-28 10:38:29.721787: I ./tensorflow/compiler/jit/device_compiler.h:180] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.
2024-05-28 10:38:30.145972: W tensorflow/tsl/framework/bfc_allocator.cc:366] Garbage collection: deallocate free memory regions (i.e., allocations) so that we can re-allocate a larger region to avoid OOM due to memory fragmentation. If you see this message frequently, you are running near the threshold of the available device memory and re-allocation may incur great performance overhead. You may try smaller batch sizes to observe the performance impact. Set TF_ENABLE_GPU_GARBAGE_COLLECTION=false if you'd like to disable this feature.
load_model...
/raid/STrajNet/preprocessed_data/val/*.tfrecords
150 found, start loading dataset
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00107new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0024 seconds, Metrics: {'vehiclesObservedAuc': 0.8978492, 'vehiclesObservedIou': 0.7224635, 'vehiclesOccludedAuc': 0.00092517945, 'vehiclesOccludedIou': 0.0012455875, 'vehiclesFlowEpe': 5.9737334, 'vehiclesFlowWarpedOccupancyAuc': 0.7699007, 'vehiclesFlowWarpedOccupancyIou': 0.7721824}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7390706, 'vehiclesObservedIou': 0.44046387, 'vehiclesOccludedAuc': 0.035139576, 'vehiclesOccludedIou': 0.009591946, 'vehiclesFlowEpe': 4.7303724, 'vehiclesFlowWarpedOccupancyAuc': 0.5747186, 'vehiclesFlowWarpedOccupancyIou': 0.53765136}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.84377027, 'vehiclesObservedIou': 0.52912974, 'vehiclesOccludedAuc': 0.0025642465, 'vehiclesOccludedIou': 0.0012454673, 'vehiclesFlowEpe': 3.6830125, 'vehiclesFlowWarpedOccupancyAuc': 0.71955603, 'vehiclesFlowWarpedOccupancyIou': 0.64462245}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.34357056, 'vehiclesObservedIou': 0.1948682, 'vehiclesOccludedAuc': 0.4129945, 'vehiclesOccludedIou': 0.03812386, 'vehiclesFlowEpe': 6.3681893, 'vehiclesFlowWarpedOccupancyAuc': 0.4799148, 'vehiclesFlowWarpedOccupancyIou': 0.32822573}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.97784287, 'vehiclesObservedIou': 0.8471955, 'vehiclesOccludedAuc': 0.0056896196, 'vehiclesOccludedIou': 0.003498994, 'vehiclesFlowEpe': 5.684003, 'vehiclesFlowWarpedOccupancyAuc': 0.8317476, 'vehiclesFlowWarpedOccupancyIou': 0.8675904}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.35500282, 'vehiclesObservedIou': 0.16458638, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 12.322049, 'vehiclesFlowWarpedOccupancyAuc': 0.23981237, 'vehiclesFlowWarpedOccupancyIou': 0.1847965}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.72838265, 'vehiclesObservedIou': 0.5193852, 'vehiclesOccludedAuc': 0.24172749, 'vehiclesOccludedIou': 0.040514108, 'vehiclesFlowEpe': 2.7879827, 'vehiclesFlowWarpedOccupancyAuc': 0.77401155, 'vehiclesFlowWarpedOccupancyIou': 0.6441605}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7489521, 'vehiclesObservedIou': 0.47368106, 'vehiclesOccludedAuc': 0.109602496, 'vehiclesOccludedIou': 0.022590786, 'vehiclesFlowEpe': 2.9473188, 'vehiclesFlowWarpedOccupancyAuc': 0.7231932, 'vehiclesFlowWarpedOccupancyIou': 0.5608332}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6173131, 'vehiclesObservedIou': 0.29132432, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 5.19346, 'vehiclesFlowWarpedOccupancyAuc': 0.46644548, 'vehiclesFlowWarpedOccupancyIou': 0.41854376}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.95288694, 'vehiclesObservedIou': 0.78635263, 'vehiclesOccludedAuc': 0.107022665, 'vehiclesOccludedIou': 0.0064874673, 'vehiclesFlowEpe': 8.55009, 'vehiclesFlowWarpedOccupancyAuc': 0.8257438, 'vehiclesFlowWarpedOccupancyIou': 0.8143712}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7880387, 'vehiclesObservedIou': 0.44875205, 'vehiclesOccludedAuc': 0.052623868, 'vehiclesOccludedIou': 0.010594239, 'vehiclesFlowEpe': 3.0167387, 'vehiclesFlowWarpedOccupancyAuc': 0.6335974, 'vehiclesFlowWarpedOccupancyIou': 0.36677146}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7755423, 'vehiclesObservedIou': 0.40324223, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.300218, 'vehiclesFlowWarpedOccupancyAuc': 0.6009905, 'vehiclesFlowWarpedOccupancyIou': 0.5098909}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.89634806, 'vehiclesObservedIou': 0.62049186, 'vehiclesOccludedAuc': 0.10223204, 'vehiclesOccludedIou': 0.015119614, 'vehiclesFlowEpe': 4.0293007, 'vehiclesFlowWarpedOccupancyAuc': 0.77930725, 'vehiclesFlowWarpedOccupancyIou': 0.7135194}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.8068161, 'vehiclesObservedIou': 0.5037341, 'vehiclesOccludedAuc': 0.022004, 'vehiclesOccludedIou': 0.008407658, 'vehiclesFlowEpe': 5.0893865, 'vehiclesFlowWarpedOccupancyAuc': 0.6031051, 'vehiclesFlowWarpedOccupancyIou': 0.4867252}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.683623, 'vehiclesObservedIou': 0.37739798, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 6.833243, 'vehiclesFlowWarpedOccupancyAuc': 0.6447113, 'vehiclesFlowWarpedOccupancyIou': 0.47427997}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7040012, 'vehiclesObservedIou': 0.33795476, 'vehiclesOccludedAuc': 0.09080157, 'vehiclesOccludedIou': 0.013175698, 'vehiclesFlowEpe': 2.921011, 'vehiclesFlowWarpedOccupancyAuc': 0.6319678, 'vehiclesFlowWarpedOccupancyIou': 0.39466178}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.72100693, 'vehiclesObservedIou': 0.43942177, 'vehiclesOccludedAuc': 0.0037976997, 'vehiclesOccludedIou': 0.0019113742, 'vehiclesFlowEpe': 3.8785548, 'vehiclesFlowWarpedOccupancyAuc': 0.622775, 'vehiclesFlowWarpedOccupancyIou': 0.5121298}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7498601, 'vehiclesObservedIou': 0.34440744, 'vehiclesOccludedAuc': 0.00016449411, 'vehiclesOccludedIou': 0.0002181593, 'vehiclesFlowEpe': 2.4476368, 'vehiclesFlowWarpedOccupancyAuc': 0.7073993, 'vehiclesFlowWarpedOccupancyIou': 0.47785023}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.88810325, 'vehiclesObservedIou': 0.606781, 'vehiclesOccludedAuc': 0.0045583397, 'vehiclesOccludedIou': 0.0029994794, 'vehiclesFlowEpe': 9.441455, 'vehiclesFlowWarpedOccupancyAuc': 0.72865367, 'vehiclesFlowWarpedOccupancyIou': 0.65400535}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7490123, 'vehiclesObservedIou': 0.39377013, 'vehiclesOccludedAuc': 0.09074376, 'vehiclesOccludedIou': 0.015617449, 'vehiclesFlowEpe': 4.4053636, 'vehiclesFlowWarpedOccupancyAuc': 0.6032059, 'vehiclesFlowWarpedOccupancyIou': 0.45520937}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6547629, 'vehiclesObservedIou': 0.35161215, 'vehiclesOccludedAuc': 0.20531434, 'vehiclesOccludedIou': 0.013588619, 'vehiclesFlowEpe': 2.156217, 'vehiclesFlowWarpedOccupancyAuc': 0.7603133, 'vehiclesFlowWarpedOccupancyIou': 0.47217265}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.864346, 'vehiclesObservedIou': 0.55057937, 'vehiclesOccludedAuc': 0.31085545, 'vehiclesOccludedIou': 0.0882798, 'vehiclesFlowEpe': 4.904395, 'vehiclesFlowWarpedOccupancyAuc': 0.65638494, 'vehiclesFlowWarpedOccupancyIou': 0.58083045}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5250691, 'vehiclesObservedIou': 0.21178995, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 4.1937027, 'vehiclesFlowWarpedOccupancyAuc': 0.49252456, 'vehiclesFlowWarpedOccupancyIou': 0.2548447}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.3794535, 'vehiclesObservedIou': 0.19304356, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.973508, 'vehiclesFlowWarpedOccupancyAuc': 0.5837638, 'vehiclesFlowWarpedOccupancyIou': 0.26637843}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.542567, 'vehiclesObservedIou': 0.24385229, 'vehiclesOccludedAuc': 0.5988605, 'vehiclesOccludedIou': 0.12427482, 'vehiclesFlowEpe': 5.579849, 'vehiclesFlowWarpedOccupancyAuc': 0.61601037, 'vehiclesFlowWarpedOccupancyIou': 0.41099733}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.3422256, 'vehiclesObservedIou': 0.17305863, 'vehiclesOccludedAuc': 0.08328412, 'vehiclesOccludedIou': 0.013751688, 'vehiclesFlowEpe': 4.82071, 'vehiclesFlowWarpedOccupancyAuc': 0.4934584, 'vehiclesFlowWarpedOccupancyIou': 0.20570873}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.36805347, 'vehiclesObservedIou': 0.18516226, 'vehiclesOccludedAuc': 0.00048396847, 'vehiclesOccludedIou': 0.00029508598, 'vehiclesFlowEpe': 3.0662413, 'vehiclesFlowWarpedOccupancyAuc': 0.5452925, 'vehiclesFlowWarpedOccupancyIou': 0.2291236}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6732404, 'vehiclesObservedIou': 0.30436805, 'vehiclesOccludedAuc': 0.0022250153, 'vehiclesOccludedIou': 0.0012576481, 'vehiclesFlowEpe': 1.889759, 'vehiclesFlowWarpedOccupancyAuc': 0.6492387, 'vehiclesFlowWarpedOccupancyIou': 0.38899863}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.97784287, 'vehiclesObservedIou': 0.8471955, 'vehiclesOccludedAuc': 0.0056896196, 'vehiclesOccludedIou': 0.003498994, 'vehiclesFlowEpe': 5.684003, 'vehiclesFlowWarpedOccupancyAuc': 0.8317476, 'vehiclesFlowWarpedOccupancyIou': 0.8675904}
Average Time: 0.0012 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6898825364285713, 'vehiclesObservedIou': 0.4163882135714286, 'vehiclesOccludedAuc': 0.08870053349392858, 'vehiclesOccludedIou': 0.015456769574285713, 'vehiclesFlowEpe': 4.756696471428571, 'vehiclesFlowWarpedOccupancyAuc': 0.6342051400000001, 'vehiclesFlowWarpedOccupancyIou': 0.48668126714285714}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00070new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 10:38:48.727190: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:38:48.781168: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:38:48.781460: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.946724, 'vehiclesObservedIou': 0.7229833, 'vehiclesOccludedAuc': 0.0068794223, 'vehiclesOccludedIou': 0.0027537413, 'vehiclesFlowEpe': 6.784219, 'vehiclesFlowWarpedOccupancyAuc': 0.7996248, 'vehiclesFlowWarpedOccupancyIou': 0.7082209}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.6797452, 'vehiclesObservedIou': 0.38395375, 'vehiclesOccludedAuc': 0.12774399, 'vehiclesOccludedIou': 0.033208188, 'vehiclesFlowEpe': 2.957464, 'vehiclesFlowWarpedOccupancyAuc': 0.62767583, 'vehiclesFlowWarpedOccupancyIou': 0.48646083}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.59810203, 'vehiclesObservedIou': 0.26724717, 'vehiclesOccludedAuc': 0.08791241, 'vehiclesOccludedIou': 0.02300186, 'vehiclesFlowEpe': 4.9366007, 'vehiclesFlowWarpedOccupancyAuc': 0.53020334, 'vehiclesFlowWarpedOccupancyIou': 0.285641}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6639757, 'vehiclesObservedIou': 0.3077819, 'vehiclesOccludedAuc': 0.004332111, 'vehiclesOccludedIou': 0.002245259, 'vehiclesFlowEpe': 5.6570415, 'vehiclesFlowWarpedOccupancyAuc': 0.5165488, 'vehiclesFlowWarpedOccupancyIou': 0.37270898}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.91162926, 'vehiclesObservedIou': 0.6461247, 'vehiclesOccludedAuc': 0.32644266, 'vehiclesOccludedIou': 0.036152948, 'vehiclesFlowEpe': 9.748732, 'vehiclesFlowWarpedOccupancyAuc': 0.7964754, 'vehiclesFlowWarpedOccupancyIou': 0.70739603}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.27238816, 'vehiclesObservedIou': 0.102348186, 'vehiclesOccludedAuc': 0.073660836, 'vehiclesOccludedIou': 0.022618484, 'vehiclesFlowEpe': 4.7701807, 'vehiclesFlowWarpedOccupancyAuc': 0.42409843, 'vehiclesFlowWarpedOccupancyIou': 0.10700221}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.628548, 'vehiclesObservedIou': 0.48706046, 'vehiclesOccludedAuc': 0.0248067, 'vehiclesOccludedIou': 0.009002212, 'vehiclesFlowEpe': 4.609979, 'vehiclesFlowWarpedOccupancyAuc': 0.646355, 'vehiclesFlowWarpedOccupancyIou': 0.56068426}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.97542334, 'vehiclesObservedIou': 0.766134, 'vehiclesOccludedAuc': 0.14015989, 'vehiclesOccludedIou': 0.03091453, 'vehiclesFlowEpe': 6.5900507, 'vehiclesFlowWarpedOccupancyAuc': 0.82416844, 'vehiclesFlowWarpedOccupancyIou': 0.82754856}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.35148218, 'vehiclesObservedIou': 0.19216739, 'vehiclesOccludedAuc': 0.033501487, 'vehiclesOccludedIou': 0.008161939, 'vehiclesFlowEpe': 5.0895543, 'vehiclesFlowWarpedOccupancyAuc': 0.32124913, 'vehiclesFlowWarpedOccupancyIou': 0.22994903}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8663806, 'vehiclesObservedIou': 0.5728041, 'vehiclesOccludedAuc': 0.15561324, 'vehiclesOccludedIou': 0.029159876, 'vehiclesFlowEpe': 1.5562438, 'vehiclesFlowWarpedOccupancyAuc': 0.74865127, 'vehiclesFlowWarpedOccupancyIou': 0.5441053}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.58369416, 'vehiclesObservedIou': 0.26984882, 'vehiclesOccludedAuc': 0.03645358, 'vehiclesOccludedIou': 0.010243632, 'vehiclesFlowEpe': 7.568957, 'vehiclesFlowWarpedOccupancyAuc': 0.46726292, 'vehiclesFlowWarpedOccupancyIou': 0.2790602}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.95628524, 'vehiclesObservedIou': 0.74826515, 'vehiclesOccludedAuc': 0.034747787, 'vehiclesOccludedIou': 0.013779084, 'vehiclesFlowEpe': 8.332998, 'vehiclesFlowWarpedOccupancyAuc': 0.74973017, 'vehiclesFlowWarpedOccupancyIou': 0.7684232}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7477557, 'vehiclesObservedIou': 0.4075035, 'vehiclesOccludedAuc': 0.11034052, 'vehiclesOccludedIou': 0.03042473, 'vehiclesFlowEpe': 2.755737, 'vehiclesFlowWarpedOccupancyAuc': 0.6296947, 'vehiclesFlowWarpedOccupancyIou': 0.4597259}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.72846895, 'vehiclesObservedIou': 0.3647284, 'vehiclesOccludedAuc': 0.010268917, 'vehiclesOccludedIou': 0.0026655064, 'vehiclesFlowEpe': 2.8984916, 'vehiclesFlowWarpedOccupancyAuc': 0.6480595, 'vehiclesFlowWarpedOccupancyIou': 0.45219502}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.6805774, 'vehiclesObservedIou': 0.47708812, 'vehiclesOccludedAuc': 0.021114381, 'vehiclesOccludedIou': 0.007988828, 'vehiclesFlowEpe': 3.8254652, 'vehiclesFlowWarpedOccupancyAuc': 0.74327534, 'vehiclesFlowWarpedOccupancyIou': 0.60155296}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.67931885, 'vehiclesObservedIou': 0.3370187, 'vehiclesOccludedAuc': 0.18925974, 'vehiclesOccludedIou': 0.03778493, 'vehiclesFlowEpe': 4.309854, 'vehiclesFlowWarpedOccupancyAuc': 0.5225792, 'vehiclesFlowWarpedOccupancyIou': 0.41407406}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.70799494, 'vehiclesObservedIou': 0.37797695, 'vehiclesOccludedAuc': 0.11096561, 'vehiclesOccludedIou': 0.016905783, 'vehiclesFlowEpe': 4.8568516, 'vehiclesFlowWarpedOccupancyAuc': 0.5767565, 'vehiclesFlowWarpedOccupancyIou': 0.4790102}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.51952237, 'vehiclesObservedIou': 0.22977602, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.026334, 'vehiclesFlowWarpedOccupancyAuc': 0.50140387, 'vehiclesFlowWarpedOccupancyIou': 0.29744264}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6277502, 'vehiclesObservedIou': 0.21685424, 'vehiclesOccludedAuc': 0.0006432007, 'vehiclesOccludedIou': 0.0008823754, 'vehiclesFlowEpe': 3.4942648, 'vehiclesFlowWarpedOccupancyAuc': 0.48633957, 'vehiclesFlowWarpedOccupancyIou': 0.24685203}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.86991656, 'vehiclesObservedIou': 0.6408467, 'vehiclesOccludedAuc': 0.02470386, 'vehiclesOccludedIou': 0.0051686503, 'vehiclesFlowEpe': 4.411591, 'vehiclesFlowWarpedOccupancyAuc': 0.7431631, 'vehiclesFlowWarpedOccupancyIou': 0.6439736}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.49327645, 'vehiclesObservedIou': 0.24149546, 'vehiclesOccludedAuc': 0.042419553, 'vehiclesOccludedIou': 0.014678161, 'vehiclesFlowEpe': 4.198827, 'vehiclesFlowWarpedOccupancyAuc': 0.47659597, 'vehiclesFlowWarpedOccupancyIou': 0.30878884}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.48372078, 'vehiclesObservedIou': 0.20507386, 'vehiclesOccludedAuc': 0.088505186, 'vehiclesOccludedIou': 0.01386352, 'vehiclesFlowEpe': 6.3202515, 'vehiclesFlowWarpedOccupancyAuc': 0.45225042, 'vehiclesFlowWarpedOccupancyIou': 0.22546448}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.954739, 'vehiclesObservedIou': 0.7429154, 'vehiclesOccludedAuc': 0.0014125686, 'vehiclesOccludedIou': 0.0019304287, 'vehiclesFlowEpe': 4.994625, 'vehiclesFlowWarpedOccupancyAuc': 0.83526874, 'vehiclesFlowWarpedOccupancyIou': 0.8021628}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9481546, 'vehiclesObservedIou': 0.73989594, 'vehiclesOccludedAuc': 0.059104897, 'vehiclesOccludedIou': 0.02184048, 'vehiclesFlowEpe': 5.241188, 'vehiclesFlowWarpedOccupancyAuc': 0.8567626, 'vehiclesFlowWarpedOccupancyIou': 0.8042562}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.87079275, 'vehiclesObservedIou': 0.6022384, 'vehiclesOccludedAuc': 0.0555972, 'vehiclesOccludedIou': 0.025108444, 'vehiclesFlowEpe': 5.09982, 'vehiclesFlowWarpedOccupancyAuc': 0.76172954, 'vehiclesFlowWarpedOccupancyIou': 0.6586003}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.63294977, 'vehiclesObservedIou': 0.3324529, 'vehiclesOccludedAuc': 0.098644495, 'vehiclesOccludedIou': 0.014188931, 'vehiclesFlowEpe': 3.6785235, 'vehiclesFlowWarpedOccupancyAuc': 0.62702, 'vehiclesFlowWarpedOccupancyIou': 0.40299192}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.97542334, 'vehiclesObservedIou': 0.766134, 'vehiclesOccludedAuc': 0.14015989, 'vehiclesOccludedIou': 0.03091453, 'vehiclesFlowEpe': 6.5900507, 'vehiclesFlowWarpedOccupancyAuc': 0.82416844, 'vehiclesFlowWarpedOccupancyIou': 0.82754856}
Average Time: 0.0012 seconds, Average Metrics: {'vehiclesObservedAuc': 0.7068967765384616, 'vehiclesObservedIou': 0.43779167369230765, 'vehiclesOccludedAuc': 0.07173977852307692, 'vehiclesOccludedIou': 0.01594894311923077, 'vehiclesFlowEpe': 4.912070957692308, 'vehiclesFlowWarpedOccupancyAuc': 0.6274208684615386, 'vehiclesFlowWarpedOccupancyIou': 0.4874727480769231}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00145new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 10:39:06.531018: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:39:06.585273: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:39:06.585559: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.37604815, 'vehiclesObservedIou': 0.16606055, 'vehiclesOccludedAuc': 0.005546144, 'vehiclesOccludedIou': 0.0024117942, 'vehiclesFlowEpe': 2.1654418, 'vehiclesFlowWarpedOccupancyAuc': 0.4053044, 'vehiclesFlowWarpedOccupancyIou': 0.20963308}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.17935334, 'vehiclesObservedIou': 0.079127386, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 5.248839, 'vehiclesFlowWarpedOccupancyAuc': 0.2135647, 'vehiclesFlowWarpedOccupancyIou': 0.08511886}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.5436061, 'vehiclesObservedIou': 0.33855325, 'vehiclesOccludedAuc': 0.013103683, 'vehiclesOccludedIou': 0.003952465, 'vehiclesFlowEpe': 4.360891, 'vehiclesFlowWarpedOccupancyAuc': 0.5280864, 'vehiclesFlowWarpedOccupancyIou': 0.3921951}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.7912002, 'vehiclesObservedIou': 0.4535352, 'vehiclesOccludedAuc': 0.033942513, 'vehiclesOccludedIou': 0.015588188, 'vehiclesFlowEpe': 3.6651435, 'vehiclesFlowWarpedOccupancyAuc': 0.69613445, 'vehiclesFlowWarpedOccupancyIou': 0.5782275}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7538395, 'vehiclesObservedIou': 0.4121378, 'vehiclesOccludedAuc': 0.029397056, 'vehiclesOccludedIou': 0.010134861, 'vehiclesFlowEpe': 2.4144235, 'vehiclesFlowWarpedOccupancyAuc': 0.6851214, 'vehiclesFlowWarpedOccupancyIou': 0.49578953}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.73606575, 'vehiclesObservedIou': 0.4688864, 'vehiclesOccludedAuc': 0.06854883, 'vehiclesOccludedIou': 0.01567826, 'vehiclesFlowEpe': 2.068695, 'vehiclesFlowWarpedOccupancyAuc': 0.71094954, 'vehiclesFlowWarpedOccupancyIou': 0.50260305}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.5562583, 'vehiclesObservedIou': 0.2430982, 'vehiclesOccludedAuc': 0.018267859, 'vehiclesOccludedIou': 0.0052801827, 'vehiclesFlowEpe': 9.340779, 'vehiclesFlowWarpedOccupancyAuc': 0.35699534, 'vehiclesFlowWarpedOccupancyIou': 0.239756}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8779165, 'vehiclesObservedIou': 0.5699775, 'vehiclesOccludedAuc': 0.11989654, 'vehiclesOccludedIou': 0.022316786, 'vehiclesFlowEpe': 7.040873, 'vehiclesFlowWarpedOccupancyAuc': 0.63355535, 'vehiclesFlowWarpedOccupancyIou': 0.57728106}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8166064, 'vehiclesObservedIou': 0.43789393, 'vehiclesOccludedAuc': 0.047191456, 'vehiclesOccludedIou': 0.016550625, 'vehiclesFlowEpe': 4.3321867, 'vehiclesFlowWarpedOccupancyAuc': 0.6537038, 'vehiclesFlowWarpedOccupancyIou': 0.5176075}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.920766, 'vehiclesObservedIou': 0.5275142, 'vehiclesOccludedAuc': 0.004718014, 'vehiclesOccludedIou': 0.0016741029, 'vehiclesFlowEpe': 6.707659, 'vehiclesFlowWarpedOccupancyAuc': 0.7732697, 'vehiclesFlowWarpedOccupancyIou': 0.67121965}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.15457533, 'vehiclesObservedIou': 0.07930686, 'vehiclesOccludedAuc': 0.0056520705, 'vehiclesOccludedIou': 0.0014645117, 'vehiclesFlowEpe': 4.5927963, 'vehiclesFlowWarpedOccupancyAuc': 0.40484238, 'vehiclesFlowWarpedOccupancyIou': 0.06365061}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.34538972, 'vehiclesObservedIou': 0.16601798, 'vehiclesOccludedAuc': 0.03010346, 'vehiclesOccludedIou': 0.010768382, 'vehiclesFlowEpe': 4.646571, 'vehiclesFlowWarpedOccupancyAuc': 0.3209474, 'vehiclesFlowWarpedOccupancyIou': 0.21971457}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.6393779, 'vehiclesObservedIou': 0.36149547, 'vehiclesOccludedAuc': 0.011735301, 'vehiclesOccludedIou': 0.0041379975, 'vehiclesFlowEpe': 3.0394967, 'vehiclesFlowWarpedOccupancyAuc': 0.6281466, 'vehiclesFlowWarpedOccupancyIou': 0.41842583}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.5072816, 'vehiclesObservedIou': 0.20273784, 'vehiclesOccludedAuc': 0.009376437, 'vehiclesOccludedIou': 0.0025742322, 'vehiclesFlowEpe': 2.4565034, 'vehiclesFlowWarpedOccupancyAuc': 0.5869583, 'vehiclesFlowWarpedOccupancyIou': 0.20946848}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6288513, 'vehiclesObservedIou': 0.39499804, 'vehiclesOccludedAuc': 0.075383335, 'vehiclesOccludedIou': 0.015236501, 'vehiclesFlowEpe': 4.045822, 'vehiclesFlowWarpedOccupancyAuc': 0.5700041, 'vehiclesFlowWarpedOccupancyIou': 0.4069399}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9755253, 'vehiclesObservedIou': 0.75205714, 'vehiclesOccludedAuc': 0.08034172, 'vehiclesOccludedIou': 0.022519536, 'vehiclesFlowEpe': 1.7830541, 'vehiclesFlowWarpedOccupancyAuc': 0.87964463, 'vehiclesFlowWarpedOccupancyIou': 0.84281737}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.79397947, 'vehiclesObservedIou': 0.47190234, 'vehiclesOccludedAuc': 0.0018177279, 'vehiclesOccludedIou': 0.00083879166, 'vehiclesFlowEpe': 6.2531767, 'vehiclesFlowWarpedOccupancyAuc': 0.6604537, 'vehiclesFlowWarpedOccupancyIou': 0.5188385}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.75881314, 'vehiclesObservedIou': 0.45954695, 'vehiclesOccludedAuc': 0.023307115, 'vehiclesOccludedIou': 0.013425739, 'vehiclesFlowEpe': 6.5431094, 'vehiclesFlowWarpedOccupancyAuc': 0.62428606, 'vehiclesFlowWarpedOccupancyIou': 0.583664}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.60055536, 'vehiclesObservedIou': 0.29692408, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.755899, 'vehiclesFlowWarpedOccupancyAuc': 0.6264591, 'vehiclesFlowWarpedOccupancyIou': 0.39828718}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.41989544, 'vehiclesObservedIou': 0.1571458, 'vehiclesOccludedAuc': 0.10624221, 'vehiclesOccludedIou': 0.020459065, 'vehiclesFlowEpe': 9.306958, 'vehiclesFlowWarpedOccupancyAuc': 0.27441153, 'vehiclesFlowWarpedOccupancyIou': 0.1568919}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.846579, 'vehiclesObservedIou': 0.3739488, 'vehiclesOccludedAuc': 0.1309064, 'vehiclesOccludedIou': 0.031396244, 'vehiclesFlowEpe': 11.469911, 'vehiclesFlowWarpedOccupancyAuc': 0.4718072, 'vehiclesFlowWarpedOccupancyIou': 0.47458777}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.761848, 'vehiclesObservedIou': 0.46872127, 'vehiclesOccludedAuc': 0.0011956014, 'vehiclesOccludedIou': 0.00077140704, 'vehiclesFlowEpe': 4.5117416, 'vehiclesFlowWarpedOccupancyAuc': 0.6807016, 'vehiclesFlowWarpedOccupancyIou': 0.5815698}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.861927, 'vehiclesObservedIou': 0.6077087, 'vehiclesOccludedAuc': 0.08944995, 'vehiclesOccludedIou': 0.008741969, 'vehiclesFlowEpe': 7.971511, 'vehiclesFlowWarpedOccupancyAuc': 0.6525935, 'vehiclesFlowWarpedOccupancyIou': 0.6639942}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.5147038, 'vehiclesObservedIou': 0.25012052, 'vehiclesOccludedAuc': 0.06635453, 'vehiclesOccludedIou': 0.01921432, 'vehiclesFlowEpe': 2.566653, 'vehiclesFlowWarpedOccupancyAuc': 0.64787257, 'vehiclesFlowWarpedOccupancyIou': 0.28893337}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8796097, 'vehiclesObservedIou': 0.5087328, 'vehiclesOccludedAuc': 0.18313622, 'vehiclesOccludedIou': 0.051017992, 'vehiclesFlowEpe': 5.0018873, 'vehiclesFlowWarpedOccupancyAuc': 0.71383584, 'vehiclesFlowWarpedOccupancyIou': 0.40289313}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.21022041, 'vehiclesObservedIou': 0.103935815, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 8.898985, 'vehiclesFlowWarpedOccupancyAuc': 0.19231315, 'vehiclesFlowWarpedOccupancyIou': 0.08320451}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.15498032, 'vehiclesObservedIou': 0.07011798, 'vehiclesOccludedAuc': 0.044843413, 'vehiclesOccludedIou': 0.008587897, 'vehiclesFlowEpe': 6.4846125, 'vehiclesFlowWarpedOccupancyAuc': 0.18462615, 'vehiclesFlowWarpedOccupancyIou': 0.06221642}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.18650535, 'vehiclesObservedIou': 0.110270865, 'vehiclesOccludedAuc': 0.14710625, 'vehiclesOccludedIou': 0.011540327, 'vehiclesFlowEpe': 6.746666, 'vehiclesFlowWarpedOccupancyAuc': 0.26573226, 'vehiclesFlowWarpedOccupancyIou': 0.1268557}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9176248, 'vehiclesObservedIou': 0.6990288, 'vehiclesOccludedAuc': 0.2580913, 'vehiclesOccludedIou': 0.05580292, 'vehiclesFlowEpe': 7.5947123, 'vehiclesFlowWarpedOccupancyAuc': 0.76947206, 'vehiclesFlowWarpedOccupancyIou': 0.7900503}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.4961039, 'vehiclesObservedIou': 0.21951477, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.7262511, 'vehiclesFlowWarpedOccupancyAuc': 0.46566182, 'vehiclesFlowWarpedOccupancyIou': 0.28353748}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.81700885, 'vehiclesObservedIou': 0.53236115, 'vehiclesOccludedAuc': 0.19077882, 'vehiclesOccludedIou': 0.038356543, 'vehiclesFlowEpe': 4.3701987, 'vehiclesFlowWarpedOccupancyAuc': 0.62759244, 'vehiclesFlowWarpedOccupancyIou': 0.53000396}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.82340103, 'vehiclesObservedIou': 0.59219676, 'vehiclesOccludedAuc': 0.016069667, 'vehiclesOccludedIou': 0.010873312, 'vehiclesFlowEpe': 5.2519574, 'vehiclesFlowWarpedOccupancyAuc': 0.8167114, 'vehiclesFlowWarpedOccupancyIou': 0.74576783}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.938043, 'vehiclesObservedIou': 0.6579558, 'vehiclesOccludedAuc': 0.014886243, 'vehiclesOccludedIou': 0.006739634, 'vehiclesFlowEpe': 3.1761332, 'vehiclesFlowWarpedOccupancyAuc': 0.78389996, 'vehiclesFlowWarpedOccupancyIou': 0.7423673}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.52781963, 'vehiclesObservedIou': 0.2923858, 'vehiclesOccludedAuc': 0.23129785, 'vehiclesOccludedIou': 0.051051266, 'vehiclesFlowEpe': 4.749858, 'vehiclesFlowWarpedOccupancyAuc': 0.61447006, 'vehiclesFlowWarpedOccupancyIou': 0.5056273}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6723543, 'vehiclesObservedIou': 0.38175398, 'vehiclesOccludedAuc': 0.006289526, 'vehiclesOccludedIou': 0.0025531142, 'vehiclesFlowEpe': 4.9095235, 'vehiclesFlowWarpedOccupancyAuc': 0.5733958, 'vehiclesFlowWarpedOccupancyIou': 0.42866552}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.582952, 'vehiclesObservedIou': 0.29541886, 'vehiclesOccludedAuc': 0.00053066015, 'vehiclesOccludedIou': 0.00054270896, 'vehiclesFlowEpe': 2.342416, 'vehiclesFlowWarpedOccupancyAuc': 0.71695316, 'vehiclesFlowWarpedOccupancyIou': 0.38082397}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.76209503, 'vehiclesObservedIou': 0.4668961, 'vehiclesOccludedAuc': 0.07735792, 'vehiclesOccludedIou': 0.020987343, 'vehiclesFlowEpe': 4.71843, 'vehiclesFlowWarpedOccupancyAuc': 0.6055362, 'vehiclesFlowWarpedOccupancyIou': 0.5348276}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.36966562, 'vehiclesObservedIou': 0.18952572, 'vehiclesOccludedAuc': 0.0040173084, 'vehiclesOccludedIou': 0.0022955723, 'vehiclesFlowEpe': 3.5654714, 'vehiclesFlowWarpedOccupancyAuc': 0.5396539, 'vehiclesFlowWarpedOccupancyIou': 0.22960235}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.9755253, 'vehiclesObservedIou': 0.75205714, 'vehiclesOccludedAuc': 0.08034172, 'vehiclesOccludedIou': 0.022519536, 'vehiclesFlowEpe': 1.7830541, 'vehiclesFlowWarpedOccupancyAuc': 0.87964463, 'vehiclesFlowWarpedOccupancyIou': 0.84281737}
2024-05-28 10:39:30.936700: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:39:30.992520: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:39:30.992806: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
Average Time: 0.0012 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6236670142105263, 'vehiclesObservedIou': 0.36472398436842096, 'vehiclesOccludedAuc': 0.056496924482894735, 'vehiclesOccludedIou': 0.013302226062105264, 'vehiclesFlowEpe': 5.021716765789474, 'vehiclesFlowWarpedOccupancyAuc': 0.567254419736842, 'vehiclesFlowWarpedOccupancyIou': 0.4195699521052632}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00149new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.40009373, 'vehiclesObservedIou': 0.16046475, 'vehiclesOccludedAuc': 0.054190114, 'vehiclesOccludedIou': 0.014793463, 'vehiclesFlowEpe': 3.7393332, 'vehiclesFlowWarpedOccupancyAuc': 0.56417936, 'vehiclesFlowWarpedOccupancyIou': 0.1651146}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.57749635, 'vehiclesObservedIou': 0.3192174, 'vehiclesOccludedAuc': 0.020713089, 'vehiclesOccludedIou': 0.007885006, 'vehiclesFlowEpe': 7.289386, 'vehiclesFlowWarpedOccupancyAuc': 0.4342275, 'vehiclesFlowWarpedOccupancyIou': 0.3881886}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7380434, 'vehiclesObservedIou': 0.44851688, 'vehiclesOccludedAuc': 0.022575375, 'vehiclesOccludedIou': 0.0076532555, 'vehiclesFlowEpe': 2.006023, 'vehiclesFlowWarpedOccupancyAuc': 0.7877742, 'vehiclesFlowWarpedOccupancyIou': 0.6086803}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8829803, 'vehiclesObservedIou': 0.49587786, 'vehiclesOccludedAuc': 0.061323058, 'vehiclesOccludedIou': 0.018091736, 'vehiclesFlowEpe': 3.1500473, 'vehiclesFlowWarpedOccupancyAuc': 0.709598, 'vehiclesFlowWarpedOccupancyIou': 0.6094147}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7225588, 'vehiclesObservedIou': 0.4245563, 'vehiclesOccludedAuc': 0.13690749, 'vehiclesOccludedIou': 0.035374627, 'vehiclesFlowEpe': 1.5360938, 'vehiclesFlowWarpedOccupancyAuc': 0.7425004, 'vehiclesFlowWarpedOccupancyIou': 0.55148774}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8821584, 'vehiclesObservedIou': 0.6580035, 'vehiclesOccludedAuc': 0.24779934, 'vehiclesOccludedIou': 0.055992264, 'vehiclesFlowEpe': 1.5848091, 'vehiclesFlowWarpedOccupancyAuc': 0.7615752, 'vehiclesFlowWarpedOccupancyIou': 0.65869564}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6553415, 'vehiclesObservedIou': 0.34759232, 'vehiclesOccludedAuc': 0.051983792, 'vehiclesOccludedIou': 0.009777811, 'vehiclesFlowEpe': 4.483729, 'vehiclesFlowWarpedOccupancyAuc': 0.5264925, 'vehiclesFlowWarpedOccupancyIou': 0.33354405}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.33116847, 'vehiclesObservedIou': 0.1596564, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 5.9021344, 'vehiclesFlowWarpedOccupancyAuc': 0.33962274, 'vehiclesFlowWarpedOccupancyIou': 0.21074991}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.71075845, 'vehiclesObservedIou': 0.3450755, 'vehiclesOccludedAuc': 0.004830459, 'vehiclesOccludedIou': 0.0003441452, 'vehiclesFlowEpe': 4.9403715, 'vehiclesFlowWarpedOccupancyAuc': 0.58368593, 'vehiclesFlowWarpedOccupancyIou': 0.40388733}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.29978448, 'vehiclesObservedIou': 0.12888128, 'vehiclesOccludedAuc': 0.12637123, 'vehiclesOccludedIou': 0.02899705, 'vehiclesFlowEpe': 5.7651114, 'vehiclesFlowWarpedOccupancyAuc': 0.3389555, 'vehiclesFlowWarpedOccupancyIou': 0.13163608}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.12761013, 'vehiclesObservedIou': 0.0623131, 'vehiclesOccludedAuc': 0.0064611547, 'vehiclesOccludedIou': 0.0019628215, 'vehiclesFlowEpe': 3.342315, 'vehiclesFlowWarpedOccupancyAuc': 0.46509174, 'vehiclesFlowWarpedOccupancyIou': 0.0855626}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.2833595, 'vehiclesObservedIou': 0.12099665, 'vehiclesOccludedAuc': 0.000814036, 'vehiclesOccludedIou': 0.0014923844, 'vehiclesFlowEpe': 5.9787745, 'vehiclesFlowWarpedOccupancyAuc': 0.21052128, 'vehiclesFlowWarpedOccupancyIou': 0.13500851}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.2054332, 'vehiclesObservedIou': 0.07364855, 'vehiclesOccludedAuc': 0.0036884875, 'vehiclesOccludedIou': 0.0015754899, 'vehiclesFlowEpe': 2.6249623, 'vehiclesFlowWarpedOccupancyAuc': 0.4468382, 'vehiclesFlowWarpedOccupancyIou': 0.1182534}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7563371, 'vehiclesObservedIou': 0.45429337, 'vehiclesOccludedAuc': 0.027121268, 'vehiclesOccludedIou': 0.008456852, 'vehiclesFlowEpe': 4.443428, 'vehiclesFlowWarpedOccupancyAuc': 0.6785251, 'vehiclesFlowWarpedOccupancyIou': 0.5586694}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.78096396, 'vehiclesObservedIou': 0.46740982, 'vehiclesOccludedAuc': 0.0037275045, 'vehiclesOccludedIou': 0.0013159594, 'vehiclesFlowEpe': 7.405614, 'vehiclesFlowWarpedOccupancyAuc': 0.598947, 'vehiclesFlowWarpedOccupancyIou': 0.5794156}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8675387, 'vehiclesObservedIou': 0.6762195, 'vehiclesOccludedAuc': 0.042389683, 'vehiclesOccludedIou': 0.004759303, 'vehiclesFlowEpe': 5.979727, 'vehiclesFlowWarpedOccupancyAuc': 0.5972512, 'vehiclesFlowWarpedOccupancyIou': 0.6416172}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.23408677, 'vehiclesObservedIou': 0.064470395, 'vehiclesOccludedAuc': 0.07039857, 'vehiclesOccludedIou': 0.014112601, 'vehiclesFlowEpe': 6.614692, 'vehiclesFlowWarpedOccupancyAuc': 0.18229069, 'vehiclesFlowWarpedOccupancyIou': 0.042465996}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.42195213, 'vehiclesObservedIou': 0.2639379, 'vehiclesOccludedAuc': 0.16597581, 'vehiclesOccludedIou': 0.021203768, 'vehiclesFlowEpe': 6.465452, 'vehiclesFlowWarpedOccupancyAuc': 0.49185154, 'vehiclesFlowWarpedOccupancyIou': 0.3467998}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.94380045, 'vehiclesObservedIou': 0.62889385, 'vehiclesOccludedAuc': 0.004283959, 'vehiclesOccludedIou': 0.0025221475, 'vehiclesFlowEpe': 2.7151558, 'vehiclesFlowWarpedOccupancyAuc': 0.80293, 'vehiclesFlowWarpedOccupancyIou': 0.729716}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7051826, 'vehiclesObservedIou': 0.39051348, 'vehiclesOccludedAuc': 0.0017302036, 'vehiclesOccludedIou': 0.0009004376, 'vehiclesFlowEpe': 10.757144, 'vehiclesFlowWarpedOccupancyAuc': 0.5435588, 'vehiclesFlowWarpedOccupancyIou': 0.41674703}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.2142385, 'vehiclesObservedIou': 0.075670525, 'vehiclesOccludedAuc': 0.013899399, 'vehiclesOccludedIou': 0.0028591072, 'vehiclesFlowEpe': 4.9943776, 'vehiclesFlowWarpedOccupancyAuc': 0.23157139, 'vehiclesFlowWarpedOccupancyIou': 0.089925624}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.61307144, 'vehiclesObservedIou': 0.34086815, 'vehiclesOccludedAuc': 0.003410448, 'vehiclesOccludedIou': 0.00088058435, 'vehiclesFlowEpe': 2.3632407, 'vehiclesFlowWarpedOccupancyAuc': 0.65160114, 'vehiclesFlowWarpedOccupancyIou': 0.406478}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.73028904, 'vehiclesObservedIou': 0.35430536, 'vehiclesOccludedAuc': 0.014530299, 'vehiclesOccludedIou': 0.004841837, 'vehiclesFlowEpe': 6.2488146, 'vehiclesFlowWarpedOccupancyAuc': 0.53360546, 'vehiclesFlowWarpedOccupancyIou': 0.43728825}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9237289, 'vehiclesObservedIou': 0.6893087, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.6418018, 'vehiclesFlowWarpedOccupancyAuc': 0.85943824, 'vehiclesFlowWarpedOccupancyIou': 0.7887574}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.91375905, 'vehiclesObservedIou': 0.61576337, 'vehiclesOccludedAuc': 0.010080315, 'vehiclesOccludedIou': 0.004412203, 'vehiclesFlowEpe': 2.7997453, 'vehiclesFlowWarpedOccupancyAuc': 0.7530366, 'vehiclesFlowWarpedOccupancyIou': 0.682007}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.6849628, 'vehiclesObservedIou': 0.3146348, 'vehiclesOccludedAuc': 0.018610844, 'vehiclesOccludedIou': 0.0056486144, 'vehiclesFlowEpe': 6.149315, 'vehiclesFlowWarpedOccupancyAuc': 0.55952775, 'vehiclesFlowWarpedOccupancyIou': 0.35146913}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6932208, 'vehiclesObservedIou': 0.34786946, 'vehiclesOccludedAuc': 0.2351953, 'vehiclesOccludedIou': 0.046718433, 'vehiclesFlowEpe': 5.313588, 'vehiclesFlowWarpedOccupancyAuc': 0.5651156, 'vehiclesFlowWarpedOccupancyIou': 0.4263447}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.40277746, 'vehiclesObservedIou': 0.16984574, 'vehiclesOccludedAuc': 0.16182409, 'vehiclesOccludedIou': 0.023711009, 'vehiclesFlowEpe': 5.4887586, 'vehiclesFlowWarpedOccupancyAuc': 0.34018806, 'vehiclesFlowWarpedOccupancyIou': 0.22227384}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7244676, 'vehiclesObservedIou': 0.38743967, 'vehiclesOccludedAuc': 0.032782726, 'vehiclesOccludedIou': 0.005599062, 'vehiclesFlowEpe': 3.670134, 'vehiclesFlowWarpedOccupancyAuc': 0.6304739, 'vehiclesFlowWarpedOccupancyIou': 0.4145394}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.21210976, 'vehiclesObservedIou': 0.12213758, 'vehiclesOccludedAuc': 0.001671763, 'vehiclesOccludedIou': 0.00037473024, 'vehiclesFlowEpe': 7.04738, 'vehiclesFlowWarpedOccupancyAuc': 0.28151488, 'vehiclesFlowWarpedOccupancyIou': 0.120075524}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8196362, 'vehiclesObservedIou': 0.4647141, 'vehiclesOccludedAuc': 0.029780239, 'vehiclesOccludedIou': 0.005633757, 'vehiclesFlowEpe': 2.7749157, 'vehiclesFlowWarpedOccupancyAuc': 0.7234113, 'vehiclesFlowWarpedOccupancyIou': 0.5446533}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.617458, 'vehiclesObservedIou': 0.25233868, 'vehiclesOccludedAuc': 0.17929164, 'vehiclesOccludedIou': 0.035656616, 'vehiclesFlowEpe': 4.5562444, 'vehiclesFlowWarpedOccupancyAuc': 0.53030443, 'vehiclesFlowWarpedOccupancyIou': 0.364979}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9248848, 'vehiclesObservedIou': 0.654228, 'vehiclesOccludedAuc': 0.09783445, 'vehiclesOccludedIou': 0.018576736, 'vehiclesFlowEpe': 1.963217, 'vehiclesFlowWarpedOccupancyAuc': 0.8099916, 'vehiclesFlowWarpedOccupancyIou': 0.7386575}
2024-05-28 10:39:53.283928: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:39:53.336928: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:39:53.337244: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.80896705, 'vehiclesObservedIou': 0.45194995, 'vehiclesOccludedAuc': 0.015145224, 'vehiclesOccludedIou': 0.0057453476, 'vehiclesFlowEpe': 3.010106, 'vehiclesFlowWarpedOccupancyAuc': 0.6825509, 'vehiclesFlowWarpedOccupancyIou': 0.48349437}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.94380045, 'vehiclesObservedIou': 0.62889385, 'vehiclesOccludedAuc': 0.004283959, 'vehiclesOccludedIou': 0.0025221475, 'vehiclesFlowEpe': 2.7151558, 'vehiclesFlowWarpedOccupancyAuc': 0.80293, 'vehiclesFlowWarpedOccupancyIou': 0.729716}
Average Time: 0.0012 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6120652888235294, 'vehiclesObservedIou': 0.3509297908823529, 'vehiclesOccludedAuc': 0.05492180471470588, 'vehiclesOccludedIou': 0.011702034082058823, 'vehiclesFlowEpe': 4.580763, 'vehiclesFlowWarpedOccupancyAuc': 0.557610239117647, 'vehiclesFlowWarpedOccupancyIou': 0.40548816247058833}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00010new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.74979126, 'vehiclesObservedIou': 0.4138845, 'vehiclesOccludedAuc': 0.011682681, 'vehiclesOccludedIou': 0.005325351, 'vehiclesFlowEpe': 12.562391, 'vehiclesFlowWarpedOccupancyAuc': 0.36323318, 'vehiclesFlowWarpedOccupancyIou': 0.43366346}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.6434611, 'vehiclesObservedIou': 0.3810744, 'vehiclesOccludedAuc': 0.21222326, 'vehiclesOccludedIou': 0.04746447, 'vehiclesFlowEpe': 6.5700417, 'vehiclesFlowWarpedOccupancyAuc': 0.5109476, 'vehiclesFlowWarpedOccupancyIou': 0.4303121}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.42070156, 'vehiclesObservedIou': 0.19096352, 'vehiclesOccludedAuc': 0.1962558, 'vehiclesOccludedIou': 0.042408016, 'vehiclesFlowEpe': 3.0467377, 'vehiclesFlowWarpedOccupancyAuc': 0.5778679, 'vehiclesFlowWarpedOccupancyIou': 0.21733952}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.974521, 'vehiclesObservedIou': 0.7368465, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.779855, 'vehiclesFlowWarpedOccupancyAuc': 0.85693026, 'vehiclesFlowWarpedOccupancyIou': 0.80700016}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8669531, 'vehiclesObservedIou': 0.65286356, 'vehiclesOccludedAuc': 0.0036316416, 'vehiclesOccludedIou': 0.0024256762, 'vehiclesFlowEpe': 2.1521072, 'vehiclesFlowWarpedOccupancyAuc': 0.8247104, 'vehiclesFlowWarpedOccupancyIou': 0.75702286}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9927769, 'vehiclesObservedIou': 0.8676727, 'vehiclesOccludedAuc': 0.008305839, 'vehiclesOccludedIou': 0.0013413426, 'vehiclesFlowEpe': 2.2903936, 'vehiclesFlowWarpedOccupancyAuc': 0.8539836, 'vehiclesFlowWarpedOccupancyIou': 0.7146977}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.98924696, 'vehiclesObservedIou': 0.87535655, 'vehiclesOccludedAuc': 0.0007830563, 'vehiclesOccludedIou': 0.00027803663, 'vehiclesFlowEpe': 5.393438, 'vehiclesFlowWarpedOccupancyAuc': 0.8840261, 'vehiclesFlowWarpedOccupancyIou': 0.90521175}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.82622683, 'vehiclesObservedIou': 0.41680184, 'vehiclesOccludedAuc': 0.02365644, 'vehiclesOccludedIou': 0.009947138, 'vehiclesFlowEpe': 3.570023, 'vehiclesFlowWarpedOccupancyAuc': 0.71563375, 'vehiclesFlowWarpedOccupancyIou': 0.5044015}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9697098, 'vehiclesObservedIou': 0.6995449, 'vehiclesOccludedAuc': 0.3289153, 'vehiclesOccludedIou': 0.0381622, 'vehiclesFlowEpe': 1.4759881, 'vehiclesFlowWarpedOccupancyAuc': 0.8866202, 'vehiclesFlowWarpedOccupancyIou': 0.77266335}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7733046, 'vehiclesObservedIou': 0.53217024, 'vehiclesOccludedAuc': 0.057957914, 'vehiclesOccludedIou': 0.024614545, 'vehiclesFlowEpe': 2.4343967, 'vehiclesFlowWarpedOccupancyAuc': 0.76463217, 'vehiclesFlowWarpedOccupancyIou': 0.6267593}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.96983904, 'vehiclesObservedIou': 0.6793957, 'vehiclesOccludedAuc': 0.02359027, 'vehiclesOccludedIou': 0.0051068263, 'vehiclesFlowEpe': 7.9518013, 'vehiclesFlowWarpedOccupancyAuc': 0.8143144, 'vehiclesFlowWarpedOccupancyIou': 0.77809966}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.95221746, 'vehiclesObservedIou': 0.70628697, 'vehiclesOccludedAuc': 0.007996171, 'vehiclesOccludedIou': 0.004456512, 'vehiclesFlowEpe': 6.43543, 'vehiclesFlowWarpedOccupancyAuc': 0.8024589, 'vehiclesFlowWarpedOccupancyIou': 0.76135784}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.69298595, 'vehiclesObservedIou': 0.34926802, 'vehiclesOccludedAuc': 0.12975612, 'vehiclesOccludedIou': 0.03589741, 'vehiclesFlowEpe': 3.2624505, 'vehiclesFlowWarpedOccupancyAuc': 0.6129652, 'vehiclesFlowWarpedOccupancyIou': 0.37097996}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.78873897, 'vehiclesObservedIou': 0.4680114, 'vehiclesOccludedAuc': 0.04464324, 'vehiclesOccludedIou': 0.012278995, 'vehiclesFlowEpe': 5.360008, 'vehiclesFlowWarpedOccupancyAuc': 0.6446113, 'vehiclesFlowWarpedOccupancyIou': 0.5886593}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.85665643, 'vehiclesObservedIou': 0.5414263, 'vehiclesOccludedAuc': 0.046950296, 'vehiclesOccludedIou': 0.0144996755, 'vehiclesFlowEpe': 3.7050931, 'vehiclesFlowWarpedOccupancyAuc': 0.7398204, 'vehiclesFlowWarpedOccupancyIou': 0.54388386}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.91661876, 'vehiclesObservedIou': 0.6486408, 'vehiclesOccludedAuc': 0.104285926, 'vehiclesOccludedIou': 0.024182718, 'vehiclesFlowEpe': 4.606427, 'vehiclesFlowWarpedOccupancyAuc': 0.8129968, 'vehiclesFlowWarpedOccupancyIou': 0.73316664}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5409886, 'vehiclesObservedIou': 0.30898753, 'vehiclesOccludedAuc': 0.0006033267, 'vehiclesOccludedIou': 0.00062268734, 'vehiclesFlowEpe': 4.1394167, 'vehiclesFlowWarpedOccupancyAuc': 0.39537105, 'vehiclesFlowWarpedOccupancyIou': 0.35409626}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.836629, 'vehiclesObservedIou': 0.40494448, 'vehiclesOccludedAuc': 0.01592799, 'vehiclesOccludedIou': 0.008289465, 'vehiclesFlowEpe': 6.563312, 'vehiclesFlowWarpedOccupancyAuc': 0.62053615, 'vehiclesFlowWarpedOccupancyIou': 0.52810276}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8935782, 'vehiclesObservedIou': 0.6294165, 'vehiclesOccludedAuc': 0.10753702, 'vehiclesOccludedIou': 0.036508784, 'vehiclesFlowEpe': 3.056231, 'vehiclesFlowWarpedOccupancyAuc': 0.81334776, 'vehiclesFlowWarpedOccupancyIou': 0.70664775}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.64799947, 'vehiclesObservedIou': 0.3384154, 'vehiclesOccludedAuc': 0.07640175, 'vehiclesOccludedIou': 0.024881214, 'vehiclesFlowEpe': 3.2117476, 'vehiclesFlowWarpedOccupancyAuc': 0.6473837, 'vehiclesFlowWarpedOccupancyIou': 0.38711983}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9140986, 'vehiclesObservedIou': 0.61992526, 'vehiclesOccludedAuc': 0.020858083, 'vehiclesOccludedIou': 0.00810106, 'vehiclesFlowEpe': 3.1469097, 'vehiclesFlowWarpedOccupancyAuc': 0.78327346, 'vehiclesFlowWarpedOccupancyIou': 0.68120015}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.80071115, 'vehiclesObservedIou': 0.48075664, 'vehiclesOccludedAuc': 0.0028773472, 'vehiclesOccludedIou': 0.0022982727, 'vehiclesFlowEpe': 2.7165928, 'vehiclesFlowWarpedOccupancyAuc': 0.73216814, 'vehiclesFlowWarpedOccupancyIou': 0.5467574}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.88458085, 'vehiclesObservedIou': 0.604215, 'vehiclesOccludedAuc': 0.037850622, 'vehiclesOccludedIou': 0.0119388085, 'vehiclesFlowEpe': 4.506148, 'vehiclesFlowWarpedOccupancyAuc': 0.7543992, 'vehiclesFlowWarpedOccupancyIou': 0.7062039}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.77696943, 'vehiclesObservedIou': 0.48237538, 'vehiclesOccludedAuc': 0.24258643, 'vehiclesOccludedIou': 0.04888772, 'vehiclesFlowEpe': 5.522628, 'vehiclesFlowWarpedOccupancyAuc': 0.6832074, 'vehiclesFlowWarpedOccupancyIou': 0.60532683}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.39929643, 'vehiclesObservedIou': 0.1682388, 'vehiclesOccludedAuc': 0.00080390787, 'vehiclesOccludedIou': 0.0015646564, 'vehiclesFlowEpe': 4.35894, 'vehiclesFlowWarpedOccupancyAuc': 0.40579724, 'vehiclesFlowWarpedOccupancyIou': 0.19999152}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9677974, 'vehiclesObservedIou': 0.72441596, 'vehiclesOccludedAuc': 0.0076390393, 'vehiclesOccludedIou': 0.0041541904, 'vehiclesFlowEpe': 3.995061, 'vehiclesFlowWarpedOccupancyAuc': 0.8581921, 'vehiclesFlowWarpedOccupancyIou': 0.81430906}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8835833, 'vehiclesObservedIou': 0.5862962, 'vehiclesOccludedAuc': 0.2689929, 'vehiclesOccludedIou': 0.03710486, 'vehiclesFlowEpe': 2.8618689, 'vehiclesFlowWarpedOccupancyAuc': 0.78996754, 'vehiclesFlowWarpedOccupancyIou': 0.7011009}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6112, 'vehiclesObservedIou': 0.30631158, 'vehiclesOccludedAuc': 0.24208666, 'vehiclesOccludedIou': 0.039307542, 'vehiclesFlowEpe': 7.120914, 'vehiclesFlowWarpedOccupancyAuc': 0.4413425, 'vehiclesFlowWarpedOccupancyIou': 0.3148188}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8233946, 'vehiclesObservedIou': 0.5219307, 'vehiclesOccludedAuc': 9.254861e-05, 'vehiclesOccludedIou': 5.767017e-05, 'vehiclesFlowEpe': 3.8447714, 'vehiclesFlowWarpedOccupancyAuc': 0.72624075, 'vehiclesFlowWarpedOccupancyIou': 0.67445284}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.9927769, 'vehiclesObservedIou': 0.8676727, 'vehiclesOccludedAuc': 0.008305839, 'vehiclesOccludedIou': 0.0013413426, 'vehiclesFlowEpe': 2.2903936, 'vehiclesFlowWarpedOccupancyAuc': 0.8539836, 'vehiclesFlowWarpedOccupancyIou': 0.7146977}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.8056750603448275, 'vehiclesObservedIou': 0.5288426665517241, 'vehiclesOccludedAuc': 0.07672039929586207, 'vehiclesOccludedIou': 0.016969166991034484, 'vehiclesFlowEpe': 4.435900793103449, 'vehiclesFlowWarpedOccupancyAuc': 0.7005854879310344, 'vehiclesFlowWarpedOccupancyIou': 0.5919085158620689}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00121new.tfrecords...
2024-05-28 10:40:11.989037: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:40:12.047111: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:40:12.047401: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9702243, 'vehiclesObservedIou': 0.8225118, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.9830706, 'vehiclesFlowWarpedOccupancyAuc': 0.85478663, 'vehiclesFlowWarpedOccupancyIou': 0.8872381}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.70106894, 'vehiclesObservedIou': 0.41247195, 'vehiclesOccludedAuc': 0.005585205, 'vehiclesOccludedIou': 0.0023472677, 'vehiclesFlowEpe': 7.247745, 'vehiclesFlowWarpedOccupancyAuc': 0.52783513, 'vehiclesFlowWarpedOccupancyIou': 0.5560709}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.11090967, 'vehiclesObservedIou': 0.050721277, 'vehiclesOccludedAuc': 0.0005637183, 'vehiclesOccludedIou': 0.0007610265, 'vehiclesFlowEpe': 7.6531024, 'vehiclesFlowWarpedOccupancyAuc': 0.10463337, 'vehiclesFlowWarpedOccupancyIou': 0.037701227}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5767149, 'vehiclesObservedIou': 0.23161174, 'vehiclesOccludedAuc': 0.010956103, 'vehiclesOccludedIou': 0.0052031833, 'vehiclesFlowEpe': 3.033987, 'vehiclesFlowWarpedOccupancyAuc': 0.57313097, 'vehiclesFlowWarpedOccupancyIou': 0.3410174}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.3432454, 'vehiclesObservedIou': 0.2295699, 'vehiclesOccludedAuc': 0.0010667488, 'vehiclesOccludedIou': 0.00033195122, 'vehiclesFlowEpe': 4.2954226, 'vehiclesFlowWarpedOccupancyAuc': 0.41931596, 'vehiclesFlowWarpedOccupancyIou': 0.25822714}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.81211585, 'vehiclesObservedIou': 0.52635086, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 5.975116, 'vehiclesFlowWarpedOccupancyAuc': 0.63604313, 'vehiclesFlowWarpedOccupancyIou': 0.6258648}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8904753, 'vehiclesObservedIou': 0.6025255, 'vehiclesOccludedAuc': 0.043135133, 'vehiclesOccludedIou': 0.013060475, 'vehiclesFlowEpe': 4.23795, 'vehiclesFlowWarpedOccupancyAuc': 0.6601633, 'vehiclesFlowWarpedOccupancyIou': 0.52452666}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9230481, 'vehiclesObservedIou': 0.7201918, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.6524818, 'vehiclesFlowWarpedOccupancyAuc': 0.861258, 'vehiclesFlowWarpedOccupancyIou': 0.8348983}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9683056, 'vehiclesObservedIou': 0.84841734, 'vehiclesOccludedAuc': 0.0027857055, 'vehiclesOccludedIou': 0.0016760994, 'vehiclesFlowEpe': 10.000853, 'vehiclesFlowWarpedOccupancyAuc': 0.8677336, 'vehiclesFlowWarpedOccupancyIou': 0.89891446}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.72236234, 'vehiclesObservedIou': 0.36681545, 'vehiclesOccludedAuc': 0.15012509, 'vehiclesOccludedIou': 0.044183888, 'vehiclesFlowEpe': 4.3598185, 'vehiclesFlowWarpedOccupancyAuc': 0.59324956, 'vehiclesFlowWarpedOccupancyIou': 0.47991082}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.80300176, 'vehiclesObservedIou': 0.6049917, 'vehiclesOccludedAuc': 0.17672561, 'vehiclesOccludedIou': 0.034787573, 'vehiclesFlowEpe': 5.0292325, 'vehiclesFlowWarpedOccupancyAuc': 0.74766016, 'vehiclesFlowWarpedOccupancyIou': 0.62895274}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8762192, 'vehiclesObservedIou': 0.5032994, 'vehiclesOccludedAuc': 0.010415297, 'vehiclesOccludedIou': 0.0032370407, 'vehiclesFlowEpe': 5.0338693, 'vehiclesFlowWarpedOccupancyAuc': 0.59658885, 'vehiclesFlowWarpedOccupancyIou': 0.46951598}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.81928027, 'vehiclesObservedIou': 0.5001363, 'vehiclesOccludedAuc': 0.12983769, 'vehiclesOccludedIou': 0.034228254, 'vehiclesFlowEpe': 3.387712, 'vehiclesFlowWarpedOccupancyAuc': 0.7401746, 'vehiclesFlowWarpedOccupancyIou': 0.5936222}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8782496, 'vehiclesObservedIou': 0.5330342, 'vehiclesOccludedAuc': 0.37223774, 'vehiclesOccludedIou': 0.07469528, 'vehiclesFlowEpe': 5.583704, 'vehiclesFlowWarpedOccupancyAuc': 0.79147077, 'vehiclesFlowWarpedOccupancyIou': 0.6071717}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7654779, 'vehiclesObservedIou': 0.46459484, 'vehiclesOccludedAuc': 0.0338434, 'vehiclesOccludedIou': 0.011505591, 'vehiclesFlowEpe': 5.0801888, 'vehiclesFlowWarpedOccupancyAuc': 0.6641774, 'vehiclesFlowWarpedOccupancyIou': 0.51729065}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.98487616, 'vehiclesObservedIou': 0.82896656, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.9070964, 'vehiclesFlowWarpedOccupancyAuc': 0.88383174, 'vehiclesFlowWarpedOccupancyIou': 0.8890728}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.68981135, 'vehiclesObservedIou': 0.36951888, 'vehiclesOccludedAuc': 0.05922385, 'vehiclesOccludedIou': 0.021139635, 'vehiclesFlowEpe': 4.2875986, 'vehiclesFlowWarpedOccupancyAuc': 0.55304015, 'vehiclesFlowWarpedOccupancyIou': 0.43743435}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.90176165, 'vehiclesObservedIou': 0.5185149, 'vehiclesOccludedAuc': 0.012619609, 'vehiclesOccludedIou': 0.0050206445, 'vehiclesFlowEpe': 2.3535066, 'vehiclesFlowWarpedOccupancyAuc': 0.7411409, 'vehiclesFlowWarpedOccupancyIou': 0.58861846}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.46172053, 'vehiclesObservedIou': 0.19590905, 'vehiclesOccludedAuc': 0.056575127, 'vehiclesOccludedIou': 0.017912216, 'vehiclesFlowEpe': 8.050237, 'vehiclesFlowWarpedOccupancyAuc': 0.28383374, 'vehiclesFlowWarpedOccupancyIou': 0.18327573}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.18921712, 'vehiclesObservedIou': 0.079477295, 'vehiclesOccludedAuc': 0.009622398, 'vehiclesOccludedIou': 0.0031436975, 'vehiclesFlowEpe': 8.050668, 'vehiclesFlowWarpedOccupancyAuc': 0.19196251, 'vehiclesFlowWarpedOccupancyIou': 0.08329703}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9319255, 'vehiclesObservedIou': 0.6615242, 'vehiclesOccludedAuc': 0.01576377, 'vehiclesOccludedIou': 0.003957586, 'vehiclesFlowEpe': 3.9215274, 'vehiclesFlowWarpedOccupancyAuc': 0.76833546, 'vehiclesFlowWarpedOccupancyIou': 0.7154666}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.35554388, 'vehiclesObservedIou': 0.1291321, 'vehiclesOccludedAuc': 0.021994159, 'vehiclesOccludedIou': 0.0065174988, 'vehiclesFlowEpe': 5.045012, 'vehiclesFlowWarpedOccupancyAuc': 0.31555519, 'vehiclesFlowWarpedOccupancyIou': 0.16534644}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.6288773, 'vehiclesObservedIou': 0.3232684, 'vehiclesOccludedAuc': 0.12182784, 'vehiclesOccludedIou': 0.008186228, 'vehiclesFlowEpe': 4.921976, 'vehiclesFlowWarpedOccupancyAuc': 0.56371725, 'vehiclesFlowWarpedOccupancyIou': 0.39205062}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7477001, 'vehiclesObservedIou': 0.44718555, 'vehiclesOccludedAuc': 0.015266534, 'vehiclesOccludedIou': 0.0042294636, 'vehiclesFlowEpe': 3.2308128, 'vehiclesFlowWarpedOccupancyAuc': 0.64275366, 'vehiclesFlowWarpedOccupancyIou': 0.49549282}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9325764, 'vehiclesObservedIou': 0.7833908, 'vehiclesOccludedAuc': 0.022084277, 'vehiclesOccludedIou': 0.0074835913, 'vehiclesFlowEpe': 3.6030622, 'vehiclesFlowWarpedOccupancyAuc': 0.87095344, 'vehiclesFlowWarpedOccupancyIou': 0.8581581}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.779689, 'vehiclesObservedIou': 0.47741038, 'vehiclesOccludedAuc': 0.08091918, 'vehiclesOccludedIou': 0.021346401, 'vehiclesFlowEpe': 4.9417076, 'vehiclesFlowWarpedOccupancyAuc': 0.6482419, 'vehiclesFlowWarpedOccupancyIou': 0.5390492}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8657305, 'vehiclesObservedIou': 0.57808733, 'vehiclesOccludedAuc': 0.022129763, 'vehiclesOccludedIou': 0.009022875, 'vehiclesFlowEpe': 5.4966226, 'vehiclesFlowWarpedOccupancyAuc': 0.67240494, 'vehiclesFlowWarpedOccupancyIou': 0.66465324}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.38797382, 'vehiclesObservedIou': 0.18418744, 'vehiclesOccludedAuc': 0.02242877, 'vehiclesOccludedIou': 0.008011176, 'vehiclesFlowEpe': 7.6548667, 'vehiclesFlowWarpedOccupancyAuc': 0.29998446, 'vehiclesFlowWarpedOccupancyIou': 0.22946058}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.98487616, 'vehiclesObservedIou': 0.82896656, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.9070964, 'vehiclesFlowWarpedOccupancyAuc': 0.88383174, 'vehiclesFlowWarpedOccupancyIou': 0.8890728}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.71493223, 'vehiclesObservedIou': 0.4640648907857143, 'vehiclesOccludedAuc': 0.04991902562857143, 'vehiclesOccludedIou': 0.01221388009, 'vehiclesFlowEpe': 5.036390978571428, 'vehiclesFlowWarpedOccupancyAuc': 0.6097848846428571, 'vehiclesFlowWarpedOccupancyIou': 0.5179392516785714}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00143new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 10:40:29.793301: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:40:29.845588: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:40:29.845875: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7926363, 'vehiclesObservedIou': 0.44701138, 'vehiclesOccludedAuc': 0.090188906, 'vehiclesOccludedIou': 0.021746665, 'vehiclesFlowEpe': 2.6282225, 'vehiclesFlowWarpedOccupancyAuc': 0.71619725, 'vehiclesFlowWarpedOccupancyIou': 0.5309853}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.90374184, 'vehiclesObservedIou': 0.6339308, 'vehiclesOccludedAuc': 0.008587136, 'vehiclesOccludedIou': 0.005132823, 'vehiclesFlowEpe': 3.0039957, 'vehiclesFlowWarpedOccupancyAuc': 0.76942647, 'vehiclesFlowWarpedOccupancyIou': 0.6980236}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.90002245, 'vehiclesObservedIou': 0.5351288, 'vehiclesOccludedAuc': 0.0068744877, 'vehiclesOccludedIou': 0.0033419677, 'vehiclesFlowEpe': 3.5076773, 'vehiclesFlowWarpedOccupancyAuc': 0.7975417, 'vehiclesFlowWarpedOccupancyIou': 0.67777187}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9360585, 'vehiclesObservedIou': 0.6693755, 'vehiclesOccludedAuc': 0.18199442, 'vehiclesOccludedIou': 0.059944283, 'vehiclesFlowEpe': 3.0022216, 'vehiclesFlowWarpedOccupancyAuc': 0.7939708, 'vehiclesFlowWarpedOccupancyIou': 0.6346906}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.39474642, 'vehiclesObservedIou': 0.17660332, 'vehiclesOccludedAuc': 0.034925796, 'vehiclesOccludedIou': 0.0072391815, 'vehiclesFlowEpe': 3.7005892, 'vehiclesFlowWarpedOccupancyAuc': 0.47192752, 'vehiclesFlowWarpedOccupancyIou': 0.22245109}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.48433754, 'vehiclesObservedIou': 0.28090775, 'vehiclesOccludedAuc': 0.11806396, 'vehiclesOccludedIou': 0.032401368, 'vehiclesFlowEpe': 3.406465, 'vehiclesFlowWarpedOccupancyAuc': 0.5843997, 'vehiclesFlowWarpedOccupancyIou': 0.29745397}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.6889102, 'vehiclesObservedIou': 0.37601763, 'vehiclesOccludedAuc': 0.0588999, 'vehiclesOccludedIou': 0.0109170005, 'vehiclesFlowEpe': 3.0060885, 'vehiclesFlowWarpedOccupancyAuc': 0.6781663, 'vehiclesFlowWarpedOccupancyIou': 0.4572118}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.5655151, 'vehiclesObservedIou': 0.2536117, 'vehiclesOccludedAuc': 0.004369518, 'vehiclesOccludedIou': 0.0019047568, 'vehiclesFlowEpe': 3.2710521, 'vehiclesFlowWarpedOccupancyAuc': 0.48747167, 'vehiclesFlowWarpedOccupancyIou': 0.35006952}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.60025465, 'vehiclesObservedIou': 0.26400864, 'vehiclesOccludedAuc': 0.046229742, 'vehiclesOccludedIou': 0.023087984, 'vehiclesFlowEpe': 4.8067756, 'vehiclesFlowWarpedOccupancyAuc': 0.52777404, 'vehiclesFlowWarpedOccupancyIou': 0.3154369}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.5446904, 'vehiclesObservedIou': 0.21591222, 'vehiclesOccludedAuc': 0.018966278, 'vehiclesOccludedIou': 0.008443551, 'vehiclesFlowEpe': 6.0482473, 'vehiclesFlowWarpedOccupancyAuc': 0.45690793, 'vehiclesFlowWarpedOccupancyIou': 0.26060113}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8702086, 'vehiclesObservedIou': 0.5698184, 'vehiclesOccludedAuc': 0.23377474, 'vehiclesOccludedIou': 0.052133176, 'vehiclesFlowEpe': 3.15093, 'vehiclesFlowWarpedOccupancyAuc': 0.7882255, 'vehiclesFlowWarpedOccupancyIou': 0.56387174}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.830462, 'vehiclesObservedIou': 0.37513024, 'vehiclesOccludedAuc': 0.0035649077, 'vehiclesOccludedIou': 0.00077163684, 'vehiclesFlowEpe': 4.6732635, 'vehiclesFlowWarpedOccupancyAuc': 0.5305689, 'vehiclesFlowWarpedOccupancyIou': 0.30232698}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9312342, 'vehiclesObservedIou': 0.6996956, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 1.9084651, 'vehiclesFlowWarpedOccupancyAuc': 0.83831733, 'vehiclesFlowWarpedOccupancyIou': 0.7891045}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8324283, 'vehiclesObservedIou': 0.57551825, 'vehiclesOccludedAuc': 0.13240303, 'vehiclesOccludedIou': 0.03758643, 'vehiclesFlowEpe': 4.258456, 'vehiclesFlowWarpedOccupancyAuc': 0.7318018, 'vehiclesFlowWarpedOccupancyIou': 0.5725539}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8013402, 'vehiclesObservedIou': 0.568067, 'vehiclesOccludedAuc': 0.00261503, 'vehiclesOccludedIou': 0.0011569542, 'vehiclesFlowEpe': 2.2566934, 'vehiclesFlowWarpedOccupancyAuc': 0.7386093, 'vehiclesFlowWarpedOccupancyIou': 0.611096}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.920202, 'vehiclesObservedIou': 0.6689252, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 1.9481655, 'vehiclesFlowWarpedOccupancyAuc': 0.82099384, 'vehiclesFlowWarpedOccupancyIou': 0.81395805}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.4945802, 'vehiclesObservedIou': 0.25562665, 'vehiclesOccludedAuc': 0.5688756, 'vehiclesOccludedIou': 0.03920318, 'vehiclesFlowEpe': 5.840725, 'vehiclesFlowWarpedOccupancyAuc': 0.52763784, 'vehiclesFlowWarpedOccupancyIou': 0.4183276}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9339559, 'vehiclesObservedIou': 0.66099685, 'vehiclesOccludedAuc': 0.041661642, 'vehiclesOccludedIou': 0.00937272, 'vehiclesFlowEpe': 2.962402, 'vehiclesFlowWarpedOccupancyAuc': 0.78288424, 'vehiclesFlowWarpedOccupancyIou': 0.6909702}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8528534, 'vehiclesObservedIou': 0.5164428, 'vehiclesOccludedAuc': 0.09803062, 'vehiclesOccludedIou': 0.015755953, 'vehiclesFlowEpe': 4.4734488, 'vehiclesFlowWarpedOccupancyAuc': 0.6786182, 'vehiclesFlowWarpedOccupancyIou': 0.54469085}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.13740933, 'vehiclesObservedIou': 0.04814933, 'vehiclesOccludedAuc': 0.013574477, 'vehiclesOccludedIou': 0.003569982, 'vehiclesFlowEpe': 6.125492, 'vehiclesFlowWarpedOccupancyAuc': 0.35544842, 'vehiclesFlowWarpedOccupancyIou': 0.0480763}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.70807105, 'vehiclesObservedIou': 0.31444776, 'vehiclesOccludedAuc': 0.0696014, 'vehiclesOccludedIou': 0.011753166, 'vehiclesFlowEpe': 4.9286227, 'vehiclesFlowWarpedOccupancyAuc': 0.4451286, 'vehiclesFlowWarpedOccupancyIou': 0.33650264}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7993257, 'vehiclesObservedIou': 0.3594737, 'vehiclesOccludedAuc': 0.0012908014, 'vehiclesOccludedIou': 0.001247037, 'vehiclesFlowEpe': 5.93943, 'vehiclesFlowWarpedOccupancyAuc': 0.5267085, 'vehiclesFlowWarpedOccupancyIou': 0.40309012}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.4058056, 'vehiclesObservedIou': 0.26801112, 'vehiclesOccludedAuc': 0.022418557, 'vehiclesOccludedIou': 0.0069828117, 'vehiclesFlowEpe': 12.232915, 'vehiclesFlowWarpedOccupancyAuc': 0.3717243, 'vehiclesFlowWarpedOccupancyIou': 0.3330161}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7772144, 'vehiclesObservedIou': 0.4610327, 'vehiclesOccludedAuc': 0.1343277, 'vehiclesOccludedIou': 0.037347402, 'vehiclesFlowEpe': 3.5357502, 'vehiclesFlowWarpedOccupancyAuc': 0.6912128, 'vehiclesFlowWarpedOccupancyIou': 0.52620023}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.935613, 'vehiclesObservedIou': 0.6424324, 'vehiclesOccludedAuc': 0.59258646, 'vehiclesOccludedIou': 0.1064277, 'vehiclesFlowEpe': 4.048621, 'vehiclesFlowWarpedOccupancyAuc': 0.7988448, 'vehiclesFlowWarpedOccupancyIou': 0.74147224}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.4685173, 'vehiclesObservedIou': 0.24256617, 'vehiclesOccludedAuc': 0.090644956, 'vehiclesOccludedIou': 0.024490485, 'vehiclesFlowEpe': 2.972176, 'vehiclesFlowWarpedOccupancyAuc': 0.5510639, 'vehiclesFlowWarpedOccupancyIou': 0.24261571}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.76623863, 'vehiclesObservedIou': 0.33507597, 'vehiclesOccludedAuc': 0.03915529, 'vehiclesOccludedIou': 0.006510917, 'vehiclesFlowEpe': 6.1708975, 'vehiclesFlowWarpedOccupancyAuc': 0.4961586, 'vehiclesFlowWarpedOccupancyIou': 0.37577942}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.9360585, 'vehiclesObservedIou': 0.6693755, 'vehiclesOccludedAuc': 0.18199442, 'vehiclesOccludedIou': 0.059944283, 'vehiclesFlowEpe': 3.0022216, 'vehiclesFlowWarpedOccupancyAuc': 0.7939708, 'vehiclesFlowWarpedOccupancyIou': 0.6346906}
Average Time: 0.0012 seconds, Average Metrics: {'vehiclesObservedAuc': 0.7139397485185185, 'vehiclesObservedIou': 0.4227376992592593, 'vehiclesOccludedAuc': 0.09680093906666666, 'vehiclesOccludedIou': 0.019572930786666665, 'vehiclesFlowEpe': 4.215103277777778, 'vehiclesFlowWarpedOccupancyAuc': 0.6280640833333334, 'vehiclesFlowWarpedOccupancyIou': 0.4725314207407408}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00093new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 10:40:47.113524: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:40:47.165478: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:40:47.165766: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.90342027, 'vehiclesObservedIou': 0.6934689, 'vehiclesOccludedAuc': 0.16804884, 'vehiclesOccludedIou': 0.040874988, 'vehiclesFlowEpe': 4.2840033, 'vehiclesFlowWarpedOccupancyAuc': 0.80028147, 'vehiclesFlowWarpedOccupancyIou': 0.7285726}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.91186213, 'vehiclesObservedIou': 0.5694805, 'vehiclesOccludedAuc': 0.020171186, 'vehiclesOccludedIou': 0.011265819, 'vehiclesFlowEpe': 6.5337543, 'vehiclesFlowWarpedOccupancyAuc': 0.78667724, 'vehiclesFlowWarpedOccupancyIou': 0.72087157}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7013405, 'vehiclesObservedIou': 0.4014148, 'vehiclesOccludedAuc': 0.030935016, 'vehiclesOccludedIou': 0.012168265, 'vehiclesFlowEpe': 3.5878274, 'vehiclesFlowWarpedOccupancyAuc': 0.6322965, 'vehiclesFlowWarpedOccupancyIou': 0.4712768}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.96590686, 'vehiclesObservedIou': 0.80011797, 'vehiclesOccludedAuc': 0.08322109, 'vehiclesOccludedIou': 0.015826501, 'vehiclesFlowEpe': 1.1551716, 'vehiclesFlowWarpedOccupancyAuc': 0.8429576, 'vehiclesFlowWarpedOccupancyIou': 0.867071}
DataLossError encountered. Skipping the corrupted record.
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.96590686, 'vehiclesObservedIou': 0.80011797, 'vehiclesOccludedAuc': 0.08322109, 'vehiclesOccludedIou': 0.015826501, 'vehiclesFlowEpe': 1.1551716, 'vehiclesFlowWarpedOccupancyAuc': 0.8429576, 'vehiclesFlowWarpedOccupancyIou': 0.867071}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.8706324400000001, 'vehiclesObservedIou': 0.6161205425, 'vehiclesOccludedAuc': 0.075594033, 'vehiclesOccludedIou': 0.020033893249999997, 'vehiclesFlowEpe': 3.8901891500000003, 'vehiclesFlowWarpedOccupancyAuc': 0.7655532025, 'vehiclesFlowWarpedOccupancyIou': 0.6969479925000001}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00075new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 10:40:49.969519: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:40:50.023590: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:40:50.023873: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.57513094, 'vehiclesObservedIou': 0.23316054, 'vehiclesOccludedAuc': 0.03346496, 'vehiclesOccludedIou': 0.010658583, 'vehiclesFlowEpe': 9.7312975, 'vehiclesFlowWarpedOccupancyAuc': 0.4034235, 'vehiclesFlowWarpedOccupancyIou': 0.24880582}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8444128, 'vehiclesObservedIou': 0.47550258, 'vehiclesOccludedAuc': 0.00055070367, 'vehiclesOccludedIou': 0.00024678613, 'vehiclesFlowEpe': 2.667937, 'vehiclesFlowWarpedOccupancyAuc': 0.72007513, 'vehiclesFlowWarpedOccupancyIou': 0.5883606}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.86015403, 'vehiclesObservedIou': 0.50554454, 'vehiclesOccludedAuc': 0.0041437685, 'vehiclesOccludedIou': 0.0019354457, 'vehiclesFlowEpe': 5.4234834, 'vehiclesFlowWarpedOccupancyAuc': 0.6854824, 'vehiclesFlowWarpedOccupancyIou': 0.57484597}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.610762, 'vehiclesObservedIou': 0.31120366, 'vehiclesOccludedAuc': 0.004721802, 'vehiclesOccludedIou': 0.0017850731, 'vehiclesFlowEpe': 2.9316912, 'vehiclesFlowWarpedOccupancyAuc': 0.5343806, 'vehiclesFlowWarpedOccupancyIou': 0.33435416}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.84757435, 'vehiclesObservedIou': 0.51443934, 'vehiclesOccludedAuc': 0.0032891303, 'vehiclesOccludedIou': 0.0010441005, 'vehiclesFlowEpe': 4.918951, 'vehiclesFlowWarpedOccupancyAuc': 0.7187936, 'vehiclesFlowWarpedOccupancyIou': 0.58041227}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.748723, 'vehiclesObservedIou': 0.39345574, 'vehiclesOccludedAuc': 0.002562689, 'vehiclesOccludedIou': 0.0011260972, 'vehiclesFlowEpe': 3.1187387, 'vehiclesFlowWarpedOccupancyAuc': 0.7266037, 'vehiclesFlowWarpedOccupancyIou': 0.5011222}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.88770515, 'vehiclesObservedIou': 0.57565117, 'vehiclesOccludedAuc': 0.0127581535, 'vehiclesOccludedIou': 0.006024263, 'vehiclesFlowEpe': 6.062564, 'vehiclesFlowWarpedOccupancyAuc': 0.75036067, 'vehiclesFlowWarpedOccupancyIou': 0.6981702}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.27956918, 'vehiclesObservedIou': 0.13259935, 'vehiclesOccludedAuc': 0.041113943, 'vehiclesOccludedIou': 0.012141329, 'vehiclesFlowEpe': 10.30622, 'vehiclesFlowWarpedOccupancyAuc': 0.27036798, 'vehiclesFlowWarpedOccupancyIou': 0.10859918}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7485756, 'vehiclesObservedIou': 0.45769185, 'vehiclesOccludedAuc': 0.13279346, 'vehiclesOccludedIou': 0.031512294, 'vehiclesFlowEpe': 9.192283, 'vehiclesFlowWarpedOccupancyAuc': 0.51629055, 'vehiclesFlowWarpedOccupancyIou': 0.46442312}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.22022799, 'vehiclesObservedIou': 0.08139792, 'vehiclesOccludedAuc': 0.014558855, 'vehiclesOccludedIou': 0.006801433, 'vehiclesFlowEpe': 5.8265104, 'vehiclesFlowWarpedOccupancyAuc': 0.25458184, 'vehiclesFlowWarpedOccupancyIou': 0.068414114}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8032046, 'vehiclesObservedIou': 0.42351076, 'vehiclesOccludedAuc': 0.18508628, 'vehiclesOccludedIou': 0.017124692, 'vehiclesFlowEpe': 3.5394123, 'vehiclesFlowWarpedOccupancyAuc': 0.72648585, 'vehiclesFlowWarpedOccupancyIou': 0.50202495}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.83651066, 'vehiclesObservedIou': 0.57396495, 'vehiclesOccludedAuc': 0.109044954, 'vehiclesOccludedIou': 0.020190153, 'vehiclesFlowEpe': 3.492424, 'vehiclesFlowWarpedOccupancyAuc': 0.71713674, 'vehiclesFlowWarpedOccupancyIou': 0.6929774}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7000357, 'vehiclesObservedIou': 0.409409, 'vehiclesOccludedAuc': 0.038760066, 'vehiclesOccludedIou': 0.0083797835, 'vehiclesFlowEpe': 5.025859, 'vehiclesFlowWarpedOccupancyAuc': 0.60582966, 'vehiclesFlowWarpedOccupancyIou': 0.4382773}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5464907, 'vehiclesObservedIou': 0.22042118, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.3263795, 'vehiclesFlowWarpedOccupancyAuc': 0.5218838, 'vehiclesFlowWarpedOccupancyIou': 0.24350466}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.48777515, 'vehiclesObservedIou': 0.31503683, 'vehiclesOccludedAuc': 0.17916444, 'vehiclesOccludedIou': 0.028193874, 'vehiclesFlowEpe': 3.7461305, 'vehiclesFlowWarpedOccupancyAuc': 0.51905304, 'vehiclesFlowWarpedOccupancyIou': 0.34031433}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9319906, 'vehiclesObservedIou': 0.70625055, 'vehiclesOccludedAuc': 0.03141295, 'vehiclesOccludedIou': 0.012123399, 'vehiclesFlowEpe': 4.604315, 'vehiclesFlowWarpedOccupancyAuc': 0.7763277, 'vehiclesFlowWarpedOccupancyIou': 0.77432287}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.2936994, 'vehiclesObservedIou': 0.13719031, 'vehiclesOccludedAuc': 0.07104644, 'vehiclesOccludedIou': 0.009977892, 'vehiclesFlowEpe': 7.629858, 'vehiclesFlowWarpedOccupancyAuc': 0.2135197, 'vehiclesFlowWarpedOccupancyIou': 0.1264058}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.94296575, 'vehiclesObservedIou': 0.6913583, 'vehiclesOccludedAuc': 0.21194877, 'vehiclesOccludedIou': 0.044055738, 'vehiclesFlowEpe': 4.246767, 'vehiclesFlowWarpedOccupancyAuc': 0.8002941, 'vehiclesFlowWarpedOccupancyIou': 0.69908875}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.71350056, 'vehiclesObservedIou': 0.3528841, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.9328794, 'vehiclesFlowWarpedOccupancyAuc': 0.6739912, 'vehiclesFlowWarpedOccupancyIou': 0.46943727}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.78979796, 'vehiclesObservedIou': 0.50396943, 'vehiclesOccludedAuc': 0.13320221, 'vehiclesOccludedIou': 0.034728892, 'vehiclesFlowEpe': 2.5659876, 'vehiclesFlowWarpedOccupancyAuc': 0.657987, 'vehiclesFlowWarpedOccupancyIou': 0.5503276}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.17273752, 'vehiclesObservedIou': 0.12005081, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 4.954956, 'vehiclesFlowWarpedOccupancyAuc': 0.26195216, 'vehiclesFlowWarpedOccupancyIou': 0.14692497}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8030401, 'vehiclesObservedIou': 0.45790744, 'vehiclesOccludedAuc': 0.015750766, 'vehiclesOccludedIou': 0.004081709, 'vehiclesFlowEpe': 2.7589016, 'vehiclesFlowWarpedOccupancyAuc': 0.7256638, 'vehiclesFlowWarpedOccupancyIou': 0.530467}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5887007, 'vehiclesObservedIou': 0.33469674, 'vehiclesOccludedAuc': 0.008484499, 'vehiclesOccludedIou': 0.0027812787, 'vehiclesFlowEpe': 4.0748925, 'vehiclesFlowWarpedOccupancyAuc': 0.6131531, 'vehiclesFlowWarpedOccupancyIou': 0.3767539}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.84351474, 'vehiclesObservedIou': 0.54056305, 'vehiclesOccludedAuc': 0.10102, 'vehiclesOccludedIou': 0.027820928, 'vehiclesFlowEpe': 4.085833, 'vehiclesFlowWarpedOccupancyAuc': 0.73075587, 'vehiclesFlowWarpedOccupancyIou': 0.64833957}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8994197, 'vehiclesObservedIou': 0.6630374, 'vehiclesOccludedAuc': 0.1523524, 'vehiclesOccludedIou': 0.033844844, 'vehiclesFlowEpe': 2.3730206, 'vehiclesFlowWarpedOccupancyAuc': 0.82984054, 'vehiclesFlowWarpedOccupancyIou': 0.7249589}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.94296575, 'vehiclesObservedIou': 0.6913583, 'vehiclesOccludedAuc': 0.21194877, 'vehiclesOccludedIou': 0.044055738, 'vehiclesFlowEpe': 4.246767, 'vehiclesFlowWarpedOccupancyAuc': 0.8002941, 'vehiclesFlowWarpedOccupancyIou': 0.69908875}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6790487552000001, 'vehiclesObservedIou': 0.40523590160000006, 'vehiclesOccludedAuc': 0.059489249598800004, 'vehiclesOccludedIou': 0.0126631435132, 'vehiclesFlowEpe': 4.741491688, 'vehiclesFlowWarpedOccupancyAuc': 0.5981693692, 'vehiclesFlowWarpedOccupancyIou': 0.45726531616000005}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00092new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 10:41:05.656746: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:41:05.833485: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:41:05.833774: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.77838933, 'vehiclesObservedIou': 0.40185413, 'vehiclesOccludedAuc': 0.2532583, 'vehiclesOccludedIou': 0.05873609, 'vehiclesFlowEpe': 4.3332014, 'vehiclesFlowWarpedOccupancyAuc': 0.6244287, 'vehiclesFlowWarpedOccupancyIou': 0.45379496}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.99607456, 'vehiclesObservedIou': 0.9195411, 'vehiclesOccludedAuc': 0.256427, 'vehiclesOccludedIou': 0.03541341, 'vehiclesFlowEpe': 3.0323005, 'vehiclesFlowWarpedOccupancyAuc': 0.9327712, 'vehiclesFlowWarpedOccupancyIou': 0.9542366}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5375903, 'vehiclesObservedIou': 0.27133748, 'vehiclesOccludedAuc': 0.052676953, 'vehiclesOccludedIou': 0.009451429, 'vehiclesFlowEpe': 2.2807462, 'vehiclesFlowWarpedOccupancyAuc': 0.69006705, 'vehiclesFlowWarpedOccupancyIou': 0.34077844}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7680476, 'vehiclesObservedIou': 0.38596544, 'vehiclesOccludedAuc': 0.0767063, 'vehiclesOccludedIou': 0.026815258, 'vehiclesFlowEpe': 3.4090004, 'vehiclesFlowWarpedOccupancyAuc': 0.7127557, 'vehiclesFlowWarpedOccupancyIou': 0.49259433}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.621983, 'vehiclesObservedIou': 0.3399044, 'vehiclesOccludedAuc': 0.10753468, 'vehiclesOccludedIou': 0.015280347, 'vehiclesFlowEpe': 3.7035408, 'vehiclesFlowWarpedOccupancyAuc': 0.61966616, 'vehiclesFlowWarpedOccupancyIou': 0.44878215}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.37727237, 'vehiclesObservedIou': 0.17932153, 'vehiclesOccludedAuc': 0.08150438, 'vehiclesOccludedIou': 0.02081174, 'vehiclesFlowEpe': 2.3035479, 'vehiclesFlowWarpedOccupancyAuc': 0.6198689, 'vehiclesFlowWarpedOccupancyIou': 0.25444987}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8860309, 'vehiclesObservedIou': 0.6248797, 'vehiclesOccludedAuc': 0.07963269, 'vehiclesOccludedIou': 0.019756274, 'vehiclesFlowEpe': 4.115404, 'vehiclesFlowWarpedOccupancyAuc': 0.7576089, 'vehiclesFlowWarpedOccupancyIou': 0.69578075}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6305385, 'vehiclesObservedIou': 0.38506007, 'vehiclesOccludedAuc': 0.022322081, 'vehiclesOccludedIou': 0.0077684624, 'vehiclesFlowEpe': 7.5554075, 'vehiclesFlowWarpedOccupancyAuc': 0.464104, 'vehiclesFlowWarpedOccupancyIou': 0.40637383}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.71152055, 'vehiclesObservedIou': 0.42702994, 'vehiclesOccludedAuc': 0.25344837, 'vehiclesOccludedIou': 0.05837322, 'vehiclesFlowEpe': 12.982185, 'vehiclesFlowWarpedOccupancyAuc': 0.5755394, 'vehiclesFlowWarpedOccupancyIou': 0.56248605}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.82214665, 'vehiclesObservedIou': 0.5587054, 'vehiclesOccludedAuc': 0.008310952, 'vehiclesOccludedIou': 0.0044824095, 'vehiclesFlowEpe': 5.446457, 'vehiclesFlowWarpedOccupancyAuc': 0.71712536, 'vehiclesFlowWarpedOccupancyIou': 0.7057551}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8310057, 'vehiclesObservedIou': 0.5510342, 'vehiclesOccludedAuc': 0.009814675, 'vehiclesOccludedIou': 0.003471978, 'vehiclesFlowEpe': 4.422739, 'vehiclesFlowWarpedOccupancyAuc': 0.67182505, 'vehiclesFlowWarpedOccupancyIou': 0.6355542}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.2196011, 'vehiclesObservedIou': 0.09986232, 'vehiclesOccludedAuc': 0.0047211526, 'vehiclesOccludedIou': 0.0016210987, 'vehiclesFlowEpe': 2.5028505, 'vehiclesFlowWarpedOccupancyAuc': 0.21364148, 'vehiclesFlowWarpedOccupancyIou': 0.083612606}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7490702, 'vehiclesObservedIou': 0.46807688, 'vehiclesOccludedAuc': 0.0031523118, 'vehiclesOccludedIou': 0.00095848297, 'vehiclesFlowEpe': 4.182624, 'vehiclesFlowWarpedOccupancyAuc': 0.60890913, 'vehiclesFlowWarpedOccupancyIou': 0.5048051}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.95276207, 'vehiclesObservedIou': 0.7068423, 'vehiclesOccludedAuc': 0.0053297733, 'vehiclesOccludedIou': 0.0023732083, 'vehiclesFlowEpe': 4.869157, 'vehiclesFlowWarpedOccupancyAuc': 0.80723315, 'vehiclesFlowWarpedOccupancyIou': 0.77236384}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8982445, 'vehiclesObservedIou': 0.576601, 'vehiclesOccludedAuc': 0.06556379, 'vehiclesOccludedIou': 0.013057831, 'vehiclesFlowEpe': 3.509959, 'vehiclesFlowWarpedOccupancyAuc': 0.6902415, 'vehiclesFlowWarpedOccupancyIou': 0.5854802}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.4617421, 'vehiclesObservedIou': 0.22888948, 'vehiclesOccludedAuc': 0.1183362, 'vehiclesOccludedIou': 0.004427651, 'vehiclesFlowEpe': 3.672845, 'vehiclesFlowWarpedOccupancyAuc': 0.51866096, 'vehiclesFlowWarpedOccupancyIou': 0.2429502}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8229356, 'vehiclesObservedIou': 0.49372652, 'vehiclesOccludedAuc': 0.09978636, 'vehiclesOccludedIou': 0.014713594, 'vehiclesFlowEpe': 5.8163495, 'vehiclesFlowWarpedOccupancyAuc': 0.59559286, 'vehiclesFlowWarpedOccupancyIou': 0.50014865}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8467746, 'vehiclesObservedIou': 0.5974316, 'vehiclesOccludedAuc': 0.20631047, 'vehiclesOccludedIou': 0.06360525, 'vehiclesFlowEpe': 6.863125, 'vehiclesFlowWarpedOccupancyAuc': 0.69856274, 'vehiclesFlowWarpedOccupancyIou': 0.61909246}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5163306, 'vehiclesObservedIou': 0.35091704, 'vehiclesOccludedAuc': 0.067789584, 'vehiclesOccludedIou': 0.014290602, 'vehiclesFlowEpe': 2.6103392, 'vehiclesFlowWarpedOccupancyAuc': 0.6208177, 'vehiclesFlowWarpedOccupancyIou': 0.5018909}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7877827, 'vehiclesObservedIou': 0.48198038, 'vehiclesOccludedAuc': 0.21994607, 'vehiclesOccludedIou': 0.056458075, 'vehiclesFlowEpe': 3.275631, 'vehiclesFlowWarpedOccupancyAuc': 0.7632261, 'vehiclesFlowWarpedOccupancyIou': 0.6323689}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8188414, 'vehiclesObservedIou': 0.5478669, 'vehiclesOccludedAuc': 0.033468958, 'vehiclesOccludedIou': 0.006669377, 'vehiclesFlowEpe': 6.5595546, 'vehiclesFlowWarpedOccupancyAuc': 0.69778675, 'vehiclesFlowWarpedOccupancyIou': 0.628369}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.56060433, 'vehiclesObservedIou': 0.32746458, 'vehiclesOccludedAuc': 0.025740022, 'vehiclesOccludedIou': 0.009218182, 'vehiclesFlowEpe': 3.5539465, 'vehiclesFlowWarpedOccupancyAuc': 0.611583, 'vehiclesFlowWarpedOccupancyIou': 0.3800762}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7136843, 'vehiclesObservedIou': 0.45332706, 'vehiclesOccludedAuc': 0.013885694, 'vehiclesOccludedIou': 0.0043194164, 'vehiclesFlowEpe': 2.4749186, 'vehiclesFlowWarpedOccupancyAuc': 0.6650046, 'vehiclesFlowWarpedOccupancyIou': 0.50658715}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.97060686, 'vehiclesObservedIou': 0.80678254, 'vehiclesOccludedAuc': 0.0002805359, 'vehiclesOccludedIou': 0.00028849847, 'vehiclesFlowEpe': 2.393804, 'vehiclesFlowWarpedOccupancyAuc': 0.88393587, 'vehiclesFlowWarpedOccupancyIou': 0.8867802}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9894744, 'vehiclesObservedIou': 0.6292978, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 0.5352278, 'vehiclesFlowWarpedOccupancyAuc': 0.9181354, 'vehiclesFlowWarpedOccupancyIou': 0.74210835}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8593796, 'vehiclesObservedIou': 0.5048146, 'vehiclesOccludedAuc': 0.012319361, 'vehiclesOccludedIou': 0.0036256253, 'vehiclesFlowEpe': 6.70101, 'vehiclesFlowWarpedOccupancyAuc': 0.62406135, 'vehiclesFlowWarpedOccupancyIou': 0.5353093}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9552059, 'vehiclesObservedIou': 0.616545, 'vehiclesOccludedAuc': 0.08924868, 'vehiclesOccludedIou': 0.023247395, 'vehiclesFlowEpe': 2.8857765, 'vehiclesFlowWarpedOccupancyAuc': 0.7978919, 'vehiclesFlowWarpedOccupancyIou': 0.7059538}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.29984578, 'vehiclesObservedIou': 0.18281618, 'vehiclesOccludedAuc': 0.086224996, 'vehiclesOccludedIou': 0.022638872, 'vehiclesFlowEpe': 5.291602, 'vehiclesFlowWarpedOccupancyAuc': 0.36882174, 'vehiclesFlowWarpedOccupancyIou': 0.21102864}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.69947064, 'vehiclesObservedIou': 0.39378127, 'vehiclesOccludedAuc': 0.08462108, 'vehiclesOccludedIou': 0.011512812, 'vehiclesFlowEpe': 3.7568102, 'vehiclesFlowWarpedOccupancyAuc': 0.6455538, 'vehiclesFlowWarpedOccupancyIou': 0.4874655}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.90750414, 'vehiclesObservedIou': 0.5290508, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 0.92906666, 'vehiclesFlowWarpedOccupancyAuc': 0.8488935, 'vehiclesFlowWarpedOccupancyIou': 0.6654223}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.99607456, 'vehiclesObservedIou': 0.9195411, 'vehiclesOccludedAuc': 0.256427, 'vehiclesOccludedIou': 0.03541341, 'vehiclesFlowEpe': 3.0323005, 'vehiclesFlowWarpedOccupancyAuc': 0.9327712, 'vehiclesFlowWarpedOccupancyIou': 0.9542366}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.7330153426666666, 'vehiclesObservedIou': 0.46802358800000005, 'vehiclesOccludedAuc': 0.07794538065333331, 'vehiclesOccludedIou': 0.017112886301333334, 'vehiclesFlowEpe': 4.198970892, 'vehiclesFlowWarpedOccupancyAuc': 0.6654771316666666, 'vehiclesFlowWarpedOccupancyIou': 0.5380799858666667}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00034new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 10:41:24.785695: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:41:24.839502: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:41:24.839778: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8593699, 'vehiclesObservedIou': 0.5888116, 'vehiclesOccludedAuc': 0.044030495, 'vehiclesOccludedIou': 0.008448692, 'vehiclesFlowEpe': 3.6721175, 'vehiclesFlowWarpedOccupancyAuc': 0.7791276, 'vehiclesFlowWarpedOccupancyIou': 0.73019636}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.23523073, 'vehiclesObservedIou': 0.08793839, 'vehiclesOccludedAuc': 0.0015095917, 'vehiclesOccludedIou': 0.00119402, 'vehiclesFlowEpe': 5.311549, 'vehiclesFlowWarpedOccupancyAuc': 0.269215, 'vehiclesFlowWarpedOccupancyIou': 0.08631443}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.32579094, 'vehiclesObservedIou': 0.16278252, 'vehiclesOccludedAuc': 0.005342327, 'vehiclesOccludedIou': 0.0023920003, 'vehiclesFlowEpe': 3.1679156, 'vehiclesFlowWarpedOccupancyAuc': 0.48382002, 'vehiclesFlowWarpedOccupancyIou': 0.2046594}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.6372286, 'vehiclesObservedIou': 0.31488085, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.5495315, 'vehiclesFlowWarpedOccupancyAuc': 0.5475374, 'vehiclesFlowWarpedOccupancyIou': 0.37160715}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.19711882, 'vehiclesObservedIou': 0.094100006, 'vehiclesOccludedAuc': 0.017397093, 'vehiclesOccludedIou': 0.0053616054, 'vehiclesFlowEpe': 7.443444, 'vehiclesFlowWarpedOccupancyAuc': 0.3221106, 'vehiclesFlowWarpedOccupancyIou': 0.10951523}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8805767, 'vehiclesObservedIou': 0.5503842, 'vehiclesOccludedAuc': 0.26267642, 'vehiclesOccludedIou': 0.06508348, 'vehiclesFlowEpe': 5.98523, 'vehiclesFlowWarpedOccupancyAuc': 0.7648787, 'vehiclesFlowWarpedOccupancyIou': 0.6100197}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.54092956, 'vehiclesObservedIou': 0.24893303, 'vehiclesOccludedAuc': 0.010453072, 'vehiclesOccludedIou': 0.0019161073, 'vehiclesFlowEpe': 10.103304, 'vehiclesFlowWarpedOccupancyAuc': 0.41313308, 'vehiclesFlowWarpedOccupancyIou': 0.28789696}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.89062804, 'vehiclesObservedIou': 0.53050727, 'vehiclesOccludedAuc': 0.02533349, 'vehiclesOccludedIou': 0.0060941307, 'vehiclesFlowEpe': 5.078259, 'vehiclesFlowWarpedOccupancyAuc': 0.7113489, 'vehiclesFlowWarpedOccupancyIou': 0.6364542}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8289496, 'vehiclesObservedIou': 0.5225066, 'vehiclesOccludedAuc': 0.037328273, 'vehiclesOccludedIou': 0.014103168, 'vehiclesFlowEpe': 3.2854896, 'vehiclesFlowWarpedOccupancyAuc': 0.6735125, 'vehiclesFlowWarpedOccupancyIou': 0.56403226}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9357083, 'vehiclesObservedIou': 0.7515389, 'vehiclesOccludedAuc': 0.042448133, 'vehiclesOccludedIou': 0.011244445, 'vehiclesFlowEpe': 3.1316934, 'vehiclesFlowWarpedOccupancyAuc': 0.84340775, 'vehiclesFlowWarpedOccupancyIou': 0.7255615}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.79753643, 'vehiclesObservedIou': 0.5753772, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 11.900148, 'vehiclesFlowWarpedOccupancyAuc': 0.62530184, 'vehiclesFlowWarpedOccupancyIou': 0.6774916}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.3416085, 'vehiclesObservedIou': 0.14493689, 'vehiclesOccludedAuc': 0.16675593, 'vehiclesOccludedIou': 0.02948989, 'vehiclesFlowEpe': 13.297485, 'vehiclesFlowWarpedOccupancyAuc': 0.20319074, 'vehiclesFlowWarpedOccupancyIou': 0.15745118}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.17165014, 'vehiclesObservedIou': 0.08813869, 'vehiclesOccludedAuc': 0.004096795, 'vehiclesOccludedIou': 0.0024737448, 'vehiclesFlowEpe': 5.9222097, 'vehiclesFlowWarpedOccupancyAuc': 0.16845264, 'vehiclesFlowWarpedOccupancyIou': 0.07580112}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8219178, 'vehiclesObservedIou': 0.47159448, 'vehiclesOccludedAuc': 0.20523536, 'vehiclesOccludedIou': 0.039460864, 'vehiclesFlowEpe': 4.0103507, 'vehiclesFlowWarpedOccupancyAuc': 0.5503875, 'vehiclesFlowWarpedOccupancyIou': 0.48576736}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7900765, 'vehiclesObservedIou': 0.49485773, 'vehiclesOccludedAuc': 0.017278183, 'vehiclesOccludedIou': 0.0063797007, 'vehiclesFlowEpe': 3.6006536, 'vehiclesFlowWarpedOccupancyAuc': 0.7457756, 'vehiclesFlowWarpedOccupancyIou': 0.6420029}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.36960822, 'vehiclesObservedIou': 0.20554063, 'vehiclesOccludedAuc': 0.10892925, 'vehiclesOccludedIou': 0.015246794, 'vehiclesFlowEpe': 4.7601066, 'vehiclesFlowWarpedOccupancyAuc': 0.42838046, 'vehiclesFlowWarpedOccupancyIou': 0.19727892}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.25476953, 'vehiclesObservedIou': 0.13737105, 'vehiclesOccludedAuc': 0.50105387, 'vehiclesOccludedIou': 0.06761482, 'vehiclesFlowEpe': 4.267186, 'vehiclesFlowWarpedOccupancyAuc': 0.45374578, 'vehiclesFlowWarpedOccupancyIou': 0.22869845}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6005974, 'vehiclesObservedIou': 0.2954846, 'vehiclesOccludedAuc': 0.023221808, 'vehiclesOccludedIou': 0.0069432077, 'vehiclesFlowEpe': 3.3815398, 'vehiclesFlowWarpedOccupancyAuc': 0.5985902, 'vehiclesFlowWarpedOccupancyIou': 0.3827071}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.45019358, 'vehiclesObservedIou': 0.25525874, 'vehiclesOccludedAuc': 0.025836388, 'vehiclesOccludedIou': 0.00671607, 'vehiclesFlowEpe': 7.8239036, 'vehiclesFlowWarpedOccupancyAuc': 0.3677564, 'vehiclesFlowWarpedOccupancyIou': 0.29403657}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.14746922, 'vehiclesObservedIou': 0.072957814, 'vehiclesOccludedAuc': 0.056629915, 'vehiclesOccludedIou': 0.011092959, 'vehiclesFlowEpe': 16.164484, 'vehiclesFlowWarpedOccupancyAuc': 0.1706879, 'vehiclesFlowWarpedOccupancyIou': 0.048436534}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.9357083, 'vehiclesObservedIou': 0.7515389, 'vehiclesOccludedAuc': 0.042448133, 'vehiclesOccludedIou': 0.011244445, 'vehiclesFlowEpe': 3.1316934, 'vehiclesFlowWarpedOccupancyAuc': 0.84340775, 'vehiclesFlowWarpedOccupancyIou': 0.7255615}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.5538479255000001, 'vehiclesObservedIou': 0.3296950595, 'vehiclesOccludedAuc': 0.07777781968500001, 'vehiclesOccludedIou': 0.015062784945000001, 'vehiclesFlowEpe': 6.292830029999999, 'vehiclesFlowWarpedOccupancyAuc': 0.5060180305, 'vehiclesFlowWarpedOccupancyIou': 0.3757964462}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00132new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 10:41:37.737385: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:41:37.787610: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:41:37.787922: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.65584534, 'vehiclesObservedIou': 0.31391943, 'vehiclesOccludedAuc': 0.15364891, 'vehiclesOccludedIou': 0.018475804, 'vehiclesFlowEpe': 3.6308699, 'vehiclesFlowWarpedOccupancyAuc': 0.5792878, 'vehiclesFlowWarpedOccupancyIou': 0.33218098}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.42318895, 'vehiclesObservedIou': 0.18422543, 'vehiclesOccludedAuc': 0.0062235035, 'vehiclesOccludedIou': 0.0024361094, 'vehiclesFlowEpe': 4.7139945, 'vehiclesFlowWarpedOccupancyAuc': 0.28541848, 'vehiclesFlowWarpedOccupancyIou': 0.24514921}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.82162786, 'vehiclesObservedIou': 0.448889, 'vehiclesOccludedAuc': 0.03011082, 'vehiclesOccludedIou': 0.0068576448, 'vehiclesFlowEpe': 3.8954082, 'vehiclesFlowWarpedOccupancyAuc': 0.65457934, 'vehiclesFlowWarpedOccupancyIou': 0.5233689}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9238238, 'vehiclesObservedIou': 0.6101858, 'vehiclesOccludedAuc': 0.24887824, 'vehiclesOccludedIou': 0.043831322, 'vehiclesFlowEpe': 3.2351298, 'vehiclesFlowWarpedOccupancyAuc': 0.7817446, 'vehiclesFlowWarpedOccupancyIou': 0.67342013}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7603745, 'vehiclesObservedIou': 0.39740565, 'vehiclesOccludedAuc': 0.015847363, 'vehiclesOccludedIou': 0.008050121, 'vehiclesFlowEpe': 4.707275, 'vehiclesFlowWarpedOccupancyAuc': 0.64403313, 'vehiclesFlowWarpedOccupancyIou': 0.48801044}
DataLossError encountered. Skipping the corrupted record.
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.9238238, 'vehiclesObservedIou': 0.6101858, 'vehiclesOccludedAuc': 0.24887824, 'vehiclesOccludedIou': 0.043831322, 'vehiclesFlowEpe': 3.2351298, 'vehiclesFlowWarpedOccupancyAuc': 0.7817446, 'vehiclesFlowWarpedOccupancyIou': 0.67342013}
Average Time: 0.0012 seconds, Average Metrics: {'vehiclesObservedAuc': 0.71697209, 'vehiclesObservedIou': 0.390925062, 'vehiclesOccludedAuc': 0.0909417673, 'vehiclesOccludedIou': 0.015930200239999998, 'vehiclesFlowEpe': 4.0365354799999995, 'vehiclesFlowWarpedOccupancyAuc': 0.58901267, 'vehiclesFlowWarpedOccupancyIou': 0.452425932}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00037new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 10:41:41.315094: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:41:41.366343: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:41:41.366628: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.79472697, 'vehiclesObservedIou': 0.5234343, 'vehiclesOccludedAuc': 0.07125816, 'vehiclesOccludedIou': 0.032332867, 'vehiclesFlowEpe': 4.7642593, 'vehiclesFlowWarpedOccupancyAuc': 0.6761875, 'vehiclesFlowWarpedOccupancyIou': 0.5749604}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5868806, 'vehiclesObservedIou': 0.36843276, 'vehiclesOccludedAuc': 0.037436962, 'vehiclesOccludedIou': 0.012302995, 'vehiclesFlowEpe': 6.7968764, 'vehiclesFlowWarpedOccupancyAuc': 0.5551016, 'vehiclesFlowWarpedOccupancyIou': 0.395035}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.85780793, 'vehiclesObservedIou': 0.4676975, 'vehiclesOccludedAuc': 0.01966349, 'vehiclesOccludedIou': 0.00571453, 'vehiclesFlowEpe': 4.6528225, 'vehiclesFlowWarpedOccupancyAuc': 0.6688347, 'vehiclesFlowWarpedOccupancyIou': 0.5498095}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8107574, 'vehiclesObservedIou': 0.5666942, 'vehiclesOccludedAuc': 0.19002387, 'vehiclesOccludedIou': 0.010610958, 'vehiclesFlowEpe': 4.371951, 'vehiclesFlowWarpedOccupancyAuc': 0.7577467, 'vehiclesFlowWarpedOccupancyIou': 0.6924562}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.15871719, 'vehiclesObservedIou': 0.06820403, 'vehiclesOccludedAuc': 0.0533313, 'vehiclesOccludedIou': 0.011740196, 'vehiclesFlowEpe': 7.7597356, 'vehiclesFlowWarpedOccupancyAuc': 0.2597091, 'vehiclesFlowWarpedOccupancyIou': 0.07229544}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.93122655, 'vehiclesObservedIou': 0.6895514, 'vehiclesOccludedAuc': 0.008373124, 'vehiclesOccludedIou': 0.0036924107, 'vehiclesFlowEpe': 5.4507465, 'vehiclesFlowWarpedOccupancyAuc': 0.7853622, 'vehiclesFlowWarpedOccupancyIou': 0.77152264}
DataLossError encountered. Skipping the corrupted record.
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.93122655, 'vehiclesObservedIou': 0.6895514, 'vehiclesOccludedAuc': 0.008373124, 'vehiclesOccludedIou': 0.0036924107, 'vehiclesFlowEpe': 5.4507465, 'vehiclesFlowWarpedOccupancyAuc': 0.7853622, 'vehiclesFlowWarpedOccupancyIou': 0.77152264}
Average Time: 0.0012 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6900194399999999, 'vehiclesObservedIou': 0.44733569833333336, 'vehiclesOccludedAuc': 0.06334781766666668, 'vehiclesOccludedIou': 0.012732326116666665, 'vehiclesFlowEpe': 5.632731883333332, 'vehiclesFlowWarpedOccupancyAuc': 0.6171569666666668, 'vehiclesFlowWarpedOccupancyIou': 0.5093465300000001}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00014new.tfrecords...
2024-05-28 10:41:45.595038: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:41:45.646271: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:41:45.646549: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0014 seconds, Metrics: {'vehiclesObservedAuc': 0.5778444, 'vehiclesObservedIou': 0.31194952, 'vehiclesOccludedAuc': 0.052836917, 'vehiclesOccludedIou': 0.010846847, 'vehiclesFlowEpe': 5.8284082, 'vehiclesFlowWarpedOccupancyAuc': 0.54135853, 'vehiclesFlowWarpedOccupancyIou': 0.42475957}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.87417024, 'vehiclesObservedIou': 0.5451672, 'vehiclesOccludedAuc': 0.21453784, 'vehiclesOccludedIou': 0.07276189, 'vehiclesFlowEpe': 2.3918781, 'vehiclesFlowWarpedOccupancyAuc': 0.7731688, 'vehiclesFlowWarpedOccupancyIou': 0.6103135}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.85853624, 'vehiclesObservedIou': 0.49968565, 'vehiclesOccludedAuc': 0.034065016, 'vehiclesOccludedIou': 0.00942089, 'vehiclesFlowEpe': 10.057674, 'vehiclesFlowWarpedOccupancyAuc': 0.50558376, 'vehiclesFlowWarpedOccupancyIou': 0.4753453}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.16622253, 'vehiclesObservedIou': 0.08285393, 'vehiclesOccludedAuc': 0.0002624165, 'vehiclesOccludedIou': 0.00035311875, 'vehiclesFlowEpe': 18.26482, 'vehiclesFlowWarpedOccupancyAuc': 0.17214876, 'vehiclesFlowWarpedOccupancyIou': 0.08151319}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7059687, 'vehiclesObservedIou': 0.38969952, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 1.9278486, 'vehiclesFlowWarpedOccupancyAuc': 0.7306995, 'vehiclesFlowWarpedOccupancyIou': 0.48278096}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6934137, 'vehiclesObservedIou': 0.33519763, 'vehiclesOccludedAuc': 0.16001533, 'vehiclesOccludedIou': 0.03863179, 'vehiclesFlowEpe': 3.6016304, 'vehiclesFlowWarpedOccupancyAuc': 0.5899683, 'vehiclesFlowWarpedOccupancyIou': 0.43680975}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7278421, 'vehiclesObservedIou': 0.46342233, 'vehiclesOccludedAuc': 0.077946596, 'vehiclesOccludedIou': 0.013688241, 'vehiclesFlowEpe': 5.136236, 'vehiclesFlowWarpedOccupancyAuc': 0.5508765, 'vehiclesFlowWarpedOccupancyIou': 0.44152448}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7844616, 'vehiclesObservedIou': 0.42475358, 'vehiclesOccludedAuc': 0.123549126, 'vehiclesOccludedIou': 0.034138136, 'vehiclesFlowEpe': 4.2321076, 'vehiclesFlowWarpedOccupancyAuc': 0.6479961, 'vehiclesFlowWarpedOccupancyIou': 0.47793284}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.58416057, 'vehiclesObservedIou': 0.36265442, 'vehiclesOccludedAuc': 0.07923334, 'vehiclesOccludedIou': 0.0072156256, 'vehiclesFlowEpe': 6.554533, 'vehiclesFlowWarpedOccupancyAuc': 0.46600097, 'vehiclesFlowWarpedOccupancyIou': 0.44009945}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7947798, 'vehiclesObservedIou': 0.48083824, 'vehiclesOccludedAuc': 0.0022116238, 'vehiclesOccludedIou': 0.0008819562, 'vehiclesFlowEpe': 2.3065443, 'vehiclesFlowWarpedOccupancyAuc': 0.75968194, 'vehiclesFlowWarpedOccupancyIou': 0.5767248}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.706208, 'vehiclesObservedIou': 0.4568419, 'vehiclesOccludedAuc': 0.15917578, 'vehiclesOccludedIou': 0.044603348, 'vehiclesFlowEpe': 4.0811906, 'vehiclesFlowWarpedOccupancyAuc': 0.69946235, 'vehiclesFlowWarpedOccupancyIou': 0.55780774}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9208073, 'vehiclesObservedIou': 0.6885265, 'vehiclesOccludedAuc': 0.16655609, 'vehiclesOccludedIou': 0.032516714, 'vehiclesFlowEpe': 4.9309053, 'vehiclesFlowWarpedOccupancyAuc': 0.82856196, 'vehiclesFlowWarpedOccupancyIou': 0.7671571}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.97381324, 'vehiclesObservedIou': 0.77085966, 'vehiclesOccludedAuc': 0.00035857016, 'vehiclesOccludedIou': 0.00045667932, 'vehiclesFlowEpe': 2.5585172, 'vehiclesFlowWarpedOccupancyAuc': 0.8218611, 'vehiclesFlowWarpedOccupancyIou': 0.82807505}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8491415, 'vehiclesObservedIou': 0.49780342, 'vehiclesOccludedAuc': 0.29534858, 'vehiclesOccludedIou': 0.08153474, 'vehiclesFlowEpe': 3.5345006, 'vehiclesFlowWarpedOccupancyAuc': 0.69468504, 'vehiclesFlowWarpedOccupancyIou': 0.5751643}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.87272143, 'vehiclesObservedIou': 0.56746966, 'vehiclesOccludedAuc': 0.0014397504, 'vehiclesOccludedIou': 0.0017288469, 'vehiclesFlowEpe': 5.393112, 'vehiclesFlowWarpedOccupancyAuc': 0.72078025, 'vehiclesFlowWarpedOccupancyIou': 0.6456895}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.67951787, 'vehiclesObservedIou': 0.38097623, 'vehiclesOccludedAuc': 0.10665053, 'vehiclesOccludedIou': 0.022993121, 'vehiclesFlowEpe': 3.8661191, 'vehiclesFlowWarpedOccupancyAuc': 0.5613623, 'vehiclesFlowWarpedOccupancyIou': 0.3810074}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.17398629, 'vehiclesObservedIou': 0.074630566, 'vehiclesOccludedAuc': 0.06441519, 'vehiclesOccludedIou': 0.0048505906, 'vehiclesFlowEpe': 5.0540586, 'vehiclesFlowWarpedOccupancyAuc': 0.3037133, 'vehiclesFlowWarpedOccupancyIou': 0.119449124}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.39512727, 'vehiclesObservedIou': 0.21196572, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.3983905, 'vehiclesFlowWarpedOccupancyAuc': 0.32645893, 'vehiclesFlowWarpedOccupancyIou': 0.29443273}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.84579265, 'vehiclesObservedIou': 0.5160509, 'vehiclesOccludedAuc': 0.16438998, 'vehiclesOccludedIou': 0.030826762, 'vehiclesFlowEpe': 4.671879, 'vehiclesFlowWarpedOccupancyAuc': 0.63148224, 'vehiclesFlowWarpedOccupancyIou': 0.48418874}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.76691484, 'vehiclesObservedIou': 0.3884317, 'vehiclesOccludedAuc': 0.11021994, 'vehiclesOccludedIou': 0.031487342, 'vehiclesFlowEpe': 5.1618896, 'vehiclesFlowWarpedOccupancyAuc': 0.63824916, 'vehiclesFlowWarpedOccupancyIou': 0.42777288}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.89043695, 'vehiclesObservedIou': 0.52736485, 'vehiclesOccludedAuc': 0.06391982, 'vehiclesOccludedIou': 0.010039756, 'vehiclesFlowEpe': 6.390636, 'vehiclesFlowWarpedOccupancyAuc': 0.6949239, 'vehiclesFlowWarpedOccupancyIou': 0.607328}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9421021, 'vehiclesObservedIou': 0.6127857, 'vehiclesOccludedAuc': 0.14310896, 'vehiclesOccludedIou': 0.037297644, 'vehiclesFlowEpe': 2.3014657, 'vehiclesFlowWarpedOccupancyAuc': 0.7016968, 'vehiclesFlowWarpedOccupancyIou': 0.54435873}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7888598, 'vehiclesObservedIou': 0.5090828, 'vehiclesOccludedAuc': 0.072701156, 'vehiclesOccludedIou': 0.018491179, 'vehiclesFlowEpe': 3.6881092, 'vehiclesFlowWarpedOccupancyAuc': 0.68938535, 'vehiclesFlowWarpedOccupancyIou': 0.58832264}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.11081474, 'vehiclesObservedIou': 0.050218426, 'vehiclesOccludedAuc': 0.12085134, 'vehiclesOccludedIou': 0.022776283, 'vehiclesFlowEpe': 4.967201, 'vehiclesFlowWarpedOccupancyAuc': 0.21779822, 'vehiclesFlowWarpedOccupancyIou': 0.060693473}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.82621044, 'vehiclesObservedIou': 0.55072594, 'vehiclesOccludedAuc': 0.021315955, 'vehiclesOccludedIou': 0.0073484564, 'vehiclesFlowEpe': 3.6089964, 'vehiclesFlowWarpedOccupancyAuc': 0.6711086, 'vehiclesFlowWarpedOccupancyIou': 0.5762429}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7722947, 'vehiclesObservedIou': 0.40349376, 'vehiclesOccludedAuc': 0.0012087488, 'vehiclesOccludedIou': 0.0016502405, 'vehiclesFlowEpe': 3.66689, 'vehiclesFlowWarpedOccupancyAuc': 0.62854254, 'vehiclesFlowWarpedOccupancyIou': 0.48108646}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.97381324, 'vehiclesObservedIou': 0.77085966, 'vehiclesOccludedAuc': 0.00035857016, 'vehiclesOccludedIou': 0.00045667932, 'vehiclesFlowEpe': 2.5585172, 'vehiclesFlowWarpedOccupancyAuc': 0.8218611, 'vehiclesFlowWarpedOccupancyIou': 0.82807505}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.703159576923077, 'vehiclesObservedIou': 0.4270557596923077, 'vehiclesOccludedAuc': 0.08601225367923077, 'vehiclesOccludedIou': 0.020636161433461538, 'vehiclesFlowEpe': 4.868290038461539, 'vehiclesFlowWarpedOccupancyAuc': 0.598752123076923, 'vehiclesFlowWarpedOccupancyIou': 0.4764069464230769}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00055new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 10:42:02.253587: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:42:02.355750: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:42:02.356055: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.8657516, 'vehiclesObservedIou': 0.58492637, 'vehiclesOccludedAuc': 0.016265368, 'vehiclesOccludedIou': 0.0069927154, 'vehiclesFlowEpe': 3.7683787, 'vehiclesFlowWarpedOccupancyAuc': 0.7703789, 'vehiclesFlowWarpedOccupancyIou': 0.70862126}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.63247013, 'vehiclesObservedIou': 0.35099608, 'vehiclesOccludedAuc': 0.2544708, 'vehiclesOccludedIou': 0.028024664, 'vehiclesFlowEpe': 5.264648, 'vehiclesFlowWarpedOccupancyAuc': 0.54188, 'vehiclesFlowWarpedOccupancyIou': 0.397446}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7885768, 'vehiclesObservedIou': 0.5462775, 'vehiclesOccludedAuc': 0.0010665865, 'vehiclesOccludedIou': 0.0007262356, 'vehiclesFlowEpe': 3.9825118, 'vehiclesFlowWarpedOccupancyAuc': 0.68071824, 'vehiclesFlowWarpedOccupancyIou': 0.6103948}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7017181, 'vehiclesObservedIou': 0.43300828, 'vehiclesOccludedAuc': 0.02332911, 'vehiclesOccludedIou': 0.0049059205, 'vehiclesFlowEpe': 4.0878515, 'vehiclesFlowWarpedOccupancyAuc': 0.6618168, 'vehiclesFlowWarpedOccupancyIou': 0.50889283}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7827929, 'vehiclesObservedIou': 0.34334975, 'vehiclesOccludedAuc': 0.0056201816, 'vehiclesOccludedIou': 0.002489549, 'vehiclesFlowEpe': 7.3353667, 'vehiclesFlowWarpedOccupancyAuc': 0.52061987, 'vehiclesFlowWarpedOccupancyIou': 0.41719663}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.87885916, 'vehiclesObservedIou': 0.49022117, 'vehiclesOccludedAuc': 0.02093429, 'vehiclesOccludedIou': 0.008010976, 'vehiclesFlowEpe': 4.6601386, 'vehiclesFlowWarpedOccupancyAuc': 0.7077437, 'vehiclesFlowWarpedOccupancyIou': 0.5682962}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.677902, 'vehiclesObservedIou': 0.36041623, 'vehiclesOccludedAuc': 0.00024626392, 'vehiclesOccludedIou': 0.00021751525, 'vehiclesFlowEpe': 3.9758847, 'vehiclesFlowWarpedOccupancyAuc': 0.64339185, 'vehiclesFlowWarpedOccupancyIou': 0.49825504}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.812402, 'vehiclesObservedIou': 0.4693411, 'vehiclesOccludedAuc': 0.065302975, 'vehiclesOccludedIou': 0.014670571, 'vehiclesFlowEpe': 3.37499, 'vehiclesFlowWarpedOccupancyAuc': 0.7294443, 'vehiclesFlowWarpedOccupancyIou': 0.57268345}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.4219653, 'vehiclesObservedIou': 0.17136659, 'vehiclesOccludedAuc': 0.0656242, 'vehiclesOccludedIou': 0.009941872, 'vehiclesFlowEpe': 3.2276587, 'vehiclesFlowWarpedOccupancyAuc': 0.5214397, 'vehiclesFlowWarpedOccupancyIou': 0.19788477}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.22890621, 'vehiclesObservedIou': 0.1288647, 'vehiclesOccludedAuc': 0.0038012313, 'vehiclesOccludedIou': 0.0009521921, 'vehiclesFlowEpe': 3.4470704, 'vehiclesFlowWarpedOccupancyAuc': 0.49006683, 'vehiclesFlowWarpedOccupancyIou': 0.15750128}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.5761945, 'vehiclesObservedIou': 0.24158189, 'vehiclesOccludedAuc': 0.013070007, 'vehiclesOccludedIou': 0.004152032, 'vehiclesFlowEpe': 19.82402, 'vehiclesFlowWarpedOccupancyAuc': 0.2673755, 'vehiclesFlowWarpedOccupancyIou': 0.3087521}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.68450093, 'vehiclesObservedIou': 0.38483268, 'vehiclesOccludedAuc': 0.0006085926, 'vehiclesOccludedIou': 0.00053337106, 'vehiclesFlowEpe': 8.672053, 'vehiclesFlowWarpedOccupancyAuc': 0.4813846, 'vehiclesFlowWarpedOccupancyIou': 0.4691182}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9888885, 'vehiclesObservedIou': 0.89683753, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.9732137, 'vehiclesFlowWarpedOccupancyAuc': 0.887936, 'vehiclesFlowWarpedOccupancyIou': 0.9418057}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.75972104, 'vehiclesObservedIou': 0.4272085, 'vehiclesOccludedAuc': 0.2394702, 'vehiclesOccludedIou': 0.03912689, 'vehiclesFlowEpe': 4.229523, 'vehiclesFlowWarpedOccupancyAuc': 0.62441707, 'vehiclesFlowWarpedOccupancyIou': 0.49925038}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8005786, 'vehiclesObservedIou': 0.46625766, 'vehiclesOccludedAuc': 0.20831457, 'vehiclesOccludedIou': 0.043303505, 'vehiclesFlowEpe': 4.5199986, 'vehiclesFlowWarpedOccupancyAuc': 0.6675667, 'vehiclesFlowWarpedOccupancyIou': 0.52332395}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.32641932, 'vehiclesObservedIou': 0.15972047, 'vehiclesOccludedAuc': 0.027798358, 'vehiclesOccludedIou': 0.008752177, 'vehiclesFlowEpe': 6.370817, 'vehiclesFlowWarpedOccupancyAuc': 0.43432218, 'vehiclesFlowWarpedOccupancyIou': 0.16633219}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7178188, 'vehiclesObservedIou': 0.39375886, 'vehiclesOccludedAuc': 0.06594518, 'vehiclesOccludedIou': 0.019083869, 'vehiclesFlowEpe': 4.867527, 'vehiclesFlowWarpedOccupancyAuc': 0.565606, 'vehiclesFlowWarpedOccupancyIou': 0.45622352}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.889283, 'vehiclesObservedIou': 0.6598937, 'vehiclesOccludedAuc': 0.005838149, 'vehiclesOccludedIou': 0.0026318002, 'vehiclesFlowEpe': 3.885274, 'vehiclesFlowWarpedOccupancyAuc': 0.74876755, 'vehiclesFlowWarpedOccupancyIou': 0.70886}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.45668036, 'vehiclesObservedIou': 0.25992793, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.29775, 'vehiclesFlowWarpedOccupancyAuc': 0.4471969, 'vehiclesFlowWarpedOccupancyIou': 0.32994542}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.8240511, 'vehiclesObservedIou': 0.4455525, 'vehiclesOccludedAuc': 0.12302232, 'vehiclesOccludedIou': 0.035296604, 'vehiclesFlowEpe': 8.232795, 'vehiclesFlowWarpedOccupancyAuc': 0.58933806, 'vehiclesFlowWarpedOccupancyIou': 0.48790532}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9539313, 'vehiclesObservedIou': 0.77906656, 'vehiclesOccludedAuc': 0.0120236175, 'vehiclesOccludedIou': 0.0027881768, 'vehiclesFlowEpe': 2.854392, 'vehiclesFlowWarpedOccupancyAuc': 0.8169319, 'vehiclesFlowWarpedOccupancyIou': 0.8189752}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.43090805, 'vehiclesObservedIou': 0.25451466, 'vehiclesOccludedAuc': 0.02590992, 'vehiclesOccludedIou': 0.0055585774, 'vehiclesFlowEpe': 3.1892996, 'vehiclesFlowWarpedOccupancyAuc': 0.54442894, 'vehiclesFlowWarpedOccupancyIou': 0.29009694}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.9888885, 'vehiclesObservedIou': 0.89683753, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.9732137, 'vehiclesFlowWarpedOccupancyAuc': 0.887936, 'vehiclesFlowWarpedOccupancyIou': 0.9418057}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6909236227272727, 'vehiclesObservedIou': 0.4203600322727273, 'vehiclesOccludedAuc': 0.053575541837272714, 'vehiclesOccludedIou': 0.010825418786818182, 'vehiclesFlowEpe': 5.320052818181818, 'vehiclesFlowWarpedOccupancyAuc': 0.6064896177272726, 'vehiclesFlowWarpedOccupancyIou': 0.48353459909090907}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00044new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 10:42:16.649602: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:42:16.704220: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:42:16.704502: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0014 seconds, Metrics: {'vehiclesObservedAuc': 0.9912443, 'vehiclesObservedIou': 0.82635075, 'vehiclesOccludedAuc': 0.012901125, 'vehiclesOccludedIou': 0.0038711852, 'vehiclesFlowEpe': 6.7433352, 'vehiclesFlowWarpedOccupancyAuc': 0.80683655, 'vehiclesFlowWarpedOccupancyIou': 0.8179398}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.46792394, 'vehiclesObservedIou': 0.17859891, 'vehiclesOccludedAuc': 0.14541, 'vehiclesOccludedIou': 0.031166472, 'vehiclesFlowEpe': 5.5018163, 'vehiclesFlowWarpedOccupancyAuc': 0.43605182, 'vehiclesFlowWarpedOccupancyIou': 0.25697407}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.42576575, 'vehiclesObservedIou': 0.17982127, 'vehiclesOccludedAuc': 0.032611117, 'vehiclesOccludedIou': 0.007908262, 'vehiclesFlowEpe': 4.2687325, 'vehiclesFlowWarpedOccupancyAuc': 0.32209608, 'vehiclesFlowWarpedOccupancyIou': 0.1704317}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.86511225, 'vehiclesObservedIou': 0.5483352, 'vehiclesOccludedAuc': 0.011743962, 'vehiclesOccludedIou': 0.0032016109, 'vehiclesFlowEpe': 4.760297, 'vehiclesFlowWarpedOccupancyAuc': 0.6673966, 'vehiclesFlowWarpedOccupancyIou': 0.617028}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.79523486, 'vehiclesObservedIou': 0.5647919, 'vehiclesOccludedAuc': 0.04760578, 'vehiclesOccludedIou': 0.017355574, 'vehiclesFlowEpe': 1.8490353, 'vehiclesFlowWarpedOccupancyAuc': 0.8426475, 'vehiclesFlowWarpedOccupancyIou': 0.7221556}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.50812906, 'vehiclesObservedIou': 0.17304276, 'vehiclesOccludedAuc': 0.015984954, 'vehiclesOccludedIou': 0.0011912346, 'vehiclesFlowEpe': 4.9129267, 'vehiclesFlowWarpedOccupancyAuc': 0.45146975, 'vehiclesFlowWarpedOccupancyIou': 0.34048554}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8432591, 'vehiclesObservedIou': 0.53268594, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.7693357, 'vehiclesFlowWarpedOccupancyAuc': 0.7515603, 'vehiclesFlowWarpedOccupancyIou': 0.65620494}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5428092, 'vehiclesObservedIou': 0.24088098, 'vehiclesOccludedAuc': 0.047699437, 'vehiclesOccludedIou': 0.011370849, 'vehiclesFlowEpe': 3.3386943, 'vehiclesFlowWarpedOccupancyAuc': 0.5940189, 'vehiclesFlowWarpedOccupancyIou': 0.29563236}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7040936, 'vehiclesObservedIou': 0.38511625, 'vehiclesOccludedAuc': 0.16559829, 'vehiclesOccludedIou': 0.046444915, 'vehiclesFlowEpe': 3.2458177, 'vehiclesFlowWarpedOccupancyAuc': 0.6930395, 'vehiclesFlowWarpedOccupancyIou': 0.495898}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.87168413, 'vehiclesObservedIou': 0.5660182, 'vehiclesOccludedAuc': 0.0022774437, 'vehiclesOccludedIou': 0.0013753125, 'vehiclesFlowEpe': 4.3769474, 'vehiclesFlowWarpedOccupancyAuc': 0.72649515, 'vehiclesFlowWarpedOccupancyIou': 0.63391554}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8609217, 'vehiclesObservedIou': 0.47929892, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 1.5853065, 'vehiclesFlowWarpedOccupancyAuc': 0.79551035, 'vehiclesFlowWarpedOccupancyIou': 0.6112113}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7412099, 'vehiclesObservedIou': 0.4022824, 'vehiclesOccludedAuc': 0.04100624, 'vehiclesOccludedIou': 0.0146747455, 'vehiclesFlowEpe': 3.4902008, 'vehiclesFlowWarpedOccupancyAuc': 0.6733339, 'vehiclesFlowWarpedOccupancyIou': 0.49977988}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.4651663, 'vehiclesObservedIou': 0.23922355, 'vehiclesOccludedAuc': 0.004183675, 'vehiclesOccludedIou': 0.0011939722, 'vehiclesFlowEpe': 4.6444407, 'vehiclesFlowWarpedOccupancyAuc': 0.5424509, 'vehiclesFlowWarpedOccupancyIou': 0.27415925}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6504814, 'vehiclesObservedIou': 0.32958162, 'vehiclesOccludedAuc': 0.008364202, 'vehiclesOccludedIou': 0.0034862836, 'vehiclesFlowEpe': 2.636195, 'vehiclesFlowWarpedOccupancyAuc': 0.6587513, 'vehiclesFlowWarpedOccupancyIou': 0.40057078}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9595184, 'vehiclesObservedIou': 0.86449254, 'vehiclesOccludedAuc': 0.007447562, 'vehiclesOccludedIou': 0.004760823, 'vehiclesFlowEpe': 4.7355175, 'vehiclesFlowWarpedOccupancyAuc': 0.8937096, 'vehiclesFlowWarpedOccupancyIou': 0.91020733}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.61772686, 'vehiclesObservedIou': 0.35387316, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.569314, 'vehiclesFlowWarpedOccupancyAuc': 0.5523298, 'vehiclesFlowWarpedOccupancyIou': 0.45021483}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8187917, 'vehiclesObservedIou': 0.6484385, 'vehiclesOccludedAuc': 0.15363322, 'vehiclesOccludedIou': 0.03564753, 'vehiclesFlowEpe': 4.6563973, 'vehiclesFlowWarpedOccupancyAuc': 0.8235084, 'vehiclesFlowWarpedOccupancyIou': 0.7511914}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6004332, 'vehiclesObservedIou': 0.29478103, 'vehiclesOccludedAuc': 0.012605017, 'vehiclesOccludedIou': 0.0041106846, 'vehiclesFlowEpe': 6.9079423, 'vehiclesFlowWarpedOccupancyAuc': 0.4666235, 'vehiclesFlowWarpedOccupancyIou': 0.3859693}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.71312225, 'vehiclesObservedIou': 0.33920085, 'vehiclesOccludedAuc': 0.07786435, 'vehiclesOccludedIou': 0.011182668, 'vehiclesFlowEpe': 5.500046, 'vehiclesFlowWarpedOccupancyAuc': 0.54397327, 'vehiclesFlowWarpedOccupancyIou': 0.44268557}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.79533285, 'vehiclesObservedIou': 0.44939315, 'vehiclesOccludedAuc': 0.08954286, 'vehiclesOccludedIou': 0.018896606, 'vehiclesFlowEpe': 4.7032804, 'vehiclesFlowWarpedOccupancyAuc': 0.61503345, 'vehiclesFlowWarpedOccupancyIou': 0.45734346}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.82172215, 'vehiclesObservedIou': 0.48974666, 'vehiclesOccludedAuc': 0.07223399, 'vehiclesOccludedIou': 0.015782192, 'vehiclesFlowEpe': 7.0873814, 'vehiclesFlowWarpedOccupancyAuc': 0.6023908, 'vehiclesFlowWarpedOccupancyIou': 0.5178677}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.14297992, 'vehiclesObservedIou': 0.061801694, 'vehiclesOccludedAuc': 0.008249398, 'vehiclesOccludedIou': 0.003096824, 'vehiclesFlowEpe': 4.1962247, 'vehiclesFlowWarpedOccupancyAuc': 0.15462494, 'vehiclesFlowWarpedOccupancyIou': 0.05296073}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.82040554, 'vehiclesObservedIou': 0.50296634, 'vehiclesOccludedAuc': 0.049467802, 'vehiclesOccludedIou': 0.019698605, 'vehiclesFlowEpe': 3.4565334, 'vehiclesFlowWarpedOccupancyAuc': 0.70476985, 'vehiclesFlowWarpedOccupancyIou': 0.5645611}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7576723, 'vehiclesObservedIou': 0.39943966, 'vehiclesOccludedAuc': 0.140297, 'vehiclesOccludedIou': 0.035289966, 'vehiclesFlowEpe': 2.3605394, 'vehiclesFlowWarpedOccupancyAuc': 0.70829904, 'vehiclesFlowWarpedOccupancyIou': 0.4518998}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.75475526, 'vehiclesObservedIou': 0.35788223, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 1.9439291, 'vehiclesFlowWarpedOccupancyAuc': 0.68230075, 'vehiclesFlowWarpedOccupancyIou': 0.49739638}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.41700688, 'vehiclesObservedIou': 0.16550972, 'vehiclesOccludedAuc': 0.0017907419, 'vehiclesOccludedIou': 0.00042533266, 'vehiclesFlowEpe': 11.19653, 'vehiclesFlowWarpedOccupancyAuc': 0.30716386, 'vehiclesFlowWarpedOccupancyIou': 0.17605577}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.9912443, 'vehiclesObservedIou': 0.82635075, 'vehiclesOccludedAuc': 0.012901125, 'vehiclesOccludedIou': 0.0038711852, 'vehiclesFlowEpe': 6.7433352, 'vehiclesFlowWarpedOccupancyAuc': 0.80683655, 'vehiclesFlowWarpedOccupancyIou': 0.8179398}
Average Time: 0.0012 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6904808769230768, 'vehiclesObservedIou': 0.4066751609230769, 'vehiclesOccludedAuc': 0.044173775638461546, 'vehiclesOccludedIou': 0.011235832606153847, 'vehiclesFlowEpe': 4.439873715384615, 'vehiclesFlowWarpedOccupancyAuc': 0.6160148407692307, 'vehiclesFlowWarpedOccupancyIou': 0.47887462038461537}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00064new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 10:42:33.385553: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:42:33.435953: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:42:33.436234: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.93171495, 'vehiclesObservedIou': 0.5869656, 'vehiclesOccludedAuc': 0.106829844, 'vehiclesOccludedIou': 0.027706575, 'vehiclesFlowEpe': 3.7873774, 'vehiclesFlowWarpedOccupancyAuc': 0.76694196, 'vehiclesFlowWarpedOccupancyIou': 0.6338887}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.3368958, 'vehiclesObservedIou': 0.12214221, 'vehiclesOccludedAuc': 0.0014653231, 'vehiclesOccludedIou': 4.5822042e-05, 'vehiclesFlowEpe': 3.4107208, 'vehiclesFlowWarpedOccupancyAuc': 0.29927072, 'vehiclesFlowWarpedOccupancyIou': 0.13096845}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.66186285, 'vehiclesObservedIou': 0.33184218, 'vehiclesOccludedAuc': 0.02233495, 'vehiclesOccludedIou': 0.008747545, 'vehiclesFlowEpe': 7.033165, 'vehiclesFlowWarpedOccupancyAuc': 0.455098, 'vehiclesFlowWarpedOccupancyIou': 0.3711199}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7319198, 'vehiclesObservedIou': 0.41709358, 'vehiclesOccludedAuc': 0.021003269, 'vehiclesOccludedIou': 0.008965769, 'vehiclesFlowEpe': 4.613801, 'vehiclesFlowWarpedOccupancyAuc': 0.6467755, 'vehiclesFlowWarpedOccupancyIou': 0.47396052}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6631007, 'vehiclesObservedIou': 0.32027173, 'vehiclesOccludedAuc': 0.059254445, 'vehiclesOccludedIou': 0.01580502, 'vehiclesFlowEpe': 5.3413563, 'vehiclesFlowWarpedOccupancyAuc': 0.58430976, 'vehiclesFlowWarpedOccupancyIou': 0.4103915}
DataLossError encountered. Skipping the corrupted record.
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.93171495, 'vehiclesObservedIou': 0.5869656, 'vehiclesOccludedAuc': 0.106829844, 'vehiclesOccludedIou': 0.027706575, 'vehiclesFlowEpe': 3.7873774, 'vehiclesFlowWarpedOccupancyAuc': 0.76694196, 'vehiclesFlowWarpedOccupancyIou': 0.6338887}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6650988200000001, 'vehiclesObservedIou': 0.35566306000000003, 'vehiclesOccludedAuc': 0.04217756622, 'vehiclesOccludedIou': 0.012254146208399999, 'vehiclesFlowEpe': 4.8372841, 'vehiclesFlowWarpedOccupancyAuc': 0.550479188, 'vehiclesFlowWarpedOccupancyIou': 0.40406581399999997}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00116new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 10:42:36.958518: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:42:37.009473: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:42:37.009756: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.8381576, 'vehiclesObservedIou': 0.5203653, 'vehiclesOccludedAuc': 0.015874768, 'vehiclesOccludedIou': 0.0036788036, 'vehiclesFlowEpe': 3.980298, 'vehiclesFlowWarpedOccupancyAuc': 0.6432052, 'vehiclesFlowWarpedOccupancyIou': 0.58558685}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8315397, 'vehiclesObservedIou': 0.52695984, 'vehiclesOccludedAuc': 0.01270712, 'vehiclesOccludedIou': 0.005153697, 'vehiclesFlowEpe': 6.2710896, 'vehiclesFlowWarpedOccupancyAuc': 0.63467044, 'vehiclesFlowWarpedOccupancyIou': 0.5677543}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8173439, 'vehiclesObservedIou': 0.55765605, 'vehiclesOccludedAuc': 0.06273809, 'vehiclesOccludedIou': 0.021070417, 'vehiclesFlowEpe': 4.715094, 'vehiclesFlowWarpedOccupancyAuc': 0.7300804, 'vehiclesFlowWarpedOccupancyIou': 0.62782514}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.94215924, 'vehiclesObservedIou': 0.6505988, 'vehiclesOccludedAuc': 0.18542393, 'vehiclesOccludedIou': 0.036314458, 'vehiclesFlowEpe': 3.0565774, 'vehiclesFlowWarpedOccupancyAuc': 0.8299965, 'vehiclesFlowWarpedOccupancyIou': 0.76986796}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.70134526, 'vehiclesObservedIou': 0.41905636, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 4.3517737, 'vehiclesFlowWarpedOccupancyAuc': 0.54575616, 'vehiclesFlowWarpedOccupancyIou': 0.53580606}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.72875684, 'vehiclesObservedIou': 0.41946146, 'vehiclesOccludedAuc': 0.039135907, 'vehiclesOccludedIou': 0.003999188, 'vehiclesFlowEpe': 3.5813847, 'vehiclesFlowWarpedOccupancyAuc': 0.62861603, 'vehiclesFlowWarpedOccupancyIou': 0.50575185}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.55872786, 'vehiclesObservedIou': 0.28175384, 'vehiclesOccludedAuc': 0.03913627, 'vehiclesOccludedIou': 0.012876896, 'vehiclesFlowEpe': 8.235084, 'vehiclesFlowWarpedOccupancyAuc': 0.40512323, 'vehiclesFlowWarpedOccupancyIou': 0.3064641}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7851647, 'vehiclesObservedIou': 0.43731448, 'vehiclesOccludedAuc': 0.21710181, 'vehiclesOccludedIou': 0.03769505, 'vehiclesFlowEpe': 2.9732108, 'vehiclesFlowWarpedOccupancyAuc': 0.6728248, 'vehiclesFlowWarpedOccupancyIou': 0.45231318}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.54968685, 'vehiclesObservedIou': 0.25573286, 'vehiclesOccludedAuc': 0.011128303, 'vehiclesOccludedIou': 0.0036297143, 'vehiclesFlowEpe': 10.427703, 'vehiclesFlowWarpedOccupancyAuc': 0.3124743, 'vehiclesFlowWarpedOccupancyIou': 0.3136354}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.6819753, 'vehiclesObservedIou': 0.33108488, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.278321, 'vehiclesFlowWarpedOccupancyAuc': 0.6492646, 'vehiclesFlowWarpedOccupancyIou': 0.43249875}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.62606686, 'vehiclesObservedIou': 0.30057505, 'vehiclesOccludedAuc': 0.003951027, 'vehiclesOccludedIou': 0.002505125, 'vehiclesFlowEpe': 4.9653444, 'vehiclesFlowWarpedOccupancyAuc': 0.52625763, 'vehiclesFlowWarpedOccupancyIou': 0.32391882}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.4793087, 'vehiclesObservedIou': 0.30631295, 'vehiclesOccludedAuc': 0.0040312693, 'vehiclesOccludedIou': 0.0013633046, 'vehiclesFlowEpe': 3.1111276, 'vehiclesFlowWarpedOccupancyAuc': 0.6265645, 'vehiclesFlowWarpedOccupancyIou': 0.28776366}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7824697, 'vehiclesObservedIou': 0.37871957, 'vehiclesOccludedAuc': 0.057092912, 'vehiclesOccludedIou': 0.012716125, 'vehiclesFlowEpe': 3.5560138, 'vehiclesFlowWarpedOccupancyAuc': 0.61412144, 'vehiclesFlowWarpedOccupancyIou': 0.41599947}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.46965256, 'vehiclesObservedIou': 0.20323531, 'vehiclesOccludedAuc': 0.0031181916, 'vehiclesOccludedIou': 0.0021276956, 'vehiclesFlowEpe': 6.0115304, 'vehiclesFlowWarpedOccupancyAuc': 0.3738774, 'vehiclesFlowWarpedOccupancyIou': 0.24351247}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.846486, 'vehiclesObservedIou': 0.5239064, 'vehiclesOccludedAuc': 0.11168474, 'vehiclesOccludedIou': 0.022098757, 'vehiclesFlowEpe': 4.090323, 'vehiclesFlowWarpedOccupancyAuc': 0.65895575, 'vehiclesFlowWarpedOccupancyIou': 0.5683783}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7004292, 'vehiclesObservedIou': 0.43073443, 'vehiclesOccludedAuc': 0.28285488, 'vehiclesOccludedIou': 0.059691865, 'vehiclesFlowEpe': 3.2129045, 'vehiclesFlowWarpedOccupancyAuc': 0.70790523, 'vehiclesFlowWarpedOccupancyIou': 0.45686924}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.82274586, 'vehiclesObservedIou': 0.50377834, 'vehiclesOccludedAuc': 0.10560818, 'vehiclesOccludedIou': 0.02075295, 'vehiclesFlowEpe': 2.7236872, 'vehiclesFlowWarpedOccupancyAuc': 0.7018885, 'vehiclesFlowWarpedOccupancyIou': 0.58269227}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9949433, 'vehiclesObservedIou': 0.84991544, 'vehiclesOccludedAuc': 0.39486644, 'vehiclesOccludedIou': 0.03494049, 'vehiclesFlowEpe': 1.4536557, 'vehiclesFlowWarpedOccupancyAuc': 0.89744186, 'vehiclesFlowWarpedOccupancyIou': 0.8644849}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8582939, 'vehiclesObservedIou': 0.5500303, 'vehiclesOccludedAuc': 0.026383977, 'vehiclesOccludedIou': 0.009482966, 'vehiclesFlowEpe': 12.208701, 'vehiclesFlowWarpedOccupancyAuc': 0.5684587, 'vehiclesFlowWarpedOccupancyIou': 0.55969805}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8622652, 'vehiclesObservedIou': 0.5338544, 'vehiclesOccludedAuc': 0.0036547966, 'vehiclesOccludedIou': 0.001974096, 'vehiclesFlowEpe': 2.3502727, 'vehiclesFlowWarpedOccupancyAuc': 0.7606461, 'vehiclesFlowWarpedOccupancyIou': 0.67233557}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.95387936, 'vehiclesObservedIou': 0.8120868, 'vehiclesOccludedAuc': 0.0013831572, 'vehiclesOccludedIou': 0.00133987, 'vehiclesFlowEpe': 3.7117708, 'vehiclesFlowWarpedOccupancyAuc': 0.85886574, 'vehiclesFlowWarpedOccupancyIou': 0.8786894}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.9949433, 'vehiclesObservedIou': 0.84991544, 'vehiclesOccludedAuc': 0.39486644, 'vehiclesOccludedIou': 0.03494049, 'vehiclesFlowEpe': 1.4536557, 'vehiclesFlowWarpedOccupancyAuc': 0.89744186, 'vehiclesFlowWarpedOccupancyIou': 0.8644849}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.7538760899999999, 'vehiclesObservedIou': 0.46633965999999993, 'vehiclesOccludedAuc': 0.07513694136666667, 'vehiclesOccludedIou': 0.013971974671428569, 'vehiclesFlowEpe': 4.631707966666666, 'vehiclesFlowWarpedOccupancyAuc': 0.6355711671428573, 'vehiclesFlowWarpedOccupancyIou': 0.5215164638095238}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00019new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 10:42:50.249941: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:42:50.300575: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:42:50.300849: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.89908785, 'vehiclesObservedIou': 0.61519194, 'vehiclesOccludedAuc': 0.005341547, 'vehiclesOccludedIou': 0.0029317683, 'vehiclesFlowEpe': 2.6473818, 'vehiclesFlowWarpedOccupancyAuc': 0.7881884, 'vehiclesFlowWarpedOccupancyIou': 0.69294655}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.75504994, 'vehiclesObservedIou': 0.38253954, 'vehiclesOccludedAuc': 0.30873832, 'vehiclesOccludedIou': 0.028852323, 'vehiclesFlowEpe': 4.5202885, 'vehiclesFlowWarpedOccupancyAuc': 0.6126959, 'vehiclesFlowWarpedOccupancyIou': 0.50064254}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.74082065, 'vehiclesObservedIou': 0.42876765, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.403905, 'vehiclesFlowWarpedOccupancyAuc': 0.6631554, 'vehiclesFlowWarpedOccupancyIou': 0.52542627}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.17668565, 'vehiclesObservedIou': 0.09482938, 'vehiclesOccludedAuc': 0.060573205, 'vehiclesOccludedIou': 0.005076951, 'vehiclesFlowEpe': 3.089635, 'vehiclesFlowWarpedOccupancyAuc': 0.29095733, 'vehiclesFlowWarpedOccupancyIou': 0.089095525}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7790191, 'vehiclesObservedIou': 0.4027905, 'vehiclesOccludedAuc': 0.017822066, 'vehiclesOccludedIou': 0.008560346, 'vehiclesFlowEpe': 4.5293775, 'vehiclesFlowWarpedOccupancyAuc': 0.63342166, 'vehiclesFlowWarpedOccupancyIou': 0.4884603}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8121454, 'vehiclesObservedIou': 0.46383637, 'vehiclesOccludedAuc': 0.11334649, 'vehiclesOccludedIou': 0.015250996, 'vehiclesFlowEpe': 3.5121396, 'vehiclesFlowWarpedOccupancyAuc': 0.6550427, 'vehiclesFlowWarpedOccupancyIou': 0.5208849}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8586197, 'vehiclesObservedIou': 0.5051915, 'vehiclesOccludedAuc': 0.20314616, 'vehiclesOccludedIou': 0.07163983, 'vehiclesFlowEpe': 2.325962, 'vehiclesFlowWarpedOccupancyAuc': 0.7580305, 'vehiclesFlowWarpedOccupancyIou': 0.6004655}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.91923827, 'vehiclesObservedIou': 0.68623465, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.1687436, 'vehiclesFlowWarpedOccupancyAuc': 0.8254557, 'vehiclesFlowWarpedOccupancyIou': 0.7998351}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.82540977, 'vehiclesObservedIou': 0.39090964, 'vehiclesOccludedAuc': 0.03846879, 'vehiclesOccludedIou': 0.0168408, 'vehiclesFlowEpe': 4.772774, 'vehiclesFlowWarpedOccupancyAuc': 0.6175196, 'vehiclesFlowWarpedOccupancyIou': 0.46150985}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9626065, 'vehiclesObservedIou': 0.82552934, 'vehiclesOccludedAuc': 0.0050072307, 'vehiclesOccludedIou': 0.0022076347, 'vehiclesFlowEpe': 9.982922, 'vehiclesFlowWarpedOccupancyAuc': 0.7965069, 'vehiclesFlowWarpedOccupancyIou': 0.7555622}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.3987388, 'vehiclesObservedIou': 0.25022095, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.726189, 'vehiclesFlowWarpedOccupancyAuc': 0.45523608, 'vehiclesFlowWarpedOccupancyIou': 0.29290086}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8180173, 'vehiclesObservedIou': 0.5329704, 'vehiclesOccludedAuc': 0.000839908, 'vehiclesOccludedIou': 0.0004001786, 'vehiclesFlowEpe': 3.1259372, 'vehiclesFlowWarpedOccupancyAuc': 0.7387684, 'vehiclesFlowWarpedOccupancyIou': 0.6549162}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8551329, 'vehiclesObservedIou': 0.5460112, 'vehiclesOccludedAuc': 0.01789539, 'vehiclesOccludedIou': 0.005015005, 'vehiclesFlowEpe': 2.9594712, 'vehiclesFlowWarpedOccupancyAuc': 0.66264576, 'vehiclesFlowWarpedOccupancyIou': 0.5864829}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.87711865, 'vehiclesObservedIou': 0.6048798, 'vehiclesOccludedAuc': 0.29715437, 'vehiclesOccludedIou': 0.0407409, 'vehiclesFlowEpe': 6.4571886, 'vehiclesFlowWarpedOccupancyAuc': 0.76289046, 'vehiclesFlowWarpedOccupancyIou': 0.7180851}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.87174475, 'vehiclesObservedIou': 0.65389323, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.1693475, 'vehiclesFlowWarpedOccupancyAuc': 0.8631778, 'vehiclesFlowWarpedOccupancyIou': 0.79415107}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5756043, 'vehiclesObservedIou': 0.31248268, 'vehiclesOccludedAuc': 0.10622616, 'vehiclesOccludedIou': 0.025345895, 'vehiclesFlowEpe': 2.9865646, 'vehiclesFlowWarpedOccupancyAuc': 0.5798723, 'vehiclesFlowWarpedOccupancyIou': 0.3658899}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.14183646, 'vehiclesObservedIou': 0.06538358, 'vehiclesOccludedAuc': 0.0010207284, 'vehiclesOccludedIou': 0.00022692652, 'vehiclesFlowEpe': 11.247896, 'vehiclesFlowWarpedOccupancyAuc': 0.22021405, 'vehiclesFlowWarpedOccupancyIou': 0.0862272}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.17988637, 'vehiclesObservedIou': 0.089451365, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 5.1464486, 'vehiclesFlowWarpedOccupancyAuc': 0.257529, 'vehiclesFlowWarpedOccupancyIou': 0.102018066}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.920378, 'vehiclesObservedIou': 0.6540793, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 4.912672, 'vehiclesFlowWarpedOccupancyAuc': 0.7686664, 'vehiclesFlowWarpedOccupancyIou': 0.73711497}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9340716, 'vehiclesObservedIou': 0.5421646, 'vehiclesOccludedAuc': 0.025605623, 'vehiclesOccludedIou': 0.010534351, 'vehiclesFlowEpe': 3.6745105, 'vehiclesFlowWarpedOccupancyAuc': 0.74148816, 'vehiclesFlowWarpedOccupancyIou': 0.61152107}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5466512, 'vehiclesObservedIou': 0.27516574, 'vehiclesOccludedAuc': 0.0006414039, 'vehiclesOccludedIou': 0.00015635735, 'vehiclesFlowEpe': 4.673314, 'vehiclesFlowWarpedOccupancyAuc': 0.44369438, 'vehiclesFlowWarpedOccupancyIou': 0.36202192}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6265684, 'vehiclesObservedIou': 0.39781007, 'vehiclesOccludedAuc': 0.142267, 'vehiclesOccludedIou': 0.031298798, 'vehiclesFlowEpe': 8.963805, 'vehiclesFlowWarpedOccupancyAuc': 0.6220821, 'vehiclesFlowWarpedOccupancyIou': 0.36244798}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9533017, 'vehiclesObservedIou': 0.73640424, 'vehiclesOccludedAuc': 0.04380679, 'vehiclesOccludedIou': 0.011309361, 'vehiclesFlowEpe': 3.7501717, 'vehiclesFlowWarpedOccupancyAuc': 0.80686474, 'vehiclesFlowWarpedOccupancyIou': 0.8091669}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9383982, 'vehiclesObservedIou': 0.66778237, 'vehiclesOccludedAuc': 0.008958974, 'vehiclesOccludedIou': 0.004465932, 'vehiclesFlowEpe': 4.902587, 'vehiclesFlowWarpedOccupancyAuc': 0.774963, 'vehiclesFlowWarpedOccupancyIou': 0.7347686}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.79276174, 'vehiclesObservedIou': 0.4430284, 'vehiclesOccludedAuc': 0.052296866, 'vehiclesOccludedIou': 0.026319176, 'vehiclesFlowEpe': 5.389638, 'vehiclesFlowWarpedOccupancyAuc': 0.6181077, 'vehiclesFlowWarpedOccupancyIou': 0.5342439}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.54162335, 'vehiclesObservedIou': 0.2534164, 'vehiclesOccludedAuc': 0.018664459, 'vehiclesOccludedIou': 0.007127599, 'vehiclesFlowEpe': 4.9929743, 'vehiclesFlowWarpedOccupancyAuc': 0.5242039, 'vehiclesFlowWarpedOccupancyIou': 0.3042387}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.22113642, 'vehiclesObservedIou': 0.10661033, 'vehiclesOccludedAuc': 0.00095437525, 'vehiclesOccludedIou': 0.0006273329, 'vehiclesFlowEpe': 6.671605, 'vehiclesFlowWarpedOccupancyAuc': 0.18918246, 'vehiclesFlowWarpedOccupancyIou': 0.122083314}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.9626065, 'vehiclesObservedIou': 0.82552934, 'vehiclesOccludedAuc': 0.0050072307, 'vehiclesOccludedIou': 0.0022076347, 'vehiclesFlowEpe': 9.982922, 'vehiclesFlowWarpedOccupancyAuc': 0.7965069, 'vehiclesFlowWarpedOccupancyIou': 0.7555622}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.7008019618518517, 'vehiclesObservedIou': 0.44176204314814815, 'vehiclesOccludedAuc': 0.05439910578703704, 'vehiclesOccludedIou': 0.011664017087777777, 'vehiclesFlowEpe': 4.692720340740741, 'vehiclesFlowWarpedOccupancyAuc': 0.617428177037037, 'vehiclesFlowWarpedOccupancyIou': 0.5041891624074073}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00139new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 10:43:07.306003: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:43:07.356452: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:43:07.356724: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.09468668, 'vehiclesObservedIou': 0.054956313, 'vehiclesOccludedAuc': 0.0016420148, 'vehiclesOccludedIou': 0.0008488755, 'vehiclesFlowEpe': 6.51619, 'vehiclesFlowWarpedOccupancyAuc': 0.13788053, 'vehiclesFlowWarpedOccupancyIou': 0.03978717}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.94548845, 'vehiclesObservedIou': 0.6890929, 'vehiclesOccludedAuc': 0.0035232832, 'vehiclesOccludedIou': 0.0014967141, 'vehiclesFlowEpe': 2.209469, 'vehiclesFlowWarpedOccupancyAuc': 0.7942985, 'vehiclesFlowWarpedOccupancyIou': 0.78160065}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.41300237, 'vehiclesObservedIou': 0.19291759, 'vehiclesOccludedAuc': 0.001861501, 'vehiclesOccludedIou': 0.0010250865, 'vehiclesFlowEpe': 6.4706316, 'vehiclesFlowWarpedOccupancyAuc': 0.41880468, 'vehiclesFlowWarpedOccupancyIou': 0.24069007}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.8210516, 'vehiclesObservedIou': 0.5152257, 'vehiclesOccludedAuc': 0.12517998, 'vehiclesOccludedIou': 0.028084977, 'vehiclesFlowEpe': 4.248557, 'vehiclesFlowWarpedOccupancyAuc': 0.7376616, 'vehiclesFlowWarpedOccupancyIou': 0.65427625}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.42025575, 'vehiclesObservedIou': 0.23946631, 'vehiclesOccludedAuc': 0.13621564, 'vehiclesOccludedIou': 0.017536204, 'vehiclesFlowEpe': 6.67925, 'vehiclesFlowWarpedOccupancyAuc': 0.40421557, 'vehiclesFlowWarpedOccupancyIou': 0.29448837}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.62796134, 'vehiclesObservedIou': 0.23581882, 'vehiclesOccludedAuc': 0.0007850684, 'vehiclesOccludedIou': 0.00092514494, 'vehiclesFlowEpe': 5.0789795, 'vehiclesFlowWarpedOccupancyAuc': 0.5224949, 'vehiclesFlowWarpedOccupancyIou': 0.2872655}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.85073376, 'vehiclesObservedIou': 0.5034181, 'vehiclesOccludedAuc': 0.06007466, 'vehiclesOccludedIou': 0.019885924, 'vehiclesFlowEpe': 6.256975, 'vehiclesFlowWarpedOccupancyAuc': 0.627233, 'vehiclesFlowWarpedOccupancyIou': 0.49689257}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.6535981, 'vehiclesObservedIou': 0.42005485, 'vehiclesOccludedAuc': 0.060101226, 'vehiclesOccludedIou': 0.015426947, 'vehiclesFlowEpe': 8.036624, 'vehiclesFlowWarpedOccupancyAuc': 0.6086932, 'vehiclesFlowWarpedOccupancyIou': 0.4986062}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.14190543, 'vehiclesObservedIou': 0.060190193, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 4.5667005, 'vehiclesFlowWarpedOccupancyAuc': 0.15439634, 'vehiclesFlowWarpedOccupancyIou': 0.05650426}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7616848, 'vehiclesObservedIou': 0.41278774, 'vehiclesOccludedAuc': 0.01339832, 'vehiclesOccludedIou': 0.0056720935, 'vehiclesFlowEpe': 3.4328768, 'vehiclesFlowWarpedOccupancyAuc': 0.6646819, 'vehiclesFlowWarpedOccupancyIou': 0.49099854}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.11130394, 'vehiclesObservedIou': 0.056893073, 'vehiclesOccludedAuc': 0.003051513, 'vehiclesOccludedIou': 0.0013795854, 'vehiclesFlowEpe': 1.7674313, 'vehiclesFlowWarpedOccupancyAuc': 0.1554506, 'vehiclesFlowWarpedOccupancyIou': 0.055131756}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.82140243, 'vehiclesObservedIou': 0.4951687, 'vehiclesOccludedAuc': 0.0042573577, 'vehiclesOccludedIou': 0.002014859, 'vehiclesFlowEpe': 3.226602, 'vehiclesFlowWarpedOccupancyAuc': 0.72611076, 'vehiclesFlowWarpedOccupancyIou': 0.5995627}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8909992, 'vehiclesObservedIou': 0.59739, 'vehiclesOccludedAuc': 0.04016195, 'vehiclesOccludedIou': 0.013371038, 'vehiclesFlowEpe': 7.0930867, 'vehiclesFlowWarpedOccupancyAuc': 0.7319504, 'vehiclesFlowWarpedOccupancyIou': 0.69970834}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.92172635, 'vehiclesObservedIou': 0.63906616, 'vehiclesOccludedAuc': 0.13362418, 'vehiclesOccludedIou': 0.0217243, 'vehiclesFlowEpe': 3.9385412, 'vehiclesFlowWarpedOccupancyAuc': 0.7844502, 'vehiclesFlowWarpedOccupancyIou': 0.71843755}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.93262076, 'vehiclesObservedIou': 0.617754, 'vehiclesOccludedAuc': 0.016704006, 'vehiclesOccludedIou': 0.005865501, 'vehiclesFlowEpe': 2.4873497, 'vehiclesFlowWarpedOccupancyAuc': 0.7662827, 'vehiclesFlowWarpedOccupancyIou': 0.6962455}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.80722874, 'vehiclesObservedIou': 0.46700436, 'vehiclesOccludedAuc': 0.08091287, 'vehiclesOccludedIou': 0.028101694, 'vehiclesFlowEpe': 4.7474604, 'vehiclesFlowWarpedOccupancyAuc': 0.68964374, 'vehiclesFlowWarpedOccupancyIou': 0.6125061}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8821511, 'vehiclesObservedIou': 0.5865706, 'vehiclesOccludedAuc': 0.057648093, 'vehiclesOccludedIou': 0.0109058535, 'vehiclesFlowEpe': 4.81554, 'vehiclesFlowWarpedOccupancyAuc': 0.75660115, 'vehiclesFlowWarpedOccupancyIou': 0.68670064}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.81509656, 'vehiclesObservedIou': 0.45468512, 'vehiclesOccludedAuc': 0.11128021, 'vehiclesOccludedIou': 0.02502693, 'vehiclesFlowEpe': 3.8476362, 'vehiclesFlowWarpedOccupancyAuc': 0.65417653, 'vehiclesFlowWarpedOccupancyIou': 0.51899344}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.91316986, 'vehiclesObservedIou': 0.65990925, 'vehiclesOccludedAuc': 0.201353, 'vehiclesOccludedIou': 0.043054488, 'vehiclesFlowEpe': 1.1478479, 'vehiclesFlowWarpedOccupancyAuc': 0.82826495, 'vehiclesFlowWarpedOccupancyIou': 0.5831312}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.48041523, 'vehiclesObservedIou': 0.24996705, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 5.1468625, 'vehiclesFlowWarpedOccupancyAuc': 0.37901992, 'vehiclesFlowWarpedOccupancyIou': 0.28490573}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6613043, 'vehiclesObservedIou': 0.30051386, 'vehiclesOccludedAuc': 0.0027147422, 'vehiclesOccludedIou': 0.0021856343, 'vehiclesFlowEpe': 6.320922, 'vehiclesFlowWarpedOccupancyAuc': 0.5104617, 'vehiclesFlowWarpedOccupancyIou': 0.35497397}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.16179179, 'vehiclesObservedIou': 0.075178295, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.9231818, 'vehiclesFlowWarpedOccupancyAuc': 0.26557642, 'vehiclesFlowWarpedOccupancyIou': 0.08363264}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8573258, 'vehiclesObservedIou': 0.53424984, 'vehiclesOccludedAuc': 0.013858344, 'vehiclesOccludedIou': 0.006059843, 'vehiclesFlowEpe': 3.6422825, 'vehiclesFlowWarpedOccupancyAuc': 0.7371075, 'vehiclesFlowWarpedOccupancyIou': 0.59273124}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.67764604, 'vehiclesObservedIou': 0.35259008, 'vehiclesOccludedAuc': 0.18239784, 'vehiclesOccludedIou': 0.034818135, 'vehiclesFlowEpe': 10.603001, 'vehiclesFlowWarpedOccupancyAuc': 0.49116373, 'vehiclesFlowWarpedOccupancyIou': 0.46443737}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.2224658, 'vehiclesObservedIou': 0.11311248, 'vehiclesOccludedAuc': 9.4662435e-05, 'vehiclesOccludedIou': 9.598653e-05, 'vehiclesFlowEpe': 6.1209145, 'vehiclesFlowWarpedOccupancyAuc': 0.2610537, 'vehiclesFlowWarpedOccupancyIou': 0.12687066}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.3836688, 'vehiclesObservedIou': 0.22758913, 'vehiclesOccludedAuc': 0.042693365, 'vehiclesOccludedIou': 0.017162431, 'vehiclesFlowEpe': 5.4067106, 'vehiclesFlowWarpedOccupancyAuc': 0.4597651, 'vehiclesFlowWarpedOccupancyIou': 0.2766558}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.888583, 'vehiclesObservedIou': 0.54753923, 'vehiclesOccludedAuc': 0.0077721383, 'vehiclesOccludedIou': 0.0023940848, 'vehiclesFlowEpe': 10.392843, 'vehiclesFlowWarpedOccupancyAuc': 0.67916095, 'vehiclesFlowWarpedOccupancyIou': 0.6367264}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7644168, 'vehiclesObservedIou': 0.4544759, 'vehiclesOccludedAuc': 0.055064015, 'vehiclesOccludedIou': 0.011119959, 'vehiclesFlowEpe': 10.519861, 'vehiclesFlowWarpedOccupancyAuc': 0.58551633, 'vehiclesFlowWarpedOccupancyIou': 0.52976745}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.09260626, 'vehiclesObservedIou': 0.036913678, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 1.9365163, 'vehiclesFlowWarpedOccupancyAuc': 0.13055274, 'vehiclesFlowWarpedOccupancyIou': 0.052973635}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8205923, 'vehiclesObservedIou': 0.49818492, 'vehiclesOccludedAuc': 0.05780898, 'vehiclesOccludedIou': 0.017926117, 'vehiclesFlowEpe': 6.553148, 'vehiclesFlowWarpedOccupancyAuc': 0.5981068, 'vehiclesFlowWarpedOccupancyIou': 0.5285654}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.94548845, 'vehiclesObservedIou': 0.6890929, 'vehiclesOccludedAuc': 0.0035232832, 'vehiclesOccludedIou': 0.0014967141, 'vehiclesFlowEpe': 2.209469, 'vehiclesFlowWarpedOccupancyAuc': 0.7942985, 'vehiclesFlowWarpedOccupancyIou': 0.78160065}
Average Time: 0.0012 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6278961113333333, 'vehiclesObservedIou': 0.37628947473333335, 'vehiclesOccludedAuc': 0.047139298667833326, 'vehiclesOccludedIou': 0.011136946868999999, 'vehiclesFlowEpe': 5.237799733333333, 'vehiclesFlowWarpedOccupancyAuc': 0.5420258713333335, 'vehiclesFlowWarpedOccupancyIou': 0.4314589033666667}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00146new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 10:43:26.926382: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:43:26.978432: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:43:26.978721: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7457545, 'vehiclesObservedIou': 0.5048845, 'vehiclesOccludedAuc': 0.0032999744, 'vehiclesOccludedIou': 0.0011948119, 'vehiclesFlowEpe': 4.8078775, 'vehiclesFlowWarpedOccupancyAuc': 0.670284, 'vehiclesFlowWarpedOccupancyIou': 0.61750674}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8002269, 'vehiclesObservedIou': 0.41075522, 'vehiclesOccludedAuc': 0.02555557, 'vehiclesOccludedIou': 0.009567502, 'vehiclesFlowEpe': 4.208762, 'vehiclesFlowWarpedOccupancyAuc': 0.62754756, 'vehiclesFlowWarpedOccupancyIou': 0.45214212}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.6754903, 'vehiclesObservedIou': 0.41867185, 'vehiclesOccludedAuc': 0.17390166, 'vehiclesOccludedIou': 0.03534782, 'vehiclesFlowEpe': 3.9790072, 'vehiclesFlowWarpedOccupancyAuc': 0.6094498, 'vehiclesFlowWarpedOccupancyIou': 0.5019674}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.1530699, 'vehiclesObservedIou': 0.058560576, 'vehiclesOccludedAuc': 0.00064461876, 'vehiclesOccludedIou': 0.0001921152, 'vehiclesFlowEpe': 15.418356, 'vehiclesFlowWarpedOccupancyAuc': 0.17491013, 'vehiclesFlowWarpedOccupancyIou': 0.048462886}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.92210716, 'vehiclesObservedIou': 0.6016281, 'vehiclesOccludedAuc': 0.00976178, 'vehiclesOccludedIou': 0.0055820504, 'vehiclesFlowEpe': 13.889266, 'vehiclesFlowWarpedOccupancyAuc': 0.70777965, 'vehiclesFlowWarpedOccupancyIou': 0.68501025}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9022734, 'vehiclesObservedIou': 0.65977407, 'vehiclesOccludedAuc': 0.1496889, 'vehiclesOccludedIou': 0.05490054, 'vehiclesFlowEpe': 5.297194, 'vehiclesFlowWarpedOccupancyAuc': 0.7796632, 'vehiclesFlowWarpedOccupancyIou': 0.72818565}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.35287768, 'vehiclesObservedIou': 0.22149467, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 5.8162093, 'vehiclesFlowWarpedOccupancyAuc': 0.36672506, 'vehiclesFlowWarpedOccupancyIou': 0.23368844}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7950374, 'vehiclesObservedIou': 0.47213766, 'vehiclesOccludedAuc': 0.025257785, 'vehiclesOccludedIou': 0.0065780086, 'vehiclesFlowEpe': 3.9332454, 'vehiclesFlowWarpedOccupancyAuc': 0.68135595, 'vehiclesFlowWarpedOccupancyIou': 0.5478743}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.23155572, 'vehiclesObservedIou': 0.11862156, 'vehiclesOccludedAuc': 0.025390575, 'vehiclesOccludedIou': 0.0052582202, 'vehiclesFlowEpe': 5.105184, 'vehiclesFlowWarpedOccupancyAuc': 0.38774526, 'vehiclesFlowWarpedOccupancyIou': 0.13263115}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7892513, 'vehiclesObservedIou': 0.45240867, 'vehiclesOccludedAuc': 0.0021468822, 'vehiclesOccludedIou': 0.0020353582, 'vehiclesFlowEpe': 3.5910616, 'vehiclesFlowWarpedOccupancyAuc': 0.7074125, 'vehiclesFlowWarpedOccupancyIou': 0.48689374}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9311626, 'vehiclesObservedIou': 0.620069, 'vehiclesOccludedAuc': 0.5534744, 'vehiclesOccludedIou': 0.14209731, 'vehiclesFlowEpe': 1.8637285, 'vehiclesFlowWarpedOccupancyAuc': 0.77137405, 'vehiclesFlowWarpedOccupancyIou': 0.73199254}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.92781425, 'vehiclesObservedIou': 0.7224073, 'vehiclesOccludedAuc': 0.0009378946, 'vehiclesOccludedIou': 0.00047575883, 'vehiclesFlowEpe': 4.094919, 'vehiclesFlowWarpedOccupancyAuc': 0.81289715, 'vehiclesFlowWarpedOccupancyIou': 0.82134473}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.15130328, 'vehiclesObservedIou': 0.069985405, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.1873548, 'vehiclesFlowWarpedOccupancyAuc': 0.4445089, 'vehiclesFlowWarpedOccupancyIou': 0.10254811}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.16438551, 'vehiclesObservedIou': 0.0552156, 'vehiclesOccludedAuc': 0.084777705, 'vehiclesOccludedIou': 0.014613224, 'vehiclesFlowEpe': 3.2530572, 'vehiclesFlowWarpedOccupancyAuc': 0.19940165, 'vehiclesFlowWarpedOccupancyIou': 0.040090304}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.92676294, 'vehiclesObservedIou': 0.5908638, 'vehiclesOccludedAuc': 0.015065419, 'vehiclesOccludedIou': 0.006293672, 'vehiclesFlowEpe': 6.61847, 'vehiclesFlowWarpedOccupancyAuc': 0.7510437, 'vehiclesFlowWarpedOccupancyIou': 0.6901541}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.98149776, 'vehiclesObservedIou': 0.84119254, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.2272987, 'vehiclesFlowWarpedOccupancyAuc': 0.8864229, 'vehiclesFlowWarpedOccupancyIou': 0.9071388}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9680612, 'vehiclesObservedIou': 0.65220207, 'vehiclesOccludedAuc': 0.018394344, 'vehiclesOccludedIou': 0.0054950407, 'vehiclesFlowEpe': 1.94651, 'vehiclesFlowWarpedOccupancyAuc': 0.6784045, 'vehiclesFlowWarpedOccupancyIou': 0.58384305}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.10287036, 'vehiclesObservedIou': 0.043886684, 'vehiclesOccludedAuc': 0.0170083, 'vehiclesOccludedIou': 0.003981483, 'vehiclesFlowEpe': 3.801351, 'vehiclesFlowWarpedOccupancyAuc': 0.20752189, 'vehiclesFlowWarpedOccupancyIou': 0.055605497}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.43737966, 'vehiclesObservedIou': 0.22323658, 'vehiclesOccludedAuc': 0.028894024, 'vehiclesOccludedIou': 0.009188283, 'vehiclesFlowEpe': 4.068294, 'vehiclesFlowWarpedOccupancyAuc': 0.48935634, 'vehiclesFlowWarpedOccupancyIou': 0.23960316}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.819911, 'vehiclesObservedIou': 0.48516124, 'vehiclesOccludedAuc': 0.18045273, 'vehiclesOccludedIou': 0.056590855, 'vehiclesFlowEpe': 4.827362, 'vehiclesFlowWarpedOccupancyAuc': 0.74670416, 'vehiclesFlowWarpedOccupancyIou': 0.5569383}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9625693, 'vehiclesObservedIou': 0.7828712, 'vehiclesOccludedAuc': 0.042523637, 'vehiclesOccludedIou': 0.011786572, 'vehiclesFlowEpe': 8.308835, 'vehiclesFlowWarpedOccupancyAuc': 0.8317104, 'vehiclesFlowWarpedOccupancyIou': 0.79786515}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.17031214, 'vehiclesObservedIou': 0.07860516, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 6.577915, 'vehiclesFlowWarpedOccupancyAuc': 0.23582278, 'vehiclesFlowWarpedOccupancyIou': 0.0907754}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5354236, 'vehiclesObservedIou': 0.26992074, 'vehiclesOccludedAuc': 0.0021935184, 'vehiclesOccludedIou': 0.00067181734, 'vehiclesFlowEpe': 5.1787806, 'vehiclesFlowWarpedOccupancyAuc': 0.50950927, 'vehiclesFlowWarpedOccupancyIou': 0.3346019}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6015908, 'vehiclesObservedIou': 0.33553058, 'vehiclesOccludedAuc': 0.051305227, 'vehiclesOccludedIou': 0.013392781, 'vehiclesFlowEpe': 6.5881915, 'vehiclesFlowWarpedOccupancyAuc': 0.4955503, 'vehiclesFlowWarpedOccupancyIou': 0.35147905}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.19178219, 'vehiclesObservedIou': 0.09762295, 'vehiclesOccludedAuc': 0.0011583102, 'vehiclesOccludedIou': 0.001061289, 'vehiclesFlowEpe': 9.034384, 'vehiclesFlowWarpedOccupancyAuc': 0.2942974, 'vehiclesFlowWarpedOccupancyIou': 0.10564538}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8185208, 'vehiclesObservedIou': 0.5219832, 'vehiclesOccludedAuc': 0.03788782, 'vehiclesOccludedIou': 0.011331297, 'vehiclesFlowEpe': 4.3063583, 'vehiclesFlowWarpedOccupancyAuc': 0.76632535, 'vehiclesFlowWarpedOccupancyIou': 0.66026026}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.98149776, 'vehiclesObservedIou': 0.84119254, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.2272987, 'vehiclesFlowWarpedOccupancyAuc': 0.8864229, 'vehiclesFlowWarpedOccupancyIou': 0.9071388}
Average Time: 0.0012 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6176535249999999, 'vehiclesObservedIou': 0.3965265740384615, 'vehiclesOccludedAuc': 0.05575850286769231, 'vehiclesOccludedIou': 0.01529368497576923, 'vehiclesFlowEpe': 5.4203451, 'vehiclesFlowWarpedOccupancyAuc': 0.5705278403846153, 'vehiclesFlowWarpedOccupancyIou': 0.4424710925769231}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00015new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 10:43:43.976917: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:43:44.035133: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:43:44.035439: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6594469, 'vehiclesObservedIou': 0.45874035, 'vehiclesOccludedAuc': 0.0010929238, 'vehiclesOccludedIou': 0.0007426449, 'vehiclesFlowEpe': 21.984127, 'vehiclesFlowWarpedOccupancyAuc': 0.42455158, 'vehiclesFlowWarpedOccupancyIou': 0.50091183}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7627213, 'vehiclesObservedIou': 0.39139932, 'vehiclesOccludedAuc': 0.013582809, 'vehiclesOccludedIou': 0.005579446, 'vehiclesFlowEpe': 4.6539974, 'vehiclesFlowWarpedOccupancyAuc': 0.562503, 'vehiclesFlowWarpedOccupancyIou': 0.42212465}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.77992654, 'vehiclesObservedIou': 0.49483907, 'vehiclesOccludedAuc': 0.011722768, 'vehiclesOccludedIou': 0.004845017, 'vehiclesFlowEpe': 4.8757253, 'vehiclesFlowWarpedOccupancyAuc': 0.6583858, 'vehiclesFlowWarpedOccupancyIou': 0.5914851}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5225087, 'vehiclesObservedIou': 0.31295013, 'vehiclesOccludedAuc': 0.055024717, 'vehiclesOccludedIou': 0.0132525405, 'vehiclesFlowEpe': 5.9219785, 'vehiclesFlowWarpedOccupancyAuc': 0.5082988, 'vehiclesFlowWarpedOccupancyIou': 0.35584515}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.63357395, 'vehiclesObservedIou': 0.4251351, 'vehiclesOccludedAuc': 0.014413784, 'vehiclesOccludedIou': 0.0040838453, 'vehiclesFlowEpe': 3.9595253, 'vehiclesFlowWarpedOccupancyAuc': 0.60772324, 'vehiclesFlowWarpedOccupancyIou': 0.50129586}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.62689614, 'vehiclesObservedIou': 0.2921589, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.1680276, 'vehiclesFlowWarpedOccupancyAuc': 0.5609796, 'vehiclesFlowWarpedOccupancyIou': 0.36381987}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.61237085, 'vehiclesObservedIou': 0.3710132, 'vehiclesOccludedAuc': 0.14149936, 'vehiclesOccludedIou': 0.027106015, 'vehiclesFlowEpe': 3.6219683, 'vehiclesFlowWarpedOccupancyAuc': 0.71951085, 'vehiclesFlowWarpedOccupancyIou': 0.5434276}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.76437616, 'vehiclesObservedIou': 0.40513784, 'vehiclesOccludedAuc': 0.080363534, 'vehiclesOccludedIou': 0.028715776, 'vehiclesFlowEpe': 8.812336, 'vehiclesFlowWarpedOccupancyAuc': 0.5249758, 'vehiclesFlowWarpedOccupancyIou': 0.40326}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6321141, 'vehiclesObservedIou': 0.34329924, 'vehiclesOccludedAuc': 0.046232533, 'vehiclesOccludedIou': 0.0113754235, 'vehiclesFlowEpe': 5.205141, 'vehiclesFlowWarpedOccupancyAuc': 0.57896465, 'vehiclesFlowWarpedOccupancyIou': 0.3769164}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6999531, 'vehiclesObservedIou': 0.40226585, 'vehiclesOccludedAuc': 0.024558013, 'vehiclesOccludedIou': 0.0069210213, 'vehiclesFlowEpe': 5.6240044, 'vehiclesFlowWarpedOccupancyAuc': 0.48666418, 'vehiclesFlowWarpedOccupancyIou': 0.4107028}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.77362496, 'vehiclesObservedIou': 0.59735525, 'vehiclesOccludedAuc': 0.11945633, 'vehiclesOccludedIou': 0.008363241, 'vehiclesFlowEpe': 2.4854805, 'vehiclesFlowWarpedOccupancyAuc': 0.73671347, 'vehiclesFlowWarpedOccupancyIou': 0.65454584}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8582095, 'vehiclesObservedIou': 0.556613, 'vehiclesOccludedAuc': 0.23987114, 'vehiclesOccludedIou': 0.06391083, 'vehiclesFlowEpe': 4.9689016, 'vehiclesFlowWarpedOccupancyAuc': 0.70984054, 'vehiclesFlowWarpedOccupancyIou': 0.65372807}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.46961534, 'vehiclesObservedIou': 0.25488636, 'vehiclesOccludedAuc': 0.3841702, 'vehiclesOccludedIou': 0.095613964, 'vehiclesFlowEpe': 6.6598573, 'vehiclesFlowWarpedOccupancyAuc': 0.58732015, 'vehiclesFlowWarpedOccupancyIou': 0.35484058}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5490166, 'vehiclesObservedIou': 0.25603646, 'vehiclesOccludedAuc': 0.069378115, 'vehiclesOccludedIou': 0.015462158, 'vehiclesFlowEpe': 5.0563517, 'vehiclesFlowWarpedOccupancyAuc': 0.4307419, 'vehiclesFlowWarpedOccupancyIou': 0.25361392}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.29826316, 'vehiclesObservedIou': 0.12942019, 'vehiclesOccludedAuc': 4.001514e-05, 'vehiclesOccludedIou': 3.9864476e-06, 'vehiclesFlowEpe': 3.1016574, 'vehiclesFlowWarpedOccupancyAuc': 0.60757035, 'vehiclesFlowWarpedOccupancyIou': 0.17497124}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.56168705, 'vehiclesObservedIou': 0.282473, 'vehiclesOccludedAuc': 0.03507238, 'vehiclesOccludedIou': 0.009259487, 'vehiclesFlowEpe': 3.4528015, 'vehiclesFlowWarpedOccupancyAuc': 0.5685595, 'vehiclesFlowWarpedOccupancyIou': 0.33099845}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.91074646, 'vehiclesObservedIou': 0.7317353, 'vehiclesOccludedAuc': 0.0148963835, 'vehiclesOccludedIou': 0.008161237, 'vehiclesFlowEpe': 2.642794, 'vehiclesFlowWarpedOccupancyAuc': 0.83888376, 'vehiclesFlowWarpedOccupancyIou': 0.7953427}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9663198, 'vehiclesObservedIou': 0.74318624, 'vehiclesOccludedAuc': 0.02103239, 'vehiclesOccludedIou': 0.010014005, 'vehiclesFlowEpe': 4.1821966, 'vehiclesFlowWarpedOccupancyAuc': 0.84486693, 'vehiclesFlowWarpedOccupancyIou': 0.8131149}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.24585971, 'vehiclesObservedIou': 0.10805142, 'vehiclesOccludedAuc': 0.001712164, 'vehiclesOccludedIou': 0.002232706, 'vehiclesFlowEpe': 5.333269, 'vehiclesFlowWarpedOccupancyAuc': 0.33003336, 'vehiclesFlowWarpedOccupancyIou': 0.11401818}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.48716998, 'vehiclesObservedIou': 0.22396187, 'vehiclesOccludedAuc': 0.008571887, 'vehiclesOccludedIou': 0.004681045, 'vehiclesFlowEpe': 3.458252, 'vehiclesFlowWarpedOccupancyAuc': 0.51697356, 'vehiclesFlowWarpedOccupancyIou': 0.28475946}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9230554, 'vehiclesObservedIou': 0.6855309, 'vehiclesOccludedAuc': 0.025050305, 'vehiclesOccludedIou': 0.0065598683, 'vehiclesFlowEpe': 7.868417, 'vehiclesFlowWarpedOccupancyAuc': 0.7459015, 'vehiclesFlowWarpedOccupancyIou': 0.75123507}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8443655, 'vehiclesObservedIou': 0.5750212, 'vehiclesOccludedAuc': 0.0137205245, 'vehiclesOccludedIou': 0.003894229, 'vehiclesFlowEpe': 5.513789, 'vehiclesFlowWarpedOccupancyAuc': 0.71734357, 'vehiclesFlowWarpedOccupancyIou': 0.63785213}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8606407, 'vehiclesObservedIou': 0.57085216, 'vehiclesOccludedAuc': 0.23608546, 'vehiclesOccludedIou': 0.030429471, 'vehiclesFlowEpe': 4.7924767, 'vehiclesFlowWarpedOccupancyAuc': 0.7646554, 'vehiclesFlowWarpedOccupancyIou': 0.64099896}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.28210682, 'vehiclesObservedIou': 0.12298271, 'vehiclesOccludedAuc': 0.14162987, 'vehiclesOccludedIou': 0.04161885, 'vehiclesFlowEpe': 8.089214, 'vehiclesFlowWarpedOccupancyAuc': 0.3176548, 'vehiclesFlowWarpedOccupancyIou': 0.1333093}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.17058833, 'vehiclesObservedIou': 0.08753618, 'vehiclesOccludedAuc': 0.0074889064, 'vehiclesOccludedIou': 0.001737022, 'vehiclesFlowEpe': 8.990224, 'vehiclesFlowWarpedOccupancyAuc': 0.20483196, 'vehiclesFlowWarpedOccupancyIou': 0.07481326}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.99362, 'vehiclesObservedIou': 0.8827503, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.8547742, 'vehiclesFlowWarpedOccupancyAuc': 0.93295556, 'vehiclesFlowWarpedOccupancyIou': 0.9346189}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8288569, 'vehiclesObservedIou': 0.46420282, 'vehiclesOccludedAuc': 0.017795114, 'vehiclesOccludedIou': 0.0069885743, 'vehiclesFlowEpe': 3.3179238, 'vehiclesFlowWarpedOccupancyAuc': 0.63811415, 'vehiclesFlowWarpedOccupancyIou': 0.607202}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.99362, 'vehiclesObservedIou': 0.8827503, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.8547742, 'vehiclesFlowWarpedOccupancyAuc': 0.93295556, 'vehiclesFlowWarpedOccupancyIou': 0.9346189}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.656208664814815, 'vehiclesObservedIou': 0.41368645777777785, 'vehiclesOccludedAuc': 0.06386894912370371, 'vehiclesOccludedIou': 0.015242681612874074, 'vehiclesFlowEpe': 5.577600411111111, 'vehiclesFlowWarpedOccupancyAuc': 0.5972414059259259, 'vehiclesFlowWarpedOccupancyIou': 0.4696204525925926}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00080new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 10:44:01.159786: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:44:01.210125: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:44:01.210409: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.23899484, 'vehiclesObservedIou': 0.10533324, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 4.6331387, 'vehiclesFlowWarpedOccupancyAuc': 0.22679856, 'vehiclesFlowWarpedOccupancyIou': 0.13914801}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8769759, 'vehiclesObservedIou': 0.55681896, 'vehiclesOccludedAuc': 0.13804257, 'vehiclesOccludedIou': 0.015051346, 'vehiclesFlowEpe': 3.319856, 'vehiclesFlowWarpedOccupancyAuc': 0.75518334, 'vehiclesFlowWarpedOccupancyIou': 0.6736186}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7538891, 'vehiclesObservedIou': 0.37471792, 'vehiclesOccludedAuc': 0.17999876, 'vehiclesOccludedIou': 0.036395635, 'vehiclesFlowEpe': 3.3687992, 'vehiclesFlowWarpedOccupancyAuc': 0.6250019, 'vehiclesFlowWarpedOccupancyIou': 0.42998317}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.68160886, 'vehiclesObservedIou': 0.36589628, 'vehiclesOccludedAuc': 0.070453525, 'vehiclesOccludedIou': 0.01681109, 'vehiclesFlowEpe': 3.5374422, 'vehiclesFlowWarpedOccupancyAuc': 0.5875983, 'vehiclesFlowWarpedOccupancyIou': 0.3793681}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.5784873, 'vehiclesObservedIou': 0.2820261, 'vehiclesOccludedAuc': 0.0070825545, 'vehiclesOccludedIou': 0.0035307168, 'vehiclesFlowEpe': 3.304077, 'vehiclesFlowWarpedOccupancyAuc': 0.4980425, 'vehiclesFlowWarpedOccupancyIou': 0.30838934}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.17987174, 'vehiclesObservedIou': 0.07828502, 'vehiclesOccludedAuc': 0.000911035, 'vehiclesOccludedIou': 0.0009360929, 'vehiclesFlowEpe': 3.0080335, 'vehiclesFlowWarpedOccupancyAuc': 0.32980216, 'vehiclesFlowWarpedOccupancyIou': 0.09585243}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7168328, 'vehiclesObservedIou': 0.3248371, 'vehiclesOccludedAuc': 0.101858065, 'vehiclesOccludedIou': 0.030008506, 'vehiclesFlowEpe': 6.1808815, 'vehiclesFlowWarpedOccupancyAuc': 0.583848, 'vehiclesFlowWarpedOccupancyIou': 0.41767246}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.5823115, 'vehiclesObservedIou': 0.29391, 'vehiclesOccludedAuc': 0.0029046256, 'vehiclesOccludedIou': 0.001534239, 'vehiclesFlowEpe': 11.894877, 'vehiclesFlowWarpedOccupancyAuc': 0.34842575, 'vehiclesFlowWarpedOccupancyIou': 0.33888283}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.58342844, 'vehiclesObservedIou': 0.3189117, 'vehiclesOccludedAuc': 0.07816914, 'vehiclesOccludedIou': 0.021709234, 'vehiclesFlowEpe': 13.817209, 'vehiclesFlowWarpedOccupancyAuc': 0.47342852, 'vehiclesFlowWarpedOccupancyIou': 0.37438777}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.74772197, 'vehiclesObservedIou': 0.23627976, 'vehiclesOccludedAuc': 0.042221002, 'vehiclesOccludedIou': 0.008711227, 'vehiclesFlowEpe': 3.3753061, 'vehiclesFlowWarpedOccupancyAuc': 0.4226609, 'vehiclesFlowWarpedOccupancyIou': 0.25436157}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.23341188, 'vehiclesObservedIou': 0.11134058, 'vehiclesOccludedAuc': 0.0027870105, 'vehiclesOccludedIou': 0.0013228843, 'vehiclesFlowEpe': 7.7225513, 'vehiclesFlowWarpedOccupancyAuc': 0.28128707, 'vehiclesFlowWarpedOccupancyIou': 0.116610415}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9063643, 'vehiclesObservedIou': 0.6189547, 'vehiclesOccludedAuc': 0.12307115, 'vehiclesOccludedIou': 0.029674152, 'vehiclesFlowEpe': 2.8525643, 'vehiclesFlowWarpedOccupancyAuc': 0.759998, 'vehiclesFlowWarpedOccupancyIou': 0.6893108}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6477206, 'vehiclesObservedIou': 0.3978502, 'vehiclesOccludedAuc': 0.3610022, 'vehiclesOccludedIou': 0.06696873, 'vehiclesFlowEpe': 7.538162, 'vehiclesFlowWarpedOccupancyAuc': 0.63273525, 'vehiclesFlowWarpedOccupancyIou': 0.5489362}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.29801664, 'vehiclesObservedIou': 0.13529286, 'vehiclesOccludedAuc': 0.032575116, 'vehiclesOccludedIou': 0.011613759, 'vehiclesFlowEpe': 12.287026, 'vehiclesFlowWarpedOccupancyAuc': 0.24780755, 'vehiclesFlowWarpedOccupancyIou': 0.14899315}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8365389, 'vehiclesObservedIou': 0.51863164, 'vehiclesOccludedAuc': 0.26532972, 'vehiclesOccludedIou': 0.05253995, 'vehiclesFlowEpe': 2.583583, 'vehiclesFlowWarpedOccupancyAuc': 0.76960224, 'vehiclesFlowWarpedOccupancyIou': 0.5586512}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.75701857, 'vehiclesObservedIou': 0.45195746, 'vehiclesOccludedAuc': 0.13240303, 'vehiclesOccludedIou': 0.036156572, 'vehiclesFlowEpe': 7.497438, 'vehiclesFlowWarpedOccupancyAuc': 0.6319318, 'vehiclesFlowWarpedOccupancyIou': 0.5182135}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.82622445, 'vehiclesObservedIou': 0.5008312, 'vehiclesOccludedAuc': 0.18000562, 'vehiclesOccludedIou': 0.03324695, 'vehiclesFlowEpe': 2.7337794, 'vehiclesFlowWarpedOccupancyAuc': 0.74407595, 'vehiclesFlowWarpedOccupancyIou': 0.5395385}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9545577, 'vehiclesObservedIou': 0.81643873, 'vehiclesOccludedAuc': 0.24667929, 'vehiclesOccludedIou': 0.021408262, 'vehiclesFlowEpe': 2.4164705, 'vehiclesFlowWarpedOccupancyAuc': 0.8865111, 'vehiclesFlowWarpedOccupancyIou': 0.8987206}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8887303, 'vehiclesObservedIou': 0.588096, 'vehiclesOccludedAuc': 0.20614913, 'vehiclesOccludedIou': 0.07185518, 'vehiclesFlowEpe': 3.8286486, 'vehiclesFlowWarpedOccupancyAuc': 0.73859686, 'vehiclesFlowWarpedOccupancyIou': 0.5832014}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6092174, 'vehiclesObservedIou': 0.29659426, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.1245465, 'vehiclesFlowWarpedOccupancyAuc': 0.65579486, 'vehiclesFlowWarpedOccupancyIou': 0.40131634}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.100956, 'vehiclesObservedIou': 0.044630926, 'vehiclesOccludedAuc': 0.11175189, 'vehiclesOccludedIou': 0.010243334, 'vehiclesFlowEpe': 6.57362, 'vehiclesFlowWarpedOccupancyAuc': 0.210799, 'vehiclesFlowWarpedOccupancyIou': 0.050310653}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.72438383, 'vehiclesObservedIou': 0.43847468, 'vehiclesOccludedAuc': 0.043907814, 'vehiclesOccludedIou': 0.012240389, 'vehiclesFlowEpe': 5.761681, 'vehiclesFlowWarpedOccupancyAuc': 0.67433983, 'vehiclesFlowWarpedOccupancyIou': 0.5126591}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.17295425, 'vehiclesObservedIou': 0.05999033, 'vehiclesOccludedAuc': 0.029319216, 'vehiclesOccludedIou': 0.0073169637, 'vehiclesFlowEpe': 7.1866136, 'vehiclesFlowWarpedOccupancyAuc': 0.13166413, 'vehiclesFlowWarpedOccupancyIou': 0.030007532}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.28770676, 'vehiclesObservedIou': 0.14679225, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 6.2883043, 'vehiclesFlowWarpedOccupancyAuc': 0.33616674, 'vehiclesFlowWarpedOccupancyIou': 0.18518755}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9981961, 'vehiclesObservedIou': 0.8747995, 'vehiclesOccludedAuc': 0.4882784, 'vehiclesOccludedIou': 0.10854381, 'vehiclesFlowEpe': 1.5124741, 'vehiclesFlowWarpedOccupancyAuc': 0.91226983, 'vehiclesFlowWarpedOccupancyIou': 0.9093056}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.57839566, 'vehiclesObservedIou': 0.29544932, 'vehiclesOccludedAuc': 0.0042293207, 'vehiclesOccludedIou': 0.0007685411, 'vehiclesFlowEpe': 8.953279, 'vehiclesFlowWarpedOccupancyAuc': 0.36549872, 'vehiclesFlowWarpedOccupancyIou': 0.25622135}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.9981961, 'vehiclesObservedIou': 0.8747995, 'vehiclesOccludedAuc': 0.4882784, 'vehiclesOccludedIou': 0.10854381, 'vehiclesFlowEpe': 1.5124741, 'vehiclesFlowWarpedOccupancyAuc': 0.91226983, 'vehiclesFlowWarpedOccupancyIou': 0.9093056}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6061736842307692, 'vehiclesObservedIou': 0.35512079676923075, 'vehiclesOccludedAuc': 0.10958193016538462, 'vehiclesOccludedIou': 0.023022598607692308, 'vehiclesFlowEpe': 5.588475453846154, 'vehiclesFlowWarpedOccupancyAuc': 0.5319180330769231, 'vehiclesFlowWarpedOccupancyIou': 0.39841723730769235}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00038new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 10:44:17.520899: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:44:17.571513: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:44:17.571788: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.76354986, 'vehiclesObservedIou': 0.4277275, 'vehiclesOccludedAuc': 0.12145352, 'vehiclesOccludedIou': 0.025042227, 'vehiclesFlowEpe': 4.2996044, 'vehiclesFlowWarpedOccupancyAuc': 0.6320223, 'vehiclesFlowWarpedOccupancyIou': 0.52858436}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8397417, 'vehiclesObservedIou': 0.47830102, 'vehiclesOccludedAuc': 0.011827928, 'vehiclesOccludedIou': 0.0055831773, 'vehiclesFlowEpe': 2.9516668, 'vehiclesFlowWarpedOccupancyAuc': 0.74801505, 'vehiclesFlowWarpedOccupancyIou': 0.5669709}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.973126, 'vehiclesObservedIou': 0.7233967, 'vehiclesOccludedAuc': 5.9802962e-05, 'vehiclesOccludedIou': 7.033347e-05, 'vehiclesFlowEpe': 1.6129779, 'vehiclesFlowWarpedOccupancyAuc': 0.8653243, 'vehiclesFlowWarpedOccupancyIou': 0.80244577}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.26033577, 'vehiclesObservedIou': 0.09022819, 'vehiclesOccludedAuc': 0.00725722, 'vehiclesOccludedIou': 0.0031814259, 'vehiclesFlowEpe': 6.1353006, 'vehiclesFlowWarpedOccupancyAuc': 0.48903, 'vehiclesFlowWarpedOccupancyIou': 0.07517639}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9862691, 'vehiclesObservedIou': 0.8068085, 'vehiclesOccludedAuc': 0.015275728, 'vehiclesOccludedIou': 0.0075506438, 'vehiclesFlowEpe': 4.231553, 'vehiclesFlowWarpedOccupancyAuc': 0.8580097, 'vehiclesFlowWarpedOccupancyIou': 0.8390085}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.44514412, 'vehiclesObservedIou': 0.228278, 'vehiclesOccludedAuc': 0.05623872, 'vehiclesOccludedIou': 0.011308511, 'vehiclesFlowEpe': 10.173365, 'vehiclesFlowWarpedOccupancyAuc': 0.34989542, 'vehiclesFlowWarpedOccupancyIou': 0.24900308}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9121171, 'vehiclesObservedIou': 0.6912556, 'vehiclesOccludedAuc': 0.12470022, 'vehiclesOccludedIou': 0.019423034, 'vehiclesFlowEpe': 4.4285736, 'vehiclesFlowWarpedOccupancyAuc': 0.7892978, 'vehiclesFlowWarpedOccupancyIou': 0.72337276}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7701689, 'vehiclesObservedIou': 0.4170466, 'vehiclesOccludedAuc': 0.056395754, 'vehiclesOccludedIou': 0.012511688, 'vehiclesFlowEpe': 3.4462843, 'vehiclesFlowWarpedOccupancyAuc': 0.64056456, 'vehiclesFlowWarpedOccupancyIou': 0.470097}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8963987, 'vehiclesObservedIou': 0.5048673, 'vehiclesOccludedAuc': 0.0064768493, 'vehiclesOccludedIou': 0.0024086363, 'vehiclesFlowEpe': 2.369481, 'vehiclesFlowWarpedOccupancyAuc': 0.78434706, 'vehiclesFlowWarpedOccupancyIou': 0.62111074}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.9327396, 'vehiclesObservedIou': 0.7360035, 'vehiclesOccludedAuc': 0.0021904537, 'vehiclesOccludedIou': 0.0015149403, 'vehiclesFlowEpe': 4.088037, 'vehiclesFlowWarpedOccupancyAuc': 0.80790484, 'vehiclesFlowWarpedOccupancyIou': 0.7410098}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.17096338, 'vehiclesObservedIou': 0.09868854, 'vehiclesOccludedAuc': 0.00047384872, 'vehiclesOccludedIou': 0.00011107711, 'vehiclesFlowEpe': 1.6521096, 'vehiclesFlowWarpedOccupancyAuc': 0.33792272, 'vehiclesFlowWarpedOccupancyIou': 0.10481444}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.44307148, 'vehiclesObservedIou': 0.2093784, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 6.0006285, 'vehiclesFlowWarpedOccupancyAuc': 0.31653526, 'vehiclesFlowWarpedOccupancyIou': 0.27634192}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8312982, 'vehiclesObservedIou': 0.583656, 'vehiclesOccludedAuc': 1.773961e-05, 'vehiclesOccludedIou': 5.5993733e-05, 'vehiclesFlowEpe': 1.8620316, 'vehiclesFlowWarpedOccupancyAuc': 0.8149134, 'vehiclesFlowWarpedOccupancyIou': 0.67724437}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5022864, 'vehiclesObservedIou': 0.28416547, 'vehiclesOccludedAuc': 0.15642259, 'vehiclesOccludedIou': 0.03089382, 'vehiclesFlowEpe': 4.8453903, 'vehiclesFlowWarpedOccupancyAuc': 0.5704138, 'vehiclesFlowWarpedOccupancyIou': 0.42273802}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9351136, 'vehiclesObservedIou': 0.77965975, 'vehiclesOccludedAuc': 0.030504368, 'vehiclesOccludedIou': 0.010713803, 'vehiclesFlowEpe': 3.434875, 'vehiclesFlowWarpedOccupancyAuc': 0.8232311, 'vehiclesFlowWarpedOccupancyIou': 0.7734525}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8383471, 'vehiclesObservedIou': 0.48382694, 'vehiclesOccludedAuc': 0.2575993, 'vehiclesOccludedIou': 0.06719924, 'vehiclesFlowEpe': 4.137601, 'vehiclesFlowWarpedOccupancyAuc': 0.7636596, 'vehiclesFlowWarpedOccupancyIou': 0.58746046}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.86050767, 'vehiclesObservedIou': 0.5752755, 'vehiclesOccludedAuc': 0.8137877, 'vehiclesOccludedIou': 0.04542405, 'vehiclesFlowEpe': 2.2662601, 'vehiclesFlowWarpedOccupancyAuc': 0.8100367, 'vehiclesFlowWarpedOccupancyIou': 0.708092}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.15209879, 'vehiclesObservedIou': 0.06671384, 'vehiclesOccludedAuc': 0.038781293, 'vehiclesOccludedIou': 0.006248237, 'vehiclesFlowEpe': 3.8062227, 'vehiclesFlowWarpedOccupancyAuc': 0.23072311, 'vehiclesFlowWarpedOccupancyIou': 0.06834147}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.90300846, 'vehiclesObservedIou': 0.66936713, 'vehiclesOccludedAuc': 0.1974014, 'vehiclesOccludedIou': 0.02765658, 'vehiclesFlowEpe': 4.4996567, 'vehiclesFlowWarpedOccupancyAuc': 0.8014504, 'vehiclesFlowWarpedOccupancyIou': 0.7874612}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7967877, 'vehiclesObservedIou': 0.46231067, 'vehiclesOccludedAuc': 0.11229082, 'vehiclesOccludedIou': 0.018409675, 'vehiclesFlowEpe': 4.2949924, 'vehiclesFlowWarpedOccupancyAuc': 0.5999113, 'vehiclesFlowWarpedOccupancyIou': 0.4359853}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.873831, 'vehiclesObservedIou': 0.6079395, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 4.6572666, 'vehiclesFlowWarpedOccupancyAuc': 0.7027041, 'vehiclesFlowWarpedOccupancyIou': 0.71030027}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.99009836, 'vehiclesObservedIou': 0.8214419, 'vehiclesOccludedAuc': 0.022595134, 'vehiclesOccludedIou': 0.0072032595, 'vehiclesFlowEpe': 4.783971, 'vehiclesFlowWarpedOccupancyAuc': 0.7925054, 'vehiclesFlowWarpedOccupancyIou': 0.6904242}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.57343286, 'vehiclesObservedIou': 0.28528485, 'vehiclesOccludedAuc': 0.020982884, 'vehiclesOccludedIou': 0.008993839, 'vehiclesFlowEpe': 3.5453835, 'vehiclesFlowWarpedOccupancyAuc': 0.59170574, 'vehiclesFlowWarpedOccupancyIou': 0.32620925}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.82751423, 'vehiclesObservedIou': 0.49274144, 'vehiclesOccludedAuc': 0.054694414, 'vehiclesOccludedIou': 0.022039535, 'vehiclesFlowEpe': 4.335897, 'vehiclesFlowWarpedOccupancyAuc': 0.7319776, 'vehiclesFlowWarpedOccupancyIou': 0.56984645}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7131709, 'vehiclesObservedIou': 0.3418007, 'vehiclesOccludedAuc': 0.123961255, 'vehiclesOccludedIou': 0.046090122, 'vehiclesFlowEpe': 2.7710571, 'vehiclesFlowWarpedOccupancyAuc': 0.67297536, 'vehiclesFlowWarpedOccupancyIou': 0.40516475}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9316329, 'vehiclesObservedIou': 0.6435704, 'vehiclesOccludedAuc': 0.067185506, 'vehiclesOccludedIou': 0.013177186, 'vehiclesFlowEpe': 4.6900196, 'vehiclesFlowWarpedOccupancyAuc': 0.78146935, 'vehiclesFlowWarpedOccupancyIou': 0.6930687}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6822106, 'vehiclesObservedIou': 0.36108226, 'vehiclesOccludedAuc': 0.07120377, 'vehiclesOccludedIou': 0.022561794, 'vehiclesFlowEpe': 6.502778, 'vehiclesFlowWarpedOccupancyAuc': 0.50258815, 'vehiclesFlowWarpedOccupancyIou': 0.32959127}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.99009836, 'vehiclesObservedIou': 0.8214419, 'vehiclesOccludedAuc': 0.022595134, 'vehiclesOccludedIou': 0.0072032595, 'vehiclesFlowEpe': 4.783971, 'vehiclesFlowWarpedOccupancyAuc': 0.7925054, 'vehiclesFlowWarpedOccupancyIou': 0.6904242}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.7335172029629631, 'vehiclesObservedIou': 0.47669689629629625, 'vehiclesOccludedAuc': 0.08776956364044446, 'vehiclesOccludedIou': 0.015384178830111114, 'vehiclesFlowEpe': 4.141592011111111, 'vehiclesFlowWarpedOccupancyAuc': 0.65959756, 'vehiclesFlowWarpedOccupancyIou': 0.5253079951851852}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00029new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 10:44:34.624839: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:44:34.676425: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:44:34.676712: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.2682075, 'vehiclesObservedIou': 0.13466375, 'vehiclesOccludedAuc': 0.0013311298, 'vehiclesOccludedIou': 0.0011402621, 'vehiclesFlowEpe': 8.584983, 'vehiclesFlowWarpedOccupancyAuc': 0.27950037, 'vehiclesFlowWarpedOccupancyIou': 0.12475156}
Time: 0.0016 seconds, Metrics: {'vehiclesObservedAuc': 0.7050617, 'vehiclesObservedIou': 0.41953263, 'vehiclesOccludedAuc': 0.04735202, 'vehiclesOccludedIou': 0.009975426, 'vehiclesFlowEpe': 5.124735, 'vehiclesFlowWarpedOccupancyAuc': 0.60451835, 'vehiclesFlowWarpedOccupancyIou': 0.5027787}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7826528, 'vehiclesObservedIou': 0.4990832, 'vehiclesOccludedAuc': 0.005007497, 'vehiclesOccludedIou': 0.0018031623, 'vehiclesFlowEpe': 2.7032187, 'vehiclesFlowWarpedOccupancyAuc': 0.7386675, 'vehiclesFlowWarpedOccupancyIou': 0.6086435}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.45686737, 'vehiclesObservedIou': 0.1873155, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.0540342, 'vehiclesFlowWarpedOccupancyAuc': 0.52821696, 'vehiclesFlowWarpedOccupancyIou': 0.21004406}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.5575664, 'vehiclesObservedIou': 0.24246754, 'vehiclesOccludedAuc': 0.0027998663, 'vehiclesOccludedIou': 0.0011209705, 'vehiclesFlowEpe': 7.8357124, 'vehiclesFlowWarpedOccupancyAuc': 0.48904297, 'vehiclesFlowWarpedOccupancyIou': 0.32899985}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.5852061, 'vehiclesObservedIou': 0.27485532, 'vehiclesOccludedAuc': 0.14368463, 'vehiclesOccludedIou': 0.026563412, 'vehiclesFlowEpe': 3.83, 'vehiclesFlowWarpedOccupancyAuc': 0.55528164, 'vehiclesFlowWarpedOccupancyIou': 0.30509976}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.70290107, 'vehiclesObservedIou': 0.37550068, 'vehiclesOccludedAuc': 0.14572209, 'vehiclesOccludedIou': 0.036355324, 'vehiclesFlowEpe': 3.743729, 'vehiclesFlowWarpedOccupancyAuc': 0.7089433, 'vehiclesFlowWarpedOccupancyIou': 0.46260217}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7477489, 'vehiclesObservedIou': 0.4119131, 'vehiclesOccludedAuc': 0.0046706684, 'vehiclesOccludedIou': 0.0020822089, 'vehiclesFlowEpe': 2.8331807, 'vehiclesFlowWarpedOccupancyAuc': 0.64234775, 'vehiclesFlowWarpedOccupancyIou': 0.5038857}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.13223293, 'vehiclesObservedIou': 0.060427614, 'vehiclesOccludedAuc': 0.00032448853, 'vehiclesOccludedIou': 0.0005920268, 'vehiclesFlowEpe': 3.9396942, 'vehiclesFlowWarpedOccupancyAuc': 0.17132975, 'vehiclesFlowWarpedOccupancyIou': 0.0704281}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7838413, 'vehiclesObservedIou': 0.4282749, 'vehiclesOccludedAuc': 0.18562394, 'vehiclesOccludedIou': 0.049352042, 'vehiclesFlowEpe': 3.3699958, 'vehiclesFlowWarpedOccupancyAuc': 0.6656967, 'vehiclesFlowWarpedOccupancyIou': 0.44850674}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.85964024, 'vehiclesObservedIou': 0.5569971, 'vehiclesOccludedAuc': 0.04802378, 'vehiclesOccludedIou': 0.013439124, 'vehiclesFlowEpe': 1.908588, 'vehiclesFlowWarpedOccupancyAuc': 0.75537014, 'vehiclesFlowWarpedOccupancyIou': 0.59781224}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.34302127, 'vehiclesObservedIou': 0.15602678, 'vehiclesOccludedAuc': 0.13364413, 'vehiclesOccludedIou': 0.008582035, 'vehiclesFlowEpe': 10.97463, 'vehiclesFlowWarpedOccupancyAuc': 0.29454193, 'vehiclesFlowWarpedOccupancyIou': 0.19184503}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6803893, 'vehiclesObservedIou': 0.4091039, 'vehiclesOccludedAuc': 0.11525699, 'vehiclesOccludedIou': 0.039396066, 'vehiclesFlowEpe': 4.9262166, 'vehiclesFlowWarpedOccupancyAuc': 0.71034193, 'vehiclesFlowWarpedOccupancyIou': 0.52316904}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9010179, 'vehiclesObservedIou': 0.62400347, 'vehiclesOccludedAuc': 0.0013233995, 'vehiclesOccludedIou': 9.6247706e-05, 'vehiclesFlowEpe': 4.175442, 'vehiclesFlowWarpedOccupancyAuc': 0.7779936, 'vehiclesFlowWarpedOccupancyIou': 0.70719445}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.83499956, 'vehiclesObservedIou': 0.5466858, 'vehiclesOccludedAuc': 0.03740367, 'vehiclesOccludedIou': 0.010134986, 'vehiclesFlowEpe': 5.175992, 'vehiclesFlowWarpedOccupancyAuc': 0.69505525, 'vehiclesFlowWarpedOccupancyIou': 0.58125854}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.80888855, 'vehiclesObservedIou': 0.46966368, 'vehiclesOccludedAuc': 0.20684972, 'vehiclesOccludedIou': 0.05412149, 'vehiclesFlowEpe': 2.5723705, 'vehiclesFlowWarpedOccupancyAuc': 0.6928882, 'vehiclesFlowWarpedOccupancyIou': 0.5341482}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.82026047, 'vehiclesObservedIou': 0.49437988, 'vehiclesOccludedAuc': 0.18523508, 'vehiclesOccludedIou': 0.039490093, 'vehiclesFlowEpe': 4.289136, 'vehiclesFlowWarpedOccupancyAuc': 0.6737575, 'vehiclesFlowWarpedOccupancyIou': 0.5705693}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.16346453, 'vehiclesObservedIou': 0.07408852, 'vehiclesOccludedAuc': 0.0019548945, 'vehiclesOccludedIou': 0.0016324817, 'vehiclesFlowEpe': 7.8381424, 'vehiclesFlowWarpedOccupancyAuc': 0.2044448, 'vehiclesFlowWarpedOccupancyIou': 0.06248433}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.16436502, 'vehiclesObservedIou': 0.061555665, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 8.214815, 'vehiclesFlowWarpedOccupancyAuc': 0.23046096, 'vehiclesFlowWarpedOccupancyIou': 0.07202412}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.93819904, 'vehiclesObservedIou': 0.73216164, 'vehiclesOccludedAuc': 0.025683973, 'vehiclesOccludedIou': 0.0069751823, 'vehiclesFlowEpe': 4.3024836, 'vehiclesFlowWarpedOccupancyAuc': 0.77282584, 'vehiclesFlowWarpedOccupancyIou': 0.7836974}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.81084, 'vehiclesObservedIou': 0.57592314, 'vehiclesOccludedAuc': 0.014044473, 'vehiclesOccludedIou': 0.004770754, 'vehiclesFlowEpe': 3.770378, 'vehiclesFlowWarpedOccupancyAuc': 0.735475, 'vehiclesFlowWarpedOccupancyIou': 0.6301901}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.20156924, 'vehiclesObservedIou': 0.061055217, 'vehiclesOccludedAuc': 0.0006359972, 'vehiclesOccludedIou': 0.00010608621, 'vehiclesFlowEpe': 4.3359733, 'vehiclesFlowWarpedOccupancyAuc': 0.16577703, 'vehiclesFlowWarpedOccupancyIou': 0.062180504}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7980827, 'vehiclesObservedIou': 0.5453586, 'vehiclesOccludedAuc': 0.04504199, 'vehiclesOccludedIou': 0.0036751456, 'vehiclesFlowEpe': 7.70256, 'vehiclesFlowWarpedOccupancyAuc': 0.5616585, 'vehiclesFlowWarpedOccupancyIou': 0.5535421}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.1238522, 'vehiclesObservedIou': 0.061075263, 'vehiclesOccludedAuc': 0.12334212, 'vehiclesOccludedIou': 0.020682756, 'vehiclesFlowEpe': 7.969063, 'vehiclesFlowWarpedOccupancyAuc': 0.26380417, 'vehiclesFlowWarpedOccupancyIou': 0.06130221}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6093163, 'vehiclesObservedIou': 0.28857926, 'vehiclesOccludedAuc': 0.05431377, 'vehiclesOccludedIou': 0.017910061, 'vehiclesFlowEpe': 4.1230226, 'vehiclesFlowWarpedOccupancyAuc': 0.60292417, 'vehiclesFlowWarpedOccupancyIou': 0.35241243}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8452182, 'vehiclesObservedIou': 0.49355227, 'vehiclesOccludedAuc': 0.1556305, 'vehiclesOccludedIou': 0.029973486, 'vehiclesFlowEpe': 9.121969, 'vehiclesFlowWarpedOccupancyAuc': 0.66827565, 'vehiclesFlowWarpedOccupancyIou': 0.5328625}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9686473, 'vehiclesObservedIou': 0.7552517, 'vehiclesOccludedAuc': 0.0033642258, 'vehiclesOccludedIou': 0.001882508, 'vehiclesFlowEpe': 6.8291235, 'vehiclesFlowWarpedOccupancyAuc': 0.82246834, 'vehiclesFlowWarpedOccupancyIou': 0.8036069}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6506215, 'vehiclesObservedIou': 0.32179493, 'vehiclesOccludedAuc': 0.020867717, 'vehiclesOccludedIou': 0.00715473, 'vehiclesFlowEpe': 2.9625924, 'vehiclesFlowWarpedOccupancyAuc': 0.59754264, 'vehiclesFlowWarpedOccupancyIou': 0.44136786}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.84333855, 'vehiclesObservedIou': 0.46658576, 'vehiclesOccludedAuc': 0.15370256, 'vehiclesOccludedIou': 0.024908861, 'vehiclesFlowEpe': 7.4972706, 'vehiclesFlowWarpedOccupancyAuc': 0.5629334, 'vehiclesFlowWarpedOccupancyIou': 0.5176941}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.694023, 'vehiclesObservedIou': 0.46482232, 'vehiclesOccludedAuc': 0.10197455, 'vehiclesOccludedIou': 0.019906448, 'vehiclesFlowEpe': 3.0757759, 'vehiclesFlowWarpedOccupancyAuc': 0.6547269, 'vehiclesFlowWarpedOccupancyIou': 0.4545702}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.45433146, 'vehiclesObservedIou': 0.19144104, 'vehiclesOccludedAuc': 0.0034862447, 'vehiclesOccludedIou': 0.0017483507, 'vehiclesFlowEpe': 8.502625, 'vehiclesFlowWarpedOccupancyAuc': 0.39633727, 'vehiclesFlowWarpedOccupancyIou': 0.22072254}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9415451, 'vehiclesObservedIou': 0.6047362, 'vehiclesOccludedAuc': 0.014570567, 'vehiclesOccludedIou': 0.0038525953, 'vehiclesFlowEpe': 10.101378, 'vehiclesFlowWarpedOccupancyAuc': 0.70662904, 'vehiclesFlowWarpedOccupancyIou': 0.6277473}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.85736835, 'vehiclesObservedIou': 0.5542225, 'vehiclesOccludedAuc': 0.09467803, 'vehiclesOccludedIou': 0.014307275, 'vehiclesFlowEpe': 4.495578, 'vehiclesFlowWarpedOccupancyAuc': 0.7137088, 'vehiclesFlowWarpedOccupancyIou': 0.64016753}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.84544146, 'vehiclesObservedIou': 0.42775226, 'vehiclesOccludedAuc': 0.016007293, 'vehiclesOccludedIou': 0.0032656607, 'vehiclesFlowEpe': 3.521429, 'vehiclesFlowWarpedOccupancyAuc': 0.6773659, 'vehiclesFlowWarpedOccupancyIou': 0.48861647}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.9686473, 'vehiclesObservedIou': 0.7552517, 'vehiclesOccludedAuc': 0.0033642258, 'vehiclesOccludedIou': 0.001882508, 'vehiclesFlowEpe': 6.8291235, 'vehiclesFlowWarpedOccupancyAuc': 0.82246834, 'vehiclesFlowWarpedOccupancyIou': 0.8036069}
Average Time: 0.0012 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6435508032352941, 'vehiclesObservedIou': 0.38149562144117644, 'vehiclesOccludedAuc': 0.061575058962647054, 'vehiclesOccludedIou': 0.013441095818117648, 'vehiclesFlowEpe': 5.394289335294118, 'vehiclesFlowWarpedOccupancyAuc': 0.5682603602941176, 'vehiclesFlowWarpedOccupancyIou': 0.4287331039411764}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00011new.tfrecords...
2024-05-28 10:44:56.862657: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:44:56.914333: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:44:56.914620: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.65112466, 'vehiclesObservedIou': 0.32359394, 'vehiclesOccludedAuc': 0.016345074, 'vehiclesOccludedIou': 0.0051797414, 'vehiclesFlowEpe': 3.4130845, 'vehiclesFlowWarpedOccupancyAuc': 0.5359306, 'vehiclesFlowWarpedOccupancyIou': 0.3269306}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.58973914, 'vehiclesObservedIou': 0.2977725, 'vehiclesOccludedAuc': 0.172169, 'vehiclesOccludedIou': 0.026331138, 'vehiclesFlowEpe': 5.041049, 'vehiclesFlowWarpedOccupancyAuc': 0.5646804, 'vehiclesFlowWarpedOccupancyIou': 0.44253358}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.95067465, 'vehiclesObservedIou': 0.7986099, 'vehiclesOccludedAuc': 0.04652495, 'vehiclesOccludedIou': 0.011378268, 'vehiclesFlowEpe': 2.978545, 'vehiclesFlowWarpedOccupancyAuc': 0.8853564, 'vehiclesFlowWarpedOccupancyIou': 0.86204165}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.31778952, 'vehiclesObservedIou': 0.15372266, 'vehiclesOccludedAuc': 0.00078961614, 'vehiclesOccludedIou': 0.0012090412, 'vehiclesFlowEpe': 7.968801, 'vehiclesFlowWarpedOccupancyAuc': 0.36891484, 'vehiclesFlowWarpedOccupancyIou': 0.18464108}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.77249897, 'vehiclesObservedIou': 0.39960313, 'vehiclesOccludedAuc': 0.090113804, 'vehiclesOccludedIou': 0.03317618, 'vehiclesFlowEpe': 3.9451652, 'vehiclesFlowWarpedOccupancyAuc': 0.58034855, 'vehiclesFlowWarpedOccupancyIou': 0.41016018}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.6455645, 'vehiclesObservedIou': 0.44951293, 'vehiclesOccludedAuc': 0.028031785, 'vehiclesOccludedIou': 0.010445999, 'vehiclesFlowEpe': 5.1520195, 'vehiclesFlowWarpedOccupancyAuc': 0.623384, 'vehiclesFlowWarpedOccupancyIou': 0.4708966}
DataLossError encountered. Skipping the corrupted record.
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.95067465, 'vehiclesObservedIou': 0.7986099, 'vehiclesOccludedAuc': 0.04652495, 'vehiclesOccludedIou': 0.011378268, 'vehiclesFlowEpe': 2.978545, 'vehiclesFlowWarpedOccupancyAuc': 0.8853564, 'vehiclesFlowWarpedOccupancyIou': 0.86204165}
2024-05-28 10:45:01.029527: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:45:01.080602: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:45:01.080876: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
Average Time: 0.0012 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6545652399999999, 'vehiclesObservedIou': 0.40380251, 'vehiclesOccludedAuc': 0.058995704856666664, 'vehiclesOccludedIou': 0.014620061266666665, 'vehiclesFlowEpe': 4.749777366666667, 'vehiclesFlowWarpedOccupancyAuc': 0.5931024650000001, 'vehiclesFlowWarpedOccupancyIou': 0.4495339483333334}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00128new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.8980496, 'vehiclesObservedIou': 0.5109506, 'vehiclesOccludedAuc': 0.4762151, 'vehiclesOccludedIou': 0.078489736, 'vehiclesFlowEpe': 6.59242, 'vehiclesFlowWarpedOccupancyAuc': 0.7103159, 'vehiclesFlowWarpedOccupancyIou': 0.5928702}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.67601955, 'vehiclesObservedIou': 0.3849057, 'vehiclesOccludedAuc': 0.17854823, 'vehiclesOccludedIou': 0.025866589, 'vehiclesFlowEpe': 3.9738812, 'vehiclesFlowWarpedOccupancyAuc': 0.58443725, 'vehiclesFlowWarpedOccupancyIou': 0.41864097}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9498227, 'vehiclesObservedIou': 0.7629062, 'vehiclesOccludedAuc': 0.017462116, 'vehiclesOccludedIou': 0.01026092, 'vehiclesFlowEpe': 2.523508, 'vehiclesFlowWarpedOccupancyAuc': 0.89258784, 'vehiclesFlowWarpedOccupancyIou': 0.83756787}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9109065, 'vehiclesObservedIou': 0.6113709, 'vehiclesOccludedAuc': 0.014208511, 'vehiclesOccludedIou': 0.0024012022, 'vehiclesFlowEpe': 3.0800369, 'vehiclesFlowWarpedOccupancyAuc': 0.8076372, 'vehiclesFlowWarpedOccupancyIou': 0.70307213}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.978972, 'vehiclesObservedIou': 0.7790634, 'vehiclesOccludedAuc': 0.0040804693, 'vehiclesOccludedIou': 0.0016688039, 'vehiclesFlowEpe': 6.37957, 'vehiclesFlowWarpedOccupancyAuc': 0.88415074, 'vehiclesFlowWarpedOccupancyIou': 0.8539368}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.612943, 'vehiclesObservedIou': 0.32721055, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.2560556, 'vehiclesFlowWarpedOccupancyAuc': 0.57059944, 'vehiclesFlowWarpedOccupancyIou': 0.3977916}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.62418836, 'vehiclesObservedIou': 0.38967872, 'vehiclesOccludedAuc': 0.072037265, 'vehiclesOccludedIou': 0.014765064, 'vehiclesFlowEpe': 11.638108, 'vehiclesFlowWarpedOccupancyAuc': 0.49421203, 'vehiclesFlowWarpedOccupancyIou': 0.2815416}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.36756265, 'vehiclesObservedIou': 0.1926309, 'vehiclesOccludedAuc': 0.26992404, 'vehiclesOccludedIou': 0.026767284, 'vehiclesFlowEpe': 4.6068735, 'vehiclesFlowWarpedOccupancyAuc': 0.5329022, 'vehiclesFlowWarpedOccupancyIou': 0.37471893}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.40936422, 'vehiclesObservedIou': 0.21056804, 'vehiclesOccludedAuc': 0.012548337, 'vehiclesOccludedIou': 0.0039848243, 'vehiclesFlowEpe': 3.7004325, 'vehiclesFlowWarpedOccupancyAuc': 0.49128526, 'vehiclesFlowWarpedOccupancyIou': 0.19607456}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.42767534, 'vehiclesObservedIou': 0.2020952, 'vehiclesOccludedAuc': 0.023418754, 'vehiclesOccludedIou': 0.008193226, 'vehiclesFlowEpe': 4.377717, 'vehiclesFlowWarpedOccupancyAuc': 0.3752028, 'vehiclesFlowWarpedOccupancyIou': 0.24395864}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.2337903, 'vehiclesObservedIou': 0.11107759, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 4.2099967, 'vehiclesFlowWarpedOccupancyAuc': 0.3383773, 'vehiclesFlowWarpedOccupancyIou': 0.16337639}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5940384, 'vehiclesObservedIou': 0.4165327, 'vehiclesOccludedAuc': 0.21268964, 'vehiclesOccludedIou': 0.064093225, 'vehiclesFlowEpe': 5.7589903, 'vehiclesFlowWarpedOccupancyAuc': 0.6572951, 'vehiclesFlowWarpedOccupancyIou': 0.55484176}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.80197114, 'vehiclesObservedIou': 0.50702024, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.2829406, 'vehiclesFlowWarpedOccupancyAuc': 0.74016774, 'vehiclesFlowWarpedOccupancyIou': 0.6372839}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.909613, 'vehiclesObservedIou': 0.7034172, 'vehiclesOccludedAuc': 0.09238427, 'vehiclesOccludedIou': 0.027215011, 'vehiclesFlowEpe': 2.5523605, 'vehiclesFlowWarpedOccupancyAuc': 0.8567704, 'vehiclesFlowWarpedOccupancyIou': 0.79827017}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.3965758, 'vehiclesObservedIou': 0.1587002, 'vehiclesOccludedAuc': 0.08999817, 'vehiclesOccludedIou': 0.023235515, 'vehiclesFlowEpe': 5.1339216, 'vehiclesFlowWarpedOccupancyAuc': 0.46431795, 'vehiclesFlowWarpedOccupancyIou': 0.17639779}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.94435024, 'vehiclesObservedIou': 0.62946266, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 1.2196445, 'vehiclesFlowWarpedOccupancyAuc': 0.8406551, 'vehiclesFlowWarpedOccupancyIou': 0.7224514}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.511261, 'vehiclesObservedIou': 0.2548562, 'vehiclesOccludedAuc': 0.00017344115, 'vehiclesOccludedIou': 5.1463052e-05, 'vehiclesFlowEpe': 2.5639687, 'vehiclesFlowWarpedOccupancyAuc': 0.56176627, 'vehiclesFlowWarpedOccupancyIou': 0.2955066}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6476816, 'vehiclesObservedIou': 0.34382713, 'vehiclesOccludedAuc': 0.07659907, 'vehiclesOccludedIou': 0.02391289, 'vehiclesFlowEpe': 3.1884577, 'vehiclesFlowWarpedOccupancyAuc': 0.62098783, 'vehiclesFlowWarpedOccupancyIou': 0.37443948}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8630734, 'vehiclesObservedIou': 0.4373207, 'vehiclesOccludedAuc': 0.03323521, 'vehiclesOccludedIou': 0.0073693246, 'vehiclesFlowEpe': 10.459618, 'vehiclesFlowWarpedOccupancyAuc': 0.50592947, 'vehiclesFlowWarpedOccupancyIou': 0.4811404}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.48993006, 'vehiclesObservedIou': 0.26228827, 'vehiclesOccludedAuc': 0.11891904, 'vehiclesOccludedIou': 0.026251873, 'vehiclesFlowEpe': 4.683866, 'vehiclesFlowWarpedOccupancyAuc': 0.46714455, 'vehiclesFlowWarpedOccupancyIou': 0.27865505}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7976923, 'vehiclesObservedIou': 0.3853376, 'vehiclesOccludedAuc': 0.24449816, 'vehiclesOccludedIou': 0.06924663, 'vehiclesFlowEpe': 4.127297, 'vehiclesFlowWarpedOccupancyAuc': 0.6973541, 'vehiclesFlowWarpedOccupancyIou': 0.46690583}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8753375, 'vehiclesObservedIou': 0.5705881, 'vehiclesOccludedAuc': 0.012013855, 'vehiclesOccludedIou': 0.004008949, 'vehiclesFlowEpe': 2.5971835, 'vehiclesFlowWarpedOccupancyAuc': 0.7831684, 'vehiclesFlowWarpedOccupancyIou': 0.67162967}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5822134, 'vehiclesObservedIou': 0.30323082, 'vehiclesOccludedAuc': 0.07462615, 'vehiclesOccludedIou': 0.013494675, 'vehiclesFlowEpe': 3.5512595, 'vehiclesFlowWarpedOccupancyAuc': 0.6113638, 'vehiclesFlowWarpedOccupancyIou': 0.3718143}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.78866553, 'vehiclesObservedIou': 0.47817373, 'vehiclesOccludedAuc': 0.09956056, 'vehiclesOccludedIou': 0.021874532, 'vehiclesFlowEpe': 3.0572014, 'vehiclesFlowWarpedOccupancyAuc': 0.64915586, 'vehiclesFlowWarpedOccupancyIou': 0.55137956}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7980693, 'vehiclesObservedIou': 0.7140927, 'vehiclesOccludedAuc': 0.033650376, 'vehiclesOccludedIou': 0.0059489314, 'vehiclesFlowEpe': 4.0690856, 'vehiclesFlowWarpedOccupancyAuc': 0.79353124, 'vehiclesFlowWarpedOccupancyIou': 0.77809376}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.978972, 'vehiclesObservedIou': 0.7790634, 'vehiclesOccludedAuc': 0.0040804693, 'vehiclesOccludedIou': 0.0016688039, 'vehiclesFlowEpe': 6.37957, 'vehiclesFlowWarpedOccupancyAuc': 0.88415074, 'vehiclesFlowWarpedOccupancyIou': 0.8539368}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6835906756, 'vehiclesObservedIou': 0.425892242, 'vehiclesOccludedAuc': 0.08627163057800001, 'vehiclesOccludedIou': 0.01836402673808, 'vehiclesFlowEpe': 4.383375771999999, 'vehiclesFlowWarpedOccupancyAuc': 0.6372526307999999, 'vehiclesFlowWarpedOccupancyIou': 0.48889437439999994}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00083new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 10:45:16.702650: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:45:16.756789: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:45:16.757074: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.45420346, 'vehiclesObservedIou': 0.2069241, 'vehiclesOccludedAuc': 0.1910965, 'vehiclesOccludedIou': 0.057512775, 'vehiclesFlowEpe': 7.1673455, 'vehiclesFlowWarpedOccupancyAuc': 0.42005265, 'vehiclesFlowWarpedOccupancyIou': 0.27565578}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.19257256, 'vehiclesObservedIou': 0.086329795, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 4.7230206, 'vehiclesFlowWarpedOccupancyAuc': 0.41557172, 'vehiclesFlowWarpedOccupancyIou': 0.08814023}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.64607537, 'vehiclesObservedIou': 0.3520023, 'vehiclesOccludedAuc': 0.11890583, 'vehiclesOccludedIou': 0.01780941, 'vehiclesFlowEpe': 6.228476, 'vehiclesFlowWarpedOccupancyAuc': 0.40700856, 'vehiclesFlowWarpedOccupancyIou': 0.29028824}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.60303426, 'vehiclesObservedIou': 0.31287795, 'vehiclesOccludedAuc': 0.11545186, 'vehiclesOccludedIou': 0.02254133, 'vehiclesFlowEpe': 7.6837716, 'vehiclesFlowWarpedOccupancyAuc': 0.47088608, 'vehiclesFlowWarpedOccupancyIou': 0.47664464}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.68220747, 'vehiclesObservedIou': 0.31388825, 'vehiclesOccludedAuc': 0.03507489, 'vehiclesOccludedIou': 0.003601653, 'vehiclesFlowEpe': 6.1609497, 'vehiclesFlowWarpedOccupancyAuc': 0.55232847, 'vehiclesFlowWarpedOccupancyIou': 0.40138906}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.76218545, 'vehiclesObservedIou': 0.4950688, 'vehiclesOccludedAuc': 0.10131936, 'vehiclesOccludedIou': 0.03252459, 'vehiclesFlowEpe': 5.786022, 'vehiclesFlowWarpedOccupancyAuc': 0.6578342, 'vehiclesFlowWarpedOccupancyIou': 0.6061428}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9709041, 'vehiclesObservedIou': 0.682527, 'vehiclesOccludedAuc': 0.11002207, 'vehiclesOccludedIou': 0.025251755, 'vehiclesFlowEpe': 1.8962933, 'vehiclesFlowWarpedOccupancyAuc': 0.8615999, 'vehiclesFlowWarpedOccupancyIou': 0.7611202}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9332895, 'vehiclesObservedIou': 0.604358, 'vehiclesOccludedAuc': 0.68094635, 'vehiclesOccludedIou': 0.106472835, 'vehiclesFlowEpe': 3.0541158, 'vehiclesFlowWarpedOccupancyAuc': 0.80721474, 'vehiclesFlowWarpedOccupancyIou': 0.63104403}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9228647, 'vehiclesObservedIou': 0.6998391, 'vehiclesOccludedAuc': 0.0071590845, 'vehiclesOccludedIou': 0.003945171, 'vehiclesFlowEpe': 4.404807, 'vehiclesFlowWarpedOccupancyAuc': 0.7631344, 'vehiclesFlowWarpedOccupancyIou': 0.7426938}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.83762413, 'vehiclesObservedIou': 0.57313967, 'vehiclesOccludedAuc': 0.45574456, 'vehiclesOccludedIou': 0.06426247, 'vehiclesFlowEpe': 3.2045202, 'vehiclesFlowWarpedOccupancyAuc': 0.81637764, 'vehiclesFlowWarpedOccupancyIou': 0.6902803}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.26386026, 'vehiclesObservedIou': 0.09874249, 'vehiclesOccludedAuc': 0.07882757, 'vehiclesOccludedIou': 0.016568363, 'vehiclesFlowEpe': 5.681469, 'vehiclesFlowWarpedOccupancyAuc': 0.34954345, 'vehiclesFlowWarpedOccupancyIou': 0.09398228}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.86299556, 'vehiclesObservedIou': 0.6035435, 'vehiclesOccludedAuc': 0.081444204, 'vehiclesOccludedIou': 0.0106424205, 'vehiclesFlowEpe': 3.7424889, 'vehiclesFlowWarpedOccupancyAuc': 0.71077955, 'vehiclesFlowWarpedOccupancyIou': 0.6340203}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.19342762, 'vehiclesObservedIou': 0.087149136, 'vehiclesOccludedAuc': 0.021622775, 'vehiclesOccludedIou': 0.003762245, 'vehiclesFlowEpe': 3.987423, 'vehiclesFlowWarpedOccupancyAuc': 0.4418692, 'vehiclesFlowWarpedOccupancyIou': 0.10180262}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.5381263, 'vehiclesObservedIou': 0.2598242, 'vehiclesOccludedAuc': 0.008388385, 'vehiclesOccludedIou': 0.002245412, 'vehiclesFlowEpe': 3.192264, 'vehiclesFlowWarpedOccupancyAuc': 0.47990933, 'vehiclesFlowWarpedOccupancyIou': 0.3650069}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7963585, 'vehiclesObservedIou': 0.41489828, 'vehiclesOccludedAuc': 0.036631797, 'vehiclesOccludedIou': 0.01089537, 'vehiclesFlowEpe': 3.0318851, 'vehiclesFlowWarpedOccupancyAuc': 0.6383614, 'vehiclesFlowWarpedOccupancyIou': 0.44204617}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.81414866, 'vehiclesObservedIou': 0.5385045, 'vehiclesOccludedAuc': 0.073454514, 'vehiclesOccludedIou': 0.014526738, 'vehiclesFlowEpe': 3.5006723, 'vehiclesFlowWarpedOccupancyAuc': 0.72062415, 'vehiclesFlowWarpedOccupancyIou': 0.6490378}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6924066, 'vehiclesObservedIou': 0.3303534, 'vehiclesOccludedAuc': 0.025913471, 'vehiclesOccludedIou': 0.008722233, 'vehiclesFlowEpe': 4.4843397, 'vehiclesFlowWarpedOccupancyAuc': 0.6048607, 'vehiclesFlowWarpedOccupancyIou': 0.39618173}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.42567748, 'vehiclesObservedIou': 0.21527393, 'vehiclesOccludedAuc': 0.02150452, 'vehiclesOccludedIou': 0.0039980276, 'vehiclesFlowEpe': 4.3538876, 'vehiclesFlowWarpedOccupancyAuc': 0.44946143, 'vehiclesFlowWarpedOccupancyIou': 0.20374528}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.48987356, 'vehiclesObservedIou': 0.29572046, 'vehiclesOccludedAuc': 0.045529265, 'vehiclesOccludedIou': 0.014531236, 'vehiclesFlowEpe': 2.4130852, 'vehiclesFlowWarpedOccupancyAuc': 0.74212384, 'vehiclesFlowWarpedOccupancyIou': 0.46587807}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7759227, 'vehiclesObservedIou': 0.5859777, 'vehiclesOccludedAuc': 0.023502273, 'vehiclesOccludedIou': 0.01053922, 'vehiclesFlowEpe': 1.8879246, 'vehiclesFlowWarpedOccupancyAuc': 0.7443117, 'vehiclesFlowWarpedOccupancyIou': 0.65360236}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8926572, 'vehiclesObservedIou': 0.5394605, 'vehiclesOccludedAuc': 0.023025325, 'vehiclesOccludedIou': 0.0074737994, 'vehiclesFlowEpe': 2.6935694, 'vehiclesFlowWarpedOccupancyAuc': 0.7549466, 'vehiclesFlowWarpedOccupancyIou': 0.6302035}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9155039, 'vehiclesObservedIou': 0.663927, 'vehiclesOccludedAuc': 0.085407175, 'vehiclesOccludedIou': 0.015402431, 'vehiclesFlowEpe': 3.6141765, 'vehiclesFlowWarpedOccupancyAuc': 0.80905783, 'vehiclesFlowWarpedOccupancyIou': 0.7553586}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7659897, 'vehiclesObservedIou': 0.42332858, 'vehiclesOccludedAuc': 0.33684433, 'vehiclesOccludedIou': 0.06745541, 'vehiclesFlowEpe': 4.685302, 'vehiclesFlowWarpedOccupancyAuc': 0.64254904, 'vehiclesFlowWarpedOccupancyIou': 0.54620737}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.33243176, 'vehiclesObservedIou': 0.16457608, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.9115577, 'vehiclesFlowWarpedOccupancyAuc': 0.4913571, 'vehiclesFlowWarpedOccupancyIou': 0.20028143}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.97250545, 'vehiclesObservedIou': 0.7350602, 'vehiclesOccludedAuc': 0.00064524834, 'vehiclesOccludedIou': 0.0008167822, 'vehiclesFlowEpe': 3.1514013, 'vehiclesFlowWarpedOccupancyAuc': 0.84019667, 'vehiclesFlowWarpedOccupancyIou': 0.79713446}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.71536887, 'vehiclesObservedIou': 0.39629567, 'vehiclesOccludedAuc': 0.028041262, 'vehiclesOccludedIou': 0.0052900454, 'vehiclesFlowEpe': 4.371209, 'vehiclesFlowWarpedOccupancyAuc': 0.55407614, 'vehiclesFlowWarpedOccupancyIou': 0.46032068}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9627359, 'vehiclesObservedIou': 0.7403875, 'vehiclesOccludedAuc': 0.033852886, 'vehiclesOccludedIou': 0.014733079, 'vehiclesFlowEpe': 1.7752982, 'vehiclesFlowWarpedOccupancyAuc': 0.8170597, 'vehiclesFlowWarpedOccupancyIou': 0.7531339}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7197023, 'vehiclesObservedIou': 0.36660245, 'vehiclesOccludedAuc': 0.07436334, 'vehiclesOccludedIou': 0.021848045, 'vehiclesFlowEpe': 4.105054, 'vehiclesFlowWarpedOccupancyAuc': 0.63986105, 'vehiclesFlowWarpedOccupancyIou': 0.47801632}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.3167843, 'vehiclesObservedIou': 0.17059472, 'vehiclesOccludedAuc': 0.019952558, 'vehiclesOccludedIou': 0.004465167, 'vehiclesFlowEpe': 3.771731, 'vehiclesFlowWarpedOccupancyAuc': 0.49263367, 'vehiclesFlowWarpedOccupancyIou': 0.21263131}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9415121, 'vehiclesObservedIou': 0.8390138, 'vehiclesOccludedAuc': 0.052205846, 'vehiclesOccludedIou': 0.008579919, 'vehiclesFlowEpe': 1.8467494, 'vehiclesFlowWarpedOccupancyAuc': 0.87958723, 'vehiclesFlowWarpedOccupancyIou': 0.9094918}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.97250545, 'vehiclesObservedIou': 0.7350602, 'vehiclesOccludedAuc': 0.00064524834, 'vehiclesOccludedIou': 0.0008167822, 'vehiclesFlowEpe': 3.1514013, 'vehiclesFlowWarpedOccupancyAuc': 0.84019667, 'vehiclesFlowWarpedOccupancyIou': 0.79713446}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6797649906666666, 'vehiclesObservedIou': 0.4265396353666667, 'vehiclesOccludedAuc': 0.096229241628, 'vehiclesOccludedIou': 0.019213931070000002, 'vehiclesFlowEpe': 3.983693653333333, 'vehiclesFlowWarpedOccupancyAuc': 0.632505938, 'vehiclesFlowWarpedOccupancyIou': 0.4903827320000001}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00031new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 10:45:35.907603: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:45:35.958742: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:45:35.959029: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0019 seconds, Metrics: {'vehiclesObservedAuc': 0.82673746, 'vehiclesObservedIou': 0.44050944, 'vehiclesOccludedAuc': 0.0064268, 'vehiclesOccludedIou': 0.0027791464, 'vehiclesFlowEpe': 5.297971, 'vehiclesFlowWarpedOccupancyAuc': 0.6744622, 'vehiclesFlowWarpedOccupancyIou': 0.5494066}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.90601474, 'vehiclesObservedIou': 0.62942433, 'vehiclesOccludedAuc': 0.057535287, 'vehiclesOccludedIou': 0.015375064, 'vehiclesFlowEpe': 3.1351178, 'vehiclesFlowWarpedOccupancyAuc': 0.69063216, 'vehiclesFlowWarpedOccupancyIou': 0.5341817}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.94054735, 'vehiclesObservedIou': 0.74132097, 'vehiclesOccludedAuc': 0.049296856, 'vehiclesOccludedIou': 0.015779128, 'vehiclesFlowEpe': 8.018885, 'vehiclesFlowWarpedOccupancyAuc': 0.7733372, 'vehiclesFlowWarpedOccupancyIou': 0.773349}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7954471, 'vehiclesObservedIou': 0.44439858, 'vehiclesOccludedAuc': 0.12928417, 'vehiclesOccludedIou': 0.015873542, 'vehiclesFlowEpe': 2.3517752, 'vehiclesFlowWarpedOccupancyAuc': 0.7441782, 'vehiclesFlowWarpedOccupancyIou': 0.52247095}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.81380224, 'vehiclesObservedIou': 0.42941245, 'vehiclesOccludedAuc': 0.05069865, 'vehiclesOccludedIou': 0.012167806, 'vehiclesFlowEpe': 2.4910657, 'vehiclesFlowWarpedOccupancyAuc': 0.658056, 'vehiclesFlowWarpedOccupancyIou': 0.48040068}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.16926502, 'vehiclesObservedIou': 0.0637429, 'vehiclesOccludedAuc': 0.017435957, 'vehiclesOccludedIou': 0.0038662476, 'vehiclesFlowEpe': 8.306925, 'vehiclesFlowWarpedOccupancyAuc': 0.22109416, 'vehiclesFlowWarpedOccupancyIou': 0.06138816}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.899985, 'vehiclesObservedIou': 0.62285054, 'vehiclesOccludedAuc': 0.014823304, 'vehiclesOccludedIou': 0.004966281, 'vehiclesFlowEpe': 5.1649904, 'vehiclesFlowWarpedOccupancyAuc': 0.7068021, 'vehiclesFlowWarpedOccupancyIou': 0.6718842}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.97011787, 'vehiclesObservedIou': 0.77468306, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 6.28367, 'vehiclesFlowWarpedOccupancyAuc': 0.8708461, 'vehiclesFlowWarpedOccupancyIou': 0.86494267}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.91496295, 'vehiclesObservedIou': 0.6315539, 'vehiclesOccludedAuc': 0.036902457, 'vehiclesOccludedIou': 0.011673349, 'vehiclesFlowEpe': 2.6573787, 'vehiclesFlowWarpedOccupancyAuc': 0.7630093, 'vehiclesFlowWarpedOccupancyIou': 0.66903013}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.54347104, 'vehiclesObservedIou': 0.2835017, 'vehiclesOccludedAuc': 0.06457686, 'vehiclesOccludedIou': 0.01267366, 'vehiclesFlowEpe': 10.880826, 'vehiclesFlowWarpedOccupancyAuc': 0.5121376, 'vehiclesFlowWarpedOccupancyIou': 0.26387852}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.25527644, 'vehiclesObservedIou': 0.120079465, 'vehiclesOccludedAuc': 0.21830359, 'vehiclesOccludedIou': 0.023636756, 'vehiclesFlowEpe': 5.0577765, 'vehiclesFlowWarpedOccupancyAuc': 0.36981952, 'vehiclesFlowWarpedOccupancyIou': 0.20063923}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.78667134, 'vehiclesObservedIou': 0.43087155, 'vehiclesOccludedAuc': 0.11101885, 'vehiclesOccludedIou': 0.026098441, 'vehiclesFlowEpe': 3.4254572, 'vehiclesFlowWarpedOccupancyAuc': 0.6436769, 'vehiclesFlowWarpedOccupancyIou': 0.44469562}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.37821612, 'vehiclesObservedIou': 0.22913395, 'vehiclesOccludedAuc': 0.16196422, 'vehiclesOccludedIou': 0.026105944, 'vehiclesFlowEpe': 3.038786, 'vehiclesFlowWarpedOccupancyAuc': 0.5180639, 'vehiclesFlowWarpedOccupancyIou': 0.3388207}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.855397, 'vehiclesObservedIou': 0.51469713, 'vehiclesOccludedAuc': 0.04009436, 'vehiclesOccludedIou': 0.016875569, 'vehiclesFlowEpe': 5.6230164, 'vehiclesFlowWarpedOccupancyAuc': 0.7053381, 'vehiclesFlowWarpedOccupancyIou': 0.5639683}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.37894163, 'vehiclesObservedIou': 0.1701618, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 5.9643164, 'vehiclesFlowWarpedOccupancyAuc': 0.23712537, 'vehiclesFlowWarpedOccupancyIou': 0.23025164}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.80767137, 'vehiclesObservedIou': 0.48904875, 'vehiclesOccludedAuc': 0.04114102, 'vehiclesOccludedIou': 0.0140858935, 'vehiclesFlowEpe': 3.6140382, 'vehiclesFlowWarpedOccupancyAuc': 0.7007741, 'vehiclesFlowWarpedOccupancyIou': 0.5495726}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.88139826, 'vehiclesObservedIou': 0.5782533, 'vehiclesOccludedAuc': 0.24946947, 'vehiclesOccludedIou': 0.055894643, 'vehiclesFlowEpe': 1.9979178, 'vehiclesFlowWarpedOccupancyAuc': 0.7425307, 'vehiclesFlowWarpedOccupancyIou': 0.61655384}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.6959898, 'vehiclesObservedIou': 0.367141, 'vehiclesOccludedAuc': 0.15316625, 'vehiclesOccludedIou': 0.041983, 'vehiclesFlowEpe': 7.6678247, 'vehiclesFlowWarpedOccupancyAuc': 0.600639, 'vehiclesFlowWarpedOccupancyIou': 0.45148626}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7994914, 'vehiclesObservedIou': 0.5327058, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.6867259, 'vehiclesFlowWarpedOccupancyAuc': 0.762938, 'vehiclesFlowWarpedOccupancyIou': 0.61154723}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.91247505, 'vehiclesObservedIou': 0.5646101, 'vehiclesOccludedAuc': 0.22349271, 'vehiclesOccludedIou': 0.03458748, 'vehiclesFlowEpe': 6.044484, 'vehiclesFlowWarpedOccupancyAuc': 0.75344914, 'vehiclesFlowWarpedOccupancyIou': 0.6393962}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.2889796, 'vehiclesObservedIou': 0.12508063, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 9.783007, 'vehiclesFlowWarpedOccupancyAuc': 0.32632443, 'vehiclesFlowWarpedOccupancyIou': 0.17098337}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8917034, 'vehiclesObservedIou': 0.65674996, 'vehiclesOccludedAuc': 0.007856764, 'vehiclesOccludedIou': 0.002926214, 'vehiclesFlowEpe': 17.48772, 'vehiclesFlowWarpedOccupancyAuc': 0.5657747, 'vehiclesFlowWarpedOccupancyIou': 0.6889171}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.19293183, 'vehiclesObservedIou': 0.07198523, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 10.635057, 'vehiclesFlowWarpedOccupancyAuc': 0.1392458, 'vehiclesFlowWarpedOccupancyIou': 0.06599542}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.799427, 'vehiclesObservedIou': 0.5417699, 'vehiclesOccludedAuc': 0.1875688, 'vehiclesOccludedIou': 0.023713574, 'vehiclesFlowEpe': 9.716063, 'vehiclesFlowWarpedOccupancyAuc': 0.590101, 'vehiclesFlowWarpedOccupancyIou': 0.6118754}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5181859, 'vehiclesObservedIou': 0.30505535, 'vehiclesOccludedAuc': 0.015262488, 'vehiclesOccludedIou': 0.0037518204, 'vehiclesFlowEpe': 4.796462, 'vehiclesFlowWarpedOccupancyAuc': 0.5349378, 'vehiclesFlowWarpedOccupancyIou': 0.36787468}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.85378826, 'vehiclesObservedIou': 0.57032764, 'vehiclesOccludedAuc': 0.2583511, 'vehiclesOccludedIou': 0.01679673, 'vehiclesFlowEpe': 2.886521, 'vehiclesFlowWarpedOccupancyAuc': 0.7936428, 'vehiclesFlowWarpedOccupancyIou': 0.69627523}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.25757885, 'vehiclesObservedIou': 0.15320696, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 6.3380933, 'vehiclesFlowWarpedOccupancyAuc': 0.31589064, 'vehiclesFlowWarpedOccupancyIou': 0.17062253}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.97011787, 'vehiclesObservedIou': 0.77468306, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 6.28367, 'vehiclesFlowWarpedOccupancyAuc': 0.8708461, 'vehiclesFlowWarpedOccupancyIou': 0.86494267}
Average Time: 0.0012 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6790545933333334, 'vehiclesObservedIou': 0.4252694957407407, 'vehiclesOccludedAuc': 0.077580369, 'vehiclesOccludedIou': 0.014133714403703703, 'vehiclesFlowEpe': 5.975995229629628, 'vehiclesFlowWarpedOccupancyAuc': 0.589438034074074, 'vehiclesFlowWarpedOccupancyIou': 0.474459554074074}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00087new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 10:45:53.581774: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:45:53.632187: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:45:53.632464: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.82570034, 'vehiclesObservedIou': 0.5708217, 'vehiclesOccludedAuc': 0.0032259733, 'vehiclesOccludedIou': 0.0016012789, 'vehiclesFlowEpe': 7.49402, 'vehiclesFlowWarpedOccupancyAuc': 0.59784377, 'vehiclesFlowWarpedOccupancyIou': 0.61284816}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8459947, 'vehiclesObservedIou': 0.5954846, 'vehiclesOccludedAuc': 0.02767208, 'vehiclesOccludedIou': 0.0112153785, 'vehiclesFlowEpe': 4.679985, 'vehiclesFlowWarpedOccupancyAuc': 0.74671865, 'vehiclesFlowWarpedOccupancyIou': 0.6645103}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.72269213, 'vehiclesObservedIou': 0.35493463, 'vehiclesOccludedAuc': 0.0070327222, 'vehiclesOccludedIou': 0.0021066018, 'vehiclesFlowEpe': 10.114821, 'vehiclesFlowWarpedOccupancyAuc': 0.3906077, 'vehiclesFlowWarpedOccupancyIou': 0.32781938}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.95063984, 'vehiclesObservedIou': 0.6535543, 'vehiclesOccludedAuc': 0.0040837424, 'vehiclesOccludedIou': 0.0023069547, 'vehiclesFlowEpe': 4.799095, 'vehiclesFlowWarpedOccupancyAuc': 0.7594599, 'vehiclesFlowWarpedOccupancyIou': 0.7114899}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.536254, 'vehiclesObservedIou': 0.29894748, 'vehiclesOccludedAuc': 0.29921484, 'vehiclesOccludedIou': 0.048697, 'vehiclesFlowEpe': 4.1297526, 'vehiclesFlowWarpedOccupancyAuc': 0.5510972, 'vehiclesFlowWarpedOccupancyIou': 0.3583484}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.54854274, 'vehiclesObservedIou': 0.21910024, 'vehiclesOccludedAuc': 0.17719519, 'vehiclesOccludedIou': 0.0435683, 'vehiclesFlowEpe': 3.4292684, 'vehiclesFlowWarpedOccupancyAuc': 0.4897582, 'vehiclesFlowWarpedOccupancyIou': 0.27638206}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.22438273, 'vehiclesObservedIou': 0.1186266, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 9.095386, 'vehiclesFlowWarpedOccupancyAuc': 0.36733603, 'vehiclesFlowWarpedOccupancyIou': 0.15186155}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.19002347, 'vehiclesObservedIou': 0.06889339, 'vehiclesOccludedAuc': 0.034753904, 'vehiclesOccludedIou': 0.009244145, 'vehiclesFlowEpe': 5.968873, 'vehiclesFlowWarpedOccupancyAuc': 0.1970473, 'vehiclesFlowWarpedOccupancyIou': 0.052786462}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.96864235, 'vehiclesObservedIou': 0.84662294, 'vehiclesOccludedAuc': 0.072053015, 'vehiclesOccludedIou': 0.013160579, 'vehiclesFlowEpe': 3.5151181, 'vehiclesFlowWarpedOccupancyAuc': 0.88335985, 'vehiclesFlowWarpedOccupancyIou': 0.8817381}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.52843887, 'vehiclesObservedIou': 0.27005723, 'vehiclesOccludedAuc': 0.011129389, 'vehiclesOccludedIou': 0.0034352303, 'vehiclesFlowEpe': 3.7131078, 'vehiclesFlowWarpedOccupancyAuc': 0.5398713, 'vehiclesFlowWarpedOccupancyIou': 0.32651457}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.54234695, 'vehiclesObservedIou': 0.2721859, 'vehiclesOccludedAuc': 0.06680997, 'vehiclesOccludedIou': 0.019130789, 'vehiclesFlowEpe': 2.3030305, 'vehiclesFlowWarpedOccupancyAuc': 0.65499765, 'vehiclesFlowWarpedOccupancyIou': 0.28770745}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.62508404, 'vehiclesObservedIou': 0.3653864, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 11.02124, 'vehiclesFlowWarpedOccupancyAuc': 0.40048075, 'vehiclesFlowWarpedOccupancyIou': 0.4903072}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.53224105, 'vehiclesObservedIou': 0.31330737, 'vehiclesOccludedAuc': 0.027675053, 'vehiclesOccludedIou': 0.004790818, 'vehiclesFlowEpe': 4.831523, 'vehiclesFlowWarpedOccupancyAuc': 0.47970137, 'vehiclesFlowWarpedOccupancyIou': 0.38801664}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8916845, 'vehiclesObservedIou': 0.70672065, 'vehiclesOccludedAuc': 0.090481564, 'vehiclesOccludedIou': 0.0064737643, 'vehiclesFlowEpe': 4.2380357, 'vehiclesFlowWarpedOccupancyAuc': 0.85894144, 'vehiclesFlowWarpedOccupancyIou': 0.7999056}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9357556, 'vehiclesObservedIou': 0.6774374, 'vehiclesOccludedAuc': 0.08104429, 'vehiclesOccludedIou': 0.022375207, 'vehiclesFlowEpe': 4.2365446, 'vehiclesFlowWarpedOccupancyAuc': 0.72839636, 'vehiclesFlowWarpedOccupancyIou': 0.681053}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8025881, 'vehiclesObservedIou': 0.5205798, 'vehiclesOccludedAuc': 0.021069363, 'vehiclesOccludedIou': 0.0096680615, 'vehiclesFlowEpe': 3.9131181, 'vehiclesFlowWarpedOccupancyAuc': 0.740922, 'vehiclesFlowWarpedOccupancyIou': 0.60528624}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.09670442, 'vehiclesObservedIou': 0.057483844, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 5.467021, 'vehiclesFlowWarpedOccupancyAuc': 0.2584858, 'vehiclesFlowWarpedOccupancyIou': 0.06898411}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.76073635, 'vehiclesObservedIou': 0.4915843, 'vehiclesOccludedAuc': 0.00010781045, 'vehiclesOccludedIou': 0.00030774449, 'vehiclesFlowEpe': 2.6436932, 'vehiclesFlowWarpedOccupancyAuc': 0.7025104, 'vehiclesFlowWarpedOccupancyIou': 0.5861431}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9930167, 'vehiclesObservedIou': 0.86371785, 'vehiclesOccludedAuc': 0.0075964704, 'vehiclesOccludedIou': 0.0019489435, 'vehiclesFlowEpe': 2.1781952, 'vehiclesFlowWarpedOccupancyAuc': 0.88811743, 'vehiclesFlowWarpedOccupancyIou': 0.9185226}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.85644054, 'vehiclesObservedIou': 0.62168413, 'vehiclesOccludedAuc': 0.3163005, 'vehiclesOccludedIou': 0.012976474, 'vehiclesFlowEpe': 4.7809467, 'vehiclesFlowWarpedOccupancyAuc': 0.78240854, 'vehiclesFlowWarpedOccupancyIou': 0.7131972}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.6595077, 'vehiclesObservedIou': 0.3987832, 'vehiclesOccludedAuc': 0.1617124, 'vehiclesOccludedIou': 0.053609915, 'vehiclesFlowEpe': 5.770056, 'vehiclesFlowWarpedOccupancyAuc': 0.5827985, 'vehiclesFlowWarpedOccupancyIou': 0.44557762}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9344628, 'vehiclesObservedIou': 0.65800613, 'vehiclesOccludedAuc': 0.09448111, 'vehiclesOccludedIou': 0.018206334, 'vehiclesFlowEpe': 1.5914123, 'vehiclesFlowWarpedOccupancyAuc': 0.8210026, 'vehiclesFlowWarpedOccupancyIou': 0.7295118}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.35106733, 'vehiclesObservedIou': 0.17128047, 'vehiclesOccludedAuc': 0.0053861206, 'vehiclesOccludedIou': 0.0025159593, 'vehiclesFlowEpe': 5.210882, 'vehiclesFlowWarpedOccupancyAuc': 0.41269386, 'vehiclesFlowWarpedOccupancyIou': 0.19215623}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7736414, 'vehiclesObservedIou': 0.38968977, 'vehiclesOccludedAuc': 0.022398276, 'vehiclesOccludedIou': 0.007997357, 'vehiclesFlowEpe': 3.5602171, 'vehiclesFlowWarpedOccupancyAuc': 0.6046571, 'vehiclesFlowWarpedOccupancyIou': 0.43654418}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8681147, 'vehiclesObservedIou': 0.57922834, 'vehiclesOccludedAuc': 0.001622708, 'vehiclesOccludedIou': 0.0010256782, 'vehiclesFlowEpe': 2.687188, 'vehiclesFlowWarpedOccupancyAuc': 0.76503795, 'vehiclesFlowWarpedOccupancyIou': 0.6411436}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9542653, 'vehiclesObservedIou': 0.73328155, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 4.1574264, 'vehiclesFlowWarpedOccupancyAuc': 0.83715224, 'vehiclesFlowWarpedOccupancyIou': 0.8429016}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.66423297, 'vehiclesObservedIou': 0.39084163, 'vehiclesOccludedAuc': 0.07138751, 'vehiclesOccludedIou': 0.0087336125, 'vehiclesFlowEpe': 4.2964525, 'vehiclesFlowWarpedOccupancyAuc': 0.6245596, 'vehiclesFlowWarpedOccupancyIou': 0.43749723}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.55142224, 'vehiclesObservedIou': 0.19372886, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 4.158436, 'vehiclesFlowWarpedOccupancyAuc': 0.40845862, 'vehiclesFlowWarpedOccupancyIou': 0.22520131}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.87920105, 'vehiclesObservedIou': 0.5529581, 'vehiclesOccludedAuc': 0.14912759, 'vehiclesOccludedIou': 0.022559036, 'vehiclesFlowEpe': 3.9772265, 'vehiclesFlowWarpedOccupancyAuc': 0.7048552, 'vehiclesFlowWarpedOccupancyIou': 0.5512683}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.9930167, 'vehiclesObservedIou': 0.86371785, 'vehiclesOccludedAuc': 0.0075964704, 'vehiclesOccludedIou': 0.0019489435, 'vehiclesFlowEpe': 2.1781952, 'vehiclesFlowWarpedOccupancyAuc': 0.88811743, 'vehiclesFlowWarpedOccupancyIou': 0.9185226}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6901318934482759, 'vehiclesObservedIou': 0.44672168289655173, 'vehiclesOccludedAuc': 0.06046764108103448, 'vehiclesOccludedIou': 0.011298453861724136, 'vehiclesFlowEpe': 4.757312817241379, 'vehiclesFlowWarpedOccupancyAuc': 0.6130785279310346, 'vehiclesFlowWarpedOccupancyIou': 0.4967318583448275}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00142new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 10:46:12.332379: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:46:12.384681: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:46:12.384969: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.97326183, 'vehiclesObservedIou': 0.7766496, 'vehiclesOccludedAuc': 0.3785353, 'vehiclesOccludedIou': 0.08173191, 'vehiclesFlowEpe': 2.1426327, 'vehiclesFlowWarpedOccupancyAuc': 0.8034725, 'vehiclesFlowWarpedOccupancyIou': 0.789109}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7391223, 'vehiclesObservedIou': 0.4400064, 'vehiclesOccludedAuc': 0.02978599, 'vehiclesOccludedIou': 0.0071889944, 'vehiclesFlowEpe': 3.206238, 'vehiclesFlowWarpedOccupancyAuc': 0.6608964, 'vehiclesFlowWarpedOccupancyIou': 0.5548511}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.1907153, 'vehiclesObservedIou': 0.06880957, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.1885953, 'vehiclesFlowWarpedOccupancyAuc': 0.31862316, 'vehiclesFlowWarpedOccupancyIou': 0.079641186}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6135122, 'vehiclesObservedIou': 0.37372616, 'vehiclesOccludedAuc': 0.044877417, 'vehiclesOccludedIou': 0.014752922, 'vehiclesFlowEpe': 5.7781615, 'vehiclesFlowWarpedOccupancyAuc': 0.5404556, 'vehiclesFlowWarpedOccupancyIou': 0.36407897}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6378569, 'vehiclesObservedIou': 0.2208648, 'vehiclesOccludedAuc': 0.516507, 'vehiclesOccludedIou': 0.1459379, 'vehiclesFlowEpe': 6.0299473, 'vehiclesFlowWarpedOccupancyAuc': 0.4638058, 'vehiclesFlowWarpedOccupancyIou': 0.2319806}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8185777, 'vehiclesObservedIou': 0.5551896, 'vehiclesOccludedAuc': 0.17721428, 'vehiclesOccludedIou': 0.032016642, 'vehiclesFlowEpe': 2.3175993, 'vehiclesFlowWarpedOccupancyAuc': 0.74735755, 'vehiclesFlowWarpedOccupancyIou': 0.6272378}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.85584486, 'vehiclesObservedIou': 0.49685776, 'vehiclesOccludedAuc': 0.04994932, 'vehiclesOccludedIou': 0.0099608395, 'vehiclesFlowEpe': 6.666628, 'vehiclesFlowWarpedOccupancyAuc': 0.66151416, 'vehiclesFlowWarpedOccupancyIou': 0.5537387}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.90591455, 'vehiclesObservedIou': 0.6841351, 'vehiclesOccludedAuc': 0.050635803, 'vehiclesOccludedIou': 0.020082537, 'vehiclesFlowEpe': 4.5607047, 'vehiclesFlowWarpedOccupancyAuc': 0.83126193, 'vehiclesFlowWarpedOccupancyIou': 0.7678357}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.23251247, 'vehiclesObservedIou': 0.1308734, 'vehiclesOccludedAuc': 0.026931765, 'vehiclesOccludedIou': 0.009231595, 'vehiclesFlowEpe': 4.572694, 'vehiclesFlowWarpedOccupancyAuc': 0.31496507, 'vehiclesFlowWarpedOccupancyIou': 0.12895481}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.5101489, 'vehiclesObservedIou': 0.3511967, 'vehiclesOccludedAuc': 0.002738149, 'vehiclesOccludedIou': 0.0011413493, 'vehiclesFlowEpe': 3.5475945, 'vehiclesFlowWarpedOccupancyAuc': 0.6234104, 'vehiclesFlowWarpedOccupancyIou': 0.32641593}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.65208274, 'vehiclesObservedIou': 0.40700957, 'vehiclesOccludedAuc': 0.045472346, 'vehiclesOccludedIou': 0.008876683, 'vehiclesFlowEpe': 4.5849752, 'vehiclesFlowWarpedOccupancyAuc': 0.6390785, 'vehiclesFlowWarpedOccupancyIou': 0.4657257}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.69969153, 'vehiclesObservedIou': 0.35115817, 'vehiclesOccludedAuc': 0.071358666, 'vehiclesOccludedIou': 0.015669843, 'vehiclesFlowEpe': 5.71111, 'vehiclesFlowWarpedOccupancyAuc': 0.5878022, 'vehiclesFlowWarpedOccupancyIou': 0.4697233}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.853071, 'vehiclesObservedIou': 0.5554922, 'vehiclesOccludedAuc': 0.0166551, 'vehiclesOccludedIou': 0.00759354, 'vehiclesFlowEpe': 2.9689841, 'vehiclesFlowWarpedOccupancyAuc': 0.7340367, 'vehiclesFlowWarpedOccupancyIou': 0.60666716}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.087503485, 'vehiclesObservedIou': 0.03850912, 'vehiclesOccludedAuc': 0.04869787, 'vehiclesOccludedIou': 0.015393607, 'vehiclesFlowEpe': 12.509039, 'vehiclesFlowWarpedOccupancyAuc': 0.107878864, 'vehiclesFlowWarpedOccupancyIou': 0.031955693}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8274175, 'vehiclesObservedIou': 0.49722356, 'vehiclesOccludedAuc': 0.0424534, 'vehiclesOccludedIou': 0.02280132, 'vehiclesFlowEpe': 2.7795339, 'vehiclesFlowWarpedOccupancyAuc': 0.73014504, 'vehiclesFlowWarpedOccupancyIou': 0.5704908}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.94890547, 'vehiclesObservedIou': 0.7763172, 'vehiclesOccludedAuc': 0.21832868, 'vehiclesOccludedIou': 0.04312393, 'vehiclesFlowEpe': 2.0895462, 'vehiclesFlowWarpedOccupancyAuc': 0.82627803, 'vehiclesFlowWarpedOccupancyIou': 0.8184199}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.92284244, 'vehiclesObservedIou': 0.59471947, 'vehiclesOccludedAuc': 0.10835023, 'vehiclesOccludedIou': 0.018681714, 'vehiclesFlowEpe': 3.244028, 'vehiclesFlowWarpedOccupancyAuc': 0.8417435, 'vehiclesFlowWarpedOccupancyIou': 0.7749928}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.15184604, 'vehiclesObservedIou': 0.08124448, 'vehiclesOccludedAuc': 0.06301641, 'vehiclesOccludedIou': 0.0052576, 'vehiclesFlowEpe': 6.9361167, 'vehiclesFlowWarpedOccupancyAuc': 0.2808618, 'vehiclesFlowWarpedOccupancyIou': 0.10118114}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6194486, 'vehiclesObservedIou': 0.36683208, 'vehiclesOccludedAuc': 0.30128983, 'vehiclesOccludedIou': 0.031247996, 'vehiclesFlowEpe': 10.020614, 'vehiclesFlowWarpedOccupancyAuc': 0.523051, 'vehiclesFlowWarpedOccupancyIou': 0.46446198}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.68598205, 'vehiclesObservedIou': 0.4295961, 'vehiclesOccludedAuc': 0.21801828, 'vehiclesOccludedIou': 0.024204444, 'vehiclesFlowEpe': 5.718229, 'vehiclesFlowWarpedOccupancyAuc': 0.6427634, 'vehiclesFlowWarpedOccupancyIou': 0.5016809}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7871416, 'vehiclesObservedIou': 0.4824528, 'vehiclesOccludedAuc': 0.0061999103, 'vehiclesOccludedIou': 0.0031533577, 'vehiclesFlowEpe': 3.895106, 'vehiclesFlowWarpedOccupancyAuc': 0.7369314, 'vehiclesFlowWarpedOccupancyIou': 0.5672834}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.314867, 'vehiclesObservedIou': 0.15922649, 'vehiclesOccludedAuc': 0.00022814899, 'vehiclesOccludedIou': 0.00021988469, 'vehiclesFlowEpe': 5.1826515, 'vehiclesFlowWarpedOccupancyAuc': 0.44427925, 'vehiclesFlowWarpedOccupancyIou': 0.18124056}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.4651001, 'vehiclesObservedIou': 0.21092919, 'vehiclesOccludedAuc': 0.20377812, 'vehiclesOccludedIou': 0.038691185, 'vehiclesFlowEpe': 4.610409, 'vehiclesFlowWarpedOccupancyAuc': 0.5670956, 'vehiclesFlowWarpedOccupancyIou': 0.28475872}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6440087, 'vehiclesObservedIou': 0.38664168, 'vehiclesOccludedAuc': 0.09662695, 'vehiclesOccludedIou': 0.01847544, 'vehiclesFlowEpe': 3.5194864, 'vehiclesFlowWarpedOccupancyAuc': 0.6308261, 'vehiclesFlowWarpedOccupancyIou': 0.4768699}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.68243986, 'vehiclesObservedIou': 0.3735961, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.3042722, 'vehiclesFlowWarpedOccupancyAuc': 0.57349294, 'vehiclesFlowWarpedOccupancyIou': 0.45991313}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.35831058, 'vehiclesObservedIou': 0.15992089, 'vehiclesOccludedAuc': 0.0463434, 'vehiclesOccludedIou': 0.014888592, 'vehiclesFlowEpe': 6.482299, 'vehiclesFlowWarpedOccupancyAuc': 0.3823981, 'vehiclesFlowWarpedOccupancyIou': 0.13829476}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6461491, 'vehiclesObservedIou': 0.29902706, 'vehiclesOccludedAuc': 0.14489728, 'vehiclesOccludedIou': 0.035119396, 'vehiclesFlowEpe': 5.6689444, 'vehiclesFlowWarpedOccupancyAuc': 0.5389944, 'vehiclesFlowWarpedOccupancyIou': 0.37980247}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.69690263, 'vehiclesObservedIou': 0.31010315, 'vehiclesOccludedAuc': 0.12049021, 'vehiclesOccludedIou': 0.03481984, 'vehiclesFlowEpe': 3.9717398, 'vehiclesFlowWarpedOccupancyAuc': 0.6237898, 'vehiclesFlowWarpedOccupancyIou': 0.3434551}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.93249214, 'vehiclesObservedIou': 0.7106609, 'vehiclesOccludedAuc': 0.07655409, 'vehiclesOccludedIou': 0.012469204, 'vehiclesFlowEpe': 4.7099504, 'vehiclesFlowWarpedOccupancyAuc': 0.7292793, 'vehiclesFlowWarpedOccupancyIou': 0.69825774}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8546087, 'vehiclesObservedIou': 0.4772275, 'vehiclesOccludedAuc': 0.057546064, 'vehiclesOccludedIou': 0.018522935, 'vehiclesFlowEpe': 4.0467396, 'vehiclesFlowWarpedOccupancyAuc': 0.65263057, 'vehiclesFlowWarpedOccupancyIou': 0.5238708}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.80736566, 'vehiclesObservedIou': 0.5061952, 'vehiclesOccludedAuc': 0.008971544, 'vehiclesOccludedIou': 0.0031194293, 'vehiclesFlowEpe': 4.403553, 'vehiclesFlowWarpedOccupancyAuc': 0.7161154, 'vehiclesFlowWarpedOccupancyIou': 0.66453564}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7560533, 'vehiclesObservedIou': 0.39917517, 'vehiclesOccludedAuc': 0.057963885, 'vehiclesOccludedIou': 0.009485209, 'vehiclesFlowEpe': 4.8892198, 'vehiclesFlowWarpedOccupancyAuc': 0.6217112, 'vehiclesFlowWarpedOccupancyIou': 0.5050607}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.72983736, 'vehiclesObservedIou': 0.45311293, 'vehiclesOccludedAuc': 0.0012336376, 'vehiclesOccludedIou': 0.00045703084, 'vehiclesFlowEpe': 3.600278, 'vehiclesFlowWarpedOccupancyAuc': 0.63611007, 'vehiclesFlowWarpedOccupancyIou': 0.59496325}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.11660378, 'vehiclesObservedIou': 0.071159594, 'vehiclesOccludedAuc': 0.00023818536, 'vehiclesOccludedIou': 0.0004339058, 'vehiclesFlowEpe': 3.0484242, 'vehiclesFlowWarpedOccupancyAuc': 0.18335295, 'vehiclesFlowWarpedOccupancyIou': 0.08387015}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.94347036, 'vehiclesObservedIou': 0.677935, 'vehiclesOccludedAuc': 0.05441727, 'vehiclesOccludedIou': 0.018112443, 'vehiclesFlowEpe': 3.641182, 'vehiclesFlowWarpedOccupancyAuc': 0.81059206, 'vehiclesFlowWarpedOccupancyIou': 0.74772966}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9698471, 'vehiclesObservedIou': 0.8153939, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 1.6898757, 'vehiclesFlowWarpedOccupancyAuc': 0.86700505, 'vehiclesFlowWarpedOccupancyIou': 0.87358147}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.72646904, 'vehiclesObservedIou': 0.52039385, 'vehiclesOccludedAuc': 0.18757023, 'vehiclesOccludedIou': 0.044882312, 'vehiclesFlowEpe': 6.359501, 'vehiclesFlowWarpedOccupancyAuc': 0.7297088, 'vehiclesFlowWarpedOccupancyIou': 0.5770839}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.97326183, 'vehiclesObservedIou': 0.7766496, 'vehiclesOccludedAuc': 0.3785353, 'vehiclesOccludedIou': 0.08173191, 'vehiclesFlowEpe': 2.1426327, 'vehiclesFlowWarpedOccupancyAuc': 0.8034725, 'vehiclesFlowWarpedOccupancyIou': 0.789109}
2024-05-28 10:46:36.133765: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:46:36.185157: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:46:36.185445: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6583222939189188, 'vehiclesObservedIou': 0.41106925524324317, 'vehiclesOccludedAuc': 0.09388850706081082, 'vehiclesOccludedIou': 0.020749879203513514, 'vehiclesFlowEpe': 4.637746037837837, 'vehiclesFlowWarpedOccupancyAuc': 0.6033436376756758, 'vehiclesFlowWarpedOccupancyIou': 0.4683706626756757}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00082new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.854772, 'vehiclesObservedIou': 0.4864278, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.3519123, 'vehiclesFlowWarpedOccupancyAuc': 0.7849638, 'vehiclesFlowWarpedOccupancyIou': 0.61888576}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9532963, 'vehiclesObservedIou': 0.7745269, 'vehiclesOccludedAuc': 0.040109947, 'vehiclesOccludedIou': 0.0037256368, 'vehiclesFlowEpe': 2.2791076, 'vehiclesFlowWarpedOccupancyAuc': 0.832829, 'vehiclesFlowWarpedOccupancyIou': 0.78631246}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8576422, 'vehiclesObservedIou': 0.53402936, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.6767871, 'vehiclesFlowWarpedOccupancyAuc': 0.7356514, 'vehiclesFlowWarpedOccupancyIou': 0.6502254}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.70107335, 'vehiclesObservedIou': 0.29021376, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.5564318, 'vehiclesFlowWarpedOccupancyAuc': 0.62821454, 'vehiclesFlowWarpedOccupancyIou': 0.34727222}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.13080275, 'vehiclesObservedIou': 0.06686364, 'vehiclesOccludedAuc': 0.00597988, 'vehiclesOccludedIou': 0.0026826123, 'vehiclesFlowEpe': 3.6748843, 'vehiclesFlowWarpedOccupancyAuc': 0.21228825, 'vehiclesFlowWarpedOccupancyIou': 0.05965529}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9400776, 'vehiclesObservedIou': 0.6124085, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 1.0354052, 'vehiclesFlowWarpedOccupancyAuc': 0.8326407, 'vehiclesFlowWarpedOccupancyIou': 0.7662269}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.2958212, 'vehiclesObservedIou': 0.124620624, 'vehiclesOccludedAuc': 0.00142715, 'vehiclesOccludedIou': 0.0011324312, 'vehiclesFlowEpe': 6.8960886, 'vehiclesFlowWarpedOccupancyAuc': 0.35491678, 'vehiclesFlowWarpedOccupancyIou': 0.14500356}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.54186237, 'vehiclesObservedIou': 0.32723787, 'vehiclesOccludedAuc': 0.14506976, 'vehiclesOccludedIou': 0.027896117, 'vehiclesFlowEpe': 5.615928, 'vehiclesFlowWarpedOccupancyAuc': 0.5383926, 'vehiclesFlowWarpedOccupancyIou': 0.44101694}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.5763629, 'vehiclesObservedIou': 0.31577355, 'vehiclesOccludedAuc': 0.004234713, 'vehiclesOccludedIou': 0.0029106596, 'vehiclesFlowEpe': 4.2994385, 'vehiclesFlowWarpedOccupancyAuc': 0.56087554, 'vehiclesFlowWarpedOccupancyIou': 0.3635112}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9736814, 'vehiclesObservedIou': 0.7531608, 'vehiclesOccludedAuc': 0.0001893323, 'vehiclesOccludedIou': 0.00013390285, 'vehiclesFlowEpe': 1.8481333, 'vehiclesFlowWarpedOccupancyAuc': 0.8752395, 'vehiclesFlowWarpedOccupancyIou': 0.78880507}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6882402, 'vehiclesObservedIou': 0.3903422, 'vehiclesOccludedAuc': 0.031531967, 'vehiclesOccludedIou': 0.0072798044, 'vehiclesFlowEpe': 3.4132154, 'vehiclesFlowWarpedOccupancyAuc': 0.5636002, 'vehiclesFlowWarpedOccupancyIou': 0.41171104}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9961337, 'vehiclesObservedIou': 0.9061636, 'vehiclesOccludedAuc': 0.035595953, 'vehiclesOccludedIou': 0.01651908, 'vehiclesFlowEpe': 1.8248379, 'vehiclesFlowWarpedOccupancyAuc': 0.9073553, 'vehiclesFlowWarpedOccupancyIou': 0.92661256}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.81722474, 'vehiclesObservedIou': 0.46002203, 'vehiclesOccludedAuc': 0.46839988, 'vehiclesOccludedIou': 0.07846023, 'vehiclesFlowEpe': 3.5608242, 'vehiclesFlowWarpedOccupancyAuc': 0.6512306, 'vehiclesFlowWarpedOccupancyIou': 0.54924184}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6637996, 'vehiclesObservedIou': 0.3483904, 'vehiclesOccludedAuc': 0.14410721, 'vehiclesOccludedIou': 0.043862, 'vehiclesFlowEpe': 5.9814453, 'vehiclesFlowWarpedOccupancyAuc': 0.6123264, 'vehiclesFlowWarpedOccupancyIou': 0.4405332}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.87533903, 'vehiclesObservedIou': 0.5402883, 'vehiclesOccludedAuc': 0.018864244, 'vehiclesOccludedIou': 0.0069396365, 'vehiclesFlowEpe': 3.6687603, 'vehiclesFlowWarpedOccupancyAuc': 0.7382055, 'vehiclesFlowWarpedOccupancyIou': 0.6191499}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5541568, 'vehiclesObservedIou': 0.27566323, 'vehiclesOccludedAuc': 0.07112451, 'vehiclesOccludedIou': 0.011588324, 'vehiclesFlowEpe': 3.7386959, 'vehiclesFlowWarpedOccupancyAuc': 0.5424625, 'vehiclesFlowWarpedOccupancyIou': 0.30243686}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.67411876, 'vehiclesObservedIou': 0.42213953, 'vehiclesOccludedAuc': 0.004643292, 'vehiclesOccludedIou': 0.0019595358, 'vehiclesFlowEpe': 2.8867075, 'vehiclesFlowWarpedOccupancyAuc': 0.65538186, 'vehiclesFlowWarpedOccupancyIou': 0.45981345}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7750894, 'vehiclesObservedIou': 0.44255936, 'vehiclesOccludedAuc': 0.07764572, 'vehiclesOccludedIou': 0.017086351, 'vehiclesFlowEpe': 4.230686, 'vehiclesFlowWarpedOccupancyAuc': 0.65028906, 'vehiclesFlowWarpedOccupancyIou': 0.49033445}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.15786955, 'vehiclesObservedIou': 0.08592612, 'vehiclesOccludedAuc': 0.0406926, 'vehiclesOccludedIou': 0.002869856, 'vehiclesFlowEpe': 5.2733493, 'vehiclesFlowWarpedOccupancyAuc': 0.2815641, 'vehiclesFlowWarpedOccupancyIou': 0.10629455}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5820289, 'vehiclesObservedIou': 0.25281417, 'vehiclesOccludedAuc': 0.21245004, 'vehiclesOccludedIou': 0.02605885, 'vehiclesFlowEpe': 4.0138354, 'vehiclesFlowWarpedOccupancyAuc': 0.5477371, 'vehiclesFlowWarpedOccupancyIou': 0.31739622}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.93294233, 'vehiclesObservedIou': 0.73358214, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.9499462, 'vehiclesFlowWarpedOccupancyAuc': 0.82513225, 'vehiclesFlowWarpedOccupancyIou': 0.8060709}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9480825, 'vehiclesObservedIou': 0.65836746, 'vehiclesOccludedAuc': 0.27797073, 'vehiclesOccludedIou': 0.05820692, 'vehiclesFlowEpe': 2.614094, 'vehiclesFlowWarpedOccupancyAuc': 0.8651209, 'vehiclesFlowWarpedOccupancyIou': 0.7316673}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.58429724, 'vehiclesObservedIou': 0.36477464, 'vehiclesOccludedAuc': 0.15252803, 'vehiclesOccludedIou': 0.030871112, 'vehiclesFlowEpe': 4.5196953, 'vehiclesFlowWarpedOccupancyAuc': 0.6602776, 'vehiclesFlowWarpedOccupancyIou': 0.472812}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9428034, 'vehiclesObservedIou': 0.6916557, 'vehiclesOccludedAuc': 0.0029857121, 'vehiclesOccludedIou': 0.0017324347, 'vehiclesFlowEpe': 2.6165147, 'vehiclesFlowWarpedOccupancyAuc': 0.75860566, 'vehiclesFlowWarpedOccupancyIou': 0.7777054}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.62173474, 'vehiclesObservedIou': 0.272549, 'vehiclesOccludedAuc': 0.014372904, 'vehiclesOccludedIou': 0.0004089098, 'vehiclesFlowEpe': 3.55608, 'vehiclesFlowWarpedOccupancyAuc': 0.5436892, 'vehiclesFlowWarpedOccupancyIou': 0.11949684}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.11531292, 'vehiclesObservedIou': 0.0463583, 'vehiclesOccludedAuc': 0.05087684, 'vehiclesOccludedIou': 0.007207376, 'vehiclesFlowEpe': 5.886711, 'vehiclesFlowWarpedOccupancyAuc': 0.2765338, 'vehiclesFlowWarpedOccupancyIou': 0.060031287}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6879016, 'vehiclesObservedIou': 0.40293464, 'vehiclesOccludedAuc': 0.005861864, 'vehiclesOccludedIou': 0.0032221018, 'vehiclesFlowEpe': 2.52643, 'vehiclesFlowWarpedOccupancyAuc': 0.65952504, 'vehiclesFlowWarpedOccupancyIou': 0.4777194}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.5929377, 'vehiclesObservedIou': 0.31978372, 'vehiclesOccludedAuc': 0.119097635, 'vehiclesOccludedIou': 0.030399878, 'vehiclesFlowEpe': 4.330296, 'vehiclesFlowWarpedOccupancyAuc': 0.5579013, 'vehiclesFlowWarpedOccupancyIou': 0.31387222}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.6079124, 'vehiclesObservedIou': 0.43033525, 'vehiclesOccludedAuc': 0.070985444, 'vehiclesOccludedIou': 0.010899792, 'vehiclesFlowEpe': 3.8699048, 'vehiclesFlowWarpedOccupancyAuc': 0.62956077, 'vehiclesFlowWarpedOccupancyIou': 0.60512817}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8833121, 'vehiclesObservedIou': 0.6368219, 'vehiclesOccludedAuc': 0.02487021, 'vehiclesOccludedIou': 0.010822079, 'vehiclesFlowEpe': 2.6376743, 'vehiclesFlowWarpedOccupancyAuc': 0.81369287, 'vehiclesFlowWarpedOccupancyIou': 0.76765114}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.11593284, 'vehiclesObservedIou': 0.047667533, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 1.2148088, 'vehiclesFlowWarpedOccupancyAuc': 0.18390404, 'vehiclesFlowWarpedOccupancyIou': 0.09035758}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.19309796, 'vehiclesObservedIou': 0.09195128, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 5.064516, 'vehiclesFlowWarpedOccupancyAuc': 0.11788726, 'vehiclesFlowWarpedOccupancyIou': 0.0710991}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.88192594, 'vehiclesObservedIou': 0.5406708, 'vehiclesOccludedAuc': 0.0034011723, 'vehiclesOccludedIou': 0.0009832688, 'vehiclesFlowEpe': 3.2798195, 'vehiclesFlowWarpedOccupancyAuc': 0.7655362, 'vehiclesFlowWarpedOccupancyIou': 0.6673413}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.82922405, 'vehiclesObservedIou': 0.53261936, 'vehiclesOccludedAuc': 0.0055803754, 'vehiclesOccludedIou': 0.0021830385, 'vehiclesFlowEpe': 5.647309, 'vehiclesFlowWarpedOccupancyAuc': 0.67803717, 'vehiclesFlowWarpedOccupancyIou': 0.6396288}
2024-05-28 10:47:01.004327: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:47:01.056069: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:47:01.056348: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.93105125, 'vehiclesObservedIou': 0.6951524, 'vehiclesOccludedAuc': 0.35808015, 'vehiclesOccludedIou': 0.08905314, 'vehiclesFlowEpe': 3.3286731, 'vehiclesFlowWarpedOccupancyAuc': 0.78437585, 'vehiclesFlowWarpedOccupancyIou': 0.71562517}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.31560135, 'vehiclesObservedIou': 0.13852721, 'vehiclesOccludedAuc': 0.015781958, 'vehiclesOccludedIou': 0.0038839788, 'vehiclesFlowEpe': 9.196465, 'vehiclesFlowWarpedOccupancyAuc': 0.22519316, 'vehiclesFlowWarpedOccupancyIou': 0.14742684}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.81219363, 'vehiclesObservedIou': 0.43998924, 'vehiclesOccludedAuc': 0.06771809, 'vehiclesOccludedIou': 0.014099436, 'vehiclesFlowEpe': 2.812766, 'vehiclesFlowWarpedOccupancyAuc': 0.6864501, 'vehiclesFlowWarpedOccupancyIou': 0.51818657}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.142479, 'vehiclesObservedIou': 0.07658935, 'vehiclesOccludedAuc': 0.0015653545, 'vehiclesOccludedIou': 0.0010341808, 'vehiclesFlowEpe': 7.896231, 'vehiclesFlowWarpedOccupancyAuc': 0.217779, 'vehiclesFlowWarpedOccupancyIou': 0.078802}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8067797, 'vehiclesObservedIou': 0.43107146, 'vehiclesOccludedAuc': 0.0027289132, 'vehiclesOccludedIou': 0.0012773492, 'vehiclesFlowEpe': 3.3509798, 'vehiclesFlowWarpedOccupancyAuc': 0.72530156, 'vehiclesFlowWarpedOccupancyIou': 0.55478436}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.9961337, 'vehiclesObservedIou': 0.9061636, 'vehiclesOccludedAuc': 0.035595953, 'vehiclesOccludedIou': 0.01651908, 'vehiclesFlowEpe': 1.8248379, 'vehiclesFlowWarpedOccupancyAuc': 0.9073553, 'vehiclesFlowWarpedOccupancyIou': 0.92661256}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.655254241025641, 'vehiclesObservedIou': 0.40925572120512815, 'vehiclesOccludedAuc': 0.0634992713025641, 'vehiclesOccludedIou': 0.01326641084230769, 'vehiclesFlowEpe': 3.8750099589743594, 'vehiclesFlowWarpedOccupancyAuc': 0.602068422051282, 'vehiclesFlowWarpedOccupancyIou': 0.4668165447948718}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00099new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.60715616, 'vehiclesObservedIou': 0.32974216, 'vehiclesOccludedAuc': 0.003475252, 'vehiclesOccludedIou': 0.0019867958, 'vehiclesFlowEpe': 2.6085064, 'vehiclesFlowWarpedOccupancyAuc': 0.6510068, 'vehiclesFlowWarpedOccupancyIou': 0.39607176}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.83680314, 'vehiclesObservedIou': 0.5037583, 'vehiclesOccludedAuc': 0.06445044, 'vehiclesOccludedIou': 0.012022657, 'vehiclesFlowEpe': 3.067914, 'vehiclesFlowWarpedOccupancyAuc': 0.7296393, 'vehiclesFlowWarpedOccupancyIou': 0.57493764}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.4616586, 'vehiclesObservedIou': 0.28055358, 'vehiclesOccludedAuc': 0.32827905, 'vehiclesOccludedIou': 0.014099316, 'vehiclesFlowEpe': 6.0218143, 'vehiclesFlowWarpedOccupancyAuc': 0.4901587, 'vehiclesFlowWarpedOccupancyIou': 0.3518125}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.94185746, 'vehiclesObservedIou': 0.7209302, 'vehiclesOccludedAuc': 0.0009184163, 'vehiclesOccludedIou': 0.0004113272, 'vehiclesFlowEpe': 3.119831, 'vehiclesFlowWarpedOccupancyAuc': 0.8110931, 'vehiclesFlowWarpedOccupancyIou': 0.7727735}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9738865, 'vehiclesObservedIou': 0.69487494, 'vehiclesOccludedAuc': 0.009561869, 'vehiclesOccludedIou': 0.0024408533, 'vehiclesFlowEpe': 1.0807868, 'vehiclesFlowWarpedOccupancyAuc': 0.885093, 'vehiclesFlowWarpedOccupancyIou': 0.77376837}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7785089, 'vehiclesObservedIou': 0.41405725, 'vehiclesOccludedAuc': 0.08398075, 'vehiclesOccludedIou': 0.029453713, 'vehiclesFlowEpe': 3.852443, 'vehiclesFlowWarpedOccupancyAuc': 0.6352447, 'vehiclesFlowWarpedOccupancyIou': 0.49684164}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.21699843, 'vehiclesObservedIou': 0.099293575, 'vehiclesOccludedAuc': 0.10234626, 'vehiclesOccludedIou': 0.009112565, 'vehiclesFlowEpe': 5.0993404, 'vehiclesFlowWarpedOccupancyAuc': 0.5003619, 'vehiclesFlowWarpedOccupancyIou': 0.31791082}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8006011, 'vehiclesObservedIou': 0.4911088, 'vehiclesOccludedAuc': 0.20396897, 'vehiclesOccludedIou': 0.053659935, 'vehiclesFlowEpe': 7.966112, 'vehiclesFlowWarpedOccupancyAuc': 0.58270097, 'vehiclesFlowWarpedOccupancyIou': 0.509779}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5808349, 'vehiclesObservedIou': 0.25720516, 'vehiclesOccludedAuc': 8.786489e-05, 'vehiclesOccludedIou': 8.471592e-05, 'vehiclesFlowEpe': 5.1335196, 'vehiclesFlowWarpedOccupancyAuc': 0.4971515, 'vehiclesFlowWarpedOccupancyIou': 0.2857253}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.48887274, 'vehiclesObservedIou': 0.2157299, 'vehiclesOccludedAuc': 0.019810168, 'vehiclesOccludedIou': 0.011229354, 'vehiclesFlowEpe': 6.4185753, 'vehiclesFlowWarpedOccupancyAuc': 0.42981428, 'vehiclesFlowWarpedOccupancyIou': 0.25773713}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9243768, 'vehiclesObservedIou': 0.7325384, 'vehiclesOccludedAuc': 0.05615007, 'vehiclesOccludedIou': 0.010341911, 'vehiclesFlowEpe': 3.0241914, 'vehiclesFlowWarpedOccupancyAuc': 0.81044245, 'vehiclesFlowWarpedOccupancyIou': 0.75996375}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.62535006, 'vehiclesObservedIou': 0.3695791, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 4.1219525, 'vehiclesFlowWarpedOccupancyAuc': 0.6025866, 'vehiclesFlowWarpedOccupancyIou': 0.47367653}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9576469, 'vehiclesObservedIou': 0.73331445, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 4.254214, 'vehiclesFlowWarpedOccupancyAuc': 0.8037756, 'vehiclesFlowWarpedOccupancyIou': 0.8118656}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.73959494, 'vehiclesObservedIou': 0.28278813, 'vehiclesOccludedAuc': 0.018974917, 'vehiclesOccludedIou': 0.008797256, 'vehiclesFlowEpe': 3.8666978, 'vehiclesFlowWarpedOccupancyAuc': 0.572268, 'vehiclesFlowWarpedOccupancyIou': 0.38269675}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9828782, 'vehiclesObservedIou': 0.82934386, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.68987, 'vehiclesFlowWarpedOccupancyAuc': 0.8758885, 'vehiclesFlowWarpedOccupancyIou': 0.903402}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.85635483, 'vehiclesObservedIou': 0.61044157, 'vehiclesOccludedAuc': 0.017173294, 'vehiclesOccludedIou': 0.005394335, 'vehiclesFlowEpe': 3.4827058, 'vehiclesFlowWarpedOccupancyAuc': 0.7730709, 'vehiclesFlowWarpedOccupancyIou': 0.64405835}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.77440363, 'vehiclesObservedIou': 0.40359187, 'vehiclesOccludedAuc': 0.07201343, 'vehiclesOccludedIou': 0.019331388, 'vehiclesFlowEpe': 7.10695, 'vehiclesFlowWarpedOccupancyAuc': 0.4419964, 'vehiclesFlowWarpedOccupancyIou': 0.3495686}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.62437505, 'vehiclesObservedIou': 0.37358376, 'vehiclesOccludedAuc': 0.47965384, 'vehiclesOccludedIou': 0.03261347, 'vehiclesFlowEpe': 4.922902, 'vehiclesFlowWarpedOccupancyAuc': 0.6423978, 'vehiclesFlowWarpedOccupancyIou': 0.5273847}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.79084414, 'vehiclesObservedIou': 0.52300143, 'vehiclesOccludedAuc': 0.09668846, 'vehiclesOccludedIou': 0.013175051, 'vehiclesFlowEpe': 4.6653895, 'vehiclesFlowWarpedOccupancyAuc': 0.6622079, 'vehiclesFlowWarpedOccupancyIou': 0.5700757}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9108062, 'vehiclesObservedIou': 0.66239053, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.1934712, 'vehiclesFlowWarpedOccupancyAuc': 0.86752194, 'vehiclesFlowWarpedOccupancyIou': 0.7706102}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.86203414, 'vehiclesObservedIou': 0.5442464, 'vehiclesOccludedAuc': 0.06342865, 'vehiclesOccludedIou': 0.027453214, 'vehiclesFlowEpe': 4.283741, 'vehiclesFlowWarpedOccupancyAuc': 0.79287076, 'vehiclesFlowWarpedOccupancyIou': 0.61519927}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7077247, 'vehiclesObservedIou': 0.44657207, 'vehiclesOccludedAuc': 0.1055679, 'vehiclesOccludedIou': 0.012957936, 'vehiclesFlowEpe': 2.4690332, 'vehiclesFlowWarpedOccupancyAuc': 0.706708, 'vehiclesFlowWarpedOccupancyIou': 0.5250924}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9161933, 'vehiclesObservedIou': 0.6491083, 'vehiclesOccludedAuc': 0.017548205, 'vehiclesOccludedIou': 0.0025455425, 'vehiclesFlowEpe': 3.048871, 'vehiclesFlowWarpedOccupancyAuc': 0.7848937, 'vehiclesFlowWarpedOccupancyIou': 0.7179061}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.22068912, 'vehiclesObservedIou': 0.08883235, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.054126, 'vehiclesFlowWarpedOccupancyAuc': 0.23873039, 'vehiclesFlowWarpedOccupancyIou': 0.111611106}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.9828782, 'vehiclesObservedIou': 0.82934386, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.68987, 'vehiclesFlowWarpedOccupancyAuc': 0.8758885, 'vehiclesFlowWarpedOccupancyIou': 0.903402}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.7325187475, 'vehiclesObservedIou': 0.46902442020833335, 'vehiclesOccludedAuc': 0.07266990859125001, 'vehiclesOccludedIou': 0.011129638988333334, 'vehiclesFlowEpe': 4.106373258333334, 'vehiclesFlowWarpedOccupancyAuc': 0.6578176329166666, 'vehiclesFlowWarpedOccupancyIou': 0.5375195298333334}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00050new.tfrecords...
2024-05-28 10:47:16.347656: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:47:16.468050: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:47:16.468327: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.6812774, 'vehiclesObservedIou': 0.31869134, 'vehiclesOccludedAuc': 0.00099715, 'vehiclesOccludedIou': 0.0003023548, 'vehiclesFlowEpe': 3.070652, 'vehiclesFlowWarpedOccupancyAuc': 0.6918354, 'vehiclesFlowWarpedOccupancyIou': 0.39765695}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8223428, 'vehiclesObservedIou': 0.5462218, 'vehiclesOccludedAuc': 0.0036767668, 'vehiclesOccludedIou': 0.0018274552, 'vehiclesFlowEpe': 4.1607075, 'vehiclesFlowWarpedOccupancyAuc': 0.6983112, 'vehiclesFlowWarpedOccupancyIou': 0.65578336}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.33900568, 'vehiclesObservedIou': 0.18080744, 'vehiclesOccludedAuc': 0.12111585, 'vehiclesOccludedIou': 0.025739864, 'vehiclesFlowEpe': 5.93428, 'vehiclesFlowWarpedOccupancyAuc': 0.48384878, 'vehiclesFlowWarpedOccupancyIou': 0.22418258}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7803625, 'vehiclesObservedIou': 0.47398356, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 4.43883, 'vehiclesFlowWarpedOccupancyAuc': 0.62818897, 'vehiclesFlowWarpedOccupancyIou': 0.5319882}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.83882, 'vehiclesObservedIou': 0.5284602, 'vehiclesOccludedAuc': 0.031745058, 'vehiclesOccludedIou': 0.010287557, 'vehiclesFlowEpe': 2.8351183, 'vehiclesFlowWarpedOccupancyAuc': 0.715643, 'vehiclesFlowWarpedOccupancyIou': 0.5909908}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7392033, 'vehiclesObservedIou': 0.53465444, 'vehiclesOccludedAuc': 0.018157516, 'vehiclesOccludedIou': 0.002175919, 'vehiclesFlowEpe': 7.602957, 'vehiclesFlowWarpedOccupancyAuc': 0.67707026, 'vehiclesFlowWarpedOccupancyIou': 0.49675748}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.38821077, 'vehiclesObservedIou': 0.18967266, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.9924874, 'vehiclesFlowWarpedOccupancyAuc': 0.4769907, 'vehiclesFlowWarpedOccupancyIou': 0.23637027}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.49912614, 'vehiclesObservedIou': 0.20906493, 'vehiclesOccludedAuc': 0.07214796, 'vehiclesOccludedIou': 0.024560371, 'vehiclesFlowEpe': 5.7093587, 'vehiclesFlowWarpedOccupancyAuc': 0.48659343, 'vehiclesFlowWarpedOccupancyIou': 0.25905824}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8698659, 'vehiclesObservedIou': 0.45921806, 'vehiclesOccludedAuc': 0.012730723, 'vehiclesOccludedIou': 0.004254464, 'vehiclesFlowEpe': 3.7983575, 'vehiclesFlowWarpedOccupancyAuc': 0.52747035, 'vehiclesFlowWarpedOccupancyIou': 0.5130396}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.35258114, 'vehiclesObservedIou': 0.19637948, 'vehiclesOccludedAuc': 0.097635776, 'vehiclesOccludedIou': 0.008221518, 'vehiclesFlowEpe': 8.8393545, 'vehiclesFlowWarpedOccupancyAuc': 0.22664236, 'vehiclesFlowWarpedOccupancyIou': 0.1486952}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9174771, 'vehiclesObservedIou': 0.57075715, 'vehiclesOccludedAuc': 0.030908566, 'vehiclesOccludedIou': 0.011475671, 'vehiclesFlowEpe': 9.426403, 'vehiclesFlowWarpedOccupancyAuc': 0.6932732, 'vehiclesFlowWarpedOccupancyIou': 0.634831}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.589755, 'vehiclesObservedIou': 0.38659003, 'vehiclesOccludedAuc': 0.0038336955, 'vehiclesOccludedIou': 0.0010677971, 'vehiclesFlowEpe': 4.976636, 'vehiclesFlowWarpedOccupancyAuc': 0.55061615, 'vehiclesFlowWarpedOccupancyIou': 0.43311468}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7419484, 'vehiclesObservedIou': 0.42129838, 'vehiclesOccludedAuc': 0.16639967, 'vehiclesOccludedIou': 0.04995531, 'vehiclesFlowEpe': 5.1489525, 'vehiclesFlowWarpedOccupancyAuc': 0.6423296, 'vehiclesFlowWarpedOccupancyIou': 0.54805356}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.47487423, 'vehiclesObservedIou': 0.21588914, 'vehiclesOccludedAuc': 0.013538679, 'vehiclesOccludedIou': 0.0031183623, 'vehiclesFlowEpe': 3.5920987, 'vehiclesFlowWarpedOccupancyAuc': 0.5899682, 'vehiclesFlowWarpedOccupancyIou': 0.24475132}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8867755, 'vehiclesObservedIou': 0.57639503, 'vehiclesOccludedAuc': 0.010069944, 'vehiclesOccludedIou': 0.0045662513, 'vehiclesFlowEpe': 4.930606, 'vehiclesFlowWarpedOccupancyAuc': 0.7118527, 'vehiclesFlowWarpedOccupancyIou': 0.61676794}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.72682077, 'vehiclesObservedIou': 0.34981072, 'vehiclesOccludedAuc': 0.010032935, 'vehiclesOccludedIou': 0.0041849473, 'vehiclesFlowEpe': 3.5569837, 'vehiclesFlowWarpedOccupancyAuc': 0.63493985, 'vehiclesFlowWarpedOccupancyIou': 0.47722843}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.4420109, 'vehiclesObservedIou': 0.17697139, 'vehiclesOccludedAuc': 0.0021088333, 'vehiclesOccludedIou': 0.001180971, 'vehiclesFlowEpe': 7.6958537, 'vehiclesFlowWarpedOccupancyAuc': 0.28993642, 'vehiclesFlowWarpedOccupancyIou': 0.21636496}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.86110795, 'vehiclesObservedIou': 0.5198759, 'vehiclesOccludedAuc': 0.024276644, 'vehiclesOccludedIou': 0.008712462, 'vehiclesFlowEpe': 6.516728, 'vehiclesFlowWarpedOccupancyAuc': 0.6526444, 'vehiclesFlowWarpedOccupancyIou': 0.5635121}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7172577, 'vehiclesObservedIou': 0.3614067, 'vehiclesOccludedAuc': 0.12713967, 'vehiclesOccludedIou': 0.035096403, 'vehiclesFlowEpe': 2.9444604, 'vehiclesFlowWarpedOccupancyAuc': 0.6348317, 'vehiclesFlowWarpedOccupancyIou': 0.41765133}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.91561973, 'vehiclesObservedIou': 0.5992606, 'vehiclesOccludedAuc': 0.009860685, 'vehiclesOccludedIou': 0.0052500675, 'vehiclesFlowEpe': 1.6619502, 'vehiclesFlowWarpedOccupancyAuc': 0.8259895, 'vehiclesFlowWarpedOccupancyIou': 0.71701217}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.22830248, 'vehiclesObservedIou': 0.11797257, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 6.051269, 'vehiclesFlowWarpedOccupancyAuc': 0.36778978, 'vehiclesFlowWarpedOccupancyIou': 0.13918422}
Time: 0.0014 seconds, Metrics: {'vehiclesObservedAuc': 0.36154604, 'vehiclesObservedIou': 0.19735843, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.6713138, 'vehiclesFlowWarpedOccupancyAuc': 0.49669826, 'vehiclesFlowWarpedOccupancyIou': 0.23344307}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.5367373, 'vehiclesObservedIou': 0.24316372, 'vehiclesOccludedAuc': 0.13083631, 'vehiclesOccludedIou': 0.018492753, 'vehiclesFlowEpe': 4.372931, 'vehiclesFlowWarpedOccupancyAuc': 0.46407843, 'vehiclesFlowWarpedOccupancyIou': 0.26457652}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.939888, 'vehiclesObservedIou': 0.695868, 'vehiclesOccludedAuc': 0.03890004, 'vehiclesOccludedIou': 0.006072144, 'vehiclesFlowEpe': 17.793228, 'vehiclesFlowWarpedOccupancyAuc': 0.74040484, 'vehiclesFlowWarpedOccupancyIou': 0.7558551}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8059301, 'vehiclesObservedIou': 0.44589728, 'vehiclesOccludedAuc': 0.14232585, 'vehiclesOccludedIou': 0.026445286, 'vehiclesFlowEpe': 2.9182956, 'vehiclesFlowWarpedOccupancyAuc': 0.69566196, 'vehiclesFlowWarpedOccupancyIou': 0.44407228}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8211071, 'vehiclesObservedIou': 0.46773422, 'vehiclesOccludedAuc': 0.0047518965, 'vehiclesOccludedIou': 0.0018563236, 'vehiclesFlowEpe': 5.2145395, 'vehiclesFlowWarpedOccupancyAuc': 0.5571125, 'vehiclesFlowWarpedOccupancyIou': 0.5287016}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.5162802, 'vehiclesObservedIou': 0.237687, 'vehiclesOccludedAuc': 0.031606846, 'vehiclesOccludedIou': 0.008382492, 'vehiclesFlowEpe': 6.5290413, 'vehiclesFlowWarpedOccupancyAuc': 0.39518324, 'vehiclesFlowWarpedOccupancyIou': 0.24932493}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7074813, 'vehiclesObservedIou': 0.41814566, 'vehiclesOccludedAuc': 0.32165524, 'vehiclesOccludedIou': 0.081803896, 'vehiclesFlowEpe': 2.982061, 'vehiclesFlowWarpedOccupancyAuc': 0.67469776, 'vehiclesFlowWarpedOccupancyIou': 0.5025448}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9493757, 'vehiclesObservedIou': 0.8348431, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 8.624376, 'vehiclesFlowWarpedOccupancyAuc': 0.8795225, 'vehiclesFlowWarpedOccupancyIou': 0.9128188}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.61290836, 'vehiclesObservedIou': 0.25324273, 'vehiclesOccludedAuc': 0.11923468, 'vehiclesOccludedIou': 0.02502114, 'vehiclesFlowEpe': 4.00168, 'vehiclesFlowWarpedOccupancyAuc': 0.5457539, 'vehiclesFlowWarpedOccupancyIou': 0.26163965}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.6299007, 'vehiclesObservedIou': 0.322827, 'vehiclesOccludedAuc': 0.0076261926, 'vehiclesOccludedIou': 0.0029334014, 'vehiclesFlowEpe': 8.92193, 'vehiclesFlowWarpedOccupancyAuc': 0.42032793, 'vehiclesFlowWarpedOccupancyIou': 0.416913}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.99403983, 'vehiclesObservedIou': 0.8865893, 'vehiclesOccludedAuc': 0.013034419, 'vehiclesOccludedIou': 0.005900762, 'vehiclesFlowEpe': 2.3864114, 'vehiclesFlowWarpedOccupancyAuc': 0.8753874, 'vehiclesFlowWarpedOccupancyIou': 0.9273411}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.875757, 'vehiclesObservedIou': 0.629197, 'vehiclesOccludedAuc': 0.27340856, 'vehiclesOccludedIou': 0.06451421, 'vehiclesFlowEpe': 4.5630693, 'vehiclesFlowWarpedOccupancyAuc': 0.76122624, 'vehiclesFlowWarpedOccupancyIou': 0.6813797}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.92070866, 'vehiclesObservedIou': 0.6346173, 'vehiclesOccludedAuc': 0.13747154, 'vehiclesOccludedIou': 0.03835054, 'vehiclesFlowEpe': 3.8831828, 'vehiclesFlowWarpedOccupancyAuc': 0.8039547, 'vehiclesFlowWarpedOccupancyIou': 0.7008796}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.48994187, 'vehiclesObservedIou': 0.19513322, 'vehiclesOccludedAuc': 0.05491767, 'vehiclesOccludedIou': 0.017239505, 'vehiclesFlowEpe': 4.674435, 'vehiclesFlowWarpedOccupancyAuc': 0.6145401, 'vehiclesFlowWarpedOccupancyIou': 0.19810304}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.85160255, 'vehiclesObservedIou': 0.53925204, 'vehiclesOccludedAuc': 0.4184961, 'vehiclesOccludedIou': 0.041049816, 'vehiclesFlowEpe': 4.190274, 'vehiclesFlowWarpedOccupancyAuc': 0.6965838, 'vehiclesFlowWarpedOccupancyIou': 0.601158}
2024-05-28 10:47:38.935474: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:47:39.049066: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:47:39.049350: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.99403983, 'vehiclesObservedIou': 0.8865893, 'vehiclesOccludedAuc': 0.013034419, 'vehiclesOccludedIou': 0.005900762, 'vehiclesFlowEpe': 2.3864114, 'vehiclesFlowWarpedOccupancyAuc': 0.8753874, 'vehiclesFlowWarpedOccupancyIou': 0.9273411}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.689609725, 'vehiclesObservedIou': 0.41485937555555563, 'vehiclesOccludedAuc': 0.06807337404722222, 'vehiclesOccludedIou': 0.01500111151388889, 'vehiclesFlowEpe': 5.322522577777776, 'vehiclesFlowWarpedOccupancyAuc': 0.6063305419444442, 'vehiclesFlowWarpedOccupancyIou': 0.46504848833333345}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00115new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.78390056, 'vehiclesObservedIou': 0.41813388, 'vehiclesOccludedAuc': 0.049586184, 'vehiclesOccludedIou': 0.021930635, 'vehiclesFlowEpe': 6.125114, 'vehiclesFlowWarpedOccupancyAuc': 0.6223947, 'vehiclesFlowWarpedOccupancyIou': 0.522363}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7421705, 'vehiclesObservedIou': 0.38526922, 'vehiclesOccludedAuc': 0.030380186, 'vehiclesOccludedIou': 0.004543231, 'vehiclesFlowEpe': 4.037739, 'vehiclesFlowWarpedOccupancyAuc': 0.5431444, 'vehiclesFlowWarpedOccupancyIou': 0.27726603}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.62776583, 'vehiclesObservedIou': 0.3831908, 'vehiclesOccludedAuc': 0.016312715, 'vehiclesOccludedIou': 0.0061608637, 'vehiclesFlowEpe': 4.324876, 'vehiclesFlowWarpedOccupancyAuc': 0.5880415, 'vehiclesFlowWarpedOccupancyIou': 0.45374486}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8545372, 'vehiclesObservedIou': 0.5324165, 'vehiclesOccludedAuc': 0.037025426, 'vehiclesOccludedIou': 0.005484922, 'vehiclesFlowEpe': 4.2611985, 'vehiclesFlowWarpedOccupancyAuc': 0.677129, 'vehiclesFlowWarpedOccupancyIou': 0.59574723}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5647817, 'vehiclesObservedIou': 0.28760004, 'vehiclesOccludedAuc': 0.010791274, 'vehiclesOccludedIou': 0.0044237943, 'vehiclesFlowEpe': 5.3493624, 'vehiclesFlowWarpedOccupancyAuc': 0.56774163, 'vehiclesFlowWarpedOccupancyIou': 0.35632855}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.91612816, 'vehiclesObservedIou': 0.60614926, 'vehiclesOccludedAuc': 0.21779911, 'vehiclesOccludedIou': 0.026968176, 'vehiclesFlowEpe': 3.0473583, 'vehiclesFlowWarpedOccupancyAuc': 0.735922, 'vehiclesFlowWarpedOccupancyIou': 0.6761186}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.3007762, 'vehiclesObservedIou': 0.14583193, 'vehiclesOccludedAuc': 0.17021915, 'vehiclesOccludedIou': 0.0092935115, 'vehiclesFlowEpe': 4.185053, 'vehiclesFlowWarpedOccupancyAuc': 0.46044207, 'vehiclesFlowWarpedOccupancyIou': 0.16070732}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7660854, 'vehiclesObservedIou': 0.4321945, 'vehiclesOccludedAuc': 0.042698063, 'vehiclesOccludedIou': 0.02171989, 'vehiclesFlowEpe': 3.5021396, 'vehiclesFlowWarpedOccupancyAuc': 0.6812876, 'vehiclesFlowWarpedOccupancyIou': 0.52794313}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.35848874, 'vehiclesObservedIou': 0.21184966, 'vehiclesOccludedAuc': 0.02479078, 'vehiclesOccludedIou': 0.003962867, 'vehiclesFlowEpe': 3.3234224, 'vehiclesFlowWarpedOccupancyAuc': 0.5515406, 'vehiclesFlowWarpedOccupancyIou': 0.22323763}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.87791526, 'vehiclesObservedIou': 0.550066, 'vehiclesOccludedAuc': 0.099559344, 'vehiclesOccludedIou': 0.01672446, 'vehiclesFlowEpe': 1.7298312, 'vehiclesFlowWarpedOccupancyAuc': 0.77149415, 'vehiclesFlowWarpedOccupancyIou': 0.6877612}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.36139584, 'vehiclesObservedIou': 0.15927772, 'vehiclesOccludedAuc': 0.029120203, 'vehiclesOccludedIou': 0.009331386, 'vehiclesFlowEpe': 7.075099, 'vehiclesFlowWarpedOccupancyAuc': 0.3426869, 'vehiclesFlowWarpedOccupancyIou': 0.16260022}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.52232003, 'vehiclesObservedIou': 0.2750838, 'vehiclesOccludedAuc': 0.049022608, 'vehiclesOccludedIou': 0.009523926, 'vehiclesFlowEpe': 3.4306145, 'vehiclesFlowWarpedOccupancyAuc': 0.5528241, 'vehiclesFlowWarpedOccupancyIou': 0.3228988}
Time: 0.0014 seconds, Metrics: {'vehiclesObservedAuc': 0.7244036, 'vehiclesObservedIou': 0.32911476, 'vehiclesOccludedAuc': 0.13930152, 'vehiclesOccludedIou': 0.01755096, 'vehiclesFlowEpe': 5.893975, 'vehiclesFlowWarpedOccupancyAuc': 0.58005995, 'vehiclesFlowWarpedOccupancyIou': 0.3510273}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6385306, 'vehiclesObservedIou': 0.30604285, 'vehiclesOccludedAuc': 0.0642371, 'vehiclesOccludedIou': 0.00939509, 'vehiclesFlowEpe': 2.237527, 'vehiclesFlowWarpedOccupancyAuc': 0.61236995, 'vehiclesFlowWarpedOccupancyIou': 0.3601164}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.94882315, 'vehiclesObservedIou': 0.6962386, 'vehiclesOccludedAuc': 0.021417657, 'vehiclesOccludedIou': 0.007405203, 'vehiclesFlowEpe': 4.9350963, 'vehiclesFlowWarpedOccupancyAuc': 0.7647263, 'vehiclesFlowWarpedOccupancyIou': 0.73306984}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.1466533, 'vehiclesObservedIou': 0.061328515, 'vehiclesOccludedAuc': 0.0631848, 'vehiclesOccludedIou': 0.0058745607, 'vehiclesFlowEpe': 4.1197834, 'vehiclesFlowWarpedOccupancyAuc': 0.26766327, 'vehiclesFlowWarpedOccupancyIou': 0.055992268}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6148993, 'vehiclesObservedIou': 0.36116493, 'vehiclesOccludedAuc': 0.109640025, 'vehiclesOccludedIou': 0.026814094, 'vehiclesFlowEpe': 5.8573375, 'vehiclesFlowWarpedOccupancyAuc': 0.62788206, 'vehiclesFlowWarpedOccupancyIou': 0.37249625}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8487455, 'vehiclesObservedIou': 0.6046606, 'vehiclesOccludedAuc': 0.012149026, 'vehiclesOccludedIou': 0.0025338873, 'vehiclesFlowEpe': 20.513683, 'vehiclesFlowWarpedOccupancyAuc': 0.46732315, 'vehiclesFlowWarpedOccupancyIou': 0.5446366}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7375221, 'vehiclesObservedIou': 0.40466172, 'vehiclesOccludedAuc': 0.086723976, 'vehiclesOccludedIou': 0.008938819, 'vehiclesFlowEpe': 5.85954, 'vehiclesFlowWarpedOccupancyAuc': 0.5531665, 'vehiclesFlowWarpedOccupancyIou': 0.41208953}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5673526, 'vehiclesObservedIou': 0.3169222, 'vehiclesOccludedAuc': 0.0778096, 'vehiclesOccludedIou': 0.009556316, 'vehiclesFlowEpe': 4.6765246, 'vehiclesFlowWarpedOccupancyAuc': 0.5411839, 'vehiclesFlowWarpedOccupancyIou': 0.41160995}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5626554, 'vehiclesObservedIou': 0.27887803, 'vehiclesOccludedAuc': 0.03647059, 'vehiclesOccludedIou': 0.01037056, 'vehiclesFlowEpe': 4.7596197, 'vehiclesFlowWarpedOccupancyAuc': 0.45653757, 'vehiclesFlowWarpedOccupancyIou': 0.32620046}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9672586, 'vehiclesObservedIou': 0.7364522, 'vehiclesOccludedAuc': 0.34765315, 'vehiclesOccludedIou': 0.027231665, 'vehiclesFlowEpe': 3.0890117, 'vehiclesFlowWarpedOccupancyAuc': 0.8635805, 'vehiclesFlowWarpedOccupancyIou': 0.8482914}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8353548, 'vehiclesObservedIou': 0.4864092, 'vehiclesOccludedAuc': 0.27700323, 'vehiclesOccludedIou': 0.09044258, 'vehiclesFlowEpe': 3.4056058, 'vehiclesFlowWarpedOccupancyAuc': 0.72714573, 'vehiclesFlowWarpedOccupancyIou': 0.62011135}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.9672586, 'vehiclesObservedIou': 0.7364522, 'vehiclesOccludedAuc': 0.34765315, 'vehiclesOccludedIou': 0.027231665, 'vehiclesFlowEpe': 3.0890117, 'vehiclesFlowWarpedOccupancyAuc': 0.8635805, 'vehiclesFlowWarpedOccupancyIou': 0.8482914}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6638462769565217, 'vehiclesObservedIou': 0.3899537789130435, 'vehiclesOccludedAuc': 0.08751720508695651, 'vehiclesOccludedIou': 0.015486147717391305, 'vehiclesFlowEpe': 5.032152691304348, 'vehiclesFlowWarpedOccupancyAuc': 0.5894038056521739, 'vehiclesFlowWarpedOccupancyIou': 0.43488512686956526}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00026new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 10:47:53.492686: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:47:53.546547: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:47:53.546825: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.88123286, 'vehiclesObservedIou': 0.55718356, 'vehiclesOccludedAuc': 0.074030265, 'vehiclesOccludedIou': 0.029265668, 'vehiclesFlowEpe': 2.0005517, 'vehiclesFlowWarpedOccupancyAuc': 0.7656875, 'vehiclesFlowWarpedOccupancyIou': 0.6836302}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.78894705, 'vehiclesObservedIou': 0.4937375, 'vehiclesOccludedAuc': 0.050002586, 'vehiclesOccludedIou': 0.011930177, 'vehiclesFlowEpe': 9.147537, 'vehiclesFlowWarpedOccupancyAuc': 0.48499396, 'vehiclesFlowWarpedOccupancyIou': 0.42094046}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7015669, 'vehiclesObservedIou': 0.3452549, 'vehiclesOccludedAuc': 0.0115757175, 'vehiclesOccludedIou': 0.0044488125, 'vehiclesFlowEpe': 6.4586105, 'vehiclesFlowWarpedOccupancyAuc': 0.54967403, 'vehiclesFlowWarpedOccupancyIou': 0.44431317}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.4663366, 'vehiclesObservedIou': 0.2444338, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.7708452, 'vehiclesFlowWarpedOccupancyAuc': 0.5274087, 'vehiclesFlowWarpedOccupancyIou': 0.27315897}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.8511877, 'vehiclesObservedIou': 0.51279783, 'vehiclesOccludedAuc': 0.10846849, 'vehiclesOccludedIou': 0.030042889, 'vehiclesFlowEpe': 2.9647875, 'vehiclesFlowWarpedOccupancyAuc': 0.7277056, 'vehiclesFlowWarpedOccupancyIou': 0.6052222}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7566112, 'vehiclesObservedIou': 0.40993938, 'vehiclesOccludedAuc': 0.073351294, 'vehiclesOccludedIou': 0.022116413, 'vehiclesFlowEpe': 3.9498003, 'vehiclesFlowWarpedOccupancyAuc': 0.6309718, 'vehiclesFlowWarpedOccupancyIou': 0.45864606}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5062254, 'vehiclesObservedIou': 0.30030438, 'vehiclesOccludedAuc': 0.2058189, 'vehiclesOccludedIou': 0.025372447, 'vehiclesFlowEpe': 3.5676084, 'vehiclesFlowWarpedOccupancyAuc': 0.61798525, 'vehiclesFlowWarpedOccupancyIou': 0.32974368}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9491081, 'vehiclesObservedIou': 0.7719061, 'vehiclesOccludedAuc': 0.06808981, 'vehiclesOccludedIou': 0.02333448, 'vehiclesFlowEpe': 5.285468, 'vehiclesFlowWarpedOccupancyAuc': 0.8259293, 'vehiclesFlowWarpedOccupancyIou': 0.82899064}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.79628307, 'vehiclesObservedIou': 0.58448446, 'vehiclesOccludedAuc': 0.07189646, 'vehiclesOccludedIou': 0.015688846, 'vehiclesFlowEpe': 6.617221, 'vehiclesFlowWarpedOccupancyAuc': 0.6160105, 'vehiclesFlowWarpedOccupancyIou': 0.61140096}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7804525, 'vehiclesObservedIou': 0.40297854, 'vehiclesOccludedAuc': 0.21761009, 'vehiclesOccludedIou': 0.04189028, 'vehiclesFlowEpe': 2.9409726, 'vehiclesFlowWarpedOccupancyAuc': 0.60904133, 'vehiclesFlowWarpedOccupancyIou': 0.4348998}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7534918, 'vehiclesObservedIou': 0.43261504, 'vehiclesOccludedAuc': 0.0075881565, 'vehiclesOccludedIou': 0.0031332648, 'vehiclesFlowEpe': 3.6481946, 'vehiclesFlowWarpedOccupancyAuc': 0.62061477, 'vehiclesFlowWarpedOccupancyIou': 0.48035157}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.18377298, 'vehiclesObservedIou': 0.102503695, 'vehiclesOccludedAuc': 0.07946834, 'vehiclesOccludedIou': 0.016411481, 'vehiclesFlowEpe': 8.38188, 'vehiclesFlowWarpedOccupancyAuc': 0.19494264, 'vehiclesFlowWarpedOccupancyIou': 0.08227749}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.75162625, 'vehiclesObservedIou': 0.41761234, 'vehiclesOccludedAuc': 0.28420636, 'vehiclesOccludedIou': 0.030884027, 'vehiclesFlowEpe': 7.2408924, 'vehiclesFlowWarpedOccupancyAuc': 0.62733835, 'vehiclesFlowWarpedOccupancyIou': 0.5000882}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.78743863, 'vehiclesObservedIou': 0.3447117, 'vehiclesOccludedAuc': 0.11368391, 'vehiclesOccludedIou': 0.043688275, 'vehiclesFlowEpe': 8.355108, 'vehiclesFlowWarpedOccupancyAuc': 0.63879204, 'vehiclesFlowWarpedOccupancyIou': 0.47251114}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.310803, 'vehiclesObservedIou': 0.14845444, 'vehiclesOccludedAuc': 0.043780386, 'vehiclesOccludedIou': 0.015114177, 'vehiclesFlowEpe': 2.4252918, 'vehiclesFlowWarpedOccupancyAuc': 0.41743746, 'vehiclesFlowWarpedOccupancyIou': 0.19629286}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.99528664, 'vehiclesObservedIou': 0.89748204, 'vehiclesOccludedAuc': 0.058207475, 'vehiclesOccludedIou': 0.014899984, 'vehiclesFlowEpe': 1.465505, 'vehiclesFlowWarpedOccupancyAuc': 0.9156393, 'vehiclesFlowWarpedOccupancyIou': 0.9377416}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9289656, 'vehiclesObservedIou': 0.6788108, 'vehiclesOccludedAuc': 0.068426624, 'vehiclesOccludedIou': 0.018517114, 'vehiclesFlowEpe': 3.715209, 'vehiclesFlowWarpedOccupancyAuc': 0.7731454, 'vehiclesFlowWarpedOccupancyIou': 0.72435415}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.3247376, 'vehiclesObservedIou': 0.15203674, 'vehiclesOccludedAuc': 0.05832422, 'vehiclesOccludedIou': 0.014231965, 'vehiclesFlowEpe': 8.501944, 'vehiclesFlowWarpedOccupancyAuc': 0.2969857, 'vehiclesFlowWarpedOccupancyIou': 0.15232147}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.45126146, 'vehiclesObservedIou': 0.22765975, 'vehiclesOccludedAuc': 0.0060368357, 'vehiclesOccludedIou': 0.0030324336, 'vehiclesFlowEpe': 4.275649, 'vehiclesFlowWarpedOccupancyAuc': 0.34481785, 'vehiclesFlowWarpedOccupancyIou': 0.28235132}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.35074097, 'vehiclesObservedIou': 0.11972708, 'vehiclesOccludedAuc': 0.07895116, 'vehiclesOccludedIou': 0.012387793, 'vehiclesFlowEpe': 8.298967, 'vehiclesFlowWarpedOccupancyAuc': 0.2728114, 'vehiclesFlowWarpedOccupancyIou': 0.10970928}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.81317914, 'vehiclesObservedIou': 0.54321516, 'vehiclesOccludedAuc': 0.06602228, 'vehiclesOccludedIou': 0.01882642, 'vehiclesFlowEpe': 7.233225, 'vehiclesFlowWarpedOccupancyAuc': 0.6889351, 'vehiclesFlowWarpedOccupancyIou': 0.63436127}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9484463, 'vehiclesObservedIou': 0.63565063, 'vehiclesOccludedAuc': 0.027464803, 'vehiclesOccludedIou': 0.0064303083, 'vehiclesFlowEpe': 3.1459775, 'vehiclesFlowWarpedOccupancyAuc': 0.74316984, 'vehiclesFlowWarpedOccupancyIou': 0.682459}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6802751, 'vehiclesObservedIou': 0.3265731, 'vehiclesOccludedAuc': 0.017092269, 'vehiclesOccludedIou': 0.00581304, 'vehiclesFlowEpe': 3.386825, 'vehiclesFlowWarpedOccupancyAuc': 0.5736119, 'vehiclesFlowWarpedOccupancyIou': 0.38574362}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.76602364, 'vehiclesObservedIou': 0.4225937, 'vehiclesOccludedAuc': 7.191027e-05, 'vehiclesOccludedIou': 8.730318e-05, 'vehiclesFlowEpe': 3.9104156, 'vehiclesFlowWarpedOccupancyAuc': 0.5875335, 'vehiclesFlowWarpedOccupancyIou': 0.49429005}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.99528664, 'vehiclesObservedIou': 0.89748204, 'vehiclesOccludedAuc': 0.058207475, 'vehiclesOccludedIou': 0.014899984, 'vehiclesFlowEpe': 1.465505, 'vehiclesFlowWarpedOccupancyAuc': 0.9156393, 'vehiclesFlowWarpedOccupancyIou': 0.9377416}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6885000204166666, 'vehiclesObservedIou': 0.419694444375, 'vehiclesOccludedAuc': 0.07459034758208334, 'vehiclesOccludedIou': 0.0169811499325, 'vehiclesFlowEpe': 5.028686920833334, 'vehiclesFlowWarpedOccupancyAuc': 0.5854659674999999, 'vehiclesFlowWarpedOccupancyIou': 0.46774163166666666}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00042new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 10:48:08.764292: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:48:08.820686: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:48:08.820960: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.29738128, 'vehiclesObservedIou': 0.108008176, 'vehiclesOccludedAuc': 0.0007060958, 'vehiclesOccludedIou': 0.0011492311, 'vehiclesFlowEpe': 8.796297, 'vehiclesFlowWarpedOccupancyAuc': 0.17348625, 'vehiclesFlowWarpedOccupancyIou': 0.109037675}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.76867366, 'vehiclesObservedIou': 0.42740706, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.9567862, 'vehiclesFlowWarpedOccupancyAuc': 0.69768643, 'vehiclesFlowWarpedOccupancyIou': 0.5435122}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7109153, 'vehiclesObservedIou': 0.36794642, 'vehiclesOccludedAuc': 0.24242537, 'vehiclesOccludedIou': 0.013716701, 'vehiclesFlowEpe': 6.9685984, 'vehiclesFlowWarpedOccupancyAuc': 0.6097137, 'vehiclesFlowWarpedOccupancyIou': 0.45157784}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9810619, 'vehiclesObservedIou': 0.7576976, 'vehiclesOccludedAuc': 0.023282912, 'vehiclesOccludedIou': 0.0066294353, 'vehiclesFlowEpe': 2.3344738, 'vehiclesFlowWarpedOccupancyAuc': 0.8832176, 'vehiclesFlowWarpedOccupancyIou': 0.84280616}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.60404885, 'vehiclesObservedIou': 0.31152886, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 1.9341159, 'vehiclesFlowWarpedOccupancyAuc': 0.730078, 'vehiclesFlowWarpedOccupancyIou': 0.39516288}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.99184704, 'vehiclesObservedIou': 0.7285044, 'vehiclesOccludedAuc': 0.003962385, 'vehiclesOccludedIou': 0.0019039873, 'vehiclesFlowEpe': 9.514219, 'vehiclesFlowWarpedOccupancyAuc': 0.73690814, 'vehiclesFlowWarpedOccupancyIou': 0.7046218}
DataLossError encountered. Skipping the corrupted record.
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.99184704, 'vehiclesObservedIou': 0.7285044, 'vehiclesOccludedAuc': 0.003962385, 'vehiclesOccludedIou': 0.0019039873, 'vehiclesFlowEpe': 9.514219, 'vehiclesFlowWarpedOccupancyAuc': 0.73690814, 'vehiclesFlowWarpedOccupancyIou': 0.7046218}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.7256546716666666, 'vehiclesObservedIou': 0.45018208600000004, 'vehiclesOccludedAuc': 0.0450627938, 'vehiclesOccludedIou': 0.00389989245, 'vehiclesFlowEpe': 5.41741505, 'vehiclesFlowWarpedOccupancyAuc': 0.63851502, 'vehiclesFlowWarpedOccupancyIou': 0.5077864258333333}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00127new.tfrecords...
2024-05-28 10:48:12.818124: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:48:12.938228: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:48:12.938509: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.46972084, 'vehiclesObservedIou': 0.22249883, 'vehiclesOccludedAuc': 0.09478684, 'vehiclesOccludedIou': 0.023494406, 'vehiclesFlowEpe': 4.179129, 'vehiclesFlowWarpedOccupancyAuc': 0.4679116, 'vehiclesFlowWarpedOccupancyIou': 0.2522867}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.7274919, 'vehiclesObservedIou': 0.4048358, 'vehiclesOccludedAuc': 0.18668291, 'vehiclesOccludedIou': 0.048415523, 'vehiclesFlowEpe': 3.4139247, 'vehiclesFlowWarpedOccupancyAuc': 0.6225425, 'vehiclesFlowWarpedOccupancyIou': 0.49031487}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7075156, 'vehiclesObservedIou': 0.4048465, 'vehiclesOccludedAuc': 0.089066304, 'vehiclesOccludedIou': 0.02466314, 'vehiclesFlowEpe': 4.5840697, 'vehiclesFlowWarpedOccupancyAuc': 0.5785759, 'vehiclesFlowWarpedOccupancyIou': 0.49221814}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.798377, 'vehiclesObservedIou': 0.49470434, 'vehiclesOccludedAuc': 0.2387833, 'vehiclesOccludedIou': 0.037703395, 'vehiclesFlowEpe': 2.2909794, 'vehiclesFlowWarpedOccupancyAuc': 0.72627175, 'vehiclesFlowWarpedOccupancyIou': 0.5676048}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8171072, 'vehiclesObservedIou': 0.4717869, 'vehiclesOccludedAuc': 0.24827996, 'vehiclesOccludedIou': 0.033453684, 'vehiclesFlowEpe': 3.5636153, 'vehiclesFlowWarpedOccupancyAuc': 0.67783564, 'vehiclesFlowWarpedOccupancyIou': 0.52334034}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8392843, 'vehiclesObservedIou': 0.5183046, 'vehiclesOccludedAuc': 0.19065404, 'vehiclesOccludedIou': 0.021410761, 'vehiclesFlowEpe': 3.3604317, 'vehiclesFlowWarpedOccupancyAuc': 0.74253386, 'vehiclesFlowWarpedOccupancyIou': 0.598805}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8921617, 'vehiclesObservedIou': 0.722767, 'vehiclesOccludedAuc': 0.0126192495, 'vehiclesOccludedIou': 0.004404607, 'vehiclesFlowEpe': 4.0589247, 'vehiclesFlowWarpedOccupancyAuc': 0.82601947, 'vehiclesFlowWarpedOccupancyIou': 0.81315994}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5744412, 'vehiclesObservedIou': 0.27497292, 'vehiclesOccludedAuc': 0.07767311, 'vehiclesOccludedIou': 0.019320589, 'vehiclesFlowEpe': 3.6801243, 'vehiclesFlowWarpedOccupancyAuc': 0.54131347, 'vehiclesFlowWarpedOccupancyIou': 0.3169672}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.62102956, 'vehiclesObservedIou': 0.2700711, 'vehiclesOccludedAuc': 0.0962147, 'vehiclesOccludedIou': 0.029022897, 'vehiclesFlowEpe': 3.9210768, 'vehiclesFlowWarpedOccupancyAuc': 0.5724427, 'vehiclesFlowWarpedOccupancyIou': 0.33873472}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6793587, 'vehiclesObservedIou': 0.3509485, 'vehiclesOccludedAuc': 0.2319648, 'vehiclesOccludedIou': 0.054059427, 'vehiclesFlowEpe': 3.0591733, 'vehiclesFlowWarpedOccupancyAuc': 0.6536629, 'vehiclesFlowWarpedOccupancyIou': 0.48905087}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.48260257, 'vehiclesObservedIou': 0.2624414, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.4630933, 'vehiclesFlowWarpedOccupancyAuc': 0.50176597, 'vehiclesFlowWarpedOccupancyIou': 0.30823964}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8535583, 'vehiclesObservedIou': 0.52495897, 'vehiclesOccludedAuc': 0.21273205, 'vehiclesOccludedIou': 0.051514614, 'vehiclesFlowEpe': 3.5569205, 'vehiclesFlowWarpedOccupancyAuc': 0.80346733, 'vehiclesFlowWarpedOccupancyIou': 0.6834706}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.68179214, 'vehiclesObservedIou': 0.32991505, 'vehiclesOccludedAuc': 0.025553187, 'vehiclesOccludedIou': 0.0082461545, 'vehiclesFlowEpe': 7.1205816, 'vehiclesFlowWarpedOccupancyAuc': 0.42845288, 'vehiclesFlowWarpedOccupancyIou': 0.36457244}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.92855823, 'vehiclesObservedIou': 0.71402824, 'vehiclesOccludedAuc': 0.13033327, 'vehiclesOccludedIou': 0.024360776, 'vehiclesFlowEpe': 5.03335, 'vehiclesFlowWarpedOccupancyAuc': 0.83808225, 'vehiclesFlowWarpedOccupancyIou': 0.81221575}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.85099065, 'vehiclesObservedIou': 0.56179416, 'vehiclesOccludedAuc': 0.016091257, 'vehiclesOccludedIou': 0.0064125857, 'vehiclesFlowEpe': 6.4113, 'vehiclesFlowWarpedOccupancyAuc': 0.71105015, 'vehiclesFlowWarpedOccupancyIou': 0.46304524}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.78424925, 'vehiclesObservedIou': 0.4671896, 'vehiclesOccludedAuc': 0.021733062, 'vehiclesOccludedIou': 0.0077104354, 'vehiclesFlowEpe': 4.3937297, 'vehiclesFlowWarpedOccupancyAuc': 0.6891128, 'vehiclesFlowWarpedOccupancyIou': 0.5767545}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.30443418, 'vehiclesObservedIou': 0.14527942, 'vehiclesOccludedAuc': 0.03336539, 'vehiclesOccludedIou': 0.010871472, 'vehiclesFlowEpe': 3.786086, 'vehiclesFlowWarpedOccupancyAuc': 0.31027985, 'vehiclesFlowWarpedOccupancyIou': 0.187806}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9631197, 'vehiclesObservedIou': 0.8183471, 'vehiclesOccludedAuc': 0.008201906, 'vehiclesOccludedIou': 0.003416224, 'vehiclesFlowEpe': 4.8028846, 'vehiclesFlowWarpedOccupancyAuc': 0.884179, 'vehiclesFlowWarpedOccupancyIou': 0.89355296}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8408162, 'vehiclesObservedIou': 0.4946995, 'vehiclesOccludedAuc': 0.061176557, 'vehiclesOccludedIou': 0.015905505, 'vehiclesFlowEpe': 2.8473632, 'vehiclesFlowWarpedOccupancyAuc': 0.7701756, 'vehiclesFlowWarpedOccupancyIou': 0.6294339}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7147586, 'vehiclesObservedIou': 0.37048677, 'vehiclesOccludedAuc': 0.028243326, 'vehiclesOccludedIou': 0.0062022703, 'vehiclesFlowEpe': 3.6509814, 'vehiclesFlowWarpedOccupancyAuc': 0.6609477, 'vehiclesFlowWarpedOccupancyIou': 0.45915687}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7456459, 'vehiclesObservedIou': 0.41715243, 'vehiclesOccludedAuc': 0.05984214, 'vehiclesOccludedIou': 0.017051915, 'vehiclesFlowEpe': 3.9106452, 'vehiclesFlowWarpedOccupancyAuc': 0.60218143, 'vehiclesFlowWarpedOccupancyIou': 0.47095993}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7421614, 'vehiclesObservedIou': 0.38014948, 'vehiclesOccludedAuc': 0.05102711, 'vehiclesOccludedIou': 0.009298514, 'vehiclesFlowEpe': 2.8024733, 'vehiclesFlowWarpedOccupancyAuc': 0.5646716, 'vehiclesFlowWarpedOccupancyIou': 0.39926964}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.22783753, 'vehiclesObservedIou': 0.1207671, 'vehiclesOccludedAuc': 0.28409976, 'vehiclesOccludedIou': 0.046587918, 'vehiclesFlowEpe': 5.592546, 'vehiclesFlowWarpedOccupancyAuc': 0.31110752, 'vehiclesFlowWarpedOccupancyIou': 0.16183193}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.97698665, 'vehiclesObservedIou': 0.65124506, 'vehiclesOccludedAuc': 0.0011288485, 'vehiclesOccludedIou': 0.0007067486, 'vehiclesFlowEpe': 5.112879, 'vehiclesFlowWarpedOccupancyAuc': 0.8084436, 'vehiclesFlowWarpedOccupancyIou': 0.7521426}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.31958526, 'vehiclesObservedIou': 0.1447312, 'vehiclesOccludedAuc': 0.099963784, 'vehiclesOccludedIou': 0.017594565, 'vehiclesFlowEpe': 4.445183, 'vehiclesFlowWarpedOccupancyAuc': 0.4121536, 'vehiclesFlowWarpedOccupancyIou': 0.14435767}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7443733, 'vehiclesObservedIou': 0.40715578, 'vehiclesOccludedAuc': 0.029916713, 'vehiclesOccludedIou': 0.013263913, 'vehiclesFlowEpe': 4.063564, 'vehiclesFlowWarpedOccupancyAuc': 0.6525305, 'vehiclesFlowWarpedOccupancyIou': 0.48778152}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8993213, 'vehiclesObservedIou': 0.5637398, 'vehiclesOccludedAuc': 0.0038783192, 'vehiclesOccludedIou': 0.0020563786, 'vehiclesFlowEpe': 6.2607365, 'vehiclesFlowWarpedOccupancyAuc': 0.70647115, 'vehiclesFlowWarpedOccupancyIou': 0.61642194}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9399184, 'vehiclesObservedIou': 0.63845056, 'vehiclesOccludedAuc': 0.018500205, 'vehiclesOccludedIou': 0.007598588, 'vehiclesFlowEpe': 6.630105, 'vehiclesFlowWarpedOccupancyAuc': 0.71636117, 'vehiclesFlowWarpedOccupancyIou': 0.672551}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8552469, 'vehiclesObservedIou': 0.56036353, 'vehiclesOccludedAuc': 0.27042913, 'vehiclesOccludedIou': 0.039295055, 'vehiclesFlowEpe': 2.8596992, 'vehiclesFlowWarpedOccupancyAuc': 0.7893798, 'vehiclesFlowWarpedOccupancyIou': 0.680906}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.2285981, 'vehiclesObservedIou': 0.11699982, 'vehiclesOccludedAuc': 0.0006909366, 'vehiclesOccludedIou': 0.0001717004, 'vehiclesFlowEpe': 3.6457827, 'vehiclesFlowWarpedOccupancyAuc': 0.57056105, 'vehiclesFlowWarpedOccupancyIou': 0.1670616}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.10399366, 'vehiclesObservedIou': 0.04955821, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 6.3777456, 'vehiclesFlowWarpedOccupancyAuc': 0.14541808, 'vehiclesFlowWarpedOccupancyIou': 0.053538878}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.30807933, 'vehiclesObservedIou': 0.15685947, 'vehiclesOccludedAuc': 0.3273954, 'vehiclesOccludedIou': 0.0356636, 'vehiclesFlowEpe': 2.8069968, 'vehiclesFlowWarpedOccupancyAuc': 0.6026679, 'vehiclesFlowWarpedOccupancyIou': 0.2937083}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.27170205, 'vehiclesObservedIou': 0.12560248, 'vehiclesOccludedAuc': 0.034709245, 'vehiclesOccludedIou': 0.008845235, 'vehiclesFlowEpe': 9.047596, 'vehiclesFlowWarpedOccupancyAuc': 0.2544637, 'vehiclesFlowWarpedOccupancyIou': 0.116533875}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.97698665, 'vehiclesObservedIou': 0.65124506, 'vehiclesOccludedAuc': 0.0011288485, 'vehiclesOccludedIou': 0.0007067486, 'vehiclesFlowEpe': 5.112879, 'vehiclesFlowWarpedOccupancyAuc': 0.8084436, 'vehiclesFlowWarpedOccupancyIou': 0.7521426}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.663479321212121, 'vehiclesObservedIou': 0.3987167157575758, 'vehiclesOccludedAuc': 0.0965374790848485, 'vehiclesOccludedIou': 0.019052199893939397, 'vehiclesFlowEpe': 4.38586943939394, 'vehiclesFlowWarpedOccupancyAuc': 0.6103949824242425, 'vehiclesFlowWarpedOccupancyIou': 0.4629634958484849}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00122new.tfrecords...
2024-05-28 10:48:33.754147: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:48:33.805039: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:48:33.805322: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.92162025, 'vehiclesObservedIou': 0.68118376, 'vehiclesOccludedAuc': 0.05405446, 'vehiclesOccludedIou': 0.01897748, 'vehiclesFlowEpe': 9.0487175, 'vehiclesFlowWarpedOccupancyAuc': 0.7591725, 'vehiclesFlowWarpedOccupancyIou': 0.7654926}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.6502917, 'vehiclesObservedIou': 0.32858858, 'vehiclesOccludedAuc': 0.27204132, 'vehiclesOccludedIou': 0.05454863, 'vehiclesFlowEpe': 2.861239, 'vehiclesFlowWarpedOccupancyAuc': 0.6484486, 'vehiclesFlowWarpedOccupancyIou': 0.3885703}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7810342, 'vehiclesObservedIou': 0.49739572, 'vehiclesOccludedAuc': 0.13511969, 'vehiclesOccludedIou': 0.053080138, 'vehiclesFlowEpe': 6.4677315, 'vehiclesFlowWarpedOccupancyAuc': 0.63488936, 'vehiclesFlowWarpedOccupancyIou': 0.5495143}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.36002627, 'vehiclesObservedIou': 0.17342955, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 4.7724376, 'vehiclesFlowWarpedOccupancyAuc': 0.44483313, 'vehiclesFlowWarpedOccupancyIou': 0.19430728}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.80788857, 'vehiclesObservedIou': 0.5361713, 'vehiclesOccludedAuc': 0.45876217, 'vehiclesOccludedIou': 0.025503613, 'vehiclesFlowEpe': 5.2548237, 'vehiclesFlowWarpedOccupancyAuc': 0.77956283, 'vehiclesFlowWarpedOccupancyIou': 0.7728063}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.59169114, 'vehiclesObservedIou': 0.38277125, 'vehiclesOccludedAuc': 0.0410012, 'vehiclesOccludedIou': 0.008455142, 'vehiclesFlowEpe': 4.4645624, 'vehiclesFlowWarpedOccupancyAuc': 0.59501326, 'vehiclesFlowWarpedOccupancyIou': 0.42799813}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.12168501, 'vehiclesObservedIou': 0.055537324, 'vehiclesOccludedAuc': 0.008072752, 'vehiclesOccludedIou': 0.002632418, 'vehiclesFlowEpe': 6.8251333, 'vehiclesFlowWarpedOccupancyAuc': 0.24993716, 'vehiclesFlowWarpedOccupancyIou': 0.04901909}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6321122, 'vehiclesObservedIou': 0.33249205, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 4.9776535, 'vehiclesFlowWarpedOccupancyAuc': 0.5395542, 'vehiclesFlowWarpedOccupancyIou': 0.43008083}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.81523013, 'vehiclesObservedIou': 0.5536229, 'vehiclesOccludedAuc': 0.040336438, 'vehiclesOccludedIou': 0.01359514, 'vehiclesFlowEpe': 7.8640285, 'vehiclesFlowWarpedOccupancyAuc': 0.67888844, 'vehiclesFlowWarpedOccupancyIou': 0.69201624}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7340451, 'vehiclesObservedIou': 0.47540456, 'vehiclesOccludedAuc': 0.10301498, 'vehiclesOccludedIou': 0.017206987, 'vehiclesFlowEpe': 5.602109, 'vehiclesFlowWarpedOccupancyAuc': 0.7132127, 'vehiclesFlowWarpedOccupancyIou': 0.61081815}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7725992, 'vehiclesObservedIou': 0.47017577, 'vehiclesOccludedAuc': 0.008104553, 'vehiclesOccludedIou': 0.00299543, 'vehiclesFlowEpe': 7.6141295, 'vehiclesFlowWarpedOccupancyAuc': 0.5037823, 'vehiclesFlowWarpedOccupancyIou': 0.49930704}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.80499136, 'vehiclesObservedIou': 0.42028177, 'vehiclesOccludedAuc': 0.040507108, 'vehiclesOccludedIou': 0.010624715, 'vehiclesFlowEpe': 8.154337, 'vehiclesFlowWarpedOccupancyAuc': 0.53804606, 'vehiclesFlowWarpedOccupancyIou': 0.42980665}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.71731454, 'vehiclesObservedIou': 0.37093753, 'vehiclesOccludedAuc': 0.28591508, 'vehiclesOccludedIou': 0.041068662, 'vehiclesFlowEpe': 4.87591, 'vehiclesFlowWarpedOccupancyAuc': 0.675959, 'vehiclesFlowWarpedOccupancyIou': 0.49562618}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7177229, 'vehiclesObservedIou': 0.34833807, 'vehiclesOccludedAuc': 0.18857308, 'vehiclesOccludedIou': 0.028410617, 'vehiclesFlowEpe': 6.081023, 'vehiclesFlowWarpedOccupancyAuc': 0.51336896, 'vehiclesFlowWarpedOccupancyIou': 0.27488464}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6970446, 'vehiclesObservedIou': 0.3879115, 'vehiclesOccludedAuc': 0.4027357, 'vehiclesOccludedIou': 0.06850541, 'vehiclesFlowEpe': 4.8945613, 'vehiclesFlowWarpedOccupancyAuc': 0.6372808, 'vehiclesFlowWarpedOccupancyIou': 0.5578623}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.49551538, 'vehiclesObservedIou': 0.330941, 'vehiclesOccludedAuc': 0.02795947, 'vehiclesOccludedIou': 0.007834313, 'vehiclesFlowEpe': 4.796629, 'vehiclesFlowWarpedOccupancyAuc': 0.5331902, 'vehiclesFlowWarpedOccupancyIou': 0.3889576}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.11346868, 'vehiclesObservedIou': 0.0680626, 'vehiclesOccludedAuc': 0.027530614, 'vehiclesOccludedIou': 0.006750911, 'vehiclesFlowEpe': 8.237413, 'vehiclesFlowWarpedOccupancyAuc': 0.17399226, 'vehiclesFlowWarpedOccupancyIou': 0.06150115}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.45471865, 'vehiclesObservedIou': 0.2676797, 'vehiclesOccludedAuc': 0.001311671, 'vehiclesOccludedIou': 0.0010167651, 'vehiclesFlowEpe': 3.7047236, 'vehiclesFlowWarpedOccupancyAuc': 0.55414677, 'vehiclesFlowWarpedOccupancyIou': 0.3294121}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.72095096, 'vehiclesObservedIou': 0.4612128, 'vehiclesOccludedAuc': 0.01878456, 'vehiclesOccludedIou': 0.0062085604, 'vehiclesFlowEpe': 9.050264, 'vehiclesFlowWarpedOccupancyAuc': 0.6670172, 'vehiclesFlowWarpedOccupancyIou': 0.6254209}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.29180694, 'vehiclesObservedIou': 0.14114499, 'vehiclesOccludedAuc': 0.048104707, 'vehiclesOccludedIou': 0.0016954883, 'vehiclesFlowEpe': 4.883259, 'vehiclesFlowWarpedOccupancyAuc': 0.3500706, 'vehiclesFlowWarpedOccupancyIou': 0.1475316}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.30087712, 'vehiclesObservedIou': 0.13210632, 'vehiclesOccludedAuc': 0.0036520744, 'vehiclesOccludedIou': 0.0034607768, 'vehiclesFlowEpe': 9.82203, 'vehiclesFlowWarpedOccupancyAuc': 0.25016037, 'vehiclesFlowWarpedOccupancyIou': 0.15241125}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8432934, 'vehiclesObservedIou': 0.5310359, 'vehiclesOccludedAuc': 0.021519076, 'vehiclesOccludedIou': 0.007973387, 'vehiclesFlowEpe': 7.043719, 'vehiclesFlowWarpedOccupancyAuc': 0.6511934, 'vehiclesFlowWarpedOccupancyIou': 0.6020226}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9379258, 'vehiclesObservedIou': 0.65059215, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 0.84218496, 'vehiclesFlowWarpedOccupancyAuc': 0.87372726, 'vehiclesFlowWarpedOccupancyIou': 0.75751317}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.3360066, 'vehiclesObservedIou': 0.15692252, 'vehiclesOccludedAuc': 0.037141345, 'vehiclesOccludedIou': 0.00825756, 'vehiclesFlowEpe': 6.2164774, 'vehiclesFlowWarpedOccupancyAuc': 0.3203503, 'vehiclesFlowWarpedOccupancyIou': 0.14559337}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7668763, 'vehiclesObservedIou': 0.46564686, 'vehiclesOccludedAuc': 0.06986201, 'vehiclesOccludedIou': 0.01149871, 'vehiclesFlowEpe': 4.6801353, 'vehiclesFlowWarpedOccupancyAuc': 0.641181, 'vehiclesFlowWarpedOccupancyIou': 0.52967316}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.28903294, 'vehiclesObservedIou': 0.14583418, 'vehiclesOccludedAuc': 0.03916505, 'vehiclesOccludedIou': 0.0061320653, 'vehiclesFlowEpe': 5.542566, 'vehiclesFlowWarpedOccupancyAuc': 0.41006467, 'vehiclesFlowWarpedOccupancyIou': 0.17287393}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.85733974, 'vehiclesObservedIou': 0.52865535, 'vehiclesOccludedAuc': 0.17561086, 'vehiclesOccludedIou': 0.044347126, 'vehiclesFlowEpe': 3.1098049, 'vehiclesFlowWarpedOccupancyAuc': 0.7393609, 'vehiclesFlowWarpedOccupancyIou': 0.5635327}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.92628396, 'vehiclesObservedIou': 0.6444901, 'vehiclesOccludedAuc': 0.014598572, 'vehiclesOccludedIou': 0.0054034367, 'vehiclesFlowEpe': 3.018009, 'vehiclesFlowWarpedOccupancyAuc': 0.76613265, 'vehiclesFlowWarpedOccupancyIou': 0.67854345}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.9379258, 'vehiclesObservedIou': 0.65059215, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 0.84218496, 'vehiclesFlowWarpedOccupancyAuc': 0.87372726, 'vehiclesFlowWarpedOccupancyIou': 0.75751317}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6235497728571427, 'vehiclesObservedIou': 0.37637736085714285, 'vehiclesOccludedAuc': 0.0901242335857143, 'vehiclesOccludedIou': 0.0162922672, 'vehiclesFlowEpe': 5.7394861414285705, 'vehiclesFlowWarpedOccupancyAuc': 0.5658048885714285, 'vehiclesFlowWarpedOccupancyIou': 0.43903917892857136}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00017new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 10:48:51.602883: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:48:51.653950: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:48:51.654232: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.9189561, 'vehiclesObservedIou': 0.6905266, 'vehiclesOccludedAuc': 0.017666107, 'vehiclesOccludedIou': 0.0053266226, 'vehiclesFlowEpe': 5.3340206, 'vehiclesFlowWarpedOccupancyAuc': 0.74658173, 'vehiclesFlowWarpedOccupancyIou': 0.7541408}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5881747, 'vehiclesObservedIou': 0.28254828, 'vehiclesOccludedAuc': 0.047098808, 'vehiclesOccludedIou': 0.017829666, 'vehiclesFlowEpe': 3.8368368, 'vehiclesFlowWarpedOccupancyAuc': 0.58366394, 'vehiclesFlowWarpedOccupancyIou': 0.33612886}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.45714816, 'vehiclesObservedIou': 0.23434678, 'vehiclesOccludedAuc': 0.16999726, 'vehiclesOccludedIou': 0.013250008, 'vehiclesFlowEpe': 7.075086, 'vehiclesFlowWarpedOccupancyAuc': 0.43296084, 'vehiclesFlowWarpedOccupancyIou': 0.28437275}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5236828, 'vehiclesObservedIou': 0.25917095, 'vehiclesOccludedAuc': 0.001366065, 'vehiclesOccludedIou': 0.0007859238, 'vehiclesFlowEpe': 8.034481, 'vehiclesFlowWarpedOccupancyAuc': 0.4048707, 'vehiclesFlowWarpedOccupancyIou': 0.27160335}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.47809696, 'vehiclesObservedIou': 0.2314222, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 4.359105, 'vehiclesFlowWarpedOccupancyAuc': 0.4360794, 'vehiclesFlowWarpedOccupancyIou': 0.2690917}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.45786738, 'vehiclesObservedIou': 0.18275687, 'vehiclesOccludedAuc': 0.003336132, 'vehiclesOccludedIou': 0.002579904, 'vehiclesFlowEpe': 4.2517414, 'vehiclesFlowWarpedOccupancyAuc': 0.4904086, 'vehiclesFlowWarpedOccupancyIou': 0.22573969}
DataLossError encountered. Skipping the corrupted record.
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.9189561, 'vehiclesObservedIou': 0.6905266, 'vehiclesOccludedAuc': 0.017666107, 'vehiclesOccludedIou': 0.0053266226, 'vehiclesFlowEpe': 5.3340206, 'vehiclesFlowWarpedOccupancyAuc': 0.74658173, 'vehiclesFlowWarpedOccupancyIou': 0.7541408}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.5706543500000001, 'vehiclesObservedIou': 0.31346194666666666, 'vehiclesOccludedAuc': 0.039910728666666666, 'vehiclesOccludedIou': 0.0066286873999999996, 'vehiclesFlowEpe': 5.481878466666667, 'vehiclesFlowWarpedOccupancyAuc': 0.5157608683333333, 'vehiclesFlowWarpedOccupancyIou': 0.3568461916666666}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00123new.tfrecords...
2024-05-28 10:48:55.629450: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:48:55.682404: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:48:55.682690: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8546147, 'vehiclesObservedIou': 0.5102027, 'vehiclesOccludedAuc': 0.1750185, 'vehiclesOccludedIou': 0.03817472, 'vehiclesFlowEpe': 3.6286402, 'vehiclesFlowWarpedOccupancyAuc': 0.7447044, 'vehiclesFlowWarpedOccupancyIou': 0.59639215}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6877581, 'vehiclesObservedIou': 0.26404917, 'vehiclesOccludedAuc': 0.08769569, 'vehiclesOccludedIou': 0.021429416, 'vehiclesFlowEpe': 2.9405837, 'vehiclesFlowWarpedOccupancyAuc': 0.6847849, 'vehiclesFlowWarpedOccupancyIou': 0.30033886}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8611284, 'vehiclesObservedIou': 0.5112868, 'vehiclesOccludedAuc': 0.023221828, 'vehiclesOccludedIou': 0.010445636, 'vehiclesFlowEpe': 7.8072367, 'vehiclesFlowWarpedOccupancyAuc': 0.6801802, 'vehiclesFlowWarpedOccupancyIou': 0.60781956}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.42546538, 'vehiclesObservedIou': 0.2003318, 'vehiclesOccludedAuc': 0.034661274, 'vehiclesOccludedIou': 0.012163226, 'vehiclesFlowEpe': 7.282943, 'vehiclesFlowWarpedOccupancyAuc': 0.49583307, 'vehiclesFlowWarpedOccupancyIou': 0.24151239}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5456515, 'vehiclesObservedIou': 0.22359721, 'vehiclesOccludedAuc': 0.03420877, 'vehiclesOccludedIou': 0.010850173, 'vehiclesFlowEpe': 4.271651, 'vehiclesFlowWarpedOccupancyAuc': 0.5269732, 'vehiclesFlowWarpedOccupancyIou': 0.27737898}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9172068, 'vehiclesObservedIou': 0.65150976, 'vehiclesOccludedAuc': 0.09486124, 'vehiclesOccludedIou': 0.01586961, 'vehiclesFlowEpe': 5.4829683, 'vehiclesFlowWarpedOccupancyAuc': 0.7653959, 'vehiclesFlowWarpedOccupancyIou': 0.67606986}
DataLossError encountered. Skipping the corrupted record.
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.9172068, 'vehiclesObservedIou': 0.65150976, 'vehiclesOccludedAuc': 0.09486124, 'vehiclesOccludedIou': 0.01586961, 'vehiclesFlowEpe': 5.4829683, 'vehiclesFlowWarpedOccupancyAuc': 0.7653959, 'vehiclesFlowWarpedOccupancyIou': 0.67606986}
2024-05-28 10:48:59.737091: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:48:59.787351: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:48:59.787641: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.7153041466666666, 'vehiclesObservedIou': 0.3934962400000001, 'vehiclesOccludedAuc': 0.07494455033333335, 'vehiclesOccludedIou': 0.0181554635, 'vehiclesFlowEpe': 5.235670483333334, 'vehiclesFlowWarpedOccupancyAuc': 0.6496452783333334, 'vehiclesFlowWarpedOccupancyIou': 0.4499186333333334}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00104new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.18534675, 'vehiclesObservedIou': 0.07419789, 'vehiclesOccludedAuc': 0.016404096, 'vehiclesOccludedIou': 0.0037219734, 'vehiclesFlowEpe': 4.899523, 'vehiclesFlowWarpedOccupancyAuc': 0.36548418, 'vehiclesFlowWarpedOccupancyIou': 0.079040475}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.18364134, 'vehiclesObservedIou': 0.08920677, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 4.8709764, 'vehiclesFlowWarpedOccupancyAuc': 0.30525172, 'vehiclesFlowWarpedOccupancyIou': 0.10665222}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.53636825, 'vehiclesObservedIou': 0.26926622, 'vehiclesOccludedAuc': 0.3016731, 'vehiclesOccludedIou': 0.038384356, 'vehiclesFlowEpe': 5.7811546, 'vehiclesFlowWarpedOccupancyAuc': 0.5433462, 'vehiclesFlowWarpedOccupancyIou': 0.35702813}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8842454, 'vehiclesObservedIou': 0.6406458, 'vehiclesOccludedAuc': 0.027536973, 'vehiclesOccludedIou': 0.013144419, 'vehiclesFlowEpe': 1.7547171, 'vehiclesFlowWarpedOccupancyAuc': 0.8683966, 'vehiclesFlowWarpedOccupancyIou': 0.7302122}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.68115145, 'vehiclesObservedIou': 0.3570007, 'vehiclesOccludedAuc': 0.008204475, 'vehiclesOccludedIou': 0.0026555767, 'vehiclesFlowEpe': 3.9270027, 'vehiclesFlowWarpedOccupancyAuc': 0.57993263, 'vehiclesFlowWarpedOccupancyIou': 0.3998931}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.80745876, 'vehiclesObservedIou': 0.50431347, 'vehiclesOccludedAuc': 0.18379658, 'vehiclesOccludedIou': 0.026373245, 'vehiclesFlowEpe': 5.0008745, 'vehiclesFlowWarpedOccupancyAuc': 0.6532756, 'vehiclesFlowWarpedOccupancyIou': 0.5825232}
DataLossError encountered. Skipping the corrupted record.
2024-05-28 10:49:03.736878: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:49:03.798236: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:49:03.798583: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.8842454, 'vehiclesObservedIou': 0.6406458, 'vehiclesOccludedAuc': 0.027536973, 'vehiclesOccludedIou': 0.013144419, 'vehiclesFlowEpe': 1.7547171, 'vehiclesFlowWarpedOccupancyAuc': 0.8683966, 'vehiclesFlowWarpedOccupancyIou': 0.7302122}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.5463686583333334, 'vehiclesObservedIou': 0.322438475, 'vehiclesOccludedAuc': 0.08960253733333334, 'vehiclesOccludedIou': 0.014046595016666668, 'vehiclesFlowEpe': 4.372374716666666, 'vehiclesFlowWarpedOccupancyAuc': 0.5526144883333334, 'vehiclesFlowWarpedOccupancyIou': 0.3758915541666667}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00126new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0014 seconds, Metrics: {'vehiclesObservedAuc': 0.97976196, 'vehiclesObservedIou': 0.7547344, 'vehiclesOccludedAuc': 0.003682463, 'vehiclesOccludedIou': 0.0017062897, 'vehiclesFlowEpe': 1.910811, 'vehiclesFlowWarpedOccupancyAuc': 0.88878345, 'vehiclesFlowWarpedOccupancyIou': 0.8293595}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8519354, 'vehiclesObservedIou': 0.4993667, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.7023208, 'vehiclesFlowWarpedOccupancyAuc': 0.7234604, 'vehiclesFlowWarpedOccupancyIou': 0.63572186}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7558073, 'vehiclesObservedIou': 0.47763842, 'vehiclesOccludedAuc': 0.18707998, 'vehiclesOccludedIou': 0.048572257, 'vehiclesFlowEpe': 3.6671011, 'vehiclesFlowWarpedOccupancyAuc': 0.71840894, 'vehiclesFlowWarpedOccupancyIou': 0.5749589}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.4736394, 'vehiclesObservedIou': 0.20693208, 'vehiclesOccludedAuc': 0.074532375, 'vehiclesOccludedIou': 0.019294338, 'vehiclesFlowEpe': 5.5422306, 'vehiclesFlowWarpedOccupancyAuc': 0.47864234, 'vehiclesFlowWarpedOccupancyIou': 0.23768646}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9292704, 'vehiclesObservedIou': 0.55009055, 'vehiclesOccludedAuc': 0.024059456, 'vehiclesOccludedIou': 0.0073782634, 'vehiclesFlowEpe': 2.0050535, 'vehiclesFlowWarpedOccupancyAuc': 0.76323634, 'vehiclesFlowWarpedOccupancyIou': 0.53986275}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.41644886, 'vehiclesObservedIou': 0.1829174, 'vehiclesOccludedAuc': 0.05516204, 'vehiclesOccludedIou': 0.016879484, 'vehiclesFlowEpe': 3.593746, 'vehiclesFlowWarpedOccupancyAuc': 0.5316416, 'vehiclesFlowWarpedOccupancyIou': 0.2118332}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.20726608, 'vehiclesObservedIou': 0.0922263, 'vehiclesOccludedAuc': 0.014228661, 'vehiclesOccludedIou': 0.0050581293, 'vehiclesFlowEpe': 5.5362315, 'vehiclesFlowWarpedOccupancyAuc': 0.24887753, 'vehiclesFlowWarpedOccupancyIou': 0.10202106}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7124543, 'vehiclesObservedIou': 0.38057977, 'vehiclesOccludedAuc': 0.01401932, 'vehiclesOccludedIou': 0.0051524322, 'vehiclesFlowEpe': 2.597424, 'vehiclesFlowWarpedOccupancyAuc': 0.65255326, 'vehiclesFlowWarpedOccupancyIou': 0.50184286}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.6086998, 'vehiclesObservedIou': 0.26932645, 'vehiclesOccludedAuc': 0.31991956, 'vehiclesOccludedIou': 0.10271539, 'vehiclesFlowEpe': 3.3514795, 'vehiclesFlowWarpedOccupancyAuc': 0.6094019, 'vehiclesFlowWarpedOccupancyIou': 0.38458103}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.44214714, 'vehiclesObservedIou': 0.28148913, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 6.3070965, 'vehiclesFlowWarpedOccupancyAuc': 0.34585243, 'vehiclesFlowWarpedOccupancyIou': 0.30993876}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.47591633, 'vehiclesObservedIou': 0.30322847, 'vehiclesOccludedAuc': 0.20499896, 'vehiclesOccludedIou': 0.04670475, 'vehiclesFlowEpe': 9.073963, 'vehiclesFlowWarpedOccupancyAuc': 0.5572442, 'vehiclesFlowWarpedOccupancyIou': 0.42848092}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6470535, 'vehiclesObservedIou': 0.25670394, 'vehiclesOccludedAuc': 0.016472671, 'vehiclesOccludedIou': 0.0057853125, 'vehiclesFlowEpe': 10.470433, 'vehiclesFlowWarpedOccupancyAuc': 0.42930806, 'vehiclesFlowWarpedOccupancyIou': 0.26443747}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9474166, 'vehiclesObservedIou': 0.73044664, 'vehiclesOccludedAuc': 0.0496191, 'vehiclesOccludedIou': 0.012325, 'vehiclesFlowEpe': 2.93701, 'vehiclesFlowWarpedOccupancyAuc': 0.8203739, 'vehiclesFlowWarpedOccupancyIou': 0.7165605}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.6985119, 'vehiclesObservedIou': 0.42243993, 'vehiclesOccludedAuc': 0.12275143, 'vehiclesOccludedIou': 0.0085451845, 'vehiclesFlowEpe': 7.7802753, 'vehiclesFlowWarpedOccupancyAuc': 0.53819966, 'vehiclesFlowWarpedOccupancyIou': 0.45019713}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.31308398, 'vehiclesObservedIou': 0.15012868, 'vehiclesOccludedAuc': 0.0015722254, 'vehiclesOccludedIou': 0.00068835716, 'vehiclesFlowEpe': 7.792985, 'vehiclesFlowWarpedOccupancyAuc': 0.28339553, 'vehiclesFlowWarpedOccupancyIou': 0.14216615}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.11457648, 'vehiclesObservedIou': 0.052436516, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 4.973674, 'vehiclesFlowWarpedOccupancyAuc': 0.26551712, 'vehiclesFlowWarpedOccupancyIou': 0.056283426}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.76712453, 'vehiclesObservedIou': 0.47103384, 'vehiclesOccludedAuc': 0.033007216, 'vehiclesOccludedIou': 0.015370801, 'vehiclesFlowEpe': 4.433467, 'vehiclesFlowWarpedOccupancyAuc': 0.61163515, 'vehiclesFlowWarpedOccupancyIou': 0.4737916}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.75650847, 'vehiclesObservedIou': 0.3992661, 'vehiclesOccludedAuc': 0.045414947, 'vehiclesOccludedIou': 0.008711125, 'vehiclesFlowEpe': 4.4950266, 'vehiclesFlowWarpedOccupancyAuc': 0.53219926, 'vehiclesFlowWarpedOccupancyIou': 0.44872636}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.91132784, 'vehiclesObservedIou': 0.6209699, 'vehiclesOccludedAuc': 0.015887093, 'vehiclesOccludedIou': 0.0049741194, 'vehiclesFlowEpe': 3.3994594, 'vehiclesFlowWarpedOccupancyAuc': 0.73009634, 'vehiclesFlowWarpedOccupancyIou': 0.63553464}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9637873, 'vehiclesObservedIou': 0.797844, 'vehiclesOccludedAuc': 0.0030333619, 'vehiclesOccludedIou': 0.0010063198, 'vehiclesFlowEpe': 8.0641365, 'vehiclesFlowWarpedOccupancyAuc': 0.75275695, 'vehiclesFlowWarpedOccupancyIou': 0.7559635}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7574597, 'vehiclesObservedIou': 0.46736622, 'vehiclesOccludedAuc': 0.0047387877, 'vehiclesOccludedIou': 0.0024655485, 'vehiclesFlowEpe': 7.108202, 'vehiclesFlowWarpedOccupancyAuc': 0.5578139, 'vehiclesFlowWarpedOccupancyIou': 0.5001339}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.84893566, 'vehiclesObservedIou': 0.44147143, 'vehiclesOccludedAuc': 0.0599684, 'vehiclesOccludedIou': 0.012457174, 'vehiclesFlowEpe': 2.250182, 'vehiclesFlowWarpedOccupancyAuc': 0.74331844, 'vehiclesFlowWarpedOccupancyIou': 0.53791386}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.53425276, 'vehiclesObservedIou': 0.1779263, 'vehiclesOccludedAuc': 0.014831806, 'vehiclesOccludedIou': 0.0053779418, 'vehiclesFlowEpe': 4.3181033, 'vehiclesFlowWarpedOccupancyAuc': 0.43153533, 'vehiclesFlowWarpedOccupancyIou': 0.20294999}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.98594594, 'vehiclesObservedIou': 0.8400099, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 1.5747387, 'vehiclesFlowWarpedOccupancyAuc': 0.90709907, 'vehiclesFlowWarpedOccupancyIou': 0.894203}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.98594594, 'vehiclesObservedIou': 0.8400099, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 1.5747387, 'vehiclesFlowWarpedOccupancyAuc': 0.90709907, 'vehiclesFlowWarpedOccupancyIou': 0.894203}
Average Time: 0.0012 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6708054845833332, 'vehiclesObservedIou': 0.40944054441666666, 'vehiclesOccludedAuc': 0.052707493875000004, 'vehiclesOccludedIou': 0.013798675719166667, 'vehiclesFlowEpe': 4.870214595833333, 'vehiclesFlowWarpedOccupancyAuc': 0.5883896291666667, 'vehiclesFlowWarpedOccupancyIou': 0.4514645344166666}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00028new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 10:49:19.371572: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:49:19.422410: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:49:19.422698: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0014 seconds, Metrics: {'vehiclesObservedAuc': 0.59126294, 'vehiclesObservedIou': 0.32279202, 'vehiclesOccludedAuc': 0.08216342, 'vehiclesOccludedIou': 0.03076951, 'vehiclesFlowEpe': 4.7176533, 'vehiclesFlowWarpedOccupancyAuc': 0.53765655, 'vehiclesFlowWarpedOccupancyIou': 0.38759267}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.38657963, 'vehiclesObservedIou': 0.21820143, 'vehiclesOccludedAuc': 0.029149834, 'vehiclesOccludedIou': 0.0055299555, 'vehiclesFlowEpe': 4.9547067, 'vehiclesFlowWarpedOccupancyAuc': 0.43456694, 'vehiclesFlowWarpedOccupancyIou': 0.22994986}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.97414666, 'vehiclesObservedIou': 0.74742156, 'vehiclesOccludedAuc': 0.057066984, 'vehiclesOccludedIou': 0.022552632, 'vehiclesFlowEpe': 4.209807, 'vehiclesFlowWarpedOccupancyAuc': 0.85159546, 'vehiclesFlowWarpedOccupancyIou': 0.82500833}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7875447, 'vehiclesObservedIou': 0.40749857, 'vehiclesOccludedAuc': 0.0013072247, 'vehiclesOccludedIou': 0.000684242, 'vehiclesFlowEpe': 10.157052, 'vehiclesFlowWarpedOccupancyAuc': 0.55828273, 'vehiclesFlowWarpedOccupancyIou': 0.54034185}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.74738085, 'vehiclesObservedIou': 0.46750438, 'vehiclesOccludedAuc': 0.055558242, 'vehiclesOccludedIou': 0.01855005, 'vehiclesFlowEpe': 5.3011284, 'vehiclesFlowWarpedOccupancyAuc': 0.6456217, 'vehiclesFlowWarpedOccupancyIou': 0.493754}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9264795, 'vehiclesObservedIou': 0.65239704, 'vehiclesOccludedAuc': 0.029284518, 'vehiclesOccludedIou': 0.01108769, 'vehiclesFlowEpe': 3.4443932, 'vehiclesFlowWarpedOccupancyAuc': 0.779321, 'vehiclesFlowWarpedOccupancyIou': 0.7290436}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.59230083, 'vehiclesObservedIou': 0.30212745, 'vehiclesOccludedAuc': 0.04038369, 'vehiclesOccludedIou': 0.016701208, 'vehiclesFlowEpe': 3.9276745, 'vehiclesFlowWarpedOccupancyAuc': 0.53907406, 'vehiclesFlowWarpedOccupancyIou': 0.36459738}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9536096, 'vehiclesObservedIou': 0.73931086, 'vehiclesOccludedAuc': 0.062122744, 'vehiclesOccludedIou': 0.020669732, 'vehiclesFlowEpe': 2.9022577, 'vehiclesFlowWarpedOccupancyAuc': 0.7739867, 'vehiclesFlowWarpedOccupancyIou': 0.6836576}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9357774, 'vehiclesObservedIou': 0.6543054, 'vehiclesOccludedAuc': 0.23750585, 'vehiclesOccludedIou': 0.0427791, 'vehiclesFlowEpe': 4.633292, 'vehiclesFlowWarpedOccupancyAuc': 0.76203036, 'vehiclesFlowWarpedOccupancyIou': 0.70700204}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.1071399, 'vehiclesObservedIou': 0.048759528, 'vehiclesOccludedAuc': 0.018422617, 'vehiclesOccludedIou': 0.0045397757, 'vehiclesFlowEpe': 2.3321552, 'vehiclesFlowWarpedOccupancyAuc': 0.19477826, 'vehiclesFlowWarpedOccupancyIou': 0.047721297}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8516074, 'vehiclesObservedIou': 0.58920264, 'vehiclesOccludedAuc': 0.39669377, 'vehiclesOccludedIou': 0.03860633, 'vehiclesFlowEpe': 3.2175522, 'vehiclesFlowWarpedOccupancyAuc': 0.79094565, 'vehiclesFlowWarpedOccupancyIou': 0.7242942}
2024-05-28 10:49:31.090743: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:49:31.154711: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:49:31.154992: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.89582235, 'vehiclesObservedIou': 0.66258097, 'vehiclesOccludedAuc': 0.019871252, 'vehiclesOccludedIou': 0.007207821, 'vehiclesFlowEpe': 4.938466, 'vehiclesFlowWarpedOccupancyAuc': 0.7769567, 'vehiclesFlowWarpedOccupancyIou': 0.7142288}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.78333795, 'vehiclesObservedIou': 0.5101628, 'vehiclesOccludedAuc': 0.021175394, 'vehiclesOccludedIou': 0.0066120736, 'vehiclesFlowEpe': 6.351396, 'vehiclesFlowWarpedOccupancyAuc': 0.62989247, 'vehiclesFlowWarpedOccupancyIou': 0.5107168}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8753331, 'vehiclesObservedIou': 0.62848216, 'vehiclesOccludedAuc': 0.2084755, 'vehiclesOccludedIou': 0.03287504, 'vehiclesFlowEpe': 2.6188915, 'vehiclesFlowWarpedOccupancyAuc': 0.8337131, 'vehiclesFlowWarpedOccupancyIou': 0.8010654}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9158194, 'vehiclesObservedIou': 0.5825622, 'vehiclesOccludedAuc': 0.0051983483, 'vehiclesOccludedIou': 0.0027271924, 'vehiclesFlowEpe': 5.7790475, 'vehiclesFlowWarpedOccupancyAuc': 0.74906576, 'vehiclesFlowWarpedOccupancyIou': 0.7016321}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9715326, 'vehiclesObservedIou': 0.8400639, 'vehiclesOccludedAuc': 0.09824947, 'vehiclesOccludedIou': 0.020331947, 'vehiclesFlowEpe': 4.1262054, 'vehiclesFlowWarpedOccupancyAuc': 0.8933015, 'vehiclesFlowWarpedOccupancyIou': 0.9186536}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.94618297, 'vehiclesObservedIou': 0.6605328, 'vehiclesOccludedAuc': 0.09119749, 'vehiclesOccludedIou': 0.028055348, 'vehiclesFlowEpe': 4.2933087, 'vehiclesFlowWarpedOccupancyAuc': 0.7310685, 'vehiclesFlowWarpedOccupancyIou': 0.7193978}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8948624, 'vehiclesObservedIou': 0.52981675, 'vehiclesOccludedAuc': 0.46653187, 'vehiclesOccludedIou': 0.07017885, 'vehiclesFlowEpe': 2.9606655, 'vehiclesFlowWarpedOccupancyAuc': 0.7512266, 'vehiclesFlowWarpedOccupancyIou': 0.63308305}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.97414666, 'vehiclesObservedIou': 0.74742156, 'vehiclesOccludedAuc': 0.057066984, 'vehiclesOccludedIou': 0.022552632, 'vehiclesFlowEpe': 4.209807, 'vehiclesFlowWarpedOccupancyAuc': 0.85159546, 'vehiclesFlowWarpedOccupancyIou': 0.82500833}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.7853733433333333, 'vehiclesObservedIou': 0.5313179143333334, 'vehiclesOccludedAuc': 0.10668656766666668, 'vehiclesOccludedIou': 0.02113658317777778, 'vehiclesFlowEpe': 4.492536266666666, 'vehiclesFlowWarpedOccupancyAuc': 0.67961578, 'vehiclesFlowWarpedOccupancyIou': 0.5962077987222221}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00045new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.29964164, 'vehiclesObservedIou': 0.15721104, 'vehiclesOccludedAuc': 0.006944699, 'vehiclesOccludedIou': 0.002305603, 'vehiclesFlowEpe': 5.5905285, 'vehiclesFlowWarpedOccupancyAuc': 0.4299441, 'vehiclesFlowWarpedOccupancyIou': 0.17086093}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.91198635, 'vehiclesObservedIou': 0.6004105, 'vehiclesOccludedAuc': 0.06971367, 'vehiclesOccludedIou': 0.022858048, 'vehiclesFlowEpe': 2.6087692, 'vehiclesFlowWarpedOccupancyAuc': 0.7601943, 'vehiclesFlowWarpedOccupancyIou': 0.5205233}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.5785774, 'vehiclesObservedIou': 0.3888127, 'vehiclesOccludedAuc': 0.04343206, 'vehiclesOccludedIou': 0.013543484, 'vehiclesFlowEpe': 5.3272486, 'vehiclesFlowWarpedOccupancyAuc': 0.608845, 'vehiclesFlowWarpedOccupancyIou': 0.4714712}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9650162, 'vehiclesObservedIou': 0.68135625, 'vehiclesOccludedAuc': 0.004461537, 'vehiclesOccludedIou': 0.0019434886, 'vehiclesFlowEpe': 2.8024514, 'vehiclesFlowWarpedOccupancyAuc': 0.79199195, 'vehiclesFlowWarpedOccupancyIou': 0.7512334}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.45368397, 'vehiclesObservedIou': 0.19500852, 'vehiclesOccludedAuc': 0.015385496, 'vehiclesOccludedIou': 0.004856528, 'vehiclesFlowEpe': 6.5549107, 'vehiclesFlowWarpedOccupancyAuc': 0.4090481, 'vehiclesFlowWarpedOccupancyIou': 0.21869901}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.849331, 'vehiclesObservedIou': 0.49915177, 'vehiclesOccludedAuc': 0.102968104, 'vehiclesOccludedIou': 0.02067068, 'vehiclesFlowEpe': 7.9949007, 'vehiclesFlowWarpedOccupancyAuc': 0.5876216, 'vehiclesFlowWarpedOccupancyIou': 0.48853862}
Time: 0.0014 seconds, Metrics: {'vehiclesObservedAuc': 0.51953614, 'vehiclesObservedIou': 0.2011083, 'vehiclesOccludedAuc': 0.0011827798, 'vehiclesOccludedIou': 0.0016390685, 'vehiclesFlowEpe': 4.729689, 'vehiclesFlowWarpedOccupancyAuc': 0.42430925, 'vehiclesFlowWarpedOccupancyIou': 0.19319274}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.96573406, 'vehiclesObservedIou': 0.79079914, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 4.0714936, 'vehiclesFlowWarpedOccupancyAuc': 0.8662545, 'vehiclesFlowWarpedOccupancyIou': 0.85408425}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.37811267, 'vehiclesObservedIou': 0.16123238, 'vehiclesOccludedAuc': 0.513688, 'vehiclesOccludedIou': 0.12196523, 'vehiclesFlowEpe': 4.030121, 'vehiclesFlowWarpedOccupancyAuc': 0.4395505, 'vehiclesFlowWarpedOccupancyIou': 0.20135067}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.95299613, 'vehiclesObservedIou': 0.6791672, 'vehiclesOccludedAuc': 0.0058369124, 'vehiclesOccludedIou': 0.0024840096, 'vehiclesFlowEpe': 4.287105, 'vehiclesFlowWarpedOccupancyAuc': 0.7744804, 'vehiclesFlowWarpedOccupancyIou': 0.73829937}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8837047, 'vehiclesObservedIou': 0.6057334, 'vehiclesOccludedAuc': 0.18689093, 'vehiclesOccludedIou': 0.06924989, 'vehiclesFlowEpe': 2.3790367, 'vehiclesFlowWarpedOccupancyAuc': 0.7880733, 'vehiclesFlowWarpedOccupancyIou': 0.6649749}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7896585, 'vehiclesObservedIou': 0.4020406, 'vehiclesOccludedAuc': 0.035020262, 'vehiclesOccludedIou': 0.009906082, 'vehiclesFlowEpe': 9.257912, 'vehiclesFlowWarpedOccupancyAuc': 0.5232918, 'vehiclesFlowWarpedOccupancyIou': 0.4770596}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8093489, 'vehiclesObservedIou': 0.47686398, 'vehiclesOccludedAuc': 0.16555136, 'vehiclesOccludedIou': 0.0093739955, 'vehiclesFlowEpe': 9.044601, 'vehiclesFlowWarpedOccupancyAuc': 0.62177956, 'vehiclesFlowWarpedOccupancyIou': 0.5676189}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7861218, 'vehiclesObservedIou': 0.40540326, 'vehiclesOccludedAuc': 0.1572644, 'vehiclesOccludedIou': 0.02568832, 'vehiclesFlowEpe': 7.5067925, 'vehiclesFlowWarpedOccupancyAuc': 0.57546407, 'vehiclesFlowWarpedOccupancyIou': 0.39734364}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8486073, 'vehiclesObservedIou': 0.5391295, 'vehiclesOccludedAuc': 0.050024476, 'vehiclesOccludedIou': 0.020957772, 'vehiclesFlowEpe': 3.077446, 'vehiclesFlowWarpedOccupancyAuc': 0.72251534, 'vehiclesFlowWarpedOccupancyIou': 0.6078751}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.29185316, 'vehiclesObservedIou': 0.15008812, 'vehiclesOccludedAuc': 0.026289608, 'vehiclesOccludedIou': 0.0064300164, 'vehiclesFlowEpe': 3.078641, 'vehiclesFlowWarpedOccupancyAuc': 0.55501205, 'vehiclesFlowWarpedOccupancyIou': 0.18216151}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.912007, 'vehiclesObservedIou': 0.6409605, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.1873207, 'vehiclesFlowWarpedOccupancyAuc': 0.8397131, 'vehiclesFlowWarpedOccupancyIou': 0.71787924}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.60181093, 'vehiclesObservedIou': 0.30811712, 'vehiclesOccludedAuc': 0.26536787, 'vehiclesOccludedIou': 0.0554687, 'vehiclesFlowEpe': 3.0963764, 'vehiclesFlowWarpedOccupancyAuc': 0.6505658, 'vehiclesFlowWarpedOccupancyIou': 0.38275677}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.701466, 'vehiclesObservedIou': 0.39394784, 'vehiclesOccludedAuc': 0.047295865, 'vehiclesOccludedIou': 0.009364279, 'vehiclesFlowEpe': 3.8963807, 'vehiclesFlowWarpedOccupancyAuc': 0.64594495, 'vehiclesFlowWarpedOccupancyIou': 0.44272557}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6987581, 'vehiclesObservedIou': 0.35016438, 'vehiclesOccludedAuc': 0.07770086, 'vehiclesOccludedIou': 0.015932946, 'vehiclesFlowEpe': 3.3593533, 'vehiclesFlowWarpedOccupancyAuc': 0.6391622, 'vehiclesFlowWarpedOccupancyIou': 0.39064464}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.99399024, 'vehiclesObservedIou': 0.8549674, 'vehiclesOccludedAuc': 0.24763004, 'vehiclesOccludedIou': 0.086723335, 'vehiclesFlowEpe': 10.006266, 'vehiclesFlowWarpedOccupancyAuc': 0.8000923, 'vehiclesFlowWarpedOccupancyIou': 0.7469153}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.25060472, 'vehiclesObservedIou': 0.10856218, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.2579854, 'vehiclesFlowWarpedOccupancyAuc': 0.4681895, 'vehiclesFlowWarpedOccupancyIou': 0.136737}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.82643926, 'vehiclesObservedIou': 0.44144598, 'vehiclesOccludedAuc': 0.00012285117, 'vehiclesOccludedIou': 2.4944582e-05, 'vehiclesFlowEpe': 2.9028623, 'vehiclesFlowWarpedOccupancyAuc': 0.7150246, 'vehiclesFlowWarpedOccupancyIou': 0.548674}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9465209, 'vehiclesObservedIou': 0.68699896, 'vehiclesOccludedAuc': 0.36289653, 'vehiclesOccludedIou': 0.053333767, 'vehiclesFlowEpe': 4.3370285, 'vehiclesFlowWarpedOccupancyAuc': 0.8105478, 'vehiclesFlowWarpedOccupancyIou': 0.74575615}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.82021815, 'vehiclesObservedIou': 0.4531372, 'vehiclesOccludedAuc': 0.015263275, 'vehiclesOccludedIou': 0.0031231113, 'vehiclesFlowEpe': 2.587662, 'vehiclesFlowWarpedOccupancyAuc': 0.7083551, 'vehiclesFlowWarpedOccupancyIou': 0.5461222}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.99399024, 'vehiclesObservedIou': 0.8549674, 'vehiclesOccludedAuc': 0.24763004, 'vehiclesOccludedIou': 0.086723335, 'vehiclesFlowEpe': 10.006266, 'vehiclesFlowWarpedOccupancyAuc': 0.8000923, 'vehiclesFlowWarpedOccupancyIou': 0.7469153}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.7214290087999998, 'vehiclesObservedIou': 0.4468727288, 'vehiclesOccludedAuc': 0.0960372634148, 'vehiclesOccludedIou': 0.02231373193928, 'vehiclesFlowEpe': 4.678915288, 'vehiclesFlowWarpedOccupancyAuc': 0.6462388467999999, 'vehiclesFlowWarpedOccupancyIou': 0.4865399204}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00060new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 10:49:47.019310: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:49:47.069780: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:49:47.070053: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.09120351, 'vehiclesObservedIou': 0.04667186, 'vehiclesOccludedAuc': 0.00079589454, 'vehiclesOccludedIou': 0.00038355502, 'vehiclesFlowEpe': 5.3889475, 'vehiclesFlowWarpedOccupancyAuc': 0.28136933, 'vehiclesFlowWarpedOccupancyIou': 0.062501736}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.89934, 'vehiclesObservedIou': 0.66210896, 'vehiclesOccludedAuc': 0.2311249, 'vehiclesOccludedIou': 0.07361686, 'vehiclesFlowEpe': 3.3090746, 'vehiclesFlowWarpedOccupancyAuc': 0.7670337, 'vehiclesFlowWarpedOccupancyIou': 0.6627275}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.276303, 'vehiclesObservedIou': 0.13572118, 'vehiclesOccludedAuc': 0.000640022, 'vehiclesOccludedIou': 0.00028347707, 'vehiclesFlowEpe': 11.212725, 'vehiclesFlowWarpedOccupancyAuc': 0.35468626, 'vehiclesFlowWarpedOccupancyIou': 0.16101982}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8522635, 'vehiclesObservedIou': 0.5221122, 'vehiclesOccludedAuc': 0.016797008, 'vehiclesOccludedIou': 0.004971721, 'vehiclesFlowEpe': 5.76215, 'vehiclesFlowWarpedOccupancyAuc': 0.6750615, 'vehiclesFlowWarpedOccupancyIou': 0.58063304}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.66484815, 'vehiclesObservedIou': 0.35045415, 'vehiclesOccludedAuc': 0.15259413, 'vehiclesOccludedIou': 0.03223334, 'vehiclesFlowEpe': 4.1039367, 'vehiclesFlowWarpedOccupancyAuc': 0.62914956, 'vehiclesFlowWarpedOccupancyIou': 0.39883107}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.67785454, 'vehiclesObservedIou': 0.36118963, 'vehiclesOccludedAuc': 0.0034558591, 'vehiclesOccludedIou': 0.0024237772, 'vehiclesFlowEpe': 5.737015, 'vehiclesFlowWarpedOccupancyAuc': 0.4830744, 'vehiclesFlowWarpedOccupancyIou': 0.36566702}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.18185745, 'vehiclesObservedIou': 0.07796958, 'vehiclesOccludedAuc': 0.0013367325, 'vehiclesOccludedIou': 0.0001268373, 'vehiclesFlowEpe': 4.0909142, 'vehiclesFlowWarpedOccupancyAuc': 0.3158722, 'vehiclesFlowWarpedOccupancyIou': 0.073008604}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.75881076, 'vehiclesObservedIou': 0.45890856, 'vehiclesOccludedAuc': 0.08294145, 'vehiclesOccludedIou': 0.019255495, 'vehiclesFlowEpe': 12.148113, 'vehiclesFlowWarpedOccupancyAuc': 0.4825485, 'vehiclesFlowWarpedOccupancyIou': 0.46628565}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.90213656, 'vehiclesObservedIou': 0.60555387, 'vehiclesOccludedAuc': 0.14327031, 'vehiclesOccludedIou': 0.014327656, 'vehiclesFlowEpe': 2.835862, 'vehiclesFlowWarpedOccupancyAuc': 0.82825404, 'vehiclesFlowWarpedOccupancyIou': 0.71814704}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.13584906, 'vehiclesObservedIou': 0.07415987, 'vehiclesOccludedAuc': 0.006490419, 'vehiclesOccludedIou': 0.001684665, 'vehiclesFlowEpe': 2.452082, 'vehiclesFlowWarpedOccupancyAuc': 0.2923473, 'vehiclesFlowWarpedOccupancyIou': 0.09468592}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.79632884, 'vehiclesObservedIou': 0.44646695, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 6.8595347, 'vehiclesFlowWarpedOccupancyAuc': 0.6590255, 'vehiclesFlowWarpedOccupancyIou': 0.56630325}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.4397864, 'vehiclesObservedIou': 0.29749355, 'vehiclesOccludedAuc': 0.28670636, 'vehiclesOccludedIou': 0.06780849, 'vehiclesFlowEpe': 7.0429397, 'vehiclesFlowWarpedOccupancyAuc': 0.61759496, 'vehiclesFlowWarpedOccupancyIou': 0.47960442}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.78426564, 'vehiclesObservedIou': 0.56927544, 'vehiclesOccludedAuc': 0.40252608, 'vehiclesOccludedIou': 0.07234514, 'vehiclesFlowEpe': 4.5738363, 'vehiclesFlowWarpedOccupancyAuc': 0.7646315, 'vehiclesFlowWarpedOccupancyIou': 0.66722274}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.949293, 'vehiclesObservedIou': 0.7412049, 'vehiclesOccludedAuc': 0.05959361, 'vehiclesOccludedIou': 0.019326773, 'vehiclesFlowEpe': 1.9708372, 'vehiclesFlowWarpedOccupancyAuc': 0.87228954, 'vehiclesFlowWarpedOccupancyIou': 0.80921984}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9305589, 'vehiclesObservedIou': 0.60598236, 'vehiclesOccludedAuc': 0.0075707342, 'vehiclesOccludedIou': 0.0036258239, 'vehiclesFlowEpe': 5.6718955, 'vehiclesFlowWarpedOccupancyAuc': 0.74816597, 'vehiclesFlowWarpedOccupancyIou': 0.6714044}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.36828724, 'vehiclesObservedIou': 0.16749544, 'vehiclesOccludedAuc': 0.0015010817, 'vehiclesOccludedIou': 0.00093277975, 'vehiclesFlowEpe': 3.570889, 'vehiclesFlowWarpedOccupancyAuc': 0.56211007, 'vehiclesFlowWarpedOccupancyIou': 0.2196119}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.93584543, 'vehiclesObservedIou': 0.6532501, 'vehiclesOccludedAuc': 0.073031105, 'vehiclesOccludedIou': 0.018832644, 'vehiclesFlowEpe': 2.246903, 'vehiclesFlowWarpedOccupancyAuc': 0.8210496, 'vehiclesFlowWarpedOccupancyIou': 0.71115017}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.80659497, 'vehiclesObservedIou': 0.5444067, 'vehiclesOccludedAuc': 0.056569997, 'vehiclesOccludedIou': 0.010253295, 'vehiclesFlowEpe': 12.6723175, 'vehiclesFlowWarpedOccupancyAuc': 0.32633966, 'vehiclesFlowWarpedOccupancyIou': 0.4072987}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.86536586, 'vehiclesObservedIou': 0.65582955, 'vehiclesOccludedAuc': 0.07880491, 'vehiclesOccludedIou': 0.023556352, 'vehiclesFlowEpe': 3.0338502, 'vehiclesFlowWarpedOccupancyAuc': 0.8268065, 'vehiclesFlowWarpedOccupancyIou': 0.6928015}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.47106808, 'vehiclesObservedIou': 0.27494496, 'vehiclesOccludedAuc': 0.08019235, 'vehiclesOccludedIou': 0.007829076, 'vehiclesFlowEpe': 5.251815, 'vehiclesFlowWarpedOccupancyAuc': 0.45387286, 'vehiclesFlowWarpedOccupancyIou': 0.28821203}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.64949375, 'vehiclesObservedIou': 0.4172176, 'vehiclesOccludedAuc': 0.13371764, 'vehiclesOccludedIou': 0.038468104, 'vehiclesFlowEpe': 2.9453835, 'vehiclesFlowWarpedOccupancyAuc': 0.71638846, 'vehiclesFlowWarpedOccupancyIou': 0.52883625}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.63886976, 'vehiclesObservedIou': 0.3331617, 'vehiclesOccludedAuc': 0.0009504205, 'vehiclesOccludedIou': 0.0012548225, 'vehiclesFlowEpe': 4.1706624, 'vehiclesFlowWarpedOccupancyAuc': 0.48506585, 'vehiclesFlowWarpedOccupancyIou': 0.35699564}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.76721567, 'vehiclesObservedIou': 0.4513212, 'vehiclesOccludedAuc': 0.0024089953, 'vehiclesOccludedIou': 0.0013121408, 'vehiclesFlowEpe': 6.3240757, 'vehiclesFlowWarpedOccupancyAuc': 0.61257637, 'vehiclesFlowWarpedOccupancyIou': 0.53603643}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8337246, 'vehiclesObservedIou': 0.5101433, 'vehiclesOccludedAuc': 0.17802067, 'vehiclesOccludedIou': 0.027305959, 'vehiclesFlowEpe': 4.4596443, 'vehiclesFlowWarpedOccupancyAuc': 0.6043153, 'vehiclesFlowWarpedOccupancyIou': 0.59954333}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7203994, 'vehiclesObservedIou': 0.3667226, 'vehiclesOccludedAuc': 0.48322624, 'vehiclesOccludedIou': 0.10422478, 'vehiclesFlowEpe': 3.7120209, 'vehiclesFlowWarpedOccupancyAuc': 0.6448608, 'vehiclesFlowWarpedOccupancyIou': 0.5049479}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.81157047, 'vehiclesObservedIou': 0.4934948, 'vehiclesOccludedAuc': 0.014180787, 'vehiclesOccludedIou': 0.0052922154, 'vehiclesFlowEpe': 3.200467, 'vehiclesFlowWarpedOccupancyAuc': 0.67486733, 'vehiclesFlowWarpedOccupancyIou': 0.5851218}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.71877563, 'vehiclesObservedIou': 0.37307352, 'vehiclesOccludedAuc': 0.010455919, 'vehiclesOccludedIou': 0.006243878, 'vehiclesFlowEpe': 3.489031, 'vehiclesFlowWarpedOccupancyAuc': 0.6790625, 'vehiclesFlowWarpedOccupancyIou': 0.48070925}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.1469763, 'vehiclesObservedIou': 0.051849857, 'vehiclesOccludedAuc': 0.0018523366, 'vehiclesOccludedIou': 0.002374213, 'vehiclesFlowEpe': 4.5225286, 'vehiclesFlowWarpedOccupancyAuc': 0.24351154, 'vehiclesFlowWarpedOccupancyIou': 0.052703865}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.4254577, 'vehiclesObservedIou': 0.25886944, 'vehiclesOccludedAuc': 0.5375112, 'vehiclesOccludedIou': 0.13299799, 'vehiclesFlowEpe': 5.435913, 'vehiclesFlowWarpedOccupancyAuc': 0.56072736, 'vehiclesFlowWarpedOccupancyIou': 0.40341482}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5591322, 'vehiclesObservedIou': 0.29903972, 'vehiclesOccludedAuc': 0.007824895, 'vehiclesOccludedIou': 0.0034625386, 'vehiclesFlowEpe': 6.3230333, 'vehiclesFlowWarpedOccupancyAuc': 0.50118446, 'vehiclesFlowWarpedOccupancyIou': 0.36132747}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.42154187, 'vehiclesObservedIou': 0.1751741, 'vehiclesOccludedAuc': 0.14817594, 'vehiclesOccludedIou': 0.035249956, 'vehiclesFlowEpe': 4.189595, 'vehiclesFlowWarpedOccupancyAuc': 0.50915605, 'vehiclesFlowWarpedOccupancyIou': 0.2013122}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.949293, 'vehiclesObservedIou': 0.7412049, 'vehiclesOccludedAuc': 0.05959361, 'vehiclesOccludedIou': 0.019326773, 'vehiclesFlowEpe': 1.9708372, 'vehiclesFlowWarpedOccupancyAuc': 0.87228954, 'vehiclesFlowWarpedOccupancyIou': 0.80921984}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6284199432258064, 'vehiclesObservedIou': 0.38649250474193547, 'vehiclesOccludedAuc': 0.10336348375612901, 'vehiclesOccludedIou': 0.023613043694838715, 'vehiclesFlowEpe': 5.119612670967741, 'vehiclesFlowWarpedOccupancyAuc': 0.5804193216129033, 'vehiclesFlowWarpedOccupancyIou': 0.44217049370967737}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00077new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 10:50:06.520304: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:50:06.577114: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:50:06.577388: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8898198, 'vehiclesObservedIou': 0.616462, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.181561, 'vehiclesFlowWarpedOccupancyAuc': 0.8320467, 'vehiclesFlowWarpedOccupancyIou': 0.75086606}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.3301772, 'vehiclesObservedIou': 0.17482387, 'vehiclesOccludedAuc': 0.063845746, 'vehiclesOccludedIou': 0.00794583, 'vehiclesFlowEpe': 5.3200665, 'vehiclesFlowWarpedOccupancyAuc': 0.41879982, 'vehiclesFlowWarpedOccupancyIou': 0.17236386}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.53478587, 'vehiclesObservedIou': 0.2544338, 'vehiclesOccludedAuc': 0.06807606, 'vehiclesOccludedIou': 0.019008053, 'vehiclesFlowEpe': 5.740984, 'vehiclesFlowWarpedOccupancyAuc': 0.46853378, 'vehiclesFlowWarpedOccupancyIou': 0.2224304}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.46881944, 'vehiclesObservedIou': 0.21116105, 'vehiclesOccludedAuc': 0.062450096, 'vehiclesOccludedIou': 0.015710864, 'vehiclesFlowEpe': 3.0352633, 'vehiclesFlowWarpedOccupancyAuc': 0.4830016, 'vehiclesFlowWarpedOccupancyIou': 0.24870606}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9482603, 'vehiclesObservedIou': 0.6653011, 'vehiclesOccludedAuc': 0.0027882205, 'vehiclesOccludedIou': 0.0015110266, 'vehiclesFlowEpe': 1.9724665, 'vehiclesFlowWarpedOccupancyAuc': 0.81239367, 'vehiclesFlowWarpedOccupancyIou': 0.7112374}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.84271693, 'vehiclesObservedIou': 0.4719005, 'vehiclesOccludedAuc': 0.0414614, 'vehiclesOccludedIou': 0.0077527836, 'vehiclesFlowEpe': 3.9437146, 'vehiclesFlowWarpedOccupancyAuc': 0.6077826, 'vehiclesFlowWarpedOccupancyIou': 0.50845426}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.62295985, 'vehiclesObservedIou': 0.44623697, 'vehiclesOccludedAuc': 0.0022366247, 'vehiclesOccludedIou': 0.00055598817, 'vehiclesFlowEpe': 3.77858, 'vehiclesFlowWarpedOccupancyAuc': 0.68653816, 'vehiclesFlowWarpedOccupancyIou': 0.5607913}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.4234566, 'vehiclesObservedIou': 0.20830368, 'vehiclesOccludedAuc': 0.32851845, 'vehiclesOccludedIou': 0.0572958, 'vehiclesFlowEpe': 5.648089, 'vehiclesFlowWarpedOccupancyAuc': 0.4894964, 'vehiclesFlowWarpedOccupancyIou': 0.3348525}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.98146665, 'vehiclesObservedIou': 0.77930045, 'vehiclesOccludedAuc': 0.05098678, 'vehiclesOccludedIou': 0.010229956, 'vehiclesFlowEpe': 2.492681, 'vehiclesFlowWarpedOccupancyAuc': 0.8306913, 'vehiclesFlowWarpedOccupancyIou': 0.7829032}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5938578, 'vehiclesObservedIou': 0.24437356, 'vehiclesOccludedAuc': 0.036700957, 'vehiclesOccludedIou': 0.010152546, 'vehiclesFlowEpe': 4.1181345, 'vehiclesFlowWarpedOccupancyAuc': 0.534877, 'vehiclesFlowWarpedOccupancyIou': 0.28004354}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.35934916, 'vehiclesObservedIou': 0.17412968, 'vehiclesOccludedAuc': 0.1831875, 'vehiclesOccludedIou': 0.024278874, 'vehiclesFlowEpe': 3.4127846, 'vehiclesFlowWarpedOccupancyAuc': 0.52104914, 'vehiclesFlowWarpedOccupancyIou': 0.19558963}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8053256, 'vehiclesObservedIou': 0.4527982, 'vehiclesOccludedAuc': 0.5973071, 'vehiclesOccludedIou': 0.108869255, 'vehiclesFlowEpe': 3.7869925, 'vehiclesFlowWarpedOccupancyAuc': 0.6753248, 'vehiclesFlowWarpedOccupancyIou': 0.5843282}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.67614216, 'vehiclesObservedIou': 0.35584536, 'vehiclesOccludedAuc': 0.023173787, 'vehiclesOccludedIou': 0.0076569836, 'vehiclesFlowEpe': 9.856174, 'vehiclesFlowWarpedOccupancyAuc': 0.5132828, 'vehiclesFlowWarpedOccupancyIou': 0.47219992}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.62326187, 'vehiclesObservedIou': 0.36009383, 'vehiclesOccludedAuc': 0.04478523, 'vehiclesOccludedIou': 0.016952477, 'vehiclesFlowEpe': 7.0813494, 'vehiclesFlowWarpedOccupancyAuc': 0.46810618, 'vehiclesFlowWarpedOccupancyIou': 0.41955462}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.3320036, 'vehiclesObservedIou': 0.14929196, 'vehiclesOccludedAuc': 0.13093953, 'vehiclesOccludedIou': 0.013047658, 'vehiclesFlowEpe': 5.737897, 'vehiclesFlowWarpedOccupancyAuc': 0.4182322, 'vehiclesFlowWarpedOccupancyIou': 0.18381996}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8828744, 'vehiclesObservedIou': 0.54391116, 'vehiclesOccludedAuc': 0.06383646, 'vehiclesOccludedIou': 0.033630908, 'vehiclesFlowEpe': 4.350207, 'vehiclesFlowWarpedOccupancyAuc': 0.76519406, 'vehiclesFlowWarpedOccupancyIou': 0.63728505}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7015263, 'vehiclesObservedIou': 0.19929473, 'vehiclesOccludedAuc': 0.04980011, 'vehiclesOccludedIou': 0.014212152, 'vehiclesFlowEpe': 10.326758, 'vehiclesFlowWarpedOccupancyAuc': 0.34408754, 'vehiclesFlowWarpedOccupancyIou': 0.16608384}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.99683845, 'vehiclesObservedIou': 0.890936, 'vehiclesOccludedAuc': 0.0008563368, 'vehiclesOccludedIou': 0.00059136015, 'vehiclesFlowEpe': 0.32464576, 'vehiclesFlowWarpedOccupancyAuc': 0.88618416, 'vehiclesFlowWarpedOccupancyIou': 0.9216572}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8407676, 'vehiclesObservedIou': 0.5002665, 'vehiclesOccludedAuc': 0.010498938, 'vehiclesOccludedIou': 0.0038885418, 'vehiclesFlowEpe': 2.3741713, 'vehiclesFlowWarpedOccupancyAuc': 0.74621683, 'vehiclesFlowWarpedOccupancyIou': 0.6051976}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.89973617, 'vehiclesObservedIou': 0.58335406, 'vehiclesOccludedAuc': 0.07080017, 'vehiclesOccludedIou': 0.026736073, 'vehiclesFlowEpe': 3.577518, 'vehiclesFlowWarpedOccupancyAuc': 0.82922286, 'vehiclesFlowWarpedOccupancyIou': 0.68989843}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.60771954, 'vehiclesObservedIou': 0.2566329, 'vehiclesOccludedAuc': 0.104259886, 'vehiclesOccludedIou': 0.022106025, 'vehiclesFlowEpe': 3.0055597, 'vehiclesFlowWarpedOccupancyAuc': 0.3758882, 'vehiclesFlowWarpedOccupancyIou': 0.27959022}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.99685603, 'vehiclesObservedIou': 0.8804012, 'vehiclesOccludedAuc': 0.021179669, 'vehiclesOccludedIou': 0.0039410098, 'vehiclesFlowEpe': 2.2839098, 'vehiclesFlowWarpedOccupancyAuc': 0.8471171, 'vehiclesFlowWarpedOccupancyIou': 0.8353516}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.71185327, 'vehiclesObservedIou': 0.3497492, 'vehiclesOccludedAuc': 0.014536713, 'vehiclesOccludedIou': 0.0050694724, 'vehiclesFlowEpe': 9.231409, 'vehiclesFlowWarpedOccupancyAuc': 0.4501354, 'vehiclesFlowWarpedOccupancyIou': 0.31776324}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8693228, 'vehiclesObservedIou': 0.5488205, 'vehiclesOccludedAuc': 0.2804505, 'vehiclesOccludedIou': 0.03441848, 'vehiclesFlowEpe': 4.3494563, 'vehiclesFlowWarpedOccupancyAuc': 0.74653953, 'vehiclesFlowWarpedOccupancyIou': 0.64126253}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.845081, 'vehiclesObservedIou': 0.4508151, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 5.253718, 'vehiclesFlowWarpedOccupancyAuc': 0.66953695, 'vehiclesFlowWarpedOccupancyIou': 0.51278335}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8658204, 'vehiclesObservedIou': 0.54152405, 'vehiclesOccludedAuc': 0.00032406897, 'vehiclesOccludedIou': 9.476935e-05, 'vehiclesFlowEpe': 4.763833, 'vehiclesFlowWarpedOccupancyAuc': 0.7342079, 'vehiclesFlowWarpedOccupancyIou': 0.6180754}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9135806, 'vehiclesObservedIou': 0.6686154, 'vehiclesOccludedAuc': 0.04170088, 'vehiclesOccludedIou': 0.019759513, 'vehiclesFlowEpe': 3.5417364, 'vehiclesFlowWarpedOccupancyAuc': 0.8363527, 'vehiclesFlowWarpedOccupancyIou': 0.7457571}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.99685603, 'vehiclesObservedIou': 0.8804012, 'vehiclesOccludedAuc': 0.021179669, 'vehiclesOccludedIou': 0.0039410098, 'vehiclesFlowEpe': 2.2839098, 'vehiclesFlowWarpedOccupancyAuc': 0.8471171, 'vehiclesFlowWarpedOccupancyIou': 0.8353516}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.7246066440740742, 'vehiclesObservedIou': 0.44365840037037035, 'vehiclesOccludedAuc': 0.08498893381370369, 'vehiclesOccludedIou': 0.01723764442481482, 'vehiclesFlowEpe': 4.536654080000001, 'vehiclesFlowWarpedOccupancyAuc': 0.6292903474074073, 'vehiclesFlowWarpedOccupancyIou': 0.4962535729629629}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00084new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 10:50:23.748010: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:50:23.798196: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:50:23.798489: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.27907285, 'vehiclesObservedIou': 0.12787649, 'vehiclesOccludedAuc': 0.009794235, 'vehiclesOccludedIou': 0.0027854762, 'vehiclesFlowEpe': 5.691316, 'vehiclesFlowWarpedOccupancyAuc': 0.3788071, 'vehiclesFlowWarpedOccupancyIou': 0.13822392}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9542422, 'vehiclesObservedIou': 0.66846275, 'vehiclesOccludedAuc': 0.08978407, 'vehiclesOccludedIou': 0.016171483, 'vehiclesFlowEpe': 2.3151782, 'vehiclesFlowWarpedOccupancyAuc': 0.8157051, 'vehiclesFlowWarpedOccupancyIou': 0.7469023}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.09097801, 'vehiclesObservedIou': 0.05796665, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.3208065, 'vehiclesFlowWarpedOccupancyAuc': 0.11473821, 'vehiclesFlowWarpedOccupancyIou': 0.060617052}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.94783205, 'vehiclesObservedIou': 0.7653935, 'vehiclesOccludedAuc': 0.16958535, 'vehiclesOccludedIou': 0.052649416, 'vehiclesFlowEpe': 3.996767, 'vehiclesFlowWarpedOccupancyAuc': 0.8178707, 'vehiclesFlowWarpedOccupancyIou': 0.7920576}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.41524234, 'vehiclesObservedIou': 0.1878758, 'vehiclesOccludedAuc': 0.099788375, 'vehiclesOccludedIou': 0.0134298075, 'vehiclesFlowEpe': 5.737634, 'vehiclesFlowWarpedOccupancyAuc': 0.33722928, 'vehiclesFlowWarpedOccupancyIou': 0.19951306}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8789283, 'vehiclesObservedIou': 0.5879809, 'vehiclesOccludedAuc': 0.0009901223, 'vehiclesOccludedIou': 0.0009849318, 'vehiclesFlowEpe': 5.1924467, 'vehiclesFlowWarpedOccupancyAuc': 0.71467274, 'vehiclesFlowWarpedOccupancyIou': 0.6187932}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9666954, 'vehiclesObservedIou': 0.7367547, 'vehiclesOccludedAuc': 0.0014113961, 'vehiclesOccludedIou': 0.0023707906, 'vehiclesFlowEpe': 3.2876434, 'vehiclesFlowWarpedOccupancyAuc': 0.8826342, 'vehiclesFlowWarpedOccupancyIou': 0.8119216}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9177535, 'vehiclesObservedIou': 0.52133614, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 5.9745417, 'vehiclesFlowWarpedOccupancyAuc': 0.69219005, 'vehiclesFlowWarpedOccupancyIou': 0.6212962}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.73271275, 'vehiclesObservedIou': 0.43857542, 'vehiclesOccludedAuc': 0.070986435, 'vehiclesOccludedIou': 0.03018044, 'vehiclesFlowEpe': 5.93047, 'vehiclesFlowWarpedOccupancyAuc': 0.6791395, 'vehiclesFlowWarpedOccupancyIou': 0.5235509}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.34044632, 'vehiclesObservedIou': 0.19372432, 'vehiclesOccludedAuc': 0.05831251, 'vehiclesOccludedIou': 0.012521179, 'vehiclesFlowEpe': 5.684738, 'vehiclesFlowWarpedOccupancyAuc': 0.37964237, 'vehiclesFlowWarpedOccupancyIou': 0.19282262}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8786606, 'vehiclesObservedIou': 0.53295904, 'vehiclesOccludedAuc': 0.32277447, 'vehiclesOccludedIou': 0.059404224, 'vehiclesFlowEpe': 4.647141, 'vehiclesFlowWarpedOccupancyAuc': 0.7593662, 'vehiclesFlowWarpedOccupancyIou': 0.6422607}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.517186, 'vehiclesObservedIou': 0.26492846, 'vehiclesOccludedAuc': 0.027353236, 'vehiclesOccludedIou': 0.007244519, 'vehiclesFlowEpe': 4.199463, 'vehiclesFlowWarpedOccupancyAuc': 0.52397704, 'vehiclesFlowWarpedOccupancyIou': 0.26136813}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.61143494, 'vehiclesObservedIou': 0.29674298, 'vehiclesOccludedAuc': 0.002074467, 'vehiclesOccludedIou': 0.00088517333, 'vehiclesFlowEpe': 3.2156808, 'vehiclesFlowWarpedOccupancyAuc': 0.5407815, 'vehiclesFlowWarpedOccupancyIou': 0.28064087}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.828656, 'vehiclesObservedIou': 0.5308434, 'vehiclesOccludedAuc': 0.18414378, 'vehiclesOccludedIou': 0.037536394, 'vehiclesFlowEpe': 3.9067397, 'vehiclesFlowWarpedOccupancyAuc': 0.6402075, 'vehiclesFlowWarpedOccupancyIou': 0.55023885}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.55360395, 'vehiclesObservedIou': 0.34590966, 'vehiclesOccludedAuc': 0.038948443, 'vehiclesOccludedIou': 0.009228592, 'vehiclesFlowEpe': 2.9158814, 'vehiclesFlowWarpedOccupancyAuc': 0.653426, 'vehiclesFlowWarpedOccupancyIou': 0.4289804}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7868905, 'vehiclesObservedIou': 0.44778034, 'vehiclesOccludedAuc': 0.0041586123, 'vehiclesOccludedIou': 0.0014941699, 'vehiclesFlowEpe': 2.3733885, 'vehiclesFlowWarpedOccupancyAuc': 0.7148794, 'vehiclesFlowWarpedOccupancyIou': 0.55889976}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.758795, 'vehiclesObservedIou': 0.5147898, 'vehiclesOccludedAuc': 0.48183584, 'vehiclesOccludedIou': 0.119713366, 'vehiclesFlowEpe': 7.0254383, 'vehiclesFlowWarpedOccupancyAuc': 0.72828645, 'vehiclesFlowWarpedOccupancyIou': 0.6361174}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.78434634, 'vehiclesObservedIou': 0.46716586, 'vehiclesOccludedAuc': 0.01450736, 'vehiclesOccludedIou': 0.0060583744, 'vehiclesFlowEpe': 3.9096403, 'vehiclesFlowWarpedOccupancyAuc': 0.66716385, 'vehiclesFlowWarpedOccupancyIou': 0.5358945}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.67612696, 'vehiclesObservedIou': 0.33485168, 'vehiclesOccludedAuc': 0.09923461, 'vehiclesOccludedIou': 0.009438829, 'vehiclesFlowEpe': 7.0468516, 'vehiclesFlowWarpedOccupancyAuc': 0.45342287, 'vehiclesFlowWarpedOccupancyIou': 0.40000832}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9230371, 'vehiclesObservedIou': 0.7157096, 'vehiclesOccludedAuc': 0.0072805523, 'vehiclesOccludedIou': 0.0029795542, 'vehiclesFlowEpe': 2.4778004, 'vehiclesFlowWarpedOccupancyAuc': 0.86923826, 'vehiclesFlowWarpedOccupancyIou': 0.7813413}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9736248, 'vehiclesObservedIou': 0.80993927, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 1.5821177, 'vehiclesFlowWarpedOccupancyAuc': 0.8884858, 'vehiclesFlowWarpedOccupancyIou': 0.8781038}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.89394623, 'vehiclesObservedIou': 0.56865966, 'vehiclesOccludedAuc': 0.0064784246, 'vehiclesOccludedIou': 0.0023141343, 'vehiclesFlowEpe': 6.131896, 'vehiclesFlowWarpedOccupancyAuc': 0.6269532, 'vehiclesFlowWarpedOccupancyIou': 0.553929}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5331665, 'vehiclesObservedIou': 0.2813674, 'vehiclesOccludedAuc': 0.08404717, 'vehiclesOccludedIou': 0.017293215, 'vehiclesFlowEpe': 3.4015207, 'vehiclesFlowWarpedOccupancyAuc': 0.56379503, 'vehiclesFlowWarpedOccupancyIou': 0.3018473}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.9736248, 'vehiclesObservedIou': 0.80993927, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 1.5821177, 'vehiclesFlowWarpedOccupancyAuc': 0.8884858, 'vehiclesFlowWarpedOccupancyIou': 0.8781038}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.7062338539130435, 'vehiclesObservedIou': 0.4520692965217391, 'vehiclesOccludedAuc': 0.07710823733043477, 'vehiclesOccludedIou': 0.01759495953173913, 'vehiclesFlowEpe': 4.3463087347826095, 'vehiclesFlowWarpedOccupancyAuc': 0.6279396673913044, 'vehiclesFlowWarpedOccupancyIou': 0.5006664687826087}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00024new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 10:50:38.264664: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:50:38.315832: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:50:38.316153: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0015 seconds, Metrics: {'vehiclesObservedAuc': 0.9042886, 'vehiclesObservedIou': 0.6695527, 'vehiclesOccludedAuc': 0.0019345833, 'vehiclesOccludedIou': 0.0014011689, 'vehiclesFlowEpe': 4.579713, 'vehiclesFlowWarpedOccupancyAuc': 0.7679976, 'vehiclesFlowWarpedOccupancyIou': 0.75435877}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.6796268, 'vehiclesObservedIou': 0.42262197, 'vehiclesOccludedAuc': 0.042831257, 'vehiclesOccludedIou': 0.0144530665, 'vehiclesFlowEpe': 4.488237, 'vehiclesFlowWarpedOccupancyAuc': 0.6283383, 'vehiclesFlowWarpedOccupancyIou': 0.6097566}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.2688952, 'vehiclesObservedIou': 0.1215264, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 5.298338, 'vehiclesFlowWarpedOccupancyAuc': 0.32839778, 'vehiclesFlowWarpedOccupancyIou': 0.13241205}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.62178403, 'vehiclesObservedIou': 0.32852393, 'vehiclesOccludedAuc': 0.014247609, 'vehiclesOccludedIou': 0.0037123081, 'vehiclesFlowEpe': 3.3642285, 'vehiclesFlowWarpedOccupancyAuc': 0.58345217, 'vehiclesFlowWarpedOccupancyIou': 0.38566756}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8375994, 'vehiclesObservedIou': 0.5383299, 'vehiclesOccludedAuc': 0.1629488, 'vehiclesOccludedIou': 0.03871807, 'vehiclesFlowEpe': 4.987658, 'vehiclesFlowWarpedOccupancyAuc': 0.7356922, 'vehiclesFlowWarpedOccupancyIou': 0.6089473}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.64087886, 'vehiclesObservedIou': 0.4203033, 'vehiclesOccludedAuc': 0.007009664, 'vehiclesOccludedIou': 0.003136737, 'vehiclesFlowEpe': 12.10872, 'vehiclesFlowWarpedOccupancyAuc': 0.45330152, 'vehiclesFlowWarpedOccupancyIou': 0.40576264}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.51017016, 'vehiclesObservedIou': 0.2370406, 'vehiclesOccludedAuc': 0.066552594, 'vehiclesOccludedIou': 0.011733818, 'vehiclesFlowEpe': 6.1502566, 'vehiclesFlowWarpedOccupancyAuc': 0.38799343, 'vehiclesFlowWarpedOccupancyIou': 0.22794168}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7769127, 'vehiclesObservedIou': 0.45437098, 'vehiclesOccludedAuc': 0.052213732, 'vehiclesOccludedIou': 0.017029671, 'vehiclesFlowEpe': 3.3734603, 'vehiclesFlowWarpedOccupancyAuc': 0.68124396, 'vehiclesFlowWarpedOccupancyIou': 0.5283682}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.702595, 'vehiclesObservedIou': 0.4001591, 'vehiclesOccludedAuc': 0.015574554, 'vehiclesOccludedIou': 0.0060094893, 'vehiclesFlowEpe': 4.1904235, 'vehiclesFlowWarpedOccupancyAuc': 0.66622144, 'vehiclesFlowWarpedOccupancyIou': 0.51722145}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7962614, 'vehiclesObservedIou': 0.48082867, 'vehiclesOccludedAuc': 0.054493256, 'vehiclesOccludedIou': 0.023789076, 'vehiclesFlowEpe': 5.0770726, 'vehiclesFlowWarpedOccupancyAuc': 0.63754267, 'vehiclesFlowWarpedOccupancyIou': 0.55807596}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.78288925, 'vehiclesObservedIou': 0.45933262, 'vehiclesOccludedAuc': 0.14296368, 'vehiclesOccludedIou': 0.016573858, 'vehiclesFlowEpe': 6.324894, 'vehiclesFlowWarpedOccupancyAuc': 0.5584508, 'vehiclesFlowWarpedOccupancyIou': 0.5156795}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6387158, 'vehiclesObservedIou': 0.26534986, 'vehiclesOccludedAuc': 0.015888168, 'vehiclesOccludedIou': 0.006285501, 'vehiclesFlowEpe': 7.205735, 'vehiclesFlowWarpedOccupancyAuc': 0.47528186, 'vehiclesFlowWarpedOccupancyIou': 0.32261828}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.2313154, 'vehiclesObservedIou': 0.19113813, 'vehiclesOccludedAuc': 0.16281416, 'vehiclesOccludedIou': 0.02662528, 'vehiclesFlowEpe': 3.7570105, 'vehiclesFlowWarpedOccupancyAuc': 0.6321041, 'vehiclesFlowWarpedOccupancyIou': 0.48360845}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.65459126, 'vehiclesObservedIou': 0.40260878, 'vehiclesOccludedAuc': 0.0027710707, 'vehiclesOccludedIou': 0.0017936451, 'vehiclesFlowEpe': 3.3930788, 'vehiclesFlowWarpedOccupancyAuc': 0.5950011, 'vehiclesFlowWarpedOccupancyIou': 0.42291522}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8055799, 'vehiclesObservedIou': 0.4446988, 'vehiclesOccludedAuc': 0.10051304, 'vehiclesOccludedIou': 0.032301765, 'vehiclesFlowEpe': 3.1847963, 'vehiclesFlowWarpedOccupancyAuc': 0.7008767, 'vehiclesFlowWarpedOccupancyIou': 0.51884854}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8749067, 'vehiclesObservedIou': 0.5079926, 'vehiclesOccludedAuc': 0.22455363, 'vehiclesOccludedIou': 0.022762606, 'vehiclesFlowEpe': 7.1901894, 'vehiclesFlowWarpedOccupancyAuc': 0.6178023, 'vehiclesFlowWarpedOccupancyIou': 0.6181666}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.95396894, 'vehiclesObservedIou': 0.8138842, 'vehiclesOccludedAuc': 0.034691144, 'vehiclesOccludedIou': 0.009503957, 'vehiclesFlowEpe': 2.0970201, 'vehiclesFlowWarpedOccupancyAuc': 0.8981866, 'vehiclesFlowWarpedOccupancyIou': 0.88247335}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.4568852, 'vehiclesObservedIou': 0.37328663, 'vehiclesOccludedAuc': 0.054255504, 'vehiclesOccludedIou': 0.0109450035, 'vehiclesFlowEpe': 4.5787067, 'vehiclesFlowWarpedOccupancyAuc': 0.524507, 'vehiclesFlowWarpedOccupancyIou': 0.5057811}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8277801, 'vehiclesObservedIou': 0.4812009, 'vehiclesOccludedAuc': 0.124093845, 'vehiclesOccludedIou': 0.038089927, 'vehiclesFlowEpe': 4.837232, 'vehiclesFlowWarpedOccupancyAuc': 0.6222695, 'vehiclesFlowWarpedOccupancyIou': 0.5089107}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.58929175, 'vehiclesObservedIou': 0.3172096, 'vehiclesOccludedAuc': 0.034933634, 'vehiclesOccludedIou': 0.0063660014, 'vehiclesFlowEpe': 5.7984962, 'vehiclesFlowWarpedOccupancyAuc': 0.5725454, 'vehiclesFlowWarpedOccupancyIou': 0.39731002}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.1344949, 'vehiclesObservedIou': 0.07372728, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.00063, 'vehiclesFlowWarpedOccupancyAuc': 0.15562876, 'vehiclesFlowWarpedOccupancyIou': 0.076383114}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.13618346, 'vehiclesObservedIou': 0.052860938, 'vehiclesOccludedAuc': 0.0026558242, 'vehiclesOccludedIou': 0.0020112135, 'vehiclesFlowEpe': 5.3484097, 'vehiclesFlowWarpedOccupancyAuc': 0.21867695, 'vehiclesFlowWarpedOccupancyIou': 0.055969115}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.95396894, 'vehiclesObservedIou': 0.8138842, 'vehiclesOccludedAuc': 0.034691144, 'vehiclesOccludedIou': 0.009503957, 'vehiclesFlowEpe': 2.0970201, 'vehiclesFlowWarpedOccupancyAuc': 0.8981866, 'vehiclesFlowWarpedOccupancyIou': 0.88247335}
Average Time: 0.0012 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6284370368181817, 'vehiclesObservedIou': 0.3843885403636364, 'vehiclesOccludedAuc': 0.05990635223636364, 'vehiclesOccludedIou': 0.013329189195454545, 'vehiclesFlowEpe': 4.969741190909091, 'vehiclesFlowWarpedOccupancyAuc': 0.5655232790909092, 'vehiclesFlowWarpedOccupancyIou': 0.4562352817727273}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00138new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 10:50:52.494194: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:50:52.544812: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:50:52.545085: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.56985295, 'vehiclesObservedIou': 0.28652582, 'vehiclesOccludedAuc': 0.0054695914, 'vehiclesOccludedIou': 0.0026970264, 'vehiclesFlowEpe': 6.0281987, 'vehiclesFlowWarpedOccupancyAuc': 0.5097566, 'vehiclesFlowWarpedOccupancyIou': 0.36097082}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6494929, 'vehiclesObservedIou': 0.2978018, 'vehiclesOccludedAuc': 0.27294797, 'vehiclesOccludedIou': 0.051355097, 'vehiclesFlowEpe': 3.7902687, 'vehiclesFlowWarpedOccupancyAuc': 0.5987562, 'vehiclesFlowWarpedOccupancyIou': 0.34920454}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7887081, 'vehiclesObservedIou': 0.4976353, 'vehiclesOccludedAuc': 0.5278139, 'vehiclesOccludedIou': 0.106217034, 'vehiclesFlowEpe': 3.703233, 'vehiclesFlowWarpedOccupancyAuc': 0.6766335, 'vehiclesFlowWarpedOccupancyIou': 0.6094127}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.84978634, 'vehiclesObservedIou': 0.46316564, 'vehiclesOccludedAuc': 0.0014978307, 'vehiclesOccludedIou': 0.00041518523, 'vehiclesFlowEpe': 5.686456, 'vehiclesFlowWarpedOccupancyAuc': 0.68537796, 'vehiclesFlowWarpedOccupancyIou': 0.5762696}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6362371, 'vehiclesObservedIou': 0.26910582, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 6.9124913, 'vehiclesFlowWarpedOccupancyAuc': 0.46699995, 'vehiclesFlowWarpedOccupancyIou': 0.36886433}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7888787, 'vehiclesObservedIou': 0.43544897, 'vehiclesOccludedAuc': 0.008714663, 'vehiclesOccludedIou': 0.0018371538, 'vehiclesFlowEpe': 2.976119, 'vehiclesFlowWarpedOccupancyAuc': 0.7180604, 'vehiclesFlowWarpedOccupancyIou': 0.4622456}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.85456085, 'vehiclesObservedIou': 0.61925054, 'vehiclesOccludedAuc': 0.16664381, 'vehiclesOccludedIou': 0.02972727, 'vehiclesFlowEpe': 3.6436634, 'vehiclesFlowWarpedOccupancyAuc': 0.7357606, 'vehiclesFlowWarpedOccupancyIou': 0.6058897}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.87543124, 'vehiclesObservedIou': 0.5299676, 'vehiclesOccludedAuc': 0.94108796, 'vehiclesOccludedIou': 0.3153582, 'vehiclesFlowEpe': 1.9716496, 'vehiclesFlowWarpedOccupancyAuc': 0.8061999, 'vehiclesFlowWarpedOccupancyIou': 0.67333233}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.65219843, 'vehiclesObservedIou': 0.3370322, 'vehiclesOccludedAuc': 0.060493477, 'vehiclesOccludedIou': 0.008709631, 'vehiclesFlowEpe': 2.722735, 'vehiclesFlowWarpedOccupancyAuc': 0.6254144, 'vehiclesFlowWarpedOccupancyIou': 0.3477302}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8458477, 'vehiclesObservedIou': 0.5019326, 'vehiclesOccludedAuc': 0.24454224, 'vehiclesOccludedIou': 0.05839745, 'vehiclesFlowEpe': 3.47092, 'vehiclesFlowWarpedOccupancyAuc': 0.6843651, 'vehiclesFlowWarpedOccupancyIou': 0.55629325}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5219523, 'vehiclesObservedIou': 0.26458165, 'vehiclesOccludedAuc': 0.0008137233, 'vehiclesOccludedIou': 0.0008130637, 'vehiclesFlowEpe': 4.6029882, 'vehiclesFlowWarpedOccupancyAuc': 0.37967634, 'vehiclesFlowWarpedOccupancyIou': 0.3343826}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.87020844, 'vehiclesObservedIou': 0.5276535, 'vehiclesOccludedAuc': 0.39359295, 'vehiclesOccludedIou': 0.03842754, 'vehiclesFlowEpe': 2.4309032, 'vehiclesFlowWarpedOccupancyAuc': 0.7744934, 'vehiclesFlowWarpedOccupancyIou': 0.6904482}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.21610975, 'vehiclesObservedIou': 0.14043646, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.646963, 'vehiclesFlowWarpedOccupancyAuc': 0.2870997, 'vehiclesFlowWarpedOccupancyIou': 0.16432844}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.73717237, 'vehiclesObservedIou': 0.41579264, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.3928094, 'vehiclesFlowWarpedOccupancyAuc': 0.7048314, 'vehiclesFlowWarpedOccupancyIou': 0.5443128}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7784489, 'vehiclesObservedIou': 0.42455277, 'vehiclesOccludedAuc': 0.19170037, 'vehiclesOccludedIou': 0.039087288, 'vehiclesFlowEpe': 6.007669, 'vehiclesFlowWarpedOccupancyAuc': 0.65101105, 'vehiclesFlowWarpedOccupancyIou': 0.43338272}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6758303, 'vehiclesObservedIou': 0.43105632, 'vehiclesOccludedAuc': 0.0003208534, 'vehiclesOccludedIou': 0.00022015572, 'vehiclesFlowEpe': 7.4244256, 'vehiclesFlowWarpedOccupancyAuc': 0.57248443, 'vehiclesFlowWarpedOccupancyIou': 0.5240942}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.83408743, 'vehiclesObservedIou': 0.44719413, 'vehiclesOccludedAuc': 0.024786927, 'vehiclesOccludedIou': 0.007202803, 'vehiclesFlowEpe': 3.6675973, 'vehiclesFlowWarpedOccupancyAuc': 0.62916446, 'vehiclesFlowWarpedOccupancyIou': 0.5371126}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.91634965, 'vehiclesObservedIou': 0.6449672, 'vehiclesOccludedAuc': 0.11127226, 'vehiclesOccludedIou': 0.05558728, 'vehiclesFlowEpe': 3.9104912, 'vehiclesFlowWarpedOccupancyAuc': 0.8047737, 'vehiclesFlowWarpedOccupancyIou': 0.74456173}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8530073, 'vehiclesObservedIou': 0.50225234, 'vehiclesOccludedAuc': 0.004276188, 'vehiclesOccludedIou': 0.0022177657, 'vehiclesFlowEpe': 2.873414, 'vehiclesFlowWarpedOccupancyAuc': 0.7214263, 'vehiclesFlowWarpedOccupancyIou': 0.5912598}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5324763, 'vehiclesObservedIou': 0.31654334, 'vehiclesOccludedAuc': 0.018006478, 'vehiclesOccludedIou': 0.0053121317, 'vehiclesFlowEpe': 5.8907123, 'vehiclesFlowWarpedOccupancyAuc': 0.45387694, 'vehiclesFlowWarpedOccupancyIou': 0.3340993}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.17457263, 'vehiclesObservedIou': 0.08933076, 'vehiclesOccludedAuc': 0.22655681, 'vehiclesOccludedIou': 0.046522956, 'vehiclesFlowEpe': 11.690459, 'vehiclesFlowWarpedOccupancyAuc': 0.41053858, 'vehiclesFlowWarpedOccupancyIou': 0.12747172}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5312, 'vehiclesObservedIou': 0.24274103, 'vehiclesOccludedAuc': 0.029151058, 'vehiclesOccludedIou': 0.006739642, 'vehiclesFlowEpe': 6.809722, 'vehiclesFlowWarpedOccupancyAuc': 0.4276844, 'vehiclesFlowWarpedOccupancyIou': 0.27550232}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6271915, 'vehiclesObservedIou': 0.3440851, 'vehiclesOccludedAuc': 0.24969167, 'vehiclesOccludedIou': 0.021139093, 'vehiclesFlowEpe': 2.9101627, 'vehiclesFlowWarpedOccupancyAuc': 0.61147046, 'vehiclesFlowWarpedOccupancyIou': 0.41797003}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.91634965, 'vehiclesObservedIou': 0.6449672, 'vehiclesOccludedAuc': 0.11127226, 'vehiclesOccludedIou': 0.05558728, 'vehiclesFlowEpe': 3.9104912, 'vehiclesFlowWarpedOccupancyAuc': 0.8047737, 'vehiclesFlowWarpedOccupancyIou': 0.74456173}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6860696165217393, 'vehiclesObservedIou': 0.39256754478260864, 'vehiclesOccludedAuc': 0.1512774230347826, 'vehiclesOccludedIou': 0.034694946358695654, 'vehiclesFlowEpe': 4.572350069565217, 'vehiclesFlowWarpedOccupancyAuc': 0.6059067726086957, 'vehiclesFlowWarpedOccupancyIou': 0.46213650130434775}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00009new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 10:51:06.741520: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:51:06.909850: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:51:06.910138: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.9125104, 'vehiclesObservedIou': 0.60855705, 'vehiclesOccludedAuc': 0.01424807, 'vehiclesOccludedIou': 0.0064824163, 'vehiclesFlowEpe': 3.9362288, 'vehiclesFlowWarpedOccupancyAuc': 0.7975916, 'vehiclesFlowWarpedOccupancyIou': 0.7284207}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9018167, 'vehiclesObservedIou': 0.5527627, 'vehiclesOccludedAuc': 0.0023732402, 'vehiclesOccludedIou': 0.0009936885, 'vehiclesFlowEpe': 5.9598455, 'vehiclesFlowWarpedOccupancyAuc': 0.66862303, 'vehiclesFlowWarpedOccupancyIou': 0.5939398}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8454335, 'vehiclesObservedIou': 0.4840995, 'vehiclesOccludedAuc': 0.09759682, 'vehiclesOccludedIou': 0.025519703, 'vehiclesFlowEpe': 5.734936, 'vehiclesFlowWarpedOccupancyAuc': 0.6492049, 'vehiclesFlowWarpedOccupancyIou': 0.53848803}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.73272836, 'vehiclesObservedIou': 0.47497165, 'vehiclesOccludedAuc': 0.066985756, 'vehiclesOccludedIou': 0.017103326, 'vehiclesFlowEpe': 3.3736503, 'vehiclesFlowWarpedOccupancyAuc': 0.7035852, 'vehiclesFlowWarpedOccupancyIou': 0.62984145}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.61915046, 'vehiclesObservedIou': 0.31838903, 'vehiclesOccludedAuc': 0.03618498, 'vehiclesOccludedIou': 0.008573573, 'vehiclesFlowEpe': 5.1844177, 'vehiclesFlowWarpedOccupancyAuc': 0.5290573, 'vehiclesFlowWarpedOccupancyIou': 0.35668102}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8791, 'vehiclesObservedIou': 0.5231843, 'vehiclesOccludedAuc': 0.22092071, 'vehiclesOccludedIou': 0.06503555, 'vehiclesFlowEpe': 6.4172106, 'vehiclesFlowWarpedOccupancyAuc': 0.6753376, 'vehiclesFlowWarpedOccupancyIou': 0.61803055}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8364954, 'vehiclesObservedIou': 0.535841, 'vehiclesOccludedAuc': 0.005781773, 'vehiclesOccludedIou': 0.0018771662, 'vehiclesFlowEpe': 2.5675576, 'vehiclesFlowWarpedOccupancyAuc': 0.7479719, 'vehiclesFlowWarpedOccupancyIou': 0.5933667}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9302685, 'vehiclesObservedIou': 0.76132387, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.3100464, 'vehiclesFlowWarpedOccupancyAuc': 0.8005277, 'vehiclesFlowWarpedOccupancyIou': 0.8168282}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.58878046, 'vehiclesObservedIou': 0.31578025, 'vehiclesOccludedAuc': 0.025305415, 'vehiclesOccludedIou': 0.0072946437, 'vehiclesFlowEpe': 3.4404006, 'vehiclesFlowWarpedOccupancyAuc': 0.5824841, 'vehiclesFlowWarpedOccupancyIou': 0.3830882}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9525291, 'vehiclesObservedIou': 0.7016979, 'vehiclesOccludedAuc': 0.0044027898, 'vehiclesOccludedIou': 0.0009895295, 'vehiclesFlowEpe': 2.421391, 'vehiclesFlowWarpedOccupancyAuc': 0.7777221, 'vehiclesFlowWarpedOccupancyIou': 0.72790575}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.90364575, 'vehiclesObservedIou': 0.43009162, 'vehiclesOccludedAuc': 0.002513484, 'vehiclesOccludedIou': 0.0011486545, 'vehiclesFlowEpe': 2.7965307, 'vehiclesFlowWarpedOccupancyAuc': 0.6659462, 'vehiclesFlowWarpedOccupancyIou': 0.550008}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.6745344, 'vehiclesObservedIou': 0.38669467, 'vehiclesOccludedAuc': 0.0038851148, 'vehiclesOccludedIou': 0.0029353707, 'vehiclesFlowEpe': 2.1536627, 'vehiclesFlowWarpedOccupancyAuc': 0.702923, 'vehiclesFlowWarpedOccupancyIou': 0.46868992}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.68518513, 'vehiclesObservedIou': 0.3503615, 'vehiclesOccludedAuc': 0.033265457, 'vehiclesOccludedIou': 0.010044755, 'vehiclesFlowEpe': 10.906867, 'vehiclesFlowWarpedOccupancyAuc': 0.4469396, 'vehiclesFlowWarpedOccupancyIou': 0.36218554}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.81060094, 'vehiclesObservedIou': 0.4690368, 'vehiclesOccludedAuc': 0.03713706, 'vehiclesOccludedIou': 0.01659044, 'vehiclesFlowEpe': 4.0371203, 'vehiclesFlowWarpedOccupancyAuc': 0.69814956, 'vehiclesFlowWarpedOccupancyIou': 0.5667721}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.41375706, 'vehiclesObservedIou': 0.20218796, 'vehiclesOccludedAuc': 0.10791208, 'vehiclesOccludedIou': 0.00612731, 'vehiclesFlowEpe': 4.0033445, 'vehiclesFlowWarpedOccupancyAuc': 0.49566248, 'vehiclesFlowWarpedOccupancyIou': 0.23898973}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8226362, 'vehiclesObservedIou': 0.4535275, 'vehiclesOccludedAuc': 0.05506005, 'vehiclesOccludedIou': 0.0153115485, 'vehiclesFlowEpe': 3.3352647, 'vehiclesFlowWarpedOccupancyAuc': 0.7085352, 'vehiclesFlowWarpedOccupancyIou': 0.5042109}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.698519, 'vehiclesObservedIou': 0.4649692, 'vehiclesOccludedAuc': 0.010916548, 'vehiclesOccludedIou': 0.0054803453, 'vehiclesFlowEpe': 3.1159704, 'vehiclesFlowWarpedOccupancyAuc': 0.6793123, 'vehiclesFlowWarpedOccupancyIou': 0.5136539}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.87119627, 'vehiclesObservedIou': 0.5463261, 'vehiclesOccludedAuc': 0.005060927, 'vehiclesOccludedIou': 0.0027381778, 'vehiclesFlowEpe': 10.944592, 'vehiclesFlowWarpedOccupancyAuc': 0.69187623, 'vehiclesFlowWarpedOccupancyIou': 0.634257}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8219193, 'vehiclesObservedIou': 0.56276935, 'vehiclesOccludedAuc': 0.3569646, 'vehiclesOccludedIou': 0.038159393, 'vehiclesFlowEpe': 2.742939, 'vehiclesFlowWarpedOccupancyAuc': 0.7811208, 'vehiclesFlowWarpedOccupancyIou': 0.68784076}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.78700745, 'vehiclesObservedIou': 0.38040257, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.0081458, 'vehiclesFlowWarpedOccupancyAuc': 0.66996014, 'vehiclesFlowWarpedOccupancyIou': 0.51568943}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.11603613, 'vehiclesObservedIou': 0.052153997, 'vehiclesOccludedAuc': 0.029497858, 'vehiclesOccludedIou': 0.0062082186, 'vehiclesFlowEpe': 2.78422, 'vehiclesFlowWarpedOccupancyAuc': 0.21003401, 'vehiclesFlowWarpedOccupancyIou': 0.061970424}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.6790816, 'vehiclesObservedIou': 0.37701192, 'vehiclesOccludedAuc': 0.3291465, 'vehiclesOccludedIou': 0.049301263, 'vehiclesFlowEpe': 5.7211328, 'vehiclesFlowWarpedOccupancyAuc': 0.6198863, 'vehiclesFlowWarpedOccupancyIou': 0.4740793}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.12792869, 'vehiclesObservedIou': 0.050289918, 'vehiclesOccludedAuc': 0.039646767, 'vehiclesOccludedIou': 0.009397259, 'vehiclesFlowEpe': 16.260921, 'vehiclesFlowWarpedOccupancyAuc': 0.15681429, 'vehiclesFlowWarpedOccupancyIou': 0.04824042}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.6239945, 'vehiclesObservedIou': 0.36300963, 'vehiclesOccludedAuc': 0.049318887, 'vehiclesOccludedIou': 0.02082891, 'vehiclesFlowEpe': 4.5067215, 'vehiclesFlowWarpedOccupancyAuc': 0.5695933, 'vehiclesFlowWarpedOccupancyIou': 0.43543535}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.92768407, 'vehiclesObservedIou': 0.622803, 'vehiclesOccludedAuc': 0.0065416256, 'vehiclesOccludedIou': 0.0031249053, 'vehiclesFlowEpe': 2.9369307, 'vehiclesFlowWarpedOccupancyAuc': 0.79111475, 'vehiclesFlowWarpedOccupancyIou': 0.73394877}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8700308, 'vehiclesObservedIou': 0.51181835, 'vehiclesOccludedAuc': 0.0013514105, 'vehiclesOccludedIou': 0.0008901449, 'vehiclesFlowEpe': 4.0606437, 'vehiclesFlowWarpedOccupancyAuc': 0.6770229, 'vehiclesFlowWarpedOccupancyIou': 0.60633755}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9234906, 'vehiclesObservedIou': 0.58158755, 'vehiclesOccludedAuc': 0.0037166593, 'vehiclesOccludedIou': 0.0019223338, 'vehiclesFlowEpe': 3.6398077, 'vehiclesFlowWarpedOccupancyAuc': 0.72880626, 'vehiclesFlowWarpedOccupancyIou': 0.6284843}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.9525291, 'vehiclesObservedIou': 0.7016979, 'vehiclesOccludedAuc': 0.0044027898, 'vehiclesOccludedIou': 0.0009895295, 'vehiclesFlowEpe': 2.421391, 'vehiclesFlowWarpedOccupancyAuc': 0.7777221, 'vehiclesFlowWarpedOccupancyIou': 0.72790575}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.7391133618518518, 'vehiclesObservedIou': 0.4474684772222222, 'vehiclesOccludedAuc': 0.057249428970370365, 'vehiclesOccludedIou': 0.01200291205925926, 'vehiclesFlowEpe': 4.751870333333334, 'vehiclesFlowWarpedOccupancyAuc': 0.6379926944444444, 'vehiclesFlowWarpedOccupancyIou': 0.5191623627407407}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00118new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 10:51:24.355834: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:51:24.406870: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:51:24.407159: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.15489835, 'vehiclesObservedIou': 0.07561896, 'vehiclesOccludedAuc': 0.018392919, 'vehiclesOccludedIou': 0.0049438626, 'vehiclesFlowEpe': 5.1220293, 'vehiclesFlowWarpedOccupancyAuc': 0.23572485, 'vehiclesFlowWarpedOccupancyIou': 0.07188423}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.96635973, 'vehiclesObservedIou': 0.75292057, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 1.452174, 'vehiclesFlowWarpedOccupancyAuc': 0.8741756, 'vehiclesFlowWarpedOccupancyIou': 0.8405112}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.7590764, 'vehiclesObservedIou': 0.45006114, 'vehiclesOccludedAuc': 0.033902016, 'vehiclesOccludedIou': 0.0062849107, 'vehiclesFlowEpe': 5.8091617, 'vehiclesFlowWarpedOccupancyAuc': 0.53596056, 'vehiclesFlowWarpedOccupancyIou': 0.48142374}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.23065482, 'vehiclesObservedIou': 0.092820734, 'vehiclesOccludedAuc': 0.005911311, 'vehiclesOccludedIou': 0.0018833661, 'vehiclesFlowEpe': 6.6614084, 'vehiclesFlowWarpedOccupancyAuc': 0.19513555, 'vehiclesFlowWarpedOccupancyIou': 0.10055605}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.44146386, 'vehiclesObservedIou': 0.21491465, 'vehiclesOccludedAuc': 0.004879726, 'vehiclesOccludedIou': 0.002346634, 'vehiclesFlowEpe': 10.371082, 'vehiclesFlowWarpedOccupancyAuc': 0.32763705, 'vehiclesFlowWarpedOccupancyIou': 0.24949916}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.95897263, 'vehiclesObservedIou': 0.8211567, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 18.558989, 'vehiclesFlowWarpedOccupancyAuc': 0.85040104, 'vehiclesFlowWarpedOccupancyIou': 0.88747865}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.26018792, 'vehiclesObservedIou': 0.14275387, 'vehiclesOccludedAuc': 0.030408096, 'vehiclesOccludedIou': 0.0059662154, 'vehiclesFlowEpe': 9.976403, 'vehiclesFlowWarpedOccupancyAuc': 0.19630116, 'vehiclesFlowWarpedOccupancyIou': 0.14083098}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.64146256, 'vehiclesObservedIou': 0.31253654, 'vehiclesOccludedAuc': 0.46308246, 'vehiclesOccludedIou': 0.16898458, 'vehiclesFlowEpe': 5.4012938, 'vehiclesFlowWarpedOccupancyAuc': 0.5201025, 'vehiclesFlowWarpedOccupancyIou': 0.3271999}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.12680042, 'vehiclesObservedIou': 0.050262384, 'vehiclesOccludedAuc': 0.049092405, 'vehiclesOccludedIou': 0.0067974315, 'vehiclesFlowEpe': 3.2499614, 'vehiclesFlowWarpedOccupancyAuc': 0.19096504, 'vehiclesFlowWarpedOccupancyIou': 0.04905891}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.96991515, 'vehiclesObservedIou': 0.79701144, 'vehiclesOccludedAuc': 0.0032777474, 'vehiclesOccludedIou': 0.0013055886, 'vehiclesFlowEpe': 2.8246949, 'vehiclesFlowWarpedOccupancyAuc': 0.87985086, 'vehiclesFlowWarpedOccupancyIou': 0.8345989}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9059501, 'vehiclesObservedIou': 0.620449, 'vehiclesOccludedAuc': 0.48805988, 'vehiclesOccludedIou': 0.058420613, 'vehiclesFlowEpe': 3.5752034, 'vehiclesFlowWarpedOccupancyAuc': 0.8242916, 'vehiclesFlowWarpedOccupancyIou': 0.7731806}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.91130567, 'vehiclesObservedIou': 0.6149267, 'vehiclesOccludedAuc': 0.036796942, 'vehiclesOccludedIou': 0.008067549, 'vehiclesFlowEpe': 4.1245914, 'vehiclesFlowWarpedOccupancyAuc': 0.7057381, 'vehiclesFlowWarpedOccupancyIou': 0.6336292}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.97602785, 'vehiclesObservedIou': 0.820722, 'vehiclesOccludedAuc': 0.046625447, 'vehiclesOccludedIou': 0.011104216, 'vehiclesFlowEpe': 1.923745, 'vehiclesFlowWarpedOccupancyAuc': 0.88861567, 'vehiclesFlowWarpedOccupancyIou': 0.7919978}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.71475685, 'vehiclesObservedIou': 0.47715724, 'vehiclesOccludedAuc': 0.028375536, 'vehiclesOccludedIou': 0.013304088, 'vehiclesFlowEpe': 3.590113, 'vehiclesFlowWarpedOccupancyAuc': 0.7451248, 'vehiclesFlowWarpedOccupancyIou': 0.4782054}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9893576, 'vehiclesObservedIou': 0.85587895, 'vehiclesOccludedAuc': 0.008535379, 'vehiclesOccludedIou': 0.0030109114, 'vehiclesFlowEpe': 9.44422, 'vehiclesFlowWarpedOccupancyAuc': 0.8297829, 'vehiclesFlowWarpedOccupancyIou': 0.81235445}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9007123, 'vehiclesObservedIou': 0.6621661, 'vehiclesOccludedAuc': 0.112598374, 'vehiclesOccludedIou': 0.031469878, 'vehiclesFlowEpe': 2.6156921, 'vehiclesFlowWarpedOccupancyAuc': 0.8556867, 'vehiclesFlowWarpedOccupancyIou': 0.7629349}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.25720826, 'vehiclesObservedIou': 0.11405155, 'vehiclesOccludedAuc': 0.08700884, 'vehiclesOccludedIou': 0.01601208, 'vehiclesFlowEpe': 5.7325807, 'vehiclesFlowWarpedOccupancyAuc': 0.45256937, 'vehiclesFlowWarpedOccupancyIou': 0.11256914}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.78189325, 'vehiclesObservedIou': 0.42327943, 'vehiclesOccludedAuc': 0.07897751, 'vehiclesOccludedIou': 0.019464338, 'vehiclesFlowEpe': 3.0256343, 'vehiclesFlowWarpedOccupancyAuc': 0.6317667, 'vehiclesFlowWarpedOccupancyIou': 0.47296456}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.18045491, 'vehiclesObservedIou': 0.07634392, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 4.0996857, 'vehiclesFlowWarpedOccupancyAuc': 0.25581577, 'vehiclesFlowWarpedOccupancyIou': 0.07693395}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9031776, 'vehiclesObservedIou': 0.5778254, 'vehiclesOccludedAuc': 0.03725701, 'vehiclesOccludedIou': 0.02039433, 'vehiclesFlowEpe': 5.4094067, 'vehiclesFlowWarpedOccupancyAuc': 0.7885028, 'vehiclesFlowWarpedOccupancyIou': 0.63728917}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7266689, 'vehiclesObservedIou': 0.40927547, 'vehiclesOccludedAuc': 0.015856942, 'vehiclesOccludedIou': 0.0055539403, 'vehiclesFlowEpe': 10.152337, 'vehiclesFlowWarpedOccupancyAuc': 0.49086043, 'vehiclesFlowWarpedOccupancyIou': 0.43008617}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.94768417, 'vehiclesObservedIou': 0.7119663, 'vehiclesOccludedAuc': 0.026199881, 'vehiclesOccludedIou': 0.0009391516, 'vehiclesFlowEpe': 2.6660078, 'vehiclesFlowWarpedOccupancyAuc': 0.728621, 'vehiclesFlowWarpedOccupancyIou': 0.38693324}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.11598791, 'vehiclesObservedIou': 0.071414, 'vehiclesOccludedAuc': 0.3803945, 'vehiclesOccludedIou': 0.031229185, 'vehiclesFlowEpe': 6.6801643, 'vehiclesFlowWarpedOccupancyAuc': 0.47662014, 'vehiclesFlowWarpedOccupancyIou': 0.3336657}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7918008, 'vehiclesObservedIou': 0.4337159, 'vehiclesOccludedAuc': 0.02933051, 'vehiclesOccludedIou': 0.0034884429, 'vehiclesFlowEpe': 5.9053273, 'vehiclesFlowWarpedOccupancyAuc': 0.5441377, 'vehiclesFlowWarpedOccupancyIou': 0.49686584}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.86868393, 'vehiclesObservedIou': 0.6379694, 'vehiclesOccludedAuc': 0.12977819, 'vehiclesOccludedIou': 0.026766267, 'vehiclesFlowEpe': 7.436016, 'vehiclesFlowWarpedOccupancyAuc': 0.729817, 'vehiclesFlowWarpedOccupancyIou': 0.7053564}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9411136, 'vehiclesObservedIou': 0.71622217, 'vehiclesOccludedAuc': 0.26674673, 'vehiclesOccludedIou': 0.035638444, 'vehiclesFlowEpe': 4.427955, 'vehiclesFlowWarpedOccupancyAuc': 0.83633065, 'vehiclesFlowWarpedOccupancyIou': 0.8334375}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5340093, 'vehiclesObservedIou': 0.2787898, 'vehiclesOccludedAuc': 0.27624935, 'vehiclesOccludedIou': 0.059853315, 'vehiclesFlowEpe': 6.1613803, 'vehiclesFlowWarpedOccupancyAuc': 0.46625707, 'vehiclesFlowWarpedOccupancyIou': 0.3617272}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.34424198, 'vehiclesObservedIou': 0.16496322, 'vehiclesOccludedAuc': 0.018514667, 'vehiclesOccludedIou': 0.0040490404, 'vehiclesFlowEpe': 4.1892633, 'vehiclesFlowWarpedOccupancyAuc': 0.48369783, 'vehiclesFlowWarpedOccupancyIou': 0.18722041}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.18586431, 'vehiclesObservedIou': 0.08759303, 'vehiclesOccludedAuc': 0.0015012801, 'vehiclesOccludedIou': 0.0012716262, 'vehiclesFlowEpe': 6.673343, 'vehiclesFlowWarpedOccupancyAuc': 0.1805416, 'vehiclesFlowWarpedOccupancyIou': 0.076467924}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.45663851, 'vehiclesObservedIou': 0.2171869, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.9271312, 'vehiclesFlowWarpedOccupancyAuc': 0.47717667, 'vehiclesFlowWarpedOccupancyIou': 0.25358754}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.6080238, 'vehiclesObservedIou': 0.2663121, 'vehiclesOccludedAuc': 0.032086816, 'vehiclesOccludedIou': 0.007863004, 'vehiclesFlowEpe': 8.549833, 'vehiclesFlowWarpedOccupancyAuc': 0.43969533, 'vehiclesFlowWarpedOccupancyIou': 0.3754716}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.93251777, 'vehiclesObservedIou': 0.6230189, 'vehiclesOccludedAuc': 0.0015943571, 'vehiclesOccludedIou': 0.00091804, 'vehiclesFlowEpe': 10.710451, 'vehiclesFlowWarpedOccupancyAuc': 0.6355708, 'vehiclesFlowWarpedOccupancyIou': 0.7046618}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.9893576, 'vehiclesObservedIou': 0.85587895, 'vehiclesOccludedAuc': 0.008535379, 'vehiclesOccludedIou': 0.0030109114, 'vehiclesFlowEpe': 9.44422, 'vehiclesFlowWarpedOccupancyAuc': 0.8297829, 'vehiclesFlowWarpedOccupancyIou': 0.81235445}
Average Time: 0.0012 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6401209753125, 'vehiclesObservedIou': 0.424102639625, 'vehiclesOccludedAuc': 0.084732338175, 'vehiclesOccludedIou': 0.017416595271875, 'vehiclesFlowEpe': 5.951477468749999, 'vehiclesFlowWarpedOccupancyAuc': 0.57104608875, 'vehiclesFlowWarpedOccupancyIou': 0.4587681941875}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00036new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 10:51:45.170296: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:51:45.222113: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:51:45.222419: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.4523085, 'vehiclesObservedIou': 0.23063348, 'vehiclesOccludedAuc': 0.064730406, 'vehiclesOccludedIou': 0.011846005, 'vehiclesFlowEpe': 6.7000027, 'vehiclesFlowWarpedOccupancyAuc': 0.5077003, 'vehiclesFlowWarpedOccupancyIou': 0.35180333}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.9172476, 'vehiclesObservedIou': 0.6504907, 'vehiclesOccludedAuc': 0.05042016, 'vehiclesOccludedIou': 0.01348969, 'vehiclesFlowEpe': 4.3360195, 'vehiclesFlowWarpedOccupancyAuc': 0.71655625, 'vehiclesFlowWarpedOccupancyIou': 0.66122866}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.8952545, 'vehiclesObservedIou': 0.67105305, 'vehiclesOccludedAuc': 0.001874146, 'vehiclesOccludedIou': 9.212255e-05, 'vehiclesFlowEpe': 2.834122, 'vehiclesFlowWarpedOccupancyAuc': 0.7699337, 'vehiclesFlowWarpedOccupancyIou': 0.70215595}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8301238, 'vehiclesObservedIou': 0.47230014, 'vehiclesOccludedAuc': 0.26602075, 'vehiclesOccludedIou': 0.057161123, 'vehiclesFlowEpe': 2.665304, 'vehiclesFlowWarpedOccupancyAuc': 0.72292733, 'vehiclesFlowWarpedOccupancyIou': 0.6324551}
Time: 0.0014 seconds, Metrics: {'vehiclesObservedAuc': 0.79968613, 'vehiclesObservedIou': 0.6222127, 'vehiclesOccludedAuc': 0.015641717, 'vehiclesOccludedIou': 0.010579593, 'vehiclesFlowEpe': 3.6543868, 'vehiclesFlowWarpedOccupancyAuc': 0.8407731, 'vehiclesFlowWarpedOccupancyIou': 0.72139674}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7212092, 'vehiclesObservedIou': 0.40191844, 'vehiclesOccludedAuc': 0.11164023, 'vehiclesOccludedIou': 0.01858613, 'vehiclesFlowEpe': 11.165904, 'vehiclesFlowWarpedOccupancyAuc': 0.5645704, 'vehiclesFlowWarpedOccupancyIou': 0.4576623}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.34119722, 'vehiclesObservedIou': 0.20402476, 'vehiclesOccludedAuc': 0.0018993779, 'vehiclesOccludedIou': 0.0010757115, 'vehiclesFlowEpe': 4.079451, 'vehiclesFlowWarpedOccupancyAuc': 0.33766392, 'vehiclesFlowWarpedOccupancyIou': 0.2604764}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.75521356, 'vehiclesObservedIou': 0.5363632, 'vehiclesOccludedAuc': 0.03265252, 'vehiclesOccludedIou': 0.009028351, 'vehiclesFlowEpe': 10.781042, 'vehiclesFlowWarpedOccupancyAuc': 0.58697504, 'vehiclesFlowWarpedOccupancyIou': 0.5899578}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.54013836, 'vehiclesObservedIou': 0.23403765, 'vehiclesOccludedAuc': 0.0014051666, 'vehiclesOccludedIou': 0.00068636157, 'vehiclesFlowEpe': 2.8290472, 'vehiclesFlowWarpedOccupancyAuc': 0.5104006, 'vehiclesFlowWarpedOccupancyIou': 0.37905008}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9233647, 'vehiclesObservedIou': 0.66062945, 'vehiclesOccludedAuc': 0.18418577, 'vehiclesOccludedIou': 0.036411148, 'vehiclesFlowEpe': 5.7272086, 'vehiclesFlowWarpedOccupancyAuc': 0.810266, 'vehiclesFlowWarpedOccupancyIou': 0.730222}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5302631, 'vehiclesObservedIou': 0.20287186, 'vehiclesOccludedAuc': 0.06619567, 'vehiclesOccludedIou': 0.014246931, 'vehiclesFlowEpe': 3.2794518, 'vehiclesFlowWarpedOccupancyAuc': 0.43585405, 'vehiclesFlowWarpedOccupancyIou': 0.2468088}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.21272834, 'vehiclesObservedIou': 0.12878321, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 7.623051, 'vehiclesFlowWarpedOccupancyAuc': 0.27835414, 'vehiclesFlowWarpedOccupancyIou': 0.14017831}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7397264, 'vehiclesObservedIou': 0.381908, 'vehiclesOccludedAuc': 0.06504384, 'vehiclesOccludedIou': 0.014786696, 'vehiclesFlowEpe': 3.7081063, 'vehiclesFlowWarpedOccupancyAuc': 0.5552515, 'vehiclesFlowWarpedOccupancyIou': 0.4085478}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.2527703, 'vehiclesObservedIou': 0.13412903, 'vehiclesOccludedAuc': 0.0031537917, 'vehiclesOccludedIou': 0.0019318457, 'vehiclesFlowEpe': 3.6681302, 'vehiclesFlowWarpedOccupancyAuc': 0.46011344, 'vehiclesFlowWarpedOccupancyIou': 0.1605524}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.87592417, 'vehiclesObservedIou': 0.5477587, 'vehiclesOccludedAuc': 0.069970384, 'vehiclesOccludedIou': 0.017864667, 'vehiclesFlowEpe': 2.0066614, 'vehiclesFlowWarpedOccupancyAuc': 0.7861428, 'vehiclesFlowWarpedOccupancyIou': 0.6741252}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9163684, 'vehiclesObservedIou': 0.6403755, 'vehiclesOccludedAuc': 0.0034733973, 'vehiclesOccludedIou': 0.0021662887, 'vehiclesFlowEpe': 2.7694068, 'vehiclesFlowWarpedOccupancyAuc': 0.83136445, 'vehiclesFlowWarpedOccupancyIou': 0.7517473}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.49108213, 'vehiclesObservedIou': 0.24101974, 'vehiclesOccludedAuc': 0.18915164, 'vehiclesOccludedIou': 0.039669745, 'vehiclesFlowEpe': 7.1697035, 'vehiclesFlowWarpedOccupancyAuc': 0.5919247, 'vehiclesFlowWarpedOccupancyIou': 0.23135653}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.6011485, 'vehiclesObservedIou': 0.28610015, 'vehiclesOccludedAuc': 0.0015383256, 'vehiclesOccludedIou': 0.001667837, 'vehiclesFlowEpe': 5.059579, 'vehiclesFlowWarpedOccupancyAuc': 0.45644102, 'vehiclesFlowWarpedOccupancyIou': 0.31958416}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9164219, 'vehiclesObservedIou': 0.6680254, 'vehiclesOccludedAuc': 0.20926431, 'vehiclesOccludedIou': 0.06198126, 'vehiclesFlowEpe': 3.6082282, 'vehiclesFlowWarpedOccupancyAuc': 0.8105611, 'vehiclesFlowWarpedOccupancyIou': 0.79005605}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7916062, 'vehiclesObservedIou': 0.4412324, 'vehiclesOccludedAuc': 0.0008233045, 'vehiclesOccludedIou': 8.038391e-05, 'vehiclesFlowEpe': 3.323371, 'vehiclesFlowWarpedOccupancyAuc': 0.6338268, 'vehiclesFlowWarpedOccupancyIou': 0.5232517}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7543081, 'vehiclesObservedIou': 0.424769, 'vehiclesOccludedAuc': 0.11368857, 'vehiclesOccludedIou': 0.023363939, 'vehiclesFlowEpe': 3.6587853, 'vehiclesFlowWarpedOccupancyAuc': 0.69485384, 'vehiclesFlowWarpedOccupancyIou': 0.5115713}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9146488, 'vehiclesObservedIou': 0.65217453, 'vehiclesOccludedAuc': 0.001056468, 'vehiclesOccludedIou': 0.0008629421, 'vehiclesFlowEpe': 6.463179, 'vehiclesFlowWarpedOccupancyAuc': 0.7248506, 'vehiclesFlowWarpedOccupancyIou': 0.72546464}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9774531, 'vehiclesObservedIou': 0.69768417, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 1.6754552, 'vehiclesFlowWarpedOccupancyAuc': 0.86967146, 'vehiclesFlowWarpedOccupancyIou': 0.80597216}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7677253, 'vehiclesObservedIou': 0.3541086, 'vehiclesOccludedAuc': 0.0008799322, 'vehiclesOccludedIou': 0.00018615299, 'vehiclesFlowEpe': 3.6403732, 'vehiclesFlowWarpedOccupancyAuc': 0.6009761, 'vehiclesFlowWarpedOccupancyIou': 0.44672868}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.70708966, 'vehiclesObservedIou': 0.3467512, 'vehiclesOccludedAuc': 0.0054204226, 'vehiclesOccludedIou': 0.0026401978, 'vehiclesFlowEpe': 3.026855, 'vehiclesFlowWarpedOccupancyAuc': 0.66713995, 'vehiclesFlowWarpedOccupancyIou': 0.38665572}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.9774531, 'vehiclesObservedIou': 0.69768417, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 1.6754552, 'vehiclesFlowWarpedOccupancyAuc': 0.86967146, 'vehiclesFlowWarpedOccupancyIou': 0.80597216}
Average Time: 0.0012 seconds, Average Metrics: {'vehiclesObservedAuc': 0.7050003188000001, 'vehiclesObservedIou': 0.4332542024, 'vehiclesOccludedAuc': 0.058405211976, 'vehiclesOccludedIou': 0.013616204872800002, 'vehiclesFlowEpe': 4.618112988, 'vehiclesFlowWarpedOccupancyAuc': 0.6306037036, 'vehiclesFlowWarpedOccupancyIou': 0.5043603644}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00039new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 10:52:01.825472: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:52:01.876202: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:52:01.876476: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.32962465, 'vehiclesObservedIou': 0.20321725, 'vehiclesOccludedAuc': 0.028711157, 'vehiclesOccludedIou': 0.0063039437, 'vehiclesFlowEpe': 7.3198204, 'vehiclesFlowWarpedOccupancyAuc': 0.30398738, 'vehiclesFlowWarpedOccupancyIou': 0.18126728}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.37452742, 'vehiclesObservedIou': 0.16642155, 'vehiclesOccludedAuc': 0.027469475, 'vehiclesOccludedIou': 0.0077999947, 'vehiclesFlowEpe': 8.292884, 'vehiclesFlowWarpedOccupancyAuc': 0.38912442, 'vehiclesFlowWarpedOccupancyIou': 0.15917325}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6525278, 'vehiclesObservedIou': 0.29717678, 'vehiclesOccludedAuc': 0.0028351163, 'vehiclesOccludedIou': 0.000584139, 'vehiclesFlowEpe': 4.1420946, 'vehiclesFlowWarpedOccupancyAuc': 0.54595894, 'vehiclesFlowWarpedOccupancyIou': 0.30784023}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.893768, 'vehiclesObservedIou': 0.59213656, 'vehiclesOccludedAuc': 0.0666798, 'vehiclesOccludedIou': 0.020865146, 'vehiclesFlowEpe': 4.491266, 'vehiclesFlowWarpedOccupancyAuc': 0.7652289, 'vehiclesFlowWarpedOccupancyIou': 0.69500715}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.72266257, 'vehiclesObservedIou': 0.35864455, 'vehiclesOccludedAuc': 0.003697543, 'vehiclesOccludedIou': 0.0020452372, 'vehiclesFlowEpe': 3.7223897, 'vehiclesFlowWarpedOccupancyAuc': 0.5926412, 'vehiclesFlowWarpedOccupancyIou': 0.4412608}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.68809724, 'vehiclesObservedIou': 0.38243517, 'vehiclesOccludedAuc': 0.15174001, 'vehiclesOccludedIou': 0.045007776, 'vehiclesFlowEpe': 3.0102594, 'vehiclesFlowWarpedOccupancyAuc': 0.6120295, 'vehiclesFlowWarpedOccupancyIou': 0.43924543}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8851503, 'vehiclesObservedIou': 0.56963885, 'vehiclesOccludedAuc': 0.0145909395, 'vehiclesOccludedIou': 0.0067444146, 'vehiclesFlowEpe': 4.3034325, 'vehiclesFlowWarpedOccupancyAuc': 0.6690517, 'vehiclesFlowWarpedOccupancyIou': 0.61241966}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.31327572, 'vehiclesObservedIou': 0.11446158, 'vehiclesOccludedAuc': 0.019770129, 'vehiclesOccludedIou': 0.0060082288, 'vehiclesFlowEpe': 5.8396935, 'vehiclesFlowWarpedOccupancyAuc': 0.25756916, 'vehiclesFlowWarpedOccupancyIou': 0.09883221}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.624938, 'vehiclesObservedIou': 0.3230625, 'vehiclesOccludedAuc': 0.055784382, 'vehiclesOccludedIou': 0.01593152, 'vehiclesFlowEpe': 5.574207, 'vehiclesFlowWarpedOccupancyAuc': 0.58684033, 'vehiclesFlowWarpedOccupancyIou': 0.39260742}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9823599, 'vehiclesObservedIou': 0.731456, 'vehiclesOccludedAuc': 0.0006566562, 'vehiclesOccludedIou': 0.0003559021, 'vehiclesFlowEpe': 1.6928982, 'vehiclesFlowWarpedOccupancyAuc': 0.88530815, 'vehiclesFlowWarpedOccupancyIou': 0.829855}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5045252, 'vehiclesObservedIou': 0.25416428, 'vehiclesOccludedAuc': 0.027125161, 'vehiclesOccludedIou': 0.0067129405, 'vehiclesFlowEpe': 3.5918336, 'vehiclesFlowWarpedOccupancyAuc': 0.5292601, 'vehiclesFlowWarpedOccupancyIou': 0.27675247}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.57107, 'vehiclesObservedIou': 0.32226297, 'vehiclesOccludedAuc': 0.0021445502, 'vehiclesOccludedIou': 0.0013286403, 'vehiclesFlowEpe': 13.28312, 'vehiclesFlowWarpedOccupancyAuc': 0.46263462, 'vehiclesFlowWarpedOccupancyIou': 0.35738897}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.54299825, 'vehiclesObservedIou': 0.2633267, 'vehiclesOccludedAuc': 0.13395785, 'vehiclesOccludedIou': 0.039953455, 'vehiclesFlowEpe': 5.656354, 'vehiclesFlowWarpedOccupancyAuc': 0.5927871, 'vehiclesFlowWarpedOccupancyIou': 0.4437464}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6624737, 'vehiclesObservedIou': 0.31791407, 'vehiclesOccludedAuc': 0.0055164085, 'vehiclesOccludedIou': 0.0028459993, 'vehiclesFlowEpe': 2.4308882, 'vehiclesFlowWarpedOccupancyAuc': 0.66086483, 'vehiclesFlowWarpedOccupancyIou': 0.37828198}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.69190633, 'vehiclesObservedIou': 0.39278746, 'vehiclesOccludedAuc': 0.32598588, 'vehiclesOccludedIou': 0.059093744, 'vehiclesFlowEpe': 4.454961, 'vehiclesFlowWarpedOccupancyAuc': 0.5665115, 'vehiclesFlowWarpedOccupancyIou': 0.42923617}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5872661, 'vehiclesObservedIou': 0.31755283, 'vehiclesOccludedAuc': 0.11192837, 'vehiclesOccludedIou': 0.024361894, 'vehiclesFlowEpe': 4.23566, 'vehiclesFlowWarpedOccupancyAuc': 0.61027044, 'vehiclesFlowWarpedOccupancyIou': 0.44314662}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.91659707, 'vehiclesObservedIou': 0.5332557, 'vehiclesOccludedAuc': 0.03916965, 'vehiclesOccludedIou': 0.015465506, 'vehiclesFlowEpe': 3.1174598, 'vehiclesFlowWarpedOccupancyAuc': 0.74492466, 'vehiclesFlowWarpedOccupancyIou': 0.54042065}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5579541, 'vehiclesObservedIou': 0.2862117, 'vehiclesOccludedAuc': 0.0014976393, 'vehiclesOccludedIou': 0.0008786229, 'vehiclesFlowEpe': 3.8334625, 'vehiclesFlowWarpedOccupancyAuc': 0.5431949, 'vehiclesFlowWarpedOccupancyIou': 0.3228983}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6873101, 'vehiclesObservedIou': 0.32997602, 'vehiclesOccludedAuc': 0.020331953, 'vehiclesOccludedIou': 0.010114517, 'vehiclesFlowEpe': 6.722043, 'vehiclesFlowWarpedOccupancyAuc': 0.53155935, 'vehiclesFlowWarpedOccupancyIou': 0.35371187}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8499419, 'vehiclesObservedIou': 0.52773273, 'vehiclesOccludedAuc': 0.50892663, 'vehiclesOccludedIou': 0.05489037, 'vehiclesFlowEpe': 6.0489006, 'vehiclesFlowWarpedOccupancyAuc': 0.717786, 'vehiclesFlowWarpedOccupancyIou': 0.69686645}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.74082774, 'vehiclesObservedIou': 0.45352155, 'vehiclesOccludedAuc': 2.0787962e-05, 'vehiclesOccludedIou': 2.825894e-05, 'vehiclesFlowEpe': 8.080656, 'vehiclesFlowWarpedOccupancyAuc': 0.6247095, 'vehiclesFlowWarpedOccupancyIou': 0.56616175}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.8713454, 'vehiclesObservedIou': 0.48100019, 'vehiclesOccludedAuc': 0.036916606, 'vehiclesOccludedIou': 0.011213647, 'vehiclesFlowEpe': 7.9673347, 'vehiclesFlowWarpedOccupancyAuc': 0.5632705, 'vehiclesFlowWarpedOccupancyIou': 0.5248226}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.66724825, 'vehiclesObservedIou': 0.37227687, 'vehiclesOccludedAuc': 0.009526147, 'vehiclesOccludedIou': 0.005292969, 'vehiclesFlowEpe': 4.0899034, 'vehiclesFlowWarpedOccupancyAuc': 0.6074743, 'vehiclesFlowWarpedOccupancyIou': 0.4357824}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.95470214, 'vehiclesObservedIou': 0.73536843, 'vehiclesOccludedAuc': 0.075003155, 'vehiclesOccludedIou': 0.020012764, 'vehiclesFlowEpe': 3.8168182, 'vehiclesFlowWarpedOccupancyAuc': 0.8610105, 'vehiclesFlowWarpedOccupancyIou': 0.830726}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.79657173, 'vehiclesObservedIou': 0.43595496, 'vehiclesOccludedAuc': 0.034390286, 'vehiclesOccludedIou': 0.011446541, 'vehiclesFlowEpe': 3.8254418, 'vehiclesFlowWarpedOccupancyAuc': 0.63682914, 'vehiclesFlowWarpedOccupancyIou': 0.46833026}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8003961, 'vehiclesObservedIou': 0.5846665, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 5.479068, 'vehiclesFlowWarpedOccupancyAuc': 0.6964693, 'vehiclesFlowWarpedOccupancyIou': 0.67011017}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.94131684, 'vehiclesObservedIou': 0.7105238, 'vehiclesOccludedAuc': 0.06524989, 'vehiclesOccludedIou': 0.022382224, 'vehiclesFlowEpe': 2.003717, 'vehiclesFlowWarpedOccupancyAuc': 0.85119087, 'vehiclesFlowWarpedOccupancyIou': 0.7894834}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8887269, 'vehiclesObservedIou': 0.6107158, 'vehiclesOccludedAuc': 0.3134988, 'vehiclesOccludedIou': 0.035614684, 'vehiclesFlowEpe': 4.3494706, 'vehiclesFlowWarpedOccupancyAuc': 0.72854227, 'vehiclesFlowWarpedOccupancyIou': 0.7129305}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7414389, 'vehiclesObservedIou': 0.44526616, 'vehiclesOccludedAuc': 0.26196292, 'vehiclesOccludedIou': 0.081846416, 'vehiclesFlowEpe': 2.5606701, 'vehiclesFlowWarpedOccupancyAuc': 0.78920346, 'vehiclesFlowWarpedOccupancyIou': 0.6437962}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8037438, 'vehiclesObservedIou': 0.46462476, 'vehiclesOccludedAuc': 0.003988277, 'vehiclesOccludedIou': 0.002367241, 'vehiclesFlowEpe': 3.1894956, 'vehiclesFlowWarpedOccupancyAuc': 0.6841543, 'vehiclesFlowWarpedOccupancyIou': 0.5366072}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9958619, 'vehiclesObservedIou': 0.872886, 'vehiclesOccludedAuc': 0.0035394118, 'vehiclesOccludedIou': 0.0023012212, 'vehiclesFlowEpe': 1.5866609, 'vehiclesFlowWarpedOccupancyAuc': 0.8941733, 'vehiclesFlowWarpedOccupancyIou': 0.85273045}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.94931287, 'vehiclesObservedIou': 0.84215146, 'vehiclesOccludedAuc': 0.0007178978, 'vehiclesOccludedIou': 0.00021812097, 'vehiclesFlowEpe': 10.883322, 'vehiclesFlowWarpedOccupancyAuc': 0.8663069, 'vehiclesFlowWarpedOccupancyIou': 0.9180654}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6640176, 'vehiclesObservedIou': 0.34918374, 'vehiclesOccludedAuc': 0.004480272, 'vehiclesOccludedIou': 0.0008626554, 'vehiclesFlowEpe': 5.2467546, 'vehiclesFlowWarpedOccupancyAuc': 0.5529151, 'vehiclesFlowWarpedOccupancyIou': 0.41220394}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.90123355, 'vehiclesObservedIou': 0.6687069, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 4.6270475, 'vehiclesFlowWarpedOccupancyAuc': 0.7621293, 'vehiclesFlowWarpedOccupancyIou': 0.76504433}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.9958619, 'vehiclesObservedIou': 0.872886, 'vehiclesOccludedAuc': 0.0035394118, 'vehiclesOccludedIou': 0.0023012212, 'vehiclesFlowEpe': 1.5866609, 'vehiclesFlowWarpedOccupancyAuc': 0.8941733, 'vehiclesFlowWarpedOccupancyIou': 0.85273045}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.728109355, 'vehiclesObservedIou': 0.45031418735294126, 'vehiclesOccludedAuc': 0.06934746325182352, 'vehiclesOccludedIou': 0.015319962753235291, 'vehiclesFlowEpe': 4.984411423529412, 'vehiclesFlowWarpedOccupancyAuc': 0.6378209388235295, 'vehiclesFlowWarpedOccupancyIou': 0.5154927326470587}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00067new.tfrecords...
2024-05-28 10:52:23.242477: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:52:23.293219: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:52:23.293497: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0014 seconds, Metrics: {'vehiclesObservedAuc': 0.9375025, 'vehiclesObservedIou': 0.6516497, 'vehiclesOccludedAuc': 0.113822035, 'vehiclesOccludedIou': 0.032482274, 'vehiclesFlowEpe': 7.5748367, 'vehiclesFlowWarpedOccupancyAuc': 0.707444, 'vehiclesFlowWarpedOccupancyIou': 0.6884325}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.46539903, 'vehiclesObservedIou': 0.2232496, 'vehiclesOccludedAuc': 0.08589479, 'vehiclesOccludedIou': 0.012472837, 'vehiclesFlowEpe': 6.201833, 'vehiclesFlowWarpedOccupancyAuc': 0.45209324, 'vehiclesFlowWarpedOccupancyIou': 0.26163465}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.5374878, 'vehiclesObservedIou': 0.30293676, 'vehiclesOccludedAuc': 0.03823159, 'vehiclesOccludedIou': 0.016021894, 'vehiclesFlowEpe': 4.5586853, 'vehiclesFlowWarpedOccupancyAuc': 0.5219798, 'vehiclesFlowWarpedOccupancyIou': 0.34135193}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6237357, 'vehiclesObservedIou': 0.3377522, 'vehiclesOccludedAuc': 0.072160855, 'vehiclesOccludedIou': 0.025371723, 'vehiclesFlowEpe': 5.309938, 'vehiclesFlowWarpedOccupancyAuc': 0.54455924, 'vehiclesFlowWarpedOccupancyIou': 0.4014094}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6553093, 'vehiclesObservedIou': 0.37951183, 'vehiclesOccludedAuc': 0.0026603055, 'vehiclesOccludedIou': 0.0019528569, 'vehiclesFlowEpe': 10.682579, 'vehiclesFlowWarpedOccupancyAuc': 0.41957793, 'vehiclesFlowWarpedOccupancyIou': 0.41941303}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6573488, 'vehiclesObservedIou': 0.3484235, 'vehiclesOccludedAuc': 0.11859673, 'vehiclesOccludedIou': 0.015222503, 'vehiclesFlowEpe': 3.830039, 'vehiclesFlowWarpedOccupancyAuc': 0.57846963, 'vehiclesFlowWarpedOccupancyIou': 0.403244}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.82230806, 'vehiclesObservedIou': 0.5309931, 'vehiclesOccludedAuc': 0.2248008, 'vehiclesOccludedIou': 0.03153073, 'vehiclesFlowEpe': 8.341566, 'vehiclesFlowWarpedOccupancyAuc': 0.694252, 'vehiclesFlowWarpedOccupancyIou': 0.64953136}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9275745, 'vehiclesObservedIou': 0.643749, 'vehiclesOccludedAuc': 0.25207645, 'vehiclesOccludedIou': 0.045167483, 'vehiclesFlowEpe': 3.3038871, 'vehiclesFlowWarpedOccupancyAuc': 0.79576504, 'vehiclesFlowWarpedOccupancyIou': 0.70930994}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.25556624, 'vehiclesObservedIou': 0.093398586, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.914042, 'vehiclesFlowWarpedOccupancyAuc': 0.45448408, 'vehiclesFlowWarpedOccupancyIou': 0.116078526}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8246542, 'vehiclesObservedIou': 0.532913, 'vehiclesOccludedAuc': 0.07139964, 'vehiclesOccludedIou': 0.0084064705, 'vehiclesFlowEpe': 3.298081, 'vehiclesFlowWarpedOccupancyAuc': 0.62903345, 'vehiclesFlowWarpedOccupancyIou': 0.5607436}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6836336, 'vehiclesObservedIou': 0.31290194, 'vehiclesOccludedAuc': 0.027438425, 'vehiclesOccludedIou': 0.00400779, 'vehiclesFlowEpe': 3.7376611, 'vehiclesFlowWarpedOccupancyAuc': 0.5497455, 'vehiclesFlowWarpedOccupancyIou': 0.36418954}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.31868446, 'vehiclesObservedIou': 0.14475128, 'vehiclesOccludedAuc': 0.01392938, 'vehiclesOccludedIou': 0.0034536873, 'vehiclesFlowEpe': 3.7390747, 'vehiclesFlowWarpedOccupancyAuc': 0.45902187, 'vehiclesFlowWarpedOccupancyIou': 0.16159216}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9302159, 'vehiclesObservedIou': 0.52314806, 'vehiclesOccludedAuc': 0.032744516, 'vehiclesOccludedIou': 0.0058694715, 'vehiclesFlowEpe': 2.2734332, 'vehiclesFlowWarpedOccupancyAuc': 0.80759954, 'vehiclesFlowWarpedOccupancyIou': 0.6476653}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.91416633, 'vehiclesObservedIou': 0.56992453, 'vehiclesOccludedAuc': 0.05863526, 'vehiclesOccludedIou': 0.02281384, 'vehiclesFlowEpe': 2.982688, 'vehiclesFlowWarpedOccupancyAuc': 0.75120056, 'vehiclesFlowWarpedOccupancyIou': 0.6412294}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.553582, 'vehiclesObservedIou': 0.33290002, 'vehiclesOccludedAuc': 0.017980544, 'vehiclesOccludedIou': 0.005996606, 'vehiclesFlowEpe': 4.0292244, 'vehiclesFlowWarpedOccupancyAuc': 0.5692444, 'vehiclesFlowWarpedOccupancyIou': 0.36655277}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7968491, 'vehiclesObservedIou': 0.50916314, 'vehiclesOccludedAuc': 0.051502682, 'vehiclesOccludedIou': 0.021235948, 'vehiclesFlowEpe': 8.551018, 'vehiclesFlowWarpedOccupancyAuc': 0.5981629, 'vehiclesFlowWarpedOccupancyIou': 0.55016434}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8408229, 'vehiclesObservedIou': 0.51151985, 'vehiclesOccludedAuc': 0.05813124, 'vehiclesOccludedIou': 0.022128116, 'vehiclesFlowEpe': 4.048566, 'vehiclesFlowWarpedOccupancyAuc': 0.70890486, 'vehiclesFlowWarpedOccupancyIou': 0.591441}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.47045842, 'vehiclesObservedIou': 0.25014716, 'vehiclesOccludedAuc': 0.055081688, 'vehiclesOccludedIou': 0.0074212747, 'vehiclesFlowEpe': 6.4800143, 'vehiclesFlowWarpedOccupancyAuc': 0.4231252, 'vehiclesFlowWarpedOccupancyIou': 0.2957943}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.3053012, 'vehiclesObservedIou': 0.17767906, 'vehiclesOccludedAuc': 0.03936606, 'vehiclesOccludedIou': 0.004691235, 'vehiclesFlowEpe': 5.7840214, 'vehiclesFlowWarpedOccupancyAuc': 0.26917076, 'vehiclesFlowWarpedOccupancyIou': 0.22945555}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.47247678, 'vehiclesObservedIou': 0.21801925, 'vehiclesOccludedAuc': 0.0022091079, 'vehiclesOccludedIou': 0.002019408, 'vehiclesFlowEpe': 4.368372, 'vehiclesFlowWarpedOccupancyAuc': 0.48832706, 'vehiclesFlowWarpedOccupancyIou': 0.24331114}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.99081445, 'vehiclesObservedIou': 0.92390305, 'vehiclesOccludedAuc': 0.011552089, 'vehiclesOccludedIou': 0.003364672, 'vehiclesFlowEpe': 3.1629617, 'vehiclesFlowWarpedOccupancyAuc': 0.90642846, 'vehiclesFlowWarpedOccupancyIou': 0.933746}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6587681, 'vehiclesObservedIou': 0.33756822, 'vehiclesOccludedAuc': 0.082145184, 'vehiclesOccludedIou': 0.029347094, 'vehiclesFlowEpe': 6.8472652, 'vehiclesFlowWarpedOccupancyAuc': 0.57190734, 'vehiclesFlowWarpedOccupancyIou': 0.4476303}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7491558, 'vehiclesObservedIou': 0.462479, 'vehiclesOccludedAuc': 0.11518325, 'vehiclesOccludedIou': 0.019317396, 'vehiclesFlowEpe': 3.6270103, 'vehiclesFlowWarpedOccupancyAuc': 0.6867999, 'vehiclesFlowWarpedOccupancyIou': 0.54975533}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.41589156, 'vehiclesObservedIou': 0.21319422, 'vehiclesOccludedAuc': 0.018217187, 'vehiclesOccludedIou': 0.0075045982, 'vehiclesFlowEpe': 4.739898, 'vehiclesFlowWarpedOccupancyAuc': 0.47645515, 'vehiclesFlowWarpedOccupancyIou': 0.22831924}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.915274, 'vehiclesObservedIou': 0.65434325, 'vehiclesOccludedAuc': 0.1026254, 'vehiclesOccludedIou': 0.036548685, 'vehiclesFlowEpe': 2.7292833, 'vehiclesFlowWarpedOccupancyAuc': 0.7725815, 'vehiclesFlowWarpedOccupancyIou': 0.7330845}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.85176104, 'vehiclesObservedIou': 0.49390477, 'vehiclesOccludedAuc': 0.11600171, 'vehiclesOccludedIou': 0.043968704, 'vehiclesFlowEpe': 4.515843, 'vehiclesFlowWarpedOccupancyAuc': 0.6912373, 'vehiclesFlowWarpedOccupancyIou': 0.6018634}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.17923144, 'vehiclesObservedIou': 0.08461656, 'vehiclesOccludedAuc': 0.00022300068, 'vehiclesOccludedIou': 0.00048109802, 'vehiclesFlowEpe': 5.013777, 'vehiclesFlowWarpedOccupancyAuc': 0.25209227, 'vehiclesFlowWarpedOccupancyIou': 0.09860194}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.1657429, 'vehiclesObservedIou': 0.06997192, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 8.023185, 'vehiclesFlowWarpedOccupancyAuc': 0.14358746, 'vehiclesFlowWarpedOccupancyIou': 0.07267868}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9110021, 'vehiclesObservedIou': 0.6249579, 'vehiclesOccludedAuc': 0.13681607, 'vehiclesOccludedIou': 0.018339183, 'vehiclesFlowEpe': 3.4557338, 'vehiclesFlowWarpedOccupancyAuc': 0.7660285, 'vehiclesFlowWarpedOccupancyIou': 0.7226391}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.99081445, 'vehiclesObservedIou': 0.92390305, 'vehiclesOccludedAuc': 0.011552089, 'vehiclesOccludedIou': 0.003364672, 'vehiclesFlowEpe': 3.1629617, 'vehiclesFlowWarpedOccupancyAuc': 0.90642846, 'vehiclesFlowWarpedOccupancyIou': 0.933746}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6493351106896552, 'vehiclesObservedIou': 0.3951610502068966, 'vehiclesOccludedAuc': 0.06618710307172414, 'vehiclesOccludedIou': 0.015418537176551724, 'vehiclesFlowEpe': 4.969810948275862, 'vehiclesFlowWarpedOccupancyAuc': 0.5754923772413794, 'vehiclesFlowWarpedOccupancyIou': 0.44934010089655174}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00001new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 10:52:41.592144: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:52:41.642440: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:52:41.642715: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8638439, 'vehiclesObservedIou': 0.5078708, 'vehiclesOccludedAuc': 0.000851998, 'vehiclesOccludedIou': 0.00069002184, 'vehiclesFlowEpe': 4.7343283, 'vehiclesFlowWarpedOccupancyAuc': 0.7386303, 'vehiclesFlowWarpedOccupancyIou': 0.6385479}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.62267137, 'vehiclesObservedIou': 0.28460756, 'vehiclesOccludedAuc': 0.21454632, 'vehiclesOccludedIou': 0.05573596, 'vehiclesFlowEpe': 4.668406, 'vehiclesFlowWarpedOccupancyAuc': 0.6309489, 'vehiclesFlowWarpedOccupancyIou': 0.3470736}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9652349, 'vehiclesObservedIou': 0.7802954, 'vehiclesOccludedAuc': 0.07988411, 'vehiclesOccludedIou': 0.03562775, 'vehiclesFlowEpe': 4.501636, 'vehiclesFlowWarpedOccupancyAuc': 0.86213106, 'vehiclesFlowWarpedOccupancyIou': 0.8556935}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.37903398, 'vehiclesObservedIou': 0.13795276, 'vehiclesOccludedAuc': 0.016349299, 'vehiclesOccludedIou': 0.0052941837, 'vehiclesFlowEpe': 5.589822, 'vehiclesFlowWarpedOccupancyAuc': 0.39420763, 'vehiclesFlowWarpedOccupancyIou': 0.15085705}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5832211, 'vehiclesObservedIou': 0.26684207, 'vehiclesOccludedAuc': 0.0012486859, 'vehiclesOccludedIou': 0.0013285701, 'vehiclesFlowEpe': 3.5120416, 'vehiclesFlowWarpedOccupancyAuc': 0.51405334, 'vehiclesFlowWarpedOccupancyIou': 0.2778633}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.74738765, 'vehiclesObservedIou': 0.435566, 'vehiclesOccludedAuc': 0.1394556, 'vehiclesOccludedIou': 0.019661358, 'vehiclesFlowEpe': 2.118851, 'vehiclesFlowWarpedOccupancyAuc': 0.6959417, 'vehiclesFlowWarpedOccupancyIou': 0.5825021}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.80286074, 'vehiclesObservedIou': 0.4586128, 'vehiclesOccludedAuc': 0.029472012, 'vehiclesOccludedIou': 0.006216597, 'vehiclesFlowEpe': 3.1973984, 'vehiclesFlowWarpedOccupancyAuc': 0.65262944, 'vehiclesFlowWarpedOccupancyIou': 0.50579983}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.44611582, 'vehiclesObservedIou': 0.19503671, 'vehiclesOccludedAuc': 0.0037676645, 'vehiclesOccludedIou': 0.0014034502, 'vehiclesFlowEpe': 4.356102, 'vehiclesFlowWarpedOccupancyAuc': 0.51581675, 'vehiclesFlowWarpedOccupancyIou': 0.2669197}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.2733321, 'vehiclesObservedIou': 0.10924486, 'vehiclesOccludedAuc': 0.059677206, 'vehiclesOccludedIou': 0.015993217, 'vehiclesFlowEpe': 5.210046, 'vehiclesFlowWarpedOccupancyAuc': 0.38132954, 'vehiclesFlowWarpedOccupancyIou': 0.110674575}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6353916, 'vehiclesObservedIou': 0.34466144, 'vehiclesOccludedAuc': 0.229752, 'vehiclesOccludedIou': 0.078317486, 'vehiclesFlowEpe': 4.4050016, 'vehiclesFlowWarpedOccupancyAuc': 0.61435723, 'vehiclesFlowWarpedOccupancyIou': 0.43592003}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.91137147, 'vehiclesObservedIou': 0.5966882, 'vehiclesOccludedAuc': 0.024302732, 'vehiclesOccludedIou': 0.011879233, 'vehiclesFlowEpe': 6.0797434, 'vehiclesFlowWarpedOccupancyAuc': 0.739422, 'vehiclesFlowWarpedOccupancyIou': 0.6807825}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6174822, 'vehiclesObservedIou': 0.312652, 'vehiclesOccludedAuc': 0.082880124, 'vehiclesOccludedIou': 0.03005844, 'vehiclesFlowEpe': 8.671736, 'vehiclesFlowWarpedOccupancyAuc': 0.470287, 'vehiclesFlowWarpedOccupancyIou': 0.3682485}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7202976, 'vehiclesObservedIou': 0.39878497, 'vehiclesOccludedAuc': 0.017111793, 'vehiclesOccludedIou': 0.004204328, 'vehiclesFlowEpe': 3.4977942, 'vehiclesFlowWarpedOccupancyAuc': 0.65381885, 'vehiclesFlowWarpedOccupancyIou': 0.469374}
Time: 0.0014 seconds, Metrics: {'vehiclesObservedAuc': 0.61331815, 'vehiclesObservedIou': 0.30439073, 'vehiclesOccludedAuc': 0.06884342, 'vehiclesOccludedIou': 0.0071044457, 'vehiclesFlowEpe': 3.618189, 'vehiclesFlowWarpedOccupancyAuc': 0.5559415, 'vehiclesFlowWarpedOccupancyIou': 0.36339313}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7788907, 'vehiclesObservedIou': 0.45991203, 'vehiclesOccludedAuc': 0.060849726, 'vehiclesOccludedIou': 0.01791264, 'vehiclesFlowEpe': 2.3322496, 'vehiclesFlowWarpedOccupancyAuc': 0.72795045, 'vehiclesFlowWarpedOccupancyIou': 0.5302395}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.6929095, 'vehiclesObservedIou': 0.33343044, 'vehiclesOccludedAuc': 0.00094907364, 'vehiclesOccludedIou': 0.0014964517, 'vehiclesFlowEpe': 3.7329702, 'vehiclesFlowWarpedOccupancyAuc': 0.59713906, 'vehiclesFlowWarpedOccupancyIou': 0.39471692}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8351476, 'vehiclesObservedIou': 0.5107614, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 4.564971, 'vehiclesFlowWarpedOccupancyAuc': 0.6078379, 'vehiclesFlowWarpedOccupancyIou': 0.6397197}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.31480315, 'vehiclesObservedIou': 0.16804215, 'vehiclesOccludedAuc': 0.045281876, 'vehiclesOccludedIou': 0.018129062, 'vehiclesFlowEpe': 4.8529916, 'vehiclesFlowWarpedOccupancyAuc': 0.3753407, 'vehiclesFlowWarpedOccupancyIou': 0.21728346}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.6750403, 'vehiclesObservedIou': 0.3402811, 'vehiclesOccludedAuc': 0.10004101, 'vehiclesOccludedIou': 0.036941525, 'vehiclesFlowEpe': 5.781344, 'vehiclesFlowWarpedOccupancyAuc': 0.5925395, 'vehiclesFlowWarpedOccupancyIou': 0.42372635}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.65762323, 'vehiclesObservedIou': 0.30371258, 'vehiclesOccludedAuc': 0.22156255, 'vehiclesOccludedIou': 0.02442712, 'vehiclesFlowEpe': 3.9066513, 'vehiclesFlowWarpedOccupancyAuc': 0.5435617, 'vehiclesFlowWarpedOccupancyIou': 0.34718448}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8830508, 'vehiclesObservedIou': 0.5954414, 'vehiclesOccludedAuc': 0.08028199, 'vehiclesOccludedIou': 0.01598107, 'vehiclesFlowEpe': 3.7268143, 'vehiclesFlowWarpedOccupancyAuc': 0.74019086, 'vehiclesFlowWarpedOccupancyIou': 0.6574138}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.5440022, 'vehiclesObservedIou': 0.36892894, 'vehiclesOccludedAuc': 0.108755514, 'vehiclesOccludedIou': 0.023492446, 'vehiclesFlowEpe': 6.211695, 'vehiclesFlowWarpedOccupancyAuc': 0.54014415, 'vehiclesFlowWarpedOccupancyIou': 0.5044748}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.849333, 'vehiclesObservedIou': 0.535959, 'vehiclesOccludedAuc': 0.009999405, 'vehiclesOccludedIou': 0.0038941111, 'vehiclesFlowEpe': 2.3608234, 'vehiclesFlowWarpedOccupancyAuc': 0.7524053, 'vehiclesFlowWarpedOccupancyIou': 0.5999414}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.86976916, 'vehiclesObservedIou': 0.56599754, 'vehiclesOccludedAuc': 0.19777943, 'vehiclesOccludedIou': 0.06216427, 'vehiclesFlowEpe': 3.64575, 'vehiclesFlowWarpedOccupancyAuc': 0.76496667, 'vehiclesFlowWarpedOccupancyIou': 0.59480923}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.32249725, 'vehiclesObservedIou': 0.24662954, 'vehiclesOccludedAuc': 0.0016322639, 'vehiclesOccludedIou': 0.0006462196, 'vehiclesFlowEpe': 6.4191623, 'vehiclesFlowWarpedOccupancyAuc': 0.40732247, 'vehiclesFlowWarpedOccupancyIou': 0.23887429}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9669452, 'vehiclesObservedIou': 0.73924947, 'vehiclesOccludedAuc': 0.30963385, 'vehiclesOccludedIou': 0.029205514, 'vehiclesFlowEpe': 5.0971284, 'vehiclesFlowWarpedOccupancyAuc': 0.83860314, 'vehiclesFlowWarpedOccupancyIou': 0.7795503}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.28572303, 'vehiclesObservedIou': 0.12563851, 'vehiclesOccludedAuc': 0.030761883, 'vehiclesOccludedIou': 0.0063318764, 'vehiclesFlowEpe': 6.6612964, 'vehiclesFlowWarpedOccupancyAuc': 0.30438346, 'vehiclesFlowWarpedOccupancyIou': 0.123509035}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.681762, 'vehiclesObservedIou': 0.30130413, 'vehiclesOccludedAuc': 0.13691743, 'vehiclesOccludedIou': 0.035905514, 'vehiclesFlowEpe': 4.6892886, 'vehiclesFlowWarpedOccupancyAuc': 0.5237472, 'vehiclesFlowWarpedOccupancyIou': 0.33963147}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.62189764, 'vehiclesObservedIou': 0.34054083, 'vehiclesOccludedAuc': 0.007094305, 'vehiclesOccludedIou': 0.0033811629, 'vehiclesFlowEpe': 3.3042202, 'vehiclesFlowWarpedOccupancyAuc': 0.45749688, 'vehiclesFlowWarpedOccupancyIou': 0.3767519}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9096042, 'vehiclesObservedIou': 0.6163476, 'vehiclesOccludedAuc': 0.008725115, 'vehiclesOccludedIou': 0.0028839677, 'vehiclesFlowEpe': 4.1555624, 'vehiclesFlowWarpedOccupancyAuc': 0.74714005, 'vehiclesFlowWarpedOccupancyIou': 0.65210235}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.92261004, 'vehiclesObservedIou': 0.6028745, 'vehiclesOccludedAuc': 0.0009665681, 'vehiclesOccludedIou': 0.00018236958, 'vehiclesFlowEpe': 2.2997537, 'vehiclesFlowWarpedOccupancyAuc': 0.78062487, 'vehiclesFlowWarpedOccupancyIou': 0.7175749}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.81758803, 'vehiclesObservedIou': 0.58288825, 'vehiclesOccludedAuc': 0.0603402, 'vehiclesOccludedIou': 0.009615759, 'vehiclesFlowEpe': 3.8235512, 'vehiclesFlowWarpedOccupancyAuc': 0.7379858, 'vehiclesFlowWarpedOccupancyIou': 0.6519034}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.4464912, 'vehiclesObservedIou': 0.24136746, 'vehiclesOccludedAuc': 0.1627272, 'vehiclesOccludedIou': 0.026713163, 'vehiclesFlowEpe': 3.810101, 'vehiclesFlowWarpedOccupancyAuc': 0.53644073, 'vehiclesFlowWarpedOccupancyIou': 0.25394872}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.98816395, 'vehiclesObservedIou': 0.82616454, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.063114, 'vehiclesFlowWarpedOccupancyAuc': 0.87229216, 'vehiclesFlowWarpedOccupancyIou': 0.89134717}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.53302276, 'vehiclesObservedIou': 0.27725428, 'vehiclesOccludedAuc': 0.027288964, 'vehiclesOccludedIou': 0.0017000221, 'vehiclesFlowEpe': 2.618542, 'vehiclesFlowWarpedOccupancyAuc': 0.6252473, 'vehiclesFlowWarpedOccupancyIou': 0.3267748}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9104802, 'vehiclesObservedIou': 0.58877087, 'vehiclesOccludedAuc': 0.03194297, 'vehiclesOccludedIou': 0.00870005, 'vehiclesFlowEpe': 3.4997387, 'vehiclesFlowWarpedOccupancyAuc': 0.7046731, 'vehiclesFlowWarpedOccupancyIou': 0.6524752}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.79257506, 'vehiclesObservedIou': 0.5048311, 'vehiclesOccludedAuc': 0.3065649, 'vehiclesOccludedIou': 0.06180039, 'vehiclesFlowEpe': 4.3944836, 'vehiclesFlowWarpedOccupancyAuc': 0.7340069, 'vehiclesFlowWarpedOccupancyIou': 0.58441895}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8042058, 'vehiclesObservedIou': 0.32840797, 'vehiclesOccludedAuc': 0.01751137, 'vehiclesOccludedIou': 0.003510485, 'vehiclesFlowEpe': 3.8608713, 'vehiclesFlowWarpedOccupancyAuc': 0.57188815, 'vehiclesFlowWarpedOccupancyIou': 0.28314444}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.6542823, 'vehiclesObservedIou': 0.39921728, 'vehiclesOccludedAuc': 0.08401804, 'vehiclesOccludedIou': 0.0234127, 'vehiclesFlowEpe': 5.9755044, 'vehiclesFlowWarpedOccupancyAuc': 0.6156616, 'vehiclesFlowWarpedOccupancyIou': 0.4964003}
2024-05-28 10:53:10.997237: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:53:11.063522: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:53:11.063961: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
Time: 0.0019 seconds, Metrics: {'vehiclesObservedAuc': 0.834779, 'vehiclesObservedIou': 0.53829616, 'vehiclesOccludedAuc': 0.06529698, 'vehiclesOccludedIou': 0.020079067, 'vehiclesFlowEpe': 4.8349724, 'vehiclesFlowWarpedOccupancyAuc': 0.66445076, 'vehiclesFlowWarpedOccupancyIou': 0.5828443}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8576121, 'vehiclesObservedIou': 0.5856289, 'vehiclesOccludedAuc': 0.48835948, 'vehiclesOccludedIou': 0.043351203, 'vehiclesFlowEpe': 9.406408, 'vehiclesFlowWarpedOccupancyAuc': 0.6212898, 'vehiclesFlowWarpedOccupancyIou': 0.63240546}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.78167796, 'vehiclesObservedIou': 0.43878615, 'vehiclesOccludedAuc': 0.25166082, 'vehiclesOccludedIou': 0.07891516, 'vehiclesFlowEpe': 3.4695773, 'vehiclesFlowWarpedOccupancyAuc': 0.6761338, 'vehiclesFlowWarpedOccupancyIou': 0.5518706}
Time: 0.0015 seconds, Metrics: {'vehiclesObservedAuc': 0.7080885, 'vehiclesObservedIou': 0.45061943, 'vehiclesOccludedAuc': 0.061496705, 'vehiclesOccludedIou': 0.020197684, 'vehiclesFlowEpe': 3.7759426, 'vehiclesFlowWarpedOccupancyAuc': 0.6769344, 'vehiclesFlowWarpedOccupancyIou': 0.5920004}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.83173275, 'vehiclesObservedIou': 0.53177994, 'vehiclesOccludedAuc': 0.030845582, 'vehiclesOccludedIou': 0.007900297, 'vehiclesFlowEpe': 5.4962077, 'vehiclesFlowWarpedOccupancyAuc': 0.68805534, 'vehiclesFlowWarpedOccupancyIou': 0.5561095}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.98816395, 'vehiclesObservedIou': 0.82616454, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.063114, 'vehiclesFlowWarpedOccupancyAuc': 0.87229216, 'vehiclesFlowWarpedOccupancyIou': 0.89134717}
Average Time: 0.0012 seconds, Average Metrics: {'vehiclesObservedAuc': 0.7034970724999999, 'vehiclesObservedIou': 0.4223243134090909, 'vehiclesOccludedAuc': 0.08812336738727274, 'vehiclesOccludedIou': 0.019599689559545455, 'vehiclesFlowEpe': 4.430290502272728, 'vehiclesFlowWarpedOccupancyAuc': 0.6237720327272727, 'vehiclesFlowWarpedOccupancyIou': 0.4828817463636364}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00069new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
2024-05-28 10:53:15.310808: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:53:15.363032: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:53:15.363348: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.6996109, 'vehiclesObservedIou': 0.41327524, 'vehiclesOccludedAuc': 0.06129182, 'vehiclesOccludedIou': 0.013443343, 'vehiclesFlowEpe': 6.143105, 'vehiclesFlowWarpedOccupancyAuc': 0.5202976, 'vehiclesFlowWarpedOccupancyIou': 0.4075764}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9069309, 'vehiclesObservedIou': 0.67020047, 'vehiclesOccludedAuc': 0.011425149, 'vehiclesOccludedIou': 0.0033175945, 'vehiclesFlowEpe': 3.207028, 'vehiclesFlowWarpedOccupancyAuc': 0.7877475, 'vehiclesFlowWarpedOccupancyIou': 0.6875398}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.85868734, 'vehiclesObservedIou': 0.5048415, 'vehiclesOccludedAuc': 0.021903818, 'vehiclesOccludedIou': 0.00683559, 'vehiclesFlowEpe': 3.9980545, 'vehiclesFlowWarpedOccupancyAuc': 0.68265414, 'vehiclesFlowWarpedOccupancyIou': 0.57497686}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.61121106, 'vehiclesObservedIou': 0.32557008, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.3237283, 'vehiclesFlowWarpedOccupancyAuc': 0.58967143, 'vehiclesFlowWarpedOccupancyIou': 0.41497955}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.85793555, 'vehiclesObservedIou': 0.53809154, 'vehiclesOccludedAuc': 0.015452111, 'vehiclesOccludedIou': 0.0043179644, 'vehiclesFlowEpe': 3.6565204, 'vehiclesFlowWarpedOccupancyAuc': 0.688178, 'vehiclesFlowWarpedOccupancyIou': 0.66670245}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6329507, 'vehiclesObservedIou': 0.3634685, 'vehiclesOccludedAuc': 0.07674197, 'vehiclesOccludedIou': 0.016422667, 'vehiclesFlowEpe': 2.3175626, 'vehiclesFlowWarpedOccupancyAuc': 0.69599074, 'vehiclesFlowWarpedOccupancyIou': 0.46135157}
DataLossError encountered. Skipping the corrupted record.
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.9069309, 'vehiclesObservedIou': 0.67020047, 'vehiclesOccludedAuc': 0.011425149, 'vehiclesOccludedIou': 0.0033175945, 'vehiclesFlowEpe': 3.207028, 'vehiclesFlowWarpedOccupancyAuc': 0.7877475, 'vehiclesFlowWarpedOccupancyIou': 0.6875398}
Average Time: 0.0012 seconds, Average Metrics: {'vehiclesObservedAuc': 0.761221075, 'vehiclesObservedIou': 0.46924122166666665, 'vehiclesOccludedAuc': 0.031135811333333333, 'vehiclesOccludedIou': 0.007389526483333332, 'vehiclesFlowEpe': 3.7743331333333328, 'vehiclesFlowWarpedOccupancyAuc': 0.6607565683333334, 'vehiclesFlowWarpedOccupancyIou': 0.535521105}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00137new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7604227, 'vehiclesObservedIou': 0.43880332, 'vehiclesOccludedAuc': 0.09078482, 'vehiclesOccludedIou': 0.024741976, 'vehiclesFlowEpe': 3.9676824, 'vehiclesFlowWarpedOccupancyAuc': 0.6774246, 'vehiclesFlowWarpedOccupancyIou': 0.51859176}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8092404, 'vehiclesObservedIou': 0.54799, 'vehiclesOccludedAuc': 0.06930662, 'vehiclesOccludedIou': 0.018660996, 'vehiclesFlowEpe': 5.09808, 'vehiclesFlowWarpedOccupancyAuc': 0.6976484, 'vehiclesFlowWarpedOccupancyIou': 0.64720476}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.09844088, 'vehiclesObservedIou': 0.056252096, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 8.330086, 'vehiclesFlowWarpedOccupancyAuc': 0.11130524, 'vehiclesFlowWarpedOccupancyIou': 0.06330231}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7042019, 'vehiclesObservedIou': 0.31387934, 'vehiclesOccludedAuc': 0.06815851, 'vehiclesOccludedIou': 0.023704326, 'vehiclesFlowEpe': 6.436098, 'vehiclesFlowWarpedOccupancyAuc': 0.53840613, 'vehiclesFlowWarpedOccupancyIou': 0.37022373}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7918947, 'vehiclesObservedIou': 0.4366154, 'vehiclesOccludedAuc': 0.047417182, 'vehiclesOccludedIou': 0.012170159, 'vehiclesFlowEpe': 16.155983, 'vehiclesFlowWarpedOccupancyAuc': 0.40011775, 'vehiclesFlowWarpedOccupancyIou': 0.4202285}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5301349, 'vehiclesObservedIou': 0.32980865, 'vehiclesOccludedAuc': 0.17657052, 'vehiclesOccludedIou': 0.021921763, 'vehiclesFlowEpe': 6.096198, 'vehiclesFlowWarpedOccupancyAuc': 0.4731108, 'vehiclesFlowWarpedOccupancyIou': 0.38548502}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.16375284, 'vehiclesObservedIou': 0.06603056, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.6642308, 'vehiclesFlowWarpedOccupancyAuc': 0.22479655, 'vehiclesFlowWarpedOccupancyIou': 0.07179146}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.16241741, 'vehiclesObservedIou': 0.06762505, 'vehiclesOccludedAuc': 0.041707613, 'vehiclesOccludedIou': 0.011437643, 'vehiclesFlowEpe': 11.741802, 'vehiclesFlowWarpedOccupancyAuc': 0.1780355, 'vehiclesFlowWarpedOccupancyIou': 0.040231753}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.38152412, 'vehiclesObservedIou': 0.22301017, 'vehiclesOccludedAuc': 0.006580757, 'vehiclesOccludedIou': 0.0018191186, 'vehiclesFlowEpe': 8.67226, 'vehiclesFlowWarpedOccupancyAuc': 0.3399646, 'vehiclesFlowWarpedOccupancyIou': 0.19594721}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7084658, 'vehiclesObservedIou': 0.38616765, 'vehiclesOccludedAuc': 0.26089764, 'vehiclesOccludedIou': 0.06286532, 'vehiclesFlowEpe': 4.7224884, 'vehiclesFlowWarpedOccupancyAuc': 0.63649994, 'vehiclesFlowWarpedOccupancyIou': 0.4660992}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8774195, 'vehiclesObservedIou': 0.59449995, 'vehiclesOccludedAuc': 0.010117883, 'vehiclesOccludedIou': 0.0046009603, 'vehiclesFlowEpe': 3.5620184, 'vehiclesFlowWarpedOccupancyAuc': 0.76999307, 'vehiclesFlowWarpedOccupancyIou': 0.6878452}
2024-05-28 10:53:27.606399: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:53:27.657625: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:53:27.657915: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6155821, 'vehiclesObservedIou': 0.23628737, 'vehiclesOccludedAuc': 0.0131696565, 'vehiclesOccludedIou': 0.006104725, 'vehiclesFlowEpe': 5.2664876, 'vehiclesFlowWarpedOccupancyAuc': 0.52211064, 'vehiclesFlowWarpedOccupancyIou': 0.26319933}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.04660085, 'vehiclesObservedIou': 0.024213547, 'vehiclesOccludedAuc': 0.075153865, 'vehiclesOccludedIou': 0.009022306, 'vehiclesFlowEpe': 6.0829477, 'vehiclesFlowWarpedOccupancyAuc': 0.15146385, 'vehiclesFlowWarpedOccupancyIou': 0.02690731}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8745046, 'vehiclesObservedIou': 0.64050937, 'vehiclesOccludedAuc': 0.015926944, 'vehiclesOccludedIou': 0.0060229106, 'vehiclesFlowEpe': 5.6358204, 'vehiclesFlowWarpedOccupancyAuc': 0.7515116, 'vehiclesFlowWarpedOccupancyIou': 0.6958499}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.26085666, 'vehiclesObservedIou': 0.21689153, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 8.877734, 'vehiclesFlowWarpedOccupancyAuc': 0.31265658, 'vehiclesFlowWarpedOccupancyIou': 0.25234511}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.97795725, 'vehiclesObservedIou': 0.80297685, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.002789, 'vehiclesFlowWarpedOccupancyAuc': 0.8679857, 'vehiclesFlowWarpedOccupancyIou': 0.8753739}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.590809, 'vehiclesObservedIou': 0.32149678, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 4.407439, 'vehiclesFlowWarpedOccupancyAuc': 0.5626958, 'vehiclesFlowWarpedOccupancyIou': 0.3969403}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7874307, 'vehiclesObservedIou': 0.49138725, 'vehiclesOccludedAuc': 0.5541882, 'vehiclesOccludedIou': 0.14109442, 'vehiclesFlowEpe': 3.770053, 'vehiclesFlowWarpedOccupancyAuc': 0.6713854, 'vehiclesFlowWarpedOccupancyIou': 0.55197215}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.65155053, 'vehiclesObservedIou': 0.4431369, 'vehiclesOccludedAuc': 0.12033947, 'vehiclesOccludedIou': 0.024638413, 'vehiclesFlowEpe': 4.6645784, 'vehiclesFlowWarpedOccupancyAuc': 0.6059439, 'vehiclesFlowWarpedOccupancyIou': 0.48400927}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.97795725, 'vehiclesObservedIou': 0.80297685, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.002789, 'vehiclesFlowWarpedOccupancyAuc': 0.8679857, 'vehiclesFlowWarpedOccupancyIou': 0.8753739}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.5680635178947369, 'vehiclesObservedIou': 0.3493464096315789, 'vehiclesOccludedAuc': 0.08159577265789474, 'vehiclesOccludedIou': 0.019410791394736844, 'vehiclesFlowEpe': 6.271304005263158, 'vehiclesFlowWarpedOccupancyAuc': 0.49963452894736843, 'vehiclesFlowWarpedOccupancyIou': 0.3901867459473684}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00086new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.7939026, 'vehiclesObservedIou': 0.5693059, 'vehiclesOccludedAuc': 0.07171993, 'vehiclesOccludedIou': 0.019021338, 'vehiclesFlowEpe': 2.7216327, 'vehiclesFlowWarpedOccupancyAuc': 0.7131311, 'vehiclesFlowWarpedOccupancyIou': 0.64198244}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8375968, 'vehiclesObservedIou': 0.4967369, 'vehiclesOccludedAuc': 0.1769419, 'vehiclesOccludedIou': 0.053484075, 'vehiclesFlowEpe': 4.3841443, 'vehiclesFlowWarpedOccupancyAuc': 0.67752343, 'vehiclesFlowWarpedOccupancyIou': 0.59102523}
Time: 0.0017 seconds, Metrics: {'vehiclesObservedAuc': 0.1372333, 'vehiclesObservedIou': 0.07262441, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 7.715871, 'vehiclesFlowWarpedOccupancyAuc': 0.2899222, 'vehiclesFlowWarpedOccupancyIou': 0.10370434}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.74138325, 'vehiclesObservedIou': 0.39859438, 'vehiclesOccludedAuc': 0.33758828, 'vehiclesOccludedIou': 0.083693966, 'vehiclesFlowEpe': 3.2837176, 'vehiclesFlowWarpedOccupancyAuc': 0.64704156, 'vehiclesFlowWarpedOccupancyIou': 0.4941913}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9538377, 'vehiclesObservedIou': 0.6801613, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 1.6153362, 'vehiclesFlowWarpedOccupancyAuc': 0.8698168, 'vehiclesFlowWarpedOccupancyIou': 0.77397186}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9511538, 'vehiclesObservedIou': 0.6312829, 'vehiclesOccludedAuc': 0.0076901433, 'vehiclesOccludedIou': 0.0031078027, 'vehiclesFlowEpe': 7.2673945, 'vehiclesFlowWarpedOccupancyAuc': 0.63368416, 'vehiclesFlowWarpedOccupancyIou': 0.62880176}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9238184, 'vehiclesObservedIou': 0.67449427, 'vehiclesOccludedAuc': 0.017108522, 'vehiclesOccludedIou': 0.00414474, 'vehiclesFlowEpe': 3.471458, 'vehiclesFlowWarpedOccupancyAuc': 0.7996737, 'vehiclesFlowWarpedOccupancyIou': 0.76409703}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.22712988, 'vehiclesObservedIou': 0.11517859, 'vehiclesOccludedAuc': 0.003624647, 'vehiclesOccludedIou': 0.0024719408, 'vehiclesFlowEpe': 7.4974804, 'vehiclesFlowWarpedOccupancyAuc': 0.30134422, 'vehiclesFlowWarpedOccupancyIou': 0.13541122}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.73614526, 'vehiclesObservedIou': 0.37186986, 'vehiclesOccludedAuc': 0.0043496923, 'vehiclesOccludedIou': 0.0017383113, 'vehiclesFlowEpe': 4.298562, 'vehiclesFlowWarpedOccupancyAuc': 0.5648568, 'vehiclesFlowWarpedOccupancyIou': 0.44587675}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5932949, 'vehiclesObservedIou': 0.34264982, 'vehiclesOccludedAuc': 0.34321576, 'vehiclesOccludedIou': 0.11596123, 'vehiclesFlowEpe': 6.6333804, 'vehiclesFlowWarpedOccupancyAuc': 0.4977772, 'vehiclesFlowWarpedOccupancyIou': 0.39473373}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9421764, 'vehiclesObservedIou': 0.742553, 'vehiclesOccludedAuc': 0.09035186, 'vehiclesOccludedIou': 0.034055408, 'vehiclesFlowEpe': 3.520042, 'vehiclesFlowWarpedOccupancyAuc': 0.8770779, 'vehiclesFlowWarpedOccupancyIou': 0.82126725}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.19974136, 'vehiclesObservedIou': 0.10500028, 'vehiclesOccludedAuc': 0.007584462, 'vehiclesOccludedIou': 0.002478337, 'vehiclesFlowEpe': 4.9788322, 'vehiclesFlowWarpedOccupancyAuc': 0.39930412, 'vehiclesFlowWarpedOccupancyIou': 0.10893826}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5484573, 'vehiclesObservedIou': 0.27401564, 'vehiclesOccludedAuc': 0.13340165, 'vehiclesOccludedIou': 0.044952612, 'vehiclesFlowEpe': 7.6375465, 'vehiclesFlowWarpedOccupancyAuc': 0.47267658, 'vehiclesFlowWarpedOccupancyIou': 0.34143323}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.66541964, 'vehiclesObservedIou': 0.256041, 'vehiclesOccludedAuc': 0.0016302548, 'vehiclesOccludedIou': 0.0012519062, 'vehiclesFlowEpe': 5.537978, 'vehiclesFlowWarpedOccupancyAuc': 0.4609289, 'vehiclesFlowWarpedOccupancyIou': 0.28612307}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.97431624, 'vehiclesObservedIou': 0.77555364, 'vehiclesOccludedAuc': 0.09673068, 'vehiclesOccludedIou': 0.03143797, 'vehiclesFlowEpe': 2.4319918, 'vehiclesFlowWarpedOccupancyAuc': 0.8627138, 'vehiclesFlowWarpedOccupancyIou': 0.8242698}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.116221, 'vehiclesObservedIou': 0.05399005, 'vehiclesOccludedAuc': 0.011856502, 'vehiclesOccludedIou': 0.0050103175, 'vehiclesFlowEpe': 9.422972, 'vehiclesFlowWarpedOccupancyAuc': 0.24863963, 'vehiclesFlowWarpedOccupancyIou': 0.05960025}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8870374, 'vehiclesObservedIou': 0.66052043, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 4.2303987, 'vehiclesFlowWarpedOccupancyAuc': 0.8465055, 'vehiclesFlowWarpedOccupancyIou': 0.79163456}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.36621138, 'vehiclesObservedIou': 0.17108202, 'vehiclesOccludedAuc': 0.058060758, 'vehiclesOccludedIou': 0.011078795, 'vehiclesFlowEpe': 5.770622, 'vehiclesFlowWarpedOccupancyAuc': 0.40524575, 'vehiclesFlowWarpedOccupancyIou': 0.19157222}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9913877, 'vehiclesObservedIou': 0.8709523, 'vehiclesOccludedAuc': 0.1085535, 'vehiclesOccludedIou': 0.013674478, 'vehiclesFlowEpe': 8.79043, 'vehiclesFlowWarpedOccupancyAuc': 0.79169625, 'vehiclesFlowWarpedOccupancyIou': 0.77372843}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.47741145, 'vehiclesObservedIou': 0.2644673, 'vehiclesOccludedAuc': 0.112257056, 'vehiclesOccludedIou': 0.024452798, 'vehiclesFlowEpe': 4.018773, 'vehiclesFlowWarpedOccupancyAuc': 0.52241987, 'vehiclesFlowWarpedOccupancyIou': 0.26320454}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.66754925, 'vehiclesObservedIou': 0.4481466, 'vehiclesOccludedAuc': 0.034863405, 'vehiclesOccludedIou': 0.01317142, 'vehiclesFlowEpe': 5.002127, 'vehiclesFlowWarpedOccupancyAuc': 0.6986669, 'vehiclesFlowWarpedOccupancyIou': 0.60743976}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8590692, 'vehiclesObservedIou': 0.68858, 'vehiclesOccludedAuc': 0.08017228, 'vehiclesOccludedIou': 0.018077815, 'vehiclesFlowEpe': 6.232472, 'vehiclesFlowWarpedOccupancyAuc': 0.7790631, 'vehiclesFlowWarpedOccupancyIou': 0.78199637}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.43079567, 'vehiclesObservedIou': 0.22812575, 'vehiclesOccludedAuc': 0.007083535, 'vehiclesOccludedIou': 0.0024171364, 'vehiclesFlowEpe': 5.9957695, 'vehiclesFlowWarpedOccupancyAuc': 0.41650954, 'vehiclesFlowWarpedOccupancyIou': 0.16057228}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.26327598, 'vehiclesObservedIou': 0.14064571, 'vehiclesOccludedAuc': 0.0037724744, 'vehiclesOccludedIou': 0.0021480145, 'vehiclesFlowEpe': 11.310337, 'vehiclesFlowWarpedOccupancyAuc': 0.23141949, 'vehiclesFlowWarpedOccupancyIou': 0.14850278}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.75979114, 'vehiclesObservedIou': 0.44226933, 'vehiclesOccludedAuc': 0.1749166, 'vehiclesOccludedIou': 0.02991683, 'vehiclesFlowEpe': 3.329516, 'vehiclesFlowWarpedOccupancyAuc': 0.67439425, 'vehiclesFlowWarpedOccupancyIou': 0.5105027}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.57127833, 'vehiclesObservedIou': 0.23816796, 'vehiclesOccludedAuc': 0.004980548, 'vehiclesOccludedIou': 0.0015034268, 'vehiclesFlowEpe': 3.8273396, 'vehiclesFlowWarpedOccupancyAuc': 0.51826733, 'vehiclesFlowWarpedOccupancyIou': 0.30488327}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.49671897, 'vehiclesObservedIou': 0.19863528, 'vehiclesOccludedAuc': 0.023449646, 'vehiclesOccludedIou': 0.0054074647, 'vehiclesFlowEpe': 4.604792, 'vehiclesFlowWarpedOccupancyAuc': 0.4685989, 'vehiclesFlowWarpedOccupancyIou': 0.2514702}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.41650587, 'vehiclesObservedIou': 0.27469105, 'vehiclesOccludedAuc': 0.05008397, 'vehiclesOccludedIou': 0.010093603, 'vehiclesFlowEpe': 5.752274, 'vehiclesFlowWarpedOccupancyAuc': 0.46958333, 'vehiclesFlowWarpedOccupancyIou': 0.2808534}
Time: 0.0015 seconds, Metrics: {'vehiclesObservedAuc': 0.6990488, 'vehiclesObservedIou': 0.4512369, 'vehiclesOccludedAuc': 0.16151375, 'vehiclesOccludedIou': 0.05036419, 'vehiclesFlowEpe': 2.434982, 'vehiclesFlowWarpedOccupancyAuc': 0.7726227, 'vehiclesFlowWarpedOccupancyIou': 0.5987765}
Time: 0.0015 seconds, Metrics: {'vehiclesObservedAuc': 0.44209197, 'vehiclesObservedIou': 0.18200462, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.1118422, 'vehiclesFlowWarpedOccupancyAuc': 0.53010386, 'vehiclesFlowWarpedOccupancyIou': 0.207923}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5861121, 'vehiclesObservedIou': 0.35702318, 'vehiclesOccludedAuc': 0.07188137, 'vehiclesOccludedIou': 0.022851244, 'vehiclesFlowEpe': 4.6583557, 'vehiclesFlowWarpedOccupancyAuc': 0.55884254, 'vehiclesFlowWarpedOccupancyIou': 0.35185996}
Time: 0.0015 seconds, Metrics: {'vehiclesObservedAuc': 0.67604196, 'vehiclesObservedIou': 0.28908768, 'vehiclesOccludedAuc': 0.014216483, 'vehiclesOccludedIou': 0.0029276088, 'vehiclesFlowEpe': 3.7353368, 'vehiclesFlowWarpedOccupancyAuc': 0.42308924, 'vehiclesFlowWarpedOccupancyIou': 0.3617602}
Time: 0.0015 seconds, Metrics: {'vehiclesObservedAuc': 0.9237215, 'vehiclesObservedIou': 0.664055, 'vehiclesOccludedAuc': 0.09487572, 'vehiclesOccludedIou': 0.024529628, 'vehiclesFlowEpe': 2.6173248, 'vehiclesFlowWarpedOccupancyAuc': 0.8254499, 'vehiclesFlowWarpedOccupancyIou': 0.71581435}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.65011805, 'vehiclesObservedIou': 0.32561275, 'vehiclesOccludedAuc': 0.046428286, 'vehiclesOccludedIou': 0.005141293, 'vehiclesFlowEpe': 2.3650467, 'vehiclesFlowWarpedOccupancyAuc': 0.68643135, 'vehiclesFlowWarpedOccupancyIou': 0.45036495}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.59566134, 'vehiclesObservedIou': 0.2679929, 'vehiclesOccludedAuc': 0.020067785, 'vehiclesOccludedIou': 0.005735376, 'vehiclesFlowEpe': 8.672373, 'vehiclesFlowWarpedOccupancyAuc': 0.48720458, 'vehiclesFlowWarpedOccupancyIou': 0.3559077}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.6428505, 'vehiclesObservedIou': 0.38233954, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 6.147617, 'vehiclesFlowWarpedOccupancyAuc': 0.494073, 'vehiclesFlowWarpedOccupancyIou': 0.4347283}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.2924856, 'vehiclesObservedIou': 0.13459074, 'vehiclesOccludedAuc': 0.03271995, 'vehiclesOccludedIou': 0.005570821, 'vehiclesFlowEpe': 3.5935552, 'vehiclesFlowWarpedOccupancyAuc': 0.52238005, 'vehiclesFlowWarpedOccupancyIou': 0.15131463}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.51232153, 'vehiclesObservedIou': 0.24391563, 'vehiclesOccludedAuc': 0.013354146, 'vehiclesOccludedIou': 0.0035289787, 'vehiclesFlowEpe': 5.63159, 'vehiclesFlowWarpedOccupancyAuc': 0.3574611, 'vehiclesFlowWarpedOccupancyIou': 0.2962502}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8132087, 'vehiclesObservedIou': 0.49051037, 'vehiclesOccludedAuc': 0.15179783, 'vehiclesOccludedIou': 0.027484717, 'vehiclesFlowEpe': 4.902717, 'vehiclesFlowWarpedOccupancyAuc': 0.6882998, 'vehiclesFlowWarpedOccupancyIou': 0.5654831}
2024-05-28 10:53:52.900875: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:53:52.953466: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:53:52.953774: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.9913877, 'vehiclesObservedIou': 0.8709523, 'vehiclesOccludedAuc': 0.1085535, 'vehiclesOccludedIou': 0.013674478, 'vehiclesFlowEpe': 8.79043, 'vehiclesFlowWarpedOccupancyAuc': 0.79169625, 'vehiclesFlowWarpedOccupancyIou': 0.77372843}
Average Time: 0.0012 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6246800569230769, 'vehiclesObservedIou': 0.3839667943589743, 'vehiclesOccludedAuc': 0.06586777886666668, 'vehiclesOccludedIou': 0.01750988698461538, 'vehiclesFlowEpe': 5.106511046153845, 'vehiclesFlowWarpedOccupancyAuc': 0.5765241135897435, 'vehiclesFlowWarpedOccupancyIou': 0.43517874153846153}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00119new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0014 seconds, Metrics: {'vehiclesObservedAuc': 0.9476603, 'vehiclesObservedIou': 0.87414616, 'vehiclesOccludedAuc': 0.0006914722, 'vehiclesOccludedIou': 0.00037160952, 'vehiclesFlowEpe': 6.507331, 'vehiclesFlowWarpedOccupancyAuc': 0.8114959, 'vehiclesFlowWarpedOccupancyIou': 0.8897333}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6317972, 'vehiclesObservedIou': 0.3514815, 'vehiclesOccludedAuc': 0.015247004, 'vehiclesOccludedIou': 0.008825435, 'vehiclesFlowEpe': 6.560235, 'vehiclesFlowWarpedOccupancyAuc': 0.54674953, 'vehiclesFlowWarpedOccupancyIou': 0.4055106}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.68772936, 'vehiclesObservedIou': 0.42804098, 'vehiclesOccludedAuc': 0.017903574, 'vehiclesOccludedIou': 0.0039914325, 'vehiclesFlowEpe': 3.7194283, 'vehiclesFlowWarpedOccupancyAuc': 0.6019517, 'vehiclesFlowWarpedOccupancyIou': 0.47673273}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.87048554, 'vehiclesObservedIou': 0.5531191, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 4.6563835, 'vehiclesFlowWarpedOccupancyAuc': 0.70885885, 'vehiclesFlowWarpedOccupancyIou': 0.6702261}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.79139894, 'vehiclesObservedIou': 0.477399, 'vehiclesOccludedAuc': 0.056550648, 'vehiclesOccludedIou': 0.020004857, 'vehiclesFlowEpe': 2.806535, 'vehiclesFlowWarpedOccupancyAuc': 0.6779511, 'vehiclesFlowWarpedOccupancyIou': 0.5267752}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.54824084, 'vehiclesObservedIou': 0.24324611, 'vehiclesOccludedAuc': 0.026352972, 'vehiclesOccludedIou': 0.0047521987, 'vehiclesFlowEpe': 3.3495073, 'vehiclesFlowWarpedOccupancyAuc': 0.5324301, 'vehiclesFlowWarpedOccupancyIou': 0.28584167}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5849432, 'vehiclesObservedIou': 0.30616072, 'vehiclesOccludedAuc': 0.23161118, 'vehiclesOccludedIou': 0.02671141, 'vehiclesFlowEpe': 6.9746523, 'vehiclesFlowWarpedOccupancyAuc': 0.45796025, 'vehiclesFlowWarpedOccupancyIou': 0.3965869}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.67957324, 'vehiclesObservedIou': 0.34645018, 'vehiclesOccludedAuc': 0.17600189, 'vehiclesOccludedIou': 0.02738945, 'vehiclesFlowEpe': 11.786578, 'vehiclesFlowWarpedOccupancyAuc': 0.5147691, 'vehiclesFlowWarpedOccupancyIou': 0.4263547}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.90764546, 'vehiclesObservedIou': 0.6344388, 'vehiclesOccludedAuc': 0.03684242, 'vehiclesOccludedIou': 0.012854641, 'vehiclesFlowEpe': 4.9018893, 'vehiclesFlowWarpedOccupancyAuc': 0.7331647, 'vehiclesFlowWarpedOccupancyIou': 0.65448034}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9589987, 'vehiclesObservedIou': 0.672789, 'vehiclesOccludedAuc': 0.0057714013, 'vehiclesOccludedIou': 0.0034041828, 'vehiclesFlowEpe': 2.876448, 'vehiclesFlowWarpedOccupancyAuc': 0.8271348, 'vehiclesFlowWarpedOccupancyIou': 0.7680762}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8156326, 'vehiclesObservedIou': 0.5081147, 'vehiclesOccludedAuc': 0.088453665, 'vehiclesOccludedIou': 0.019683538, 'vehiclesFlowEpe': 2.6125004, 'vehiclesFlowWarpedOccupancyAuc': 0.66002506, 'vehiclesFlowWarpedOccupancyIou': 0.5341339}
Time: 0.0015 seconds, Metrics: {'vehiclesObservedAuc': 0.94383144, 'vehiclesObservedIou': 0.7073947, 'vehiclesOccludedAuc': 0.07253078, 'vehiclesOccludedIou': 0.009161965, 'vehiclesFlowEpe': 3.648498, 'vehiclesFlowWarpedOccupancyAuc': 0.83822095, 'vehiclesFlowWarpedOccupancyIou': 0.78153527}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9005459, 'vehiclesObservedIou': 0.60251826, 'vehiclesOccludedAuc': 0.27919102, 'vehiclesOccludedIou': 0.056246083, 'vehiclesFlowEpe': 2.4005353, 'vehiclesFlowWarpedOccupancyAuc': 0.8237342, 'vehiclesFlowWarpedOccupancyIou': 0.74054885}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8255797, 'vehiclesObservedIou': 0.48322046, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 4.3707085, 'vehiclesFlowWarpedOccupancyAuc': 0.6629503, 'vehiclesFlowWarpedOccupancyIou': 0.5786015}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.82059467, 'vehiclesObservedIou': 0.5911642, 'vehiclesOccludedAuc': 0.20664415, 'vehiclesOccludedIou': 0.07478618, 'vehiclesFlowEpe': 2.9403384, 'vehiclesFlowWarpedOccupancyAuc': 0.8206869, 'vehiclesFlowWarpedOccupancyIou': 0.7008586}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.18570495, 'vehiclesObservedIou': 0.0945071, 'vehiclesOccludedAuc': 0.057086803, 'vehiclesOccludedIou': 0.019777635, 'vehiclesFlowEpe': 11.356262, 'vehiclesFlowWarpedOccupancyAuc': 0.17976254, 'vehiclesFlowWarpedOccupancyIou': 0.0737}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.70574665, 'vehiclesObservedIou': 0.34239253, 'vehiclesOccludedAuc': 0.00041517674, 'vehiclesOccludedIou': 0.00018818883, 'vehiclesFlowEpe': 2.9409256, 'vehiclesFlowWarpedOccupancyAuc': 0.618116, 'vehiclesFlowWarpedOccupancyIou': 0.5305875}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.867333, 'vehiclesObservedIou': 0.45669445, 'vehiclesOccludedAuc': 0.2444748, 'vehiclesOccludedIou': 0.013704669, 'vehiclesFlowEpe': 8.06847, 'vehiclesFlowWarpedOccupancyAuc': 0.60784173, 'vehiclesFlowWarpedOccupancyIou': 0.58666575}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.73700917, 'vehiclesObservedIou': 0.2992643, 'vehiclesOccludedAuc': 0.014474837, 'vehiclesOccludedIou': 0.0068796887, 'vehiclesFlowEpe': 7.1902695, 'vehiclesFlowWarpedOccupancyAuc': 0.5440824, 'vehiclesFlowWarpedOccupancyIou': 0.3453515}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.91898793, 'vehiclesObservedIou': 0.5944741, 'vehiclesOccludedAuc': 0.031528827, 'vehiclesOccludedIou': 0.012450955, 'vehiclesFlowEpe': 4.008622, 'vehiclesFlowWarpedOccupancyAuc': 0.76059043, 'vehiclesFlowWarpedOccupancyIou': 0.6600287}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5224, 'vehiclesObservedIou': 0.26330602, 'vehiclesOccludedAuc': 0.13340713, 'vehiclesOccludedIou': 0.020347917, 'vehiclesFlowEpe': 3.494349, 'vehiclesFlowWarpedOccupancyAuc': 0.5509408, 'vehiclesFlowWarpedOccupancyIou': 0.3486288}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.54923564, 'vehiclesObservedIou': 0.2744087, 'vehiclesOccludedAuc': 0.002353747, 'vehiclesOccludedIou': 0.0008547357, 'vehiclesFlowEpe': 3.407251, 'vehiclesFlowWarpedOccupancyAuc': 0.54620093, 'vehiclesFlowWarpedOccupancyIou': 0.24467565}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8971406, 'vehiclesObservedIou': 0.6109555, 'vehiclesOccludedAuc': 0.011944514, 'vehiclesOccludedIou': 0.004796625, 'vehiclesFlowEpe': 4.6079054, 'vehiclesFlowWarpedOccupancyAuc': 0.6774019, 'vehiclesFlowWarpedOccupancyIou': 0.5734052}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.83830386, 'vehiclesObservedIou': 0.64579165, 'vehiclesOccludedAuc': 0.10275216, 'vehiclesOccludedIou': 0.016714606, 'vehiclesFlowEpe': 4.6418414, 'vehiclesFlowWarpedOccupancyAuc': 0.6237276, 'vehiclesFlowWarpedOccupancyIou': 0.62701154}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8522663, 'vehiclesObservedIou': 0.5561292, 'vehiclesOccludedAuc': 0.04260616, 'vehiclesOccludedIou': 0.011445691, 'vehiclesFlowEpe': 2.9532602, 'vehiclesFlowWarpedOccupancyAuc': 0.76710397, 'vehiclesFlowWarpedOccupancyIou': 0.66640735}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.94335485, 'vehiclesObservedIou': 0.72460425, 'vehiclesOccludedAuc': 0.00084306725, 'vehiclesOccludedIou': 0.00080033916, 'vehiclesFlowEpe': 4.9191723, 'vehiclesFlowWarpedOccupancyAuc': 0.8107236, 'vehiclesFlowWarpedOccupancyIou': 0.81314903}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.80558413, 'vehiclesObservedIou': 0.4959188, 'vehiclesOccludedAuc': 0.020931544, 'vehiclesOccludedIou': 0.005968776, 'vehiclesFlowEpe': 5.481909, 'vehiclesFlowWarpedOccupancyAuc': 0.6511279, 'vehiclesFlowWarpedOccupancyIou': 0.5640716}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.85364413, 'vehiclesObservedIou': 0.60109234, 'vehiclesOccludedAuc': 0.19027723, 'vehiclesOccludedIou': 0.055503394, 'vehiclesFlowEpe': 4.36138, 'vehiclesFlowWarpedOccupancyAuc': 0.7843728, 'vehiclesFlowWarpedOccupancyIou': 0.6861981}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.814696, 'vehiclesObservedIou': 0.5049403, 'vehiclesOccludedAuc': 0.0032594842, 'vehiclesOccludedIou': 0.00060609286, 'vehiclesFlowEpe': 3.467299, 'vehiclesFlowWarpedOccupancyAuc': 0.6846873, 'vehiclesFlowWarpedOccupancyIou': 0.60707545}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.22419584, 'vehiclesObservedIou': 0.10580189, 'vehiclesOccludedAuc': 0.021537557, 'vehiclesOccludedIou': 0.0039199656, 'vehiclesFlowEpe': 6.7045107, 'vehiclesFlowWarpedOccupancyAuc': 0.32370424, 'vehiclesFlowWarpedOccupancyIou': 0.13107678}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.3529724, 'vehiclesObservedIou': 0.16835056, 'vehiclesOccludedAuc': 0.012325209, 'vehiclesOccludedIou': 0.0043148776, 'vehiclesFlowEpe': 3.9775412, 'vehiclesFlowWarpedOccupancyAuc': 0.47190395, 'vehiclesFlowWarpedOccupancyIou': 0.20220296}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.84817296, 'vehiclesObservedIou': 0.4546605, 'vehiclesOccludedAuc': 0.0013210168, 'vehiclesOccludedIou': 0.0015932055, 'vehiclesFlowEpe': 2.4002807, 'vehiclesFlowWarpedOccupancyAuc': 0.7316692, 'vehiclesFlowWarpedOccupancyIou': 0.5456226}
2024-05-28 10:54:15.231681: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:54:15.282363: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:54:15.282696: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9703719, 'vehiclesObservedIou': 0.7519617, 'vehiclesOccludedAuc': 0.11234656, 'vehiclesOccludedIou': 0.023116494, 'vehiclesFlowEpe': 2.3022254, 'vehiclesFlowWarpedOccupancyAuc': 0.87097067, 'vehiclesFlowWarpedOccupancyIou': 0.84611964}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9279639, 'vehiclesObservedIou': 0.73263043, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.8936152, 'vehiclesFlowWarpedOccupancyAuc': 0.82263225, 'vehiclesFlowWarpedOccupancyIou': 0.8136003}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8543403, 'vehiclesObservedIou': 0.5461048, 'vehiclesOccludedAuc': 0.15244928, 'vehiclesOccludedIou': 0.02685537, 'vehiclesFlowEpe': 4.674326, 'vehiclesFlowWarpedOccupancyAuc': 0.7485272, 'vehiclesFlowWarpedOccupancyIou': 0.64375925}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.9703719, 'vehiclesObservedIou': 0.7519617, 'vehiclesOccludedAuc': 0.11234656, 'vehiclesOccludedIou': 0.023116494, 'vehiclesFlowEpe': 2.3022254, 'vehiclesFlowWarpedOccupancyAuc': 0.87097067, 'vehiclesFlowWarpedOccupancyIou': 0.84611964}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.7595451885714286, 'vehiclesObservedIou': 0.4858192282857142, 'vehiclesOccludedAuc': 0.06771792227114287, 'vehiclesOccludedIou': 0.014229205956285714, 'vehiclesFlowEpe': 4.713228111428572, 'vehiclesFlowWarpedOccupancyAuc': 0.6569763100000001, 'vehiclesFlowWarpedOccupancyIou': 0.5527238160000001}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00047new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.64108115, 'vehiclesObservedIou': 0.36978742, 'vehiclesOccludedAuc': 0.0692593, 'vehiclesOccludedIou': 0.017143507, 'vehiclesFlowEpe': 4.3260145, 'vehiclesFlowWarpedOccupancyAuc': 0.594709, 'vehiclesFlowWarpedOccupancyIou': 0.42825556}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.7135902, 'vehiclesObservedIou': 0.5416501, 'vehiclesOccludedAuc': 0.0017116896, 'vehiclesOccludedIou': 0.0015470501, 'vehiclesFlowEpe': 6.9804015, 'vehiclesFlowWarpedOccupancyAuc': 0.56064576, 'vehiclesFlowWarpedOccupancyIou': 0.57191366}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.15959343, 'vehiclesObservedIou': 0.06300904, 'vehiclesOccludedAuc': 0.0014873326, 'vehiclesOccludedIou': 0.00073025806, 'vehiclesFlowEpe': 5.5330176, 'vehiclesFlowWarpedOccupancyAuc': 0.31873325, 'vehiclesFlowWarpedOccupancyIou': 0.07970774}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7276397, 'vehiclesObservedIou': 0.38277382, 'vehiclesOccludedAuc': 0.08173174, 'vehiclesOccludedIou': 0.027882896, 'vehiclesFlowEpe': 5.9110923, 'vehiclesFlowWarpedOccupancyAuc': 0.5274348, 'vehiclesFlowWarpedOccupancyIou': 0.387402}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.6719305, 'vehiclesObservedIou': 0.4033322, 'vehiclesOccludedAuc': 0.26490843, 'vehiclesOccludedIou': 0.07198957, 'vehiclesFlowEpe': 3.6138387, 'vehiclesFlowWarpedOccupancyAuc': 0.72405726, 'vehiclesFlowWarpedOccupancyIou': 0.54306513}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.40068424, 'vehiclesObservedIou': 0.2280476, 'vehiclesOccludedAuc': 0.19019538, 'vehiclesOccludedIou': 0.013164067, 'vehiclesFlowEpe': 4.035822, 'vehiclesFlowWarpedOccupancyAuc': 0.5472406, 'vehiclesFlowWarpedOccupancyIou': 0.26518184}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.87615323, 'vehiclesObservedIou': 0.5706074, 'vehiclesOccludedAuc': 0.002401982, 'vehiclesOccludedIou': 0.001198511, 'vehiclesFlowEpe': 7.543629, 'vehiclesFlowWarpedOccupancyAuc': 0.6951891, 'vehiclesFlowWarpedOccupancyIou': 0.6469656}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.2724516, 'vehiclesObservedIou': 0.11688945, 'vehiclesOccludedAuc': 0.030168641, 'vehiclesOccludedIou': 0.009237933, 'vehiclesFlowEpe': 3.912824, 'vehiclesFlowWarpedOccupancyAuc': 0.42411396, 'vehiclesFlowWarpedOccupancyIou': 0.13105531}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7694329, 'vehiclesObservedIou': 0.43898338, 'vehiclesOccludedAuc': 0.018986508, 'vehiclesOccludedIou': 0.0047635227, 'vehiclesFlowEpe': 4.545292, 'vehiclesFlowWarpedOccupancyAuc': 0.6046009, 'vehiclesFlowWarpedOccupancyIou': 0.50439024}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.5674122, 'vehiclesObservedIou': 0.28595158, 'vehiclesOccludedAuc': 0.3646138, 'vehiclesOccludedIou': 0.081121586, 'vehiclesFlowEpe': 6.2490115, 'vehiclesFlowWarpedOccupancyAuc': 0.599313, 'vehiclesFlowWarpedOccupancyIou': 0.36695206}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.70023036, 'vehiclesObservedIou': 0.43582904, 'vehiclesOccludedAuc': 0.006482609, 'vehiclesOccludedIou': 0.0032123094, 'vehiclesFlowEpe': 3.6036386, 'vehiclesFlowWarpedOccupancyAuc': 0.5345794, 'vehiclesFlowWarpedOccupancyIou': 0.4979447}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.6346621, 'vehiclesObservedIou': 0.30596596, 'vehiclesOccludedAuc': 0.0074607637, 'vehiclesOccludedIou': 0.004056432, 'vehiclesFlowEpe': 5.285068, 'vehiclesFlowWarpedOccupancyAuc': 0.44353145, 'vehiclesFlowWarpedOccupancyIou': 0.36297512}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.37770736, 'vehiclesObservedIou': 0.17471068, 'vehiclesOccludedAuc': 0.06250007, 'vehiclesOccludedIou': 0.018188002, 'vehiclesFlowEpe': 4.818825, 'vehiclesFlowWarpedOccupancyAuc': 0.39220378, 'vehiclesFlowWarpedOccupancyIou': 0.20505372}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.35255688, 'vehiclesObservedIou': 0.17603496, 'vehiclesOccludedAuc': 0.049167145, 'vehiclesOccludedIou': 0.010095916, 'vehiclesFlowEpe': 8.327791, 'vehiclesFlowWarpedOccupancyAuc': 0.2761321, 'vehiclesFlowWarpedOccupancyIou': 0.14790897}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.80775857, 'vehiclesObservedIou': 0.5376489, 'vehiclesOccludedAuc': 0.46052474, 'vehiclesOccludedIou': 0.06910901, 'vehiclesFlowEpe': 2.5193257, 'vehiclesFlowWarpedOccupancyAuc': 0.77895707, 'vehiclesFlowWarpedOccupancyIou': 0.63132024}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.4161102, 'vehiclesObservedIou': 0.17314014, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.8276725, 'vehiclesFlowWarpedOccupancyAuc': 0.28374642, 'vehiclesFlowWarpedOccupancyIou': 0.28057125}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7450639, 'vehiclesObservedIou': 0.40021515, 'vehiclesOccludedAuc': 0.30599743, 'vehiclesOccludedIou': 0.08208045, 'vehiclesFlowEpe': 1.7100571, 'vehiclesFlowWarpedOccupancyAuc': 0.66810703, 'vehiclesFlowWarpedOccupancyIou': 0.48492718}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8646056, 'vehiclesObservedIou': 0.4540138, 'vehiclesOccludedAuc': 0.026354065, 'vehiclesOccludedIou': 0.0060480875, 'vehiclesFlowEpe': 7.2189198, 'vehiclesFlowWarpedOccupancyAuc': 0.5474163, 'vehiclesFlowWarpedOccupancyIou': 0.4294987}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.20187978, 'vehiclesObservedIou': 0.08957066, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 5.67319, 'vehiclesFlowWarpedOccupancyAuc': 0.12543565, 'vehiclesFlowWarpedOccupancyIou': 0.07106023}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7395999, 'vehiclesObservedIou': 0.42059192, 'vehiclesOccludedAuc': 0.0011497464, 'vehiclesOccludedIou': 0.0019625826, 'vehiclesFlowEpe': 2.8182995, 'vehiclesFlowWarpedOccupancyAuc': 0.59671205, 'vehiclesFlowWarpedOccupancyIou': 0.4679292}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8894521, 'vehiclesObservedIou': 0.6867075, 'vehiclesOccludedAuc': 0.0027825516, 'vehiclesOccludedIou': 0.0007308403, 'vehiclesFlowEpe': 5.301053, 'vehiclesFlowWarpedOccupancyAuc': 0.75912607, 'vehiclesFlowWarpedOccupancyIou': 0.7030982}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.24161005, 'vehiclesObservedIou': 0.123762846, 'vehiclesOccludedAuc': 0.33905196, 'vehiclesOccludedIou': 0.032211754, 'vehiclesFlowEpe': 6.3591604, 'vehiclesFlowWarpedOccupancyAuc': 0.4026667, 'vehiclesFlowWarpedOccupancyIou': 0.23390375}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.8894521, 'vehiclesObservedIou': 0.6867075, 'vehiclesOccludedAuc': 0.0027825516, 'vehiclesOccludedIou': 0.0007308403, 'vehiclesFlowEpe': 5.301053, 'vehiclesFlowWarpedOccupancyAuc': 0.75912607, 'vehiclesFlowWarpedOccupancyIou': 0.7030982}
Average Time: 0.0012 seconds, Average Metrics: {'vehiclesObservedAuc': 0.5805093613636364, 'vehiclesObservedIou': 0.335419252090909, 'vehiclesOccludedAuc': 0.10395163108636364, 'vehiclesOccludedIou': 0.02074883112090909, 'vehiclesFlowEpe': 5.005179259090909, 'vehiclesFlowWarpedOccupancyAuc': 0.5183932568181818, 'vehiclesFlowWarpedOccupancyIou': 0.38368547272727266}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00109new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 10:54:30.005247: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:54:30.071217: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:54:30.071531: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.6486402, 'vehiclesObservedIou': 0.44182813, 'vehiclesOccludedAuc': 0.18114355, 'vehiclesOccludedIou': 0.04662095, 'vehiclesFlowEpe': 4.2939773, 'vehiclesFlowWarpedOccupancyAuc': 0.67223996, 'vehiclesFlowWarpedOccupancyIou': 0.5246809}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5548455, 'vehiclesObservedIou': 0.25180557, 'vehiclesOccludedAuc': 0.10040063, 'vehiclesOccludedIou': 0.024799634, 'vehiclesFlowEpe': 3.3837976, 'vehiclesFlowWarpedOccupancyAuc': 0.55212784, 'vehiclesFlowWarpedOccupancyIou': 0.29618314}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.92149997, 'vehiclesObservedIou': 0.657141, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 4.4085865, 'vehiclesFlowWarpedOccupancyAuc': 0.79142725, 'vehiclesFlowWarpedOccupancyIou': 0.7552447}
Time: 0.0014 seconds, Metrics: {'vehiclesObservedAuc': 0.92825884, 'vehiclesObservedIou': 0.79868335, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.3250842, 'vehiclesFlowWarpedOccupancyAuc': 0.86372286, 'vehiclesFlowWarpedOccupancyIou': 0.8910912}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.49389446, 'vehiclesObservedIou': 0.23567183, 'vehiclesOccludedAuc': 0.011282551, 'vehiclesOccludedIou': 0.004133606, 'vehiclesFlowEpe': 6.737641, 'vehiclesFlowWarpedOccupancyAuc': 0.4809106, 'vehiclesFlowWarpedOccupancyIou': 0.3098228}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9259464, 'vehiclesObservedIou': 0.79838413, 'vehiclesOccludedAuc': 0.07574438, 'vehiclesOccludedIou': 0.014368122, 'vehiclesFlowEpe': 3.1411097, 'vehiclesFlowWarpedOccupancyAuc': 0.82242465, 'vehiclesFlowWarpedOccupancyIou': 0.7917806}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.73918, 'vehiclesObservedIou': 0.45148516, 'vehiclesOccludedAuc': 0.02946665, 'vehiclesOccludedIou': 0.0072498675, 'vehiclesFlowEpe': 3.817247, 'vehiclesFlowWarpedOccupancyAuc': 0.67862964, 'vehiclesFlowWarpedOccupancyIou': 0.57575613}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.42234838, 'vehiclesObservedIou': 0.20252675, 'vehiclesOccludedAuc': 0.0021663024, 'vehiclesOccludedIou': 0.0019176505, 'vehiclesFlowEpe': 5.922303, 'vehiclesFlowWarpedOccupancyAuc': 0.47352442, 'vehiclesFlowWarpedOccupancyIou': 0.23584004}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8863541, 'vehiclesObservedIou': 0.56206787, 'vehiclesOccludedAuc': 0.24630721, 'vehiclesOccludedIou': 0.043551568, 'vehiclesFlowEpe': 2.9767804, 'vehiclesFlowWarpedOccupancyAuc': 0.7897848, 'vehiclesFlowWarpedOccupancyIou': 0.6376276}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.96942693, 'vehiclesObservedIou': 0.78188413, 'vehiclesOccludedAuc': 0.13954988, 'vehiclesOccludedIou': 0.026394702, 'vehiclesFlowEpe': 4.922702, 'vehiclesFlowWarpedOccupancyAuc': 0.8829438, 'vehiclesFlowWarpedOccupancyIou': 0.88412964}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5847365, 'vehiclesObservedIou': 0.2653344, 'vehiclesOccludedAuc': 0.0004015148, 'vehiclesOccludedIou': 0.00032392048, 'vehiclesFlowEpe': 2.7913904, 'vehiclesFlowWarpedOccupancyAuc': 0.6387642, 'vehiclesFlowWarpedOccupancyIou': 0.37821552}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.5711115, 'vehiclesObservedIou': 0.3150289, 'vehiclesOccludedAuc': 0.057121973, 'vehiclesOccludedIou': 0.018977666, 'vehiclesFlowEpe': 7.408534, 'vehiclesFlowWarpedOccupancyAuc': 0.47082943, 'vehiclesFlowWarpedOccupancyIou': 0.3594389}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8599242, 'vehiclesObservedIou': 0.5719762, 'vehiclesOccludedAuc': 0.037709158, 'vehiclesOccludedIou': 0.017396983, 'vehiclesFlowEpe': 4.480816, 'vehiclesFlowWarpedOccupancyAuc': 0.74659383, 'vehiclesFlowWarpedOccupancyIou': 0.6636749}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9100471, 'vehiclesObservedIou': 0.628092, 'vehiclesOccludedAuc': 0.11684541, 'vehiclesOccludedIou': 0.02221197, 'vehiclesFlowEpe': 4.581938, 'vehiclesFlowWarpedOccupancyAuc': 0.75547993, 'vehiclesFlowWarpedOccupancyIou': 0.67202}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.96584773, 'vehiclesObservedIou': 0.7687964, 'vehiclesOccludedAuc': 0.06815633, 'vehiclesOccludedIou': 0.01638578, 'vehiclesFlowEpe': 10.822741, 'vehiclesFlowWarpedOccupancyAuc': 0.8012029, 'vehiclesFlowWarpedOccupancyIou': 0.8346163}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6686425, 'vehiclesObservedIou': 0.41550314, 'vehiclesOccludedAuc': 0.020928727, 'vehiclesOccludedIou': 0.0034890654, 'vehiclesFlowEpe': 11.7939825, 'vehiclesFlowWarpedOccupancyAuc': 0.49317133, 'vehiclesFlowWarpedOccupancyIou': 0.48650578}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.14574236, 'vehiclesObservedIou': 0.06993844, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.0191684, 'vehiclesFlowWarpedOccupancyAuc': 0.3799937, 'vehiclesFlowWarpedOccupancyIou': 0.098653466}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.97119206, 'vehiclesObservedIou': 0.79206204, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.044906, 'vehiclesFlowWarpedOccupancyAuc': 0.87524843, 'vehiclesFlowWarpedOccupancyIou': 0.86471957}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.710764, 'vehiclesObservedIou': 0.35484987, 'vehiclesOccludedAuc': 0.1380644, 'vehiclesOccludedIou': 0.043520115, 'vehiclesFlowEpe': 3.483539, 'vehiclesFlowWarpedOccupancyAuc': 0.6396669, 'vehiclesFlowWarpedOccupancyIou': 0.42130843}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8578073, 'vehiclesObservedIou': 0.54857415, 'vehiclesOccludedAuc': 0.03046773, 'vehiclesOccludedIou': 0.009866905, 'vehiclesFlowEpe': 6.1057506, 'vehiclesFlowWarpedOccupancyAuc': 0.67321974, 'vehiclesFlowWarpedOccupancyIou': 0.6172885}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.90518034, 'vehiclesObservedIou': 0.69697356, 'vehiclesOccludedAuc': 0.22616322, 'vehiclesOccludedIou': 0.016865866, 'vehiclesFlowEpe': 3.4514685, 'vehiclesFlowWarpedOccupancyAuc': 0.77258545, 'vehiclesFlowWarpedOccupancyIou': 0.7433423}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.97119206, 'vehiclesObservedIou': 0.79206204, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.044906, 'vehiclesFlowWarpedOccupancyAuc': 0.87524843, 'vehiclesFlowWarpedOccupancyIou': 0.86471957}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.7448281128571428, 'vehiclesObservedIou': 0.5051717628571428, 'vehiclesOccludedAuc': 0.07056760077142857, 'vehiclesOccludedIou': 0.01514639861333333, 'vehiclesFlowEpe': 4.9006411, 'vehiclesFlowWarpedOccupancyAuc': 0.6787853171428571, 'vehiclesFlowWarpedOccupancyIou': 0.5734257340952381}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00098new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 10:54:43.582845: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:54:43.635593: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:54:43.635887: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.8077612, 'vehiclesObservedIou': 0.5047724, 'vehiclesOccludedAuc': 0.10773665, 'vehiclesOccludedIou': 0.037252616, 'vehiclesFlowEpe': 5.11933, 'vehiclesFlowWarpedOccupancyAuc': 0.6228439, 'vehiclesFlowWarpedOccupancyIou': 0.5653298}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.48445618, 'vehiclesObservedIou': 0.2305933, 'vehiclesOccludedAuc': 0.4192543, 'vehiclesOccludedIou': 0.04370915, 'vehiclesFlowEpe': 3.4387357, 'vehiclesFlowWarpedOccupancyAuc': 0.58388275, 'vehiclesFlowWarpedOccupancyIou': 0.35144147}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.19499809, 'vehiclesObservedIou': 0.07806031, 'vehiclesOccludedAuc': 0.036411628, 'vehiclesOccludedIou': 0.009900555, 'vehiclesFlowEpe': 7.152508, 'vehiclesFlowWarpedOccupancyAuc': 0.33096564, 'vehiclesFlowWarpedOccupancyIou': 0.08714138}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.87377644, 'vehiclesObservedIou': 0.6028435, 'vehiclesOccludedAuc': 0.09069542, 'vehiclesOccludedIou': 0.023785058, 'vehiclesFlowEpe': 2.9354427, 'vehiclesFlowWarpedOccupancyAuc': 0.77216023, 'vehiclesFlowWarpedOccupancyIou': 0.69711995}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6255864, 'vehiclesObservedIou': 0.36245805, 'vehiclesOccludedAuc': 0.0031813518, 'vehiclesOccludedIou': 0.0015185664, 'vehiclesFlowEpe': 6.7720113, 'vehiclesFlowWarpedOccupancyAuc': 0.5436377, 'vehiclesFlowWarpedOccupancyIou': 0.4054182}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.27299425, 'vehiclesObservedIou': 0.11006606, 'vehiclesOccludedAuc': 0.011380387, 'vehiclesOccludedIou': 0.004543296, 'vehiclesFlowEpe': 5.2911386, 'vehiclesFlowWarpedOccupancyAuc': 0.3736162, 'vehiclesFlowWarpedOccupancyIou': 0.0801862}
DataLossError encountered. Skipping the corrupted record.
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.87377644, 'vehiclesObservedIou': 0.6028435, 'vehiclesOccludedAuc': 0.09069542, 'vehiclesOccludedIou': 0.023785058, 'vehiclesFlowEpe': 2.9354427, 'vehiclesFlowWarpedOccupancyAuc': 0.77216023, 'vehiclesFlowWarpedOccupancyIou': 0.69711995}
Average Time: 0.0012 seconds, Average Metrics: {'vehiclesObservedAuc': 0.5432620933333333, 'vehiclesObservedIou': 0.3147989366666667, 'vehiclesOccludedAuc': 0.11144328946666666, 'vehiclesOccludedIou': 0.0201182069, 'vehiclesFlowEpe': 5.118194383333333, 'vehiclesFlowWarpedOccupancyAuc': 0.53785107, 'vehiclesFlowWarpedOccupancyIou': 0.3644395}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00018new.tfrecords...
2024-05-28 10:54:47.770676: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:54:47.822125: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:54:47.822412: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.6393841, 'vehiclesObservedIou': 0.31192973, 'vehiclesOccludedAuc': 0.0057431813, 'vehiclesOccludedIou': 0.0030065614, 'vehiclesFlowEpe': 3.6794064, 'vehiclesFlowWarpedOccupancyAuc': 0.5797032, 'vehiclesFlowWarpedOccupancyIou': 0.37003872}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.5679378, 'vehiclesObservedIou': 0.28073823, 'vehiclesOccludedAuc': 0.006772034, 'vehiclesOccludedIou': 0.0032364307, 'vehiclesFlowEpe': 6.2502785, 'vehiclesFlowWarpedOccupancyAuc': 0.45276815, 'vehiclesFlowWarpedOccupancyIou': 0.3106832}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8472054, 'vehiclesObservedIou': 0.4808066, 'vehiclesOccludedAuc': 0.036157485, 'vehiclesOccludedIou': 0.011684473, 'vehiclesFlowEpe': 2.9253964, 'vehiclesFlowWarpedOccupancyAuc': 0.69130266, 'vehiclesFlowWarpedOccupancyIou': 0.5267111}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8477585, 'vehiclesObservedIou': 0.6157217, 'vehiclesOccludedAuc': 0.11466041, 'vehiclesOccludedIou': 0.045395926, 'vehiclesFlowEpe': 3.5851226, 'vehiclesFlowWarpedOccupancyAuc': 0.742989, 'vehiclesFlowWarpedOccupancyIou': 0.6027968}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.26117727, 'vehiclesObservedIou': 0.12541334, 'vehiclesOccludedAuc': 0.08111967, 'vehiclesOccludedIou': 0.02106241, 'vehiclesFlowEpe': 3.433898, 'vehiclesFlowWarpedOccupancyAuc': 0.5255331, 'vehiclesFlowWarpedOccupancyIou': 0.16264875}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6486043, 'vehiclesObservedIou': 0.32924202, 'vehiclesOccludedAuc': 0.03731249, 'vehiclesOccludedIou': 0.014559306, 'vehiclesFlowEpe': 3.9910088, 'vehiclesFlowWarpedOccupancyAuc': 0.62940687, 'vehiclesFlowWarpedOccupancyIou': 0.40905303}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.782513, 'vehiclesObservedIou': 0.5246741, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 4.8162303, 'vehiclesFlowWarpedOccupancyAuc': 0.6534124, 'vehiclesFlowWarpedOccupancyIou': 0.61728656}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.3549731, 'vehiclesObservedIou': 0.14801995, 'vehiclesOccludedAuc': 0.017704887, 'vehiclesOccludedIou': 0.006167211, 'vehiclesFlowEpe': 2.7153316, 'vehiclesFlowWarpedOccupancyAuc': 0.43515572, 'vehiclesFlowWarpedOccupancyIou': 0.17776796}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.88480926, 'vehiclesObservedIou': 0.46513712, 'vehiclesOccludedAuc': 0.0623664, 'vehiclesOccludedIou': 0.018208481, 'vehiclesFlowEpe': 3.8124707, 'vehiclesFlowWarpedOccupancyAuc': 0.6395912, 'vehiclesFlowWarpedOccupancyIou': 0.49117658}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.65110534, 'vehiclesObservedIou': 0.36108246, 'vehiclesOccludedAuc': 0.1946737, 'vehiclesOccludedIou': 0.026150532, 'vehiclesFlowEpe': 8.342891, 'vehiclesFlowWarpedOccupancyAuc': 0.48147857, 'vehiclesFlowWarpedOccupancyIou': 0.44763413}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.24661075, 'vehiclesObservedIou': 0.09290834, 'vehiclesOccludedAuc': 0.0245725, 'vehiclesOccludedIou': 0.007531174, 'vehiclesFlowEpe': 9.308812, 'vehiclesFlowWarpedOccupancyAuc': 0.24450728, 'vehiclesFlowWarpedOccupancyIou': 0.08537451}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6755684, 'vehiclesObservedIou': 0.3606902, 'vehiclesOccludedAuc': 0.15007494, 'vehiclesOccludedIou': 0.046102725, 'vehiclesFlowEpe': 4.8577676, 'vehiclesFlowWarpedOccupancyAuc': 0.6196188, 'vehiclesFlowWarpedOccupancyIou': 0.49344617}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.68184566, 'vehiclesObservedIou': 0.4269111, 'vehiclesOccludedAuc': 0.07517007, 'vehiclesOccludedIou': 0.014820019, 'vehiclesFlowEpe': 7.044565, 'vehiclesFlowWarpedOccupancyAuc': 0.6277026, 'vehiclesFlowWarpedOccupancyIou': 0.5932319}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.897536, 'vehiclesObservedIou': 0.52765554, 'vehiclesOccludedAuc': 0.039881494, 'vehiclesOccludedIou': 0.010493696, 'vehiclesFlowEpe': 1.8028886, 'vehiclesFlowWarpedOccupancyAuc': 0.7390522, 'vehiclesFlowWarpedOccupancyIou': 0.6337071}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.894045, 'vehiclesObservedIou': 0.5776486, 'vehiclesOccludedAuc': 0.00083614985, 'vehiclesOccludedIou': 0.00080071227, 'vehiclesFlowEpe': 3.9722257, 'vehiclesFlowWarpedOccupancyAuc': 0.7431342, 'vehiclesFlowWarpedOccupancyIou': 0.6792092}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.43970904, 'vehiclesObservedIou': 0.25155747, 'vehiclesOccludedAuc': 0.030539805, 'vehiclesOccludedIou': 0.00418724, 'vehiclesFlowEpe': 14.646025, 'vehiclesFlowWarpedOccupancyAuc': 0.34061086, 'vehiclesFlowWarpedOccupancyIou': 0.30367595}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.89412403, 'vehiclesObservedIou': 0.6440707, 'vehiclesOccludedAuc': 0.08796181, 'vehiclesOccludedIou': 0.015251258, 'vehiclesFlowEpe': 3.552461, 'vehiclesFlowWarpedOccupancyAuc': 0.7581905, 'vehiclesFlowWarpedOccupancyIou': 0.67367}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.14566024, 'vehiclesObservedIou': 0.057502527, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.394268, 'vehiclesFlowWarpedOccupancyAuc': 0.24843642, 'vehiclesFlowWarpedOccupancyIou': 0.06092304}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.3225074, 'vehiclesObservedIou': 0.1353319, 'vehiclesOccludedAuc': 0.093337074, 'vehiclesOccludedIou': 0.01974475, 'vehiclesFlowEpe': 11.278423, 'vehiclesFlowWarpedOccupancyAuc': 0.23498413, 'vehiclesFlowWarpedOccupancyIou': 0.1260439}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5814252, 'vehiclesObservedIou': 0.2634769, 'vehiclesOccludedAuc': 0.06477867, 'vehiclesOccludedIou': 0.008817819, 'vehiclesFlowEpe': 6.0015106, 'vehiclesFlowWarpedOccupancyAuc': 0.46418583, 'vehiclesFlowWarpedOccupancyIou': 0.35458207}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.73350817, 'vehiclesObservedIou': 0.39422596, 'vehiclesOccludedAuc': 0.15504274, 'vehiclesOccludedIou': 0.02663911, 'vehiclesFlowEpe': 3.4833581, 'vehiclesFlowWarpedOccupancyAuc': 0.55686724, 'vehiclesFlowWarpedOccupancyIou': 0.39213407}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7908023, 'vehiclesObservedIou': 0.42100132, 'vehiclesOccludedAuc': 0.3193907, 'vehiclesOccludedIou': 0.09154835, 'vehiclesFlowEpe': 4.1119127, 'vehiclesFlowWarpedOccupancyAuc': 0.6179414, 'vehiclesFlowWarpedOccupancyIou': 0.4820723}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.94275504, 'vehiclesObservedIou': 0.7174815, 'vehiclesOccludedAuc': 0.018755678, 'vehiclesOccludedIou': 0.0042045494, 'vehiclesFlowEpe': 6.4025483, 'vehiclesFlowWarpedOccupancyAuc': 0.7222342, 'vehiclesFlowWarpedOccupancyIou': 0.6746013}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.86189914, 'vehiclesObservedIou': 0.57872355, 'vehiclesOccludedAuc': 0.19039446, 'vehiclesOccludedIou': 0.029696772, 'vehiclesFlowEpe': 3.7987351, 'vehiclesFlowWarpedOccupancyAuc': 0.7476549, 'vehiclesFlowWarpedOccupancyIou': 0.6026594}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.600937, 'vehiclesObservedIou': 0.3535328, 'vehiclesOccludedAuc': 0.015115645, 'vehiclesOccludedIou': 0.004208491, 'vehiclesFlowEpe': 8.214966, 'vehiclesFlowWarpedOccupancyAuc': 0.5401958, 'vehiclesFlowWarpedOccupancyIou': 0.34890047}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8774601, 'vehiclesObservedIou': 0.5810646, 'vehiclesOccludedAuc': 0.053107172, 'vehiclesOccludedIou': 0.014451015, 'vehiclesFlowEpe': 3.1039822, 'vehiclesFlowWarpedOccupancyAuc': 0.7311425, 'vehiclesFlowWarpedOccupancyIou': 0.5993978}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.62668806, 'vehiclesObservedIou': 0.4204601, 'vehiclesOccludedAuc': 0.07630496, 'vehiclesOccludedIou': 0.014682793, 'vehiclesFlowEpe': 3.4197977, 'vehiclesFlowWarpedOccupancyAuc': 0.61228883, 'vehiclesFlowWarpedOccupancyIou': 0.46159345}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6812447, 'vehiclesObservedIou': 0.3422732, 'vehiclesOccludedAuc': 0.020572975, 'vehiclesOccludedIou': 0.0037673018, 'vehiclesFlowEpe': 11.893608, 'vehiclesFlowWarpedOccupancyAuc': 0.43032157, 'vehiclesFlowWarpedOccupancyIou': 0.3335783}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.75533533, 'vehiclesObservedIou': 0.4005719, 'vehiclesOccludedAuc': 0.09960312, 'vehiclesOccludedIou': 0.021977773, 'vehiclesFlowEpe': 4.6406965, 'vehiclesFlowWarpedOccupancyAuc': 0.65184844, 'vehiclesFlowWarpedOccupancyIou': 0.43916276}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9743783, 'vehiclesObservedIou': 0.8074457, 'vehiclesOccludedAuc': 0.01058253, 'vehiclesOccludedIou': 0.00413562, 'vehiclesFlowEpe': 2.5895004, 'vehiclesFlowWarpedOccupancyAuc': 0.85858715, 'vehiclesFlowWarpedOccupancyIou': 0.8454491}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.98343426, 'vehiclesObservedIou': 0.7548891, 'vehiclesOccludedAuc': 0.055553474, 'vehiclesOccludedIou': 0.01949653, 'vehiclesFlowEpe': 2.2291641, 'vehiclesFlowWarpedOccupancyAuc': 0.8682724, 'vehiclesFlowWarpedOccupancyIou': 0.8005133}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6592334, 'vehiclesObservedIou': 0.3432945, 'vehiclesOccludedAuc': 0.2207806, 'vehiclesOccludedIou': 0.057861988, 'vehiclesFlowEpe': 6.0184617, 'vehiclesFlowWarpedOccupancyAuc': 0.6812981, 'vehiclesFlowWarpedOccupancyIou': 0.400712}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.5355329, 'vehiclesObservedIou': 0.2647553, 'vehiclesOccludedAuc': 0.017948877, 'vehiclesOccludedIou': 0.0042536883, 'vehiclesFlowEpe': 4.253035, 'vehiclesFlowWarpedOccupancyAuc': 0.5644938, 'vehiclesFlowWarpedOccupancyIou': 0.32026714}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.98343426, 'vehiclesObservedIou': 0.7548891, 'vehiclesOccludedAuc': 0.055553474, 'vehiclesOccludedIou': 0.01949653, 'vehiclesFlowEpe': 2.2291641, 'vehiclesFlowWarpedOccupancyAuc': 0.8682724, 'vehiclesFlowWarpedOccupancyIou': 0.8005133}
Average Time: 0.0012 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6753851057575757, 'vehiclesObservedIou': 0.4048556986969697, 'vehiclesOccludedAuc': 0.07202471821666666, 'vehiclesOccludedIou': 0.01739832442030303, 'vehiclesFlowEpe': 5.259719593939394, 'vehiclesFlowWarpedOccupancyAuc': 0.5889366672727273, 'vehiclesFlowWarpedOccupancyIou': 0.4491121836363636}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00059new.tfrecords...
2024-05-28 10:55:08.972452: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:55:09.030794: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:55:09.031323: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.91601604, 'vehiclesObservedIou': 0.5350481, 'vehiclesOccludedAuc': 0.004203024, 'vehiclesOccludedIou': 0.0021393292, 'vehiclesFlowEpe': 5.59221, 'vehiclesFlowWarpedOccupancyAuc': 0.7240143, 'vehiclesFlowWarpedOccupancyIou': 0.55979174}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.838668, 'vehiclesObservedIou': 0.57823056, 'vehiclesOccludedAuc': 0.029500822, 'vehiclesOccludedIou': 0.003883178, 'vehiclesFlowEpe': 4.754881, 'vehiclesFlowWarpedOccupancyAuc': 0.6941374, 'vehiclesFlowWarpedOccupancyIou': 0.64839953}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.955423, 'vehiclesObservedIou': 0.81130064, 'vehiclesOccludedAuc': 0.078921326, 'vehiclesOccludedIou': 0.020087764, 'vehiclesFlowEpe': 3.5364244, 'vehiclesFlowWarpedOccupancyAuc': 0.88291556, 'vehiclesFlowWarpedOccupancyIou': 0.86338216}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9816864, 'vehiclesObservedIou': 0.80769116, 'vehiclesOccludedAuc': 4.2168962e-05, 'vehiclesOccludedIou': 2.0930777e-06, 'vehiclesFlowEpe': 2.7483377, 'vehiclesFlowWarpedOccupancyAuc': 0.8655933, 'vehiclesFlowWarpedOccupancyIou': 0.88473964}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.12327421, 'vehiclesObservedIou': 0.04536833, 'vehiclesOccludedAuc': 0.0044610165, 'vehiclesOccludedIou': 0.0014656263, 'vehiclesFlowEpe': 4.753741, 'vehiclesFlowWarpedOccupancyAuc': 0.29934016, 'vehiclesFlowWarpedOccupancyIou': 0.053479783}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8878274, 'vehiclesObservedIou': 0.5250892, 'vehiclesOccludedAuc': 0.28015268, 'vehiclesOccludedIou': 0.056754313, 'vehiclesFlowEpe': 3.5294478, 'vehiclesFlowWarpedOccupancyAuc': 0.65626943, 'vehiclesFlowWarpedOccupancyIou': 0.5931138}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8254594, 'vehiclesObservedIou': 0.3922472, 'vehiclesOccludedAuc': 0.2982288, 'vehiclesOccludedIou': 0.028419511, 'vehiclesFlowEpe': 3.8469882, 'vehiclesFlowWarpedOccupancyAuc': 0.6046495, 'vehiclesFlowWarpedOccupancyIou': 0.5153309}
Time: 0.0014 seconds, Metrics: {'vehiclesObservedAuc': 0.23741657, 'vehiclesObservedIou': 0.11809563, 'vehiclesOccludedAuc': 0.0106724985, 'vehiclesOccludedIou': 0.003577699, 'vehiclesFlowEpe': 13.786764, 'vehiclesFlowWarpedOccupancyAuc': 0.1842071, 'vehiclesFlowWarpedOccupancyIou': 0.13256226}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9216194, 'vehiclesObservedIou': 0.6908663, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.4485385, 'vehiclesFlowWarpedOccupancyAuc': 0.83693814, 'vehiclesFlowWarpedOccupancyIou': 0.7766879}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9782495, 'vehiclesObservedIou': 0.84695184, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 4.6189766, 'vehiclesFlowWarpedOccupancyAuc': 0.880272, 'vehiclesFlowWarpedOccupancyIou': 0.90301305}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.47070292, 'vehiclesObservedIou': 0.23824601, 'vehiclesOccludedAuc': 0.00094282307, 'vehiclesOccludedIou': 0.00012473243, 'vehiclesFlowEpe': 8.355109, 'vehiclesFlowWarpedOccupancyAuc': 0.37686667, 'vehiclesFlowWarpedOccupancyIou': 0.3174989}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.37402973, 'vehiclesObservedIou': 0.18237476, 'vehiclesOccludedAuc': 0.0092073325, 'vehiclesOccludedIou': 0.0025231494, 'vehiclesFlowEpe': 8.803586, 'vehiclesFlowWarpedOccupancyAuc': 0.29522514, 'vehiclesFlowWarpedOccupancyIou': 0.23117815}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9396702, 'vehiclesObservedIou': 0.7897382, 'vehiclesOccludedAuc': 0.034574747, 'vehiclesOccludedIou': 0.009559389, 'vehiclesFlowEpe': 4.286684, 'vehiclesFlowWarpedOccupancyAuc': 0.84445596, 'vehiclesFlowWarpedOccupancyIou': 0.8345633}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8800276, 'vehiclesObservedIou': 0.45400313, 'vehiclesOccludedAuc': 0.062991664, 'vehiclesOccludedIou': 0.022573147, 'vehiclesFlowEpe': 4.758876, 'vehiclesFlowWarpedOccupancyAuc': 0.6530028, 'vehiclesFlowWarpedOccupancyIou': 0.5329258}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8235202, 'vehiclesObservedIou': 0.5680996, 'vehiclesOccludedAuc': 0.0005542062, 'vehiclesOccludedIou': 6.942727e-05, 'vehiclesFlowEpe': 5.403302, 'vehiclesFlowWarpedOccupancyAuc': 0.62677985, 'vehiclesFlowWarpedOccupancyIou': 0.62767446}
Time: 0.0014 seconds, Metrics: {'vehiclesObservedAuc': 0.5112471, 'vehiclesObservedIou': 0.28310066, 'vehiclesOccludedAuc': 0.0015222485, 'vehiclesOccludedIou': 0.00091692375, 'vehiclesFlowEpe': 8.371198, 'vehiclesFlowWarpedOccupancyAuc': 0.44546682, 'vehiclesFlowWarpedOccupancyIou': 0.24835241}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.17028546, 'vehiclesObservedIou': 0.073711425, 'vehiclesOccludedAuc': 0.01739298, 'vehiclesOccludedIou': 0.0028772496, 'vehiclesFlowEpe': 6.8842406, 'vehiclesFlowWarpedOccupancyAuc': 0.1991, 'vehiclesFlowWarpedOccupancyIou': 0.06376338}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8834784, 'vehiclesObservedIou': 0.58617514, 'vehiclesOccludedAuc': 0.038030326, 'vehiclesOccludedIou': 0.015966846, 'vehiclesFlowEpe': 2.2888749, 'vehiclesFlowWarpedOccupancyAuc': 0.8056873, 'vehiclesFlowWarpedOccupancyIou': 0.7023904}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8458003, 'vehiclesObservedIou': 0.5305288, 'vehiclesOccludedAuc': 0.02121391, 'vehiclesOccludedIou': 0.0049940855, 'vehiclesFlowEpe': 3.4153116, 'vehiclesFlowWarpedOccupancyAuc': 0.6835855, 'vehiclesFlowWarpedOccupancyIou': 0.6059278}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.93098086, 'vehiclesObservedIou': 0.65485656, 'vehiclesOccludedAuc': 0.004562131, 'vehiclesOccludedIou': 0.0021520136, 'vehiclesFlowEpe': 5.1999493, 'vehiclesFlowWarpedOccupancyAuc': 0.70748687, 'vehiclesFlowWarpedOccupancyIou': 0.7573587}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.6157759, 'vehiclesObservedIou': 0.38165894, 'vehiclesOccludedAuc': 0.20389193, 'vehiclesOccludedIou': 0.02295151, 'vehiclesFlowEpe': 6.423745, 'vehiclesFlowWarpedOccupancyAuc': 0.57430553, 'vehiclesFlowWarpedOccupancyIou': 0.54064476}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.98776174, 'vehiclesObservedIou': 0.69329387, 'vehiclesOccludedAuc': 0.0011576124, 'vehiclesOccludedIou': 0.00042385925, 'vehiclesFlowEpe': 7.4216204, 'vehiclesFlowWarpedOccupancyAuc': 0.7633995, 'vehiclesFlowWarpedOccupancyIou': 0.76147056}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.6935894, 'vehiclesObservedIou': 0.37645423, 'vehiclesOccludedAuc': 0.26505804, 'vehiclesOccludedIou': 0.07910596, 'vehiclesFlowEpe': 4.661792, 'vehiclesFlowWarpedOccupancyAuc': 0.58626366, 'vehiclesFlowWarpedOccupancyIou': 0.45030418}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8823135, 'vehiclesObservedIou': 0.6657172, 'vehiclesOccludedAuc': 0.00055704487, 'vehiclesOccludedIou': 0.00041843962, 'vehiclesFlowEpe': 12.01912, 'vehiclesFlowWarpedOccupancyAuc': 0.6739497, 'vehiclesFlowWarpedOccupancyIou': 0.7437258}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.70359117, 'vehiclesObservedIou': 0.38286498, 'vehiclesOccludedAuc': 0.1703969, 'vehiclesOccludedIou': 0.03301029, 'vehiclesFlowEpe': 4.326588, 'vehiclesFlowWarpedOccupancyAuc': 0.61569804, 'vehiclesFlowWarpedOccupancyIou': 0.47184658}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.57728994, 'vehiclesObservedIou': 0.2919342, 'vehiclesOccludedAuc': 0.019285742, 'vehiclesOccludedIou': 0.00868186, 'vehiclesFlowEpe': 7.8629932, 'vehiclesFlowWarpedOccupancyAuc': 0.4643864, 'vehiclesFlowWarpedOccupancyIou': 0.34519535}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7144128, 'vehiclesObservedIou': 0.40151158, 'vehiclesOccludedAuc': 0.005535338, 'vehiclesOccludedIou': 0.0033789803, 'vehiclesFlowEpe': 4.081827, 'vehiclesFlowWarpedOccupancyAuc': 0.6238132, 'vehiclesFlowWarpedOccupancyIou': 0.4797693}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.96190625, 'vehiclesObservedIou': 0.6088624, 'vehiclesOccludedAuc': 0.0053262804, 'vehiclesOccludedIou': 0.0020945657, 'vehiclesFlowEpe': 3.4590585, 'vehiclesFlowWarpedOccupancyAuc': 0.77378005, 'vehiclesFlowWarpedOccupancyIou': 0.7099004}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9279858, 'vehiclesObservedIou': 0.7251494, 'vehiclesOccludedAuc': 0.48509517, 'vehiclesOccludedIou': 0.10786607, 'vehiclesFlowEpe': 3.5523496, 'vehiclesFlowWarpedOccupancyAuc': 0.79091734, 'vehiclesFlowWarpedOccupancyIou': 0.6565021}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.3840369, 'vehiclesObservedIou': 0.14176099, 'vehiclesOccludedAuc': 0.00078871707, 'vehiclesOccludedIou': 0.0011033409, 'vehiclesFlowEpe': 3.4430692, 'vehiclesFlowWarpedOccupancyAuc': 0.27358004, 'vehiclesFlowWarpedOccupancyIou': 0.20525062}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6532911, 'vehiclesObservedIou': 0.31860918, 'vehiclesOccludedAuc': 0.14889887, 'vehiclesOccludedIou': 0.023487365, 'vehiclesFlowEpe': 5.4823084, 'vehiclesFlowWarpedOccupancyAuc': 0.52708, 'vehiclesFlowWarpedOccupancyIou': 0.45553347}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.98293966, 'vehiclesObservedIou': 0.7923499, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.1942804, 'vehiclesFlowWarpedOccupancyAuc': 0.86053854, 'vehiclesFlowWarpedOccupancyIou': 0.8728814}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.3384574, 'vehiclesObservedIou': 0.1379841, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.5241191, 'vehiclesFlowWarpedOccupancyAuc': 0.5476412, 'vehiclesFlowWarpedOccupancyIou': 0.18537663}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.98776174, 'vehiclesObservedIou': 0.69329387, 'vehiclesOccludedAuc': 0.0011576124, 'vehiclesOccludedIou': 0.00042385925, 'vehiclesFlowEpe': 7.4216204, 'vehiclesFlowWarpedOccupancyAuc': 0.7633995, 'vehiclesFlowWarpedOccupancyIou': 0.76147056}
Average Time: 0.0012 seconds, Average Metrics: {'vehiclesObservedAuc': 0.7248101287878789, 'vehiclesObservedIou': 0.473632551969697, 'vehiclesOccludedAuc': 0.06676261663551515, 'vehiclesOccludedIou': 0.01395783993629394, 'vehiclesFlowEpe': 5.388979133333334, 'vehiclesFlowWarpedOccupancyAuc': 0.6164044545454547, 'vehiclesFlowWarpedOccupancyIou': 0.537288945848485}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00003new.tfrecords...
2024-05-28 10:55:30.293246: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:55:30.345406: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:55:30.345688: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8103638, 'vehiclesObservedIou': 0.5699733, 'vehiclesOccludedAuc': 0.17293873, 'vehiclesOccludedIou': 0.0337556, 'vehiclesFlowEpe': 3.0408792, 'vehiclesFlowWarpedOccupancyAuc': 0.7641588, 'vehiclesFlowWarpedOccupancyIou': 0.67102927}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.50537443, 'vehiclesObservedIou': 0.30853274, 'vehiclesOccludedAuc': 0.0052371942, 'vehiclesOccludedIou': 0.0035576809, 'vehiclesFlowEpe': 3.6488843, 'vehiclesFlowWarpedOccupancyAuc': 0.5213953, 'vehiclesFlowWarpedOccupancyIou': 0.35855243}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7853067, 'vehiclesObservedIou': 0.5547916, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.7742112, 'vehiclesFlowWarpedOccupancyAuc': 0.8130833, 'vehiclesFlowWarpedOccupancyIou': 0.716644}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.72727317, 'vehiclesObservedIou': 0.42419776, 'vehiclesOccludedAuc': 0.33791816, 'vehiclesOccludedIou': 0.05364306, 'vehiclesFlowEpe': 3.1485262, 'vehiclesFlowWarpedOccupancyAuc': 0.6456461, 'vehiclesFlowWarpedOccupancyIou': 0.50078815}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.17333493, 'vehiclesObservedIou': 0.057658095, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.9942818, 'vehiclesFlowWarpedOccupancyAuc': 0.28216937, 'vehiclesFlowWarpedOccupancyIou': 0.08161655}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.60899115, 'vehiclesObservedIou': 0.28454012, 'vehiclesOccludedAuc': 0.20541516, 'vehiclesOccludedIou': 0.045238897, 'vehiclesFlowEpe': 2.2483814, 'vehiclesFlowWarpedOccupancyAuc': 0.6923519, 'vehiclesFlowWarpedOccupancyIou': 0.33130395}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8548229, 'vehiclesObservedIou': 0.49126717, 'vehiclesOccludedAuc': 0.81672144, 'vehiclesOccludedIou': 0.15861711, 'vehiclesFlowEpe': 3.0465667, 'vehiclesFlowWarpedOccupancyAuc': 0.7734861, 'vehiclesFlowWarpedOccupancyIou': 0.61907965}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9259686, 'vehiclesObservedIou': 0.7104162, 'vehiclesOccludedAuc': 0.14090234, 'vehiclesOccludedIou': 0.034828827, 'vehiclesFlowEpe': 3.8605056, 'vehiclesFlowWarpedOccupancyAuc': 0.8409389, 'vehiclesFlowWarpedOccupancyIou': 0.779819}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9458029, 'vehiclesObservedIou': 0.7294903, 'vehiclesOccludedAuc': 0.03503766, 'vehiclesOccludedIou': 0.01099239, 'vehiclesFlowEpe': 2.9949112, 'vehiclesFlowWarpedOccupancyAuc': 0.8444651, 'vehiclesFlowWarpedOccupancyIou': 0.8440407}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.3088106, 'vehiclesObservedIou': 0.14642154, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 5.5688534, 'vehiclesFlowWarpedOccupancyAuc': 0.3445145, 'vehiclesFlowWarpedOccupancyIou': 0.16809833}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6802343, 'vehiclesObservedIou': 0.36035675, 'vehiclesOccludedAuc': 0.054288395, 'vehiclesOccludedIou': 0.013110629, 'vehiclesFlowEpe': 8.963023, 'vehiclesFlowWarpedOccupancyAuc': 0.4693192, 'vehiclesFlowWarpedOccupancyIou': 0.37607172}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.23083566, 'vehiclesObservedIou': 0.104913376, 'vehiclesOccludedAuc': 0.0013577411, 'vehiclesOccludedIou': 0.0009344701, 'vehiclesFlowEpe': 7.6731515, 'vehiclesFlowWarpedOccupancyAuc': 0.25589392, 'vehiclesFlowWarpedOccupancyIou': 0.102948345}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.58892095, 'vehiclesObservedIou': 0.27973676, 'vehiclesOccludedAuc': 0.31430206, 'vehiclesOccludedIou': 0.03167012, 'vehiclesFlowEpe': 4.405804, 'vehiclesFlowWarpedOccupancyAuc': 0.5408018, 'vehiclesFlowWarpedOccupancyIou': 0.3181696}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8156118, 'vehiclesObservedIou': 0.5526234, 'vehiclesOccludedAuc': 0.051218998, 'vehiclesOccludedIou': 0.014213871, 'vehiclesFlowEpe': 5.432185, 'vehiclesFlowWarpedOccupancyAuc': 0.74486953, 'vehiclesFlowWarpedOccupancyIou': 0.5213805}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8615849, 'vehiclesObservedIou': 0.56070316, 'vehiclesOccludedAuc': 0.06677115, 'vehiclesOccludedIou': 0.023659788, 'vehiclesFlowEpe': 3.3623629, 'vehiclesFlowWarpedOccupancyAuc': 0.7662053, 'vehiclesFlowWarpedOccupancyIou': 0.663592}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.2856815, 'vehiclesObservedIou': 0.112260155, 'vehiclesOccludedAuc': 0.05562015, 'vehiclesOccludedIou': 0.015447751, 'vehiclesFlowEpe': 6.27588, 'vehiclesFlowWarpedOccupancyAuc': 0.36614275, 'vehiclesFlowWarpedOccupancyIou': 0.123798296}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.18074837, 'vehiclesObservedIou': 0.110025555, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 1.0393847, 'vehiclesFlowWarpedOccupancyAuc': 0.32895565, 'vehiclesFlowWarpedOccupancyIou': 0.16339873}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.3076571, 'vehiclesObservedIou': 0.13812907, 'vehiclesOccludedAuc': 0.014552097, 'vehiclesOccludedIou': 0.004401403, 'vehiclesFlowEpe': 9.128582, 'vehiclesFlowWarpedOccupancyAuc': 0.24838303, 'vehiclesFlowWarpedOccupancyIou': 0.14393413}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8835293, 'vehiclesObservedIou': 0.60959923, 'vehiclesOccludedAuc': 0.03329894, 'vehiclesOccludedIou': 0.00508914, 'vehiclesFlowEpe': 7.167189, 'vehiclesFlowWarpedOccupancyAuc': 0.53226423, 'vehiclesFlowWarpedOccupancyIou': 0.54772896}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.9458029, 'vehiclesObservedIou': 0.7294903, 'vehiclesOccludedAuc': 0.03503766, 'vehiclesOccludedIou': 0.01099239, 'vehiclesFlowEpe': 2.9949112, 'vehiclesFlowWarpedOccupancyAuc': 0.8444651, 'vehiclesFlowWarpedOccupancyIou': 0.8440407}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6042554242105262, 'vehiclesObservedIou': 0.3739808568947368, 'vehiclesOccludedAuc': 0.12134632712105263, 'vehiclesOccludedIou': 0.02364003878947369, 'vehiclesFlowEpe': 4.619661215789472, 'vehiclesFlowWarpedOccupancyAuc': 0.5671076199999999, 'vehiclesFlowWarpedOccupancyIou': 0.4227365426842105}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00136new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 10:55:42.515781: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:55:42.570977: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:55:42.571269: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.96201855, 'vehiclesObservedIou': 0.7341145, 'vehiclesOccludedAuc': 0.062110893, 'vehiclesOccludedIou': 0.024597812, 'vehiclesFlowEpe': 4.0978255, 'vehiclesFlowWarpedOccupancyAuc': 0.8024849, 'vehiclesFlowWarpedOccupancyIou': 0.76909316}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6769086, 'vehiclesObservedIou': 0.32459846, 'vehiclesOccludedAuc': 0.015008405, 'vehiclesOccludedIou': 0.0033063956, 'vehiclesFlowEpe': 2.579888, 'vehiclesFlowWarpedOccupancyAuc': 0.6928734, 'vehiclesFlowWarpedOccupancyIou': 0.4271363}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.97089875, 'vehiclesObservedIou': 0.72145826, 'vehiclesOccludedAuc': 0.14216414, 'vehiclesOccludedIou': 0.03153732, 'vehiclesFlowEpe': 2.4249694, 'vehiclesFlowWarpedOccupancyAuc': 0.85015655, 'vehiclesFlowWarpedOccupancyIou': 0.79905295}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.95269716, 'vehiclesObservedIou': 0.70817155, 'vehiclesOccludedAuc': 0.06290861, 'vehiclesOccludedIou': 0.030304689, 'vehiclesFlowEpe': 2.2805576, 'vehiclesFlowWarpedOccupancyAuc': 0.88606393, 'vehiclesFlowWarpedOccupancyIou': 0.8138854}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.64438283, 'vehiclesObservedIou': 0.23932973, 'vehiclesOccludedAuc': 0.007705963, 'vehiclesOccludedIou': 0.0016945244, 'vehiclesFlowEpe': 4.3736005, 'vehiclesFlowWarpedOccupancyAuc': 0.55726296, 'vehiclesFlowWarpedOccupancyIou': 0.33199757}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9074019, 'vehiclesObservedIou': 0.6002082, 'vehiclesOccludedAuc': 0.007856066, 'vehiclesOccludedIou': 0.0031534634, 'vehiclesFlowEpe': 7.632598, 'vehiclesFlowWarpedOccupancyAuc': 0.6873575, 'vehiclesFlowWarpedOccupancyIou': 0.6294533}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.8986753, 'vehiclesObservedIou': 0.6282673, 'vehiclesOccludedAuc': 0.03865419, 'vehiclesOccludedIou': 0.008058739, 'vehiclesFlowEpe': 5.248365, 'vehiclesFlowWarpedOccupancyAuc': 0.6820664, 'vehiclesFlowWarpedOccupancyIou': 0.6330285}
Time: 0.0014 seconds, Metrics: {'vehiclesObservedAuc': 0.8497147, 'vehiclesObservedIou': 0.5184072, 'vehiclesOccludedAuc': 0.058815766, 'vehiclesOccludedIou': 0.02030005, 'vehiclesFlowEpe': 2.5721095, 'vehiclesFlowWarpedOccupancyAuc': 0.7249543, 'vehiclesFlowWarpedOccupancyIou': 0.60023624}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.34750885, 'vehiclesObservedIou': 0.1747995, 'vehiclesOccludedAuc': 0.10428737, 'vehiclesOccludedIou': 0.02583908, 'vehiclesFlowEpe': 3.0632732, 'vehiclesFlowWarpedOccupancyAuc': 0.5159197, 'vehiclesFlowWarpedOccupancyIou': 0.21038038}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.5802585, 'vehiclesObservedIou': 0.28506613, 'vehiclesOccludedAuc': 0.061757565, 'vehiclesOccludedIou': 0.021331716, 'vehiclesFlowEpe': 6.513288, 'vehiclesFlowWarpedOccupancyAuc': 0.43245202, 'vehiclesFlowWarpedOccupancyIou': 0.29436094}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.42532712, 'vehiclesObservedIou': 0.1963418, 'vehiclesOccludedAuc': 0.17414625, 'vehiclesOccludedIou': 0.018767074, 'vehiclesFlowEpe': 5.2276254, 'vehiclesFlowWarpedOccupancyAuc': 0.44435936, 'vehiclesFlowWarpedOccupancyIou': 0.2522496}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7272488, 'vehiclesObservedIou': 0.3894955, 'vehiclesOccludedAuc': 0.28010815, 'vehiclesOccludedIou': 0.107744664, 'vehiclesFlowEpe': 3.2164788, 'vehiclesFlowWarpedOccupancyAuc': 0.6692096, 'vehiclesFlowWarpedOccupancyIou': 0.49705216}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7156258, 'vehiclesObservedIou': 0.39462578, 'vehiclesOccludedAuc': 0.052100398, 'vehiclesOccludedIou': 0.009569841, 'vehiclesFlowEpe': 3.5217092, 'vehiclesFlowWarpedOccupancyAuc': 0.6427925, 'vehiclesFlowWarpedOccupancyIou': 0.46851802}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.93490505, 'vehiclesObservedIou': 0.69443804, 'vehiclesOccludedAuc': 0.14694037, 'vehiclesOccludedIou': 0.019449504, 'vehiclesFlowEpe': 2.3458323, 'vehiclesFlowWarpedOccupancyAuc': 0.8579296, 'vehiclesFlowWarpedOccupancyIou': 0.7848253}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.76574904, 'vehiclesObservedIou': 0.4504587, 'vehiclesOccludedAuc': 0.12993416, 'vehiclesOccludedIou': 0.026755918, 'vehiclesFlowEpe': 6.650821, 'vehiclesFlowWarpedOccupancyAuc': 0.6524407, 'vehiclesFlowWarpedOccupancyIou': 0.52049243}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.90902734, 'vehiclesObservedIou': 0.6332781, 'vehiclesOccludedAuc': 0.035994835, 'vehiclesOccludedIou': 0.0064949244, 'vehiclesFlowEpe': 8.203393, 'vehiclesFlowWarpedOccupancyAuc': 0.68455005, 'vehiclesFlowWarpedOccupancyIou': 0.701885}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.98456657, 'vehiclesObservedIou': 0.820928, 'vehiclesOccludedAuc': 0.022842398, 'vehiclesOccludedIou': 0.007972751, 'vehiclesFlowEpe': 2.5806308, 'vehiclesFlowWarpedOccupancyAuc': 0.9061587, 'vehiclesFlowWarpedOccupancyIou': 0.874963}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.3776864, 'vehiclesObservedIou': 0.18039605, 'vehiclesOccludedAuc': 0.108201556, 'vehiclesOccludedIou': 0.0094190845, 'vehiclesFlowEpe': 6.279357, 'vehiclesFlowWarpedOccupancyAuc': 0.44098017, 'vehiclesFlowWarpedOccupancyIou': 0.19944975}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6869055, 'vehiclesObservedIou': 0.36719847, 'vehiclesOccludedAuc': 0.0012074503, 'vehiclesOccludedIou': 1.4496717e-05, 'vehiclesFlowEpe': 5.181358, 'vehiclesFlowWarpedOccupancyAuc': 0.5497028, 'vehiclesFlowWarpedOccupancyIou': 0.39402178}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9487736, 'vehiclesObservedIou': 0.69689584, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.1238458, 'vehiclesFlowWarpedOccupancyAuc': 0.8384316, 'vehiclesFlowWarpedOccupancyIou': 0.80640656}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.77071387, 'vehiclesObservedIou': 0.45526227, 'vehiclesOccludedAuc': 0.16186917, 'vehiclesOccludedIou': 0.022014236, 'vehiclesFlowEpe': 3.5748682, 'vehiclesFlowWarpedOccupancyAuc': 0.6024122, 'vehiclesFlowWarpedOccupancyIou': 0.4546313}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6023398, 'vehiclesObservedIou': 0.34000912, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.250533, 'vehiclesFlowWarpedOccupancyAuc': 0.6919666, 'vehiclesFlowWarpedOccupancyIou': 0.4201356}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.79810774, 'vehiclesObservedIou': 0.43306723, 'vehiclesOccludedAuc': 0.11692004, 'vehiclesOccludedIou': 0.04749445, 'vehiclesFlowEpe': 3.7109818, 'vehiclesFlowWarpedOccupancyAuc': 0.67850065, 'vehiclesFlowWarpedOccupancyIou': 0.5277441}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8243873, 'vehiclesObservedIou': 0.48353133, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.1923573, 'vehiclesFlowWarpedOccupancyAuc': 0.7736396, 'vehiclesFlowWarpedOccupancyIou': 0.6212555}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.61543876, 'vehiclesObservedIou': 0.33936837, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 5.2319627, 'vehiclesFlowWarpedOccupancyAuc': 0.49564257, 'vehiclesFlowWarpedOccupancyIou': 0.46438527}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6150079, 'vehiclesObservedIou': 0.34659123, 'vehiclesOccludedAuc': 0.14439565, 'vehiclesOccludedIou': 0.035933558, 'vehiclesFlowEpe': 9.9348955, 'vehiclesFlowWarpedOccupancyAuc': 0.48767275, 'vehiclesFlowWarpedOccupancyIou': 0.37558988}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.84699315, 'vehiclesObservedIou': 0.47362214, 'vehiclesOccludedAuc': 0.016774043, 'vehiclesOccludedIou': 0.0070944335, 'vehiclesFlowEpe': 2.5893843, 'vehiclesFlowWarpedOccupancyAuc': 0.72908956, 'vehiclesFlowWarpedOccupancyIou': 0.56578267}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.45426315, 'vehiclesObservedIou': 0.22128078, 'vehiclesOccludedAuc': 0.003954281, 'vehiclesOccludedIou': 0.0018787002, 'vehiclesFlowEpe': 8.104961, 'vehiclesFlowWarpedOccupancyAuc': 0.3253737, 'vehiclesFlowWarpedOccupancyIou': 0.24885842}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8525686, 'vehiclesObservedIou': 0.7010924, 'vehiclesOccludedAuc': 0.024073403, 'vehiclesOccludedIou': 0.00600572, 'vehiclesFlowEpe': 6.651999, 'vehiclesFlowWarpedOccupancyAuc': 0.7766834, 'vehiclesFlowWarpedOccupancyIou': 0.8048476}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.98456657, 'vehiclesObservedIou': 0.820928, 'vehiclesOccludedAuc': 0.022842398, 'vehiclesOccludedIou': 0.007972751, 'vehiclesFlowEpe': 2.5806308, 'vehiclesFlowWarpedOccupancyAuc': 0.9061587, 'vehiclesFlowWarpedOccupancyIou': 0.874963}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.7464172631034482, 'vehiclesObservedIou': 0.46732075793103456, 'vehiclesOccludedAuc': 0.06830107318275863, 'vehiclesOccludedIou': 0.017128729128172412, 'vehiclesFlowEpe': 4.495154096551724, 'vehiclesFlowWarpedOccupancyAuc': 0.6579009575862069, 'vehiclesFlowWarpedOccupancyIou': 0.5341971958620689}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00100new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 10:56:00.903608: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:56:00.954465: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:56:00.954746: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.6469473, 'vehiclesObservedIou': 0.41343823, 'vehiclesOccludedAuc': 0.048198074, 'vehiclesOccludedIou': 0.010403279, 'vehiclesFlowEpe': 5.3939586, 'vehiclesFlowWarpedOccupancyAuc': 0.51008713, 'vehiclesFlowWarpedOccupancyIou': 0.4110791}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.72573674, 'vehiclesObservedIou': 0.4243427, 'vehiclesOccludedAuc': 0.282471, 'vehiclesOccludedIou': 0.050965488, 'vehiclesFlowEpe': 4.811482, 'vehiclesFlowWarpedOccupancyAuc': 0.59369546, 'vehiclesFlowWarpedOccupancyIou': 0.49405652}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8932036, 'vehiclesObservedIou': 0.6147599, 'vehiclesOccludedAuc': 0.06388674, 'vehiclesOccludedIou': 0.015107988, 'vehiclesFlowEpe': 7.527627, 'vehiclesFlowWarpedOccupancyAuc': 0.681378, 'vehiclesFlowWarpedOccupancyIou': 0.63307697}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.47556275, 'vehiclesObservedIou': 0.24261, 'vehiclesOccludedAuc': 0.0053234496, 'vehiclesOccludedIou': 0.0030696592, 'vehiclesFlowEpe': 7.8727865, 'vehiclesFlowWarpedOccupancyAuc': 0.3503441, 'vehiclesFlowWarpedOccupancyIou': 0.22193222}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9777629, 'vehiclesObservedIou': 0.7616124, 'vehiclesOccludedAuc': 0.11353812, 'vehiclesOccludedIou': 0.039230227, 'vehiclesFlowEpe': 2.2213695, 'vehiclesFlowWarpedOccupancyAuc': 0.81903607, 'vehiclesFlowWarpedOccupancyIou': 0.7607678}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8374359, 'vehiclesObservedIou': 0.6086497, 'vehiclesOccludedAuc': 0.005720939, 'vehiclesOccludedIou': 0.0029176597, 'vehiclesFlowEpe': 6.4994054, 'vehiclesFlowWarpedOccupancyAuc': 0.6289097, 'vehiclesFlowWarpedOccupancyIou': 0.662256}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.6211097, 'vehiclesObservedIou': 0.32123834, 'vehiclesOccludedAuc': 0.4211321, 'vehiclesOccludedIou': 0.098721355, 'vehiclesFlowEpe': 6.157105, 'vehiclesFlowWarpedOccupancyAuc': 0.5299385, 'vehiclesFlowWarpedOccupancyIou': 0.41000792}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9699383, 'vehiclesObservedIou': 0.74978, 'vehiclesOccludedAuc': 0.018055331, 'vehiclesOccludedIou': 0.0062520383, 'vehiclesFlowEpe': 2.7147803, 'vehiclesFlowWarpedOccupancyAuc': 0.8557973, 'vehiclesFlowWarpedOccupancyIou': 0.84751314}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.39065057, 'vehiclesObservedIou': 0.2783731, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 1.096626, 'vehiclesFlowWarpedOccupancyAuc': 0.41226247, 'vehiclesFlowWarpedOccupancyIou': 0.31761456}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.15971023, 'vehiclesObservedIou': 0.05770619, 'vehiclesOccludedAuc': 0.00073944917, 'vehiclesOccludedIou': 0.00039881162, 'vehiclesFlowEpe': 5.790642, 'vehiclesFlowWarpedOccupancyAuc': 0.22526877, 'vehiclesFlowWarpedOccupancyIou': 0.05803117}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.71939147, 'vehiclesObservedIou': 0.3497338, 'vehiclesOccludedAuc': 0.12406041, 'vehiclesOccludedIou': 0.022545299, 'vehiclesFlowEpe': 2.79026, 'vehiclesFlowWarpedOccupancyAuc': 0.55510116, 'vehiclesFlowWarpedOccupancyIou': 0.28905392}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9584658, 'vehiclesObservedIou': 0.7709546, 'vehiclesOccludedAuc': 0.009200266, 'vehiclesOccludedIou': 0.004949676, 'vehiclesFlowEpe': 3.195658, 'vehiclesFlowWarpedOccupancyAuc': 0.8358166, 'vehiclesFlowWarpedOccupancyIou': 0.7889419}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9505134, 'vehiclesObservedIou': 0.782776, 'vehiclesOccludedAuc': 0.1092487, 'vehiclesOccludedIou': 0.022205109, 'vehiclesFlowEpe': 4.3910556, 'vehiclesFlowWarpedOccupancyAuc': 0.81808126, 'vehiclesFlowWarpedOccupancyIou': 0.7413649}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.1171644, 'vehiclesObservedIou': 0.05043608, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.7861657, 'vehiclesFlowWarpedOccupancyAuc': 0.361703, 'vehiclesFlowWarpedOccupancyIou': 0.07054842}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7119535, 'vehiclesObservedIou': 0.44786146, 'vehiclesOccludedAuc': 0.29160726, 'vehiclesOccludedIou': 0.05029796, 'vehiclesFlowEpe': 4.3264117, 'vehiclesFlowWarpedOccupancyAuc': 0.6714101, 'vehiclesFlowWarpedOccupancyIou': 0.5332052}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.79463243, 'vehiclesObservedIou': 0.50850296, 'vehiclesOccludedAuc': 0.0015203339, 'vehiclesOccludedIou': 0.0006825783, 'vehiclesFlowEpe': 2.1968098, 'vehiclesFlowWarpedOccupancyAuc': 0.7107937, 'vehiclesFlowWarpedOccupancyIou': 0.5908749}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.897829, 'vehiclesObservedIou': 0.6435151, 'vehiclesOccludedAuc': 0.1602829, 'vehiclesOccludedIou': 0.013913952, 'vehiclesFlowEpe': 6.3693295, 'vehiclesFlowWarpedOccupancyAuc': 0.72272944, 'vehiclesFlowWarpedOccupancyIou': 0.7261316}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.34072307, 'vehiclesObservedIou': 0.15394908, 'vehiclesOccludedAuc': 0.040111903, 'vehiclesOccludedIou': 0.010808248, 'vehiclesFlowEpe': 3.469387, 'vehiclesFlowWarpedOccupancyAuc': 0.50628006, 'vehiclesFlowWarpedOccupancyIou': 0.1931805}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.18645258, 'vehiclesObservedIou': 0.109967016, 'vehiclesOccludedAuc': 0.00018612761, 'vehiclesOccludedIou': 8.482272e-06, 'vehiclesFlowEpe': 1.9387231, 'vehiclesFlowWarpedOccupancyAuc': 0.19775854, 'vehiclesFlowWarpedOccupancyIou': 0.1382005}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.21735564, 'vehiclesObservedIou': 0.1071663, 'vehiclesOccludedAuc': 0.012858889, 'vehiclesOccludedIou': 0.0030537602, 'vehiclesFlowEpe': 4.788007, 'vehiclesFlowWarpedOccupancyAuc': 0.4131123, 'vehiclesFlowWarpedOccupancyIou': 0.15160301}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8604824, 'vehiclesObservedIou': 0.56973284, 'vehiclesOccludedAuc': 0.453685, 'vehiclesOccludedIou': 0.08555474, 'vehiclesFlowEpe': 3.275473, 'vehiclesFlowWarpedOccupancyAuc': 0.7757014, 'vehiclesFlowWarpedOccupancyIou': 0.65820515}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.41133782, 'vehiclesObservedIou': 0.16421726, 'vehiclesOccludedAuc': 0.041212566, 'vehiclesOccludedIou': 0.012225007, 'vehiclesFlowEpe': 5.202365, 'vehiclesFlowWarpedOccupancyAuc': 0.40432742, 'vehiclesFlowWarpedOccupancyIou': 0.1929353}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9273026, 'vehiclesObservedIou': 0.73854804, 'vehiclesOccludedAuc': 0.0028393148, 'vehiclesOccludedIou': 0.0012176398, 'vehiclesFlowEpe': 3.4349291, 'vehiclesFlowWarpedOccupancyAuc': 0.84627664, 'vehiclesFlowWarpedOccupancyIou': 0.80772936}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.74485654, 'vehiclesObservedIou': 0.41536683, 'vehiclesOccludedAuc': 0.42765075, 'vehiclesOccludedIou': 0.09208869, 'vehiclesFlowEpe': 3.4381256, 'vehiclesFlowWarpedOccupancyAuc': 0.6784179, 'vehiclesFlowWarpedOccupancyIou': 0.5111309}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.34636012, 'vehiclesObservedIou': 0.18239518, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 7.7012067, 'vehiclesFlowWarpedOccupancyAuc': 0.36798742, 'vehiclesFlowWarpedOccupancyIou': 0.22971039}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.11900067, 'vehiclesObservedIou': 0.041153748, 'vehiclesOccludedAuc': 0.02531122, 'vehiclesOccludedIou': 0.0052749533, 'vehiclesFlowEpe': 5.2790236, 'vehiclesFlowWarpedOccupancyAuc': 0.17404436, 'vehiclesFlowWarpedOccupancyIou': 0.030616594}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.49854264, 'vehiclesObservedIou': 0.27015704, 'vehiclesOccludedAuc': 0.1704721, 'vehiclesOccludedIou': 0.039056942, 'vehiclesFlowEpe': 4.6666923, 'vehiclesFlowWarpedOccupancyAuc': 0.48362422, 'vehiclesFlowWarpedOccupancyIou': 0.3404302}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6235327, 'vehiclesObservedIou': 0.38188696, 'vehiclesOccludedAuc': 0.11771569, 'vehiclesOccludedIou': 0.028633345, 'vehiclesFlowEpe': 2.5189347, 'vehiclesFlowWarpedOccupancyAuc': 0.7235603, 'vehiclesFlowWarpedOccupancyIou': 0.47673708}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.26323426, 'vehiclesObservedIou': 0.11512753, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 4.485655, 'vehiclesFlowWarpedOccupancyAuc': 0.3999804, 'vehiclesFlowWarpedOccupancyIou': 0.12361796}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.7631907, 'vehiclesObservedIou': 0.462001, 'vehiclesOccludedAuc': 0.16166018, 'vehiclesOccludedIou': 0.044775017, 'vehiclesFlowEpe': 2.8882163, 'vehiclesFlowWarpedOccupancyAuc': 0.6944191, 'vehiclesFlowWarpedOccupancyIou': 0.48931405}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.9777629, 'vehiclesObservedIou': 0.7616124, 'vehiclesOccludedAuc': 0.11353812, 'vehiclesOccludedIou': 0.039230227, 'vehiclesFlowEpe': 2.2213695, 'vehiclesFlowWarpedOccupancyAuc': 0.81903607, 'vehiclesFlowWarpedOccupancyIou': 0.7607678}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6050126576666666, 'vehiclesObservedIou': 0.3912653128, 'vehiclesOccludedAuc': 0.10362296043599999, 'vehiclesOccludedIou': 0.022145263489733336, 'vehiclesFlowEpe': 4.3076070333333325, 'vehiclesFlowWarpedOccupancyAuc': 0.5649280940000001, 'vehiclesFlowWarpedOccupancyIou': 0.42999557446666664}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00073new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 10:56:19.873666: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:56:19.925032: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:56:19.925312: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8128906, 'vehiclesObservedIou': 0.62866294, 'vehiclesOccludedAuc': 0.009045377, 'vehiclesOccludedIou': 0.0035037454, 'vehiclesFlowEpe': 6.147007, 'vehiclesFlowWarpedOccupancyAuc': 0.68848777, 'vehiclesFlowWarpedOccupancyIou': 0.61616546}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9341701, 'vehiclesObservedIou': 0.7761377, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 1.4703333, 'vehiclesFlowWarpedOccupancyAuc': 0.8964308, 'vehiclesFlowWarpedOccupancyIou': 0.87541634}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6769961, 'vehiclesObservedIou': 0.3370728, 'vehiclesOccludedAuc': 0.0020389466, 'vehiclesOccludedIou': 0.0020016131, 'vehiclesFlowEpe': 2.4789114, 'vehiclesFlowWarpedOccupancyAuc': 0.6659184, 'vehiclesFlowWarpedOccupancyIou': 0.41271663}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.773724, 'vehiclesObservedIou': 0.48086542, 'vehiclesOccludedAuc': 0.026562937, 'vehiclesOccludedIou': 0.0041386, 'vehiclesFlowEpe': 3.5236893, 'vehiclesFlowWarpedOccupancyAuc': 0.6973026, 'vehiclesFlowWarpedOccupancyIou': 0.56143254}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.46613026, 'vehiclesObservedIou': 0.2436923, 'vehiclesOccludedAuc': 0.006845083, 'vehiclesOccludedIou': 0.0027868585, 'vehiclesFlowEpe': 6.7058926, 'vehiclesFlowWarpedOccupancyAuc': 0.3948383, 'vehiclesFlowWarpedOccupancyIou': 0.3025381}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.60437477, 'vehiclesObservedIou': 0.33222213, 'vehiclesOccludedAuc': 0.09546593, 'vehiclesOccludedIou': 0.02419309, 'vehiclesFlowEpe': 2.8717208, 'vehiclesFlowWarpedOccupancyAuc': 0.5904931, 'vehiclesFlowWarpedOccupancyIou': 0.3518848}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9362784, 'vehiclesObservedIou': 0.6938576, 'vehiclesOccludedAuc': 0.0044888477, 'vehiclesOccludedIou': 0.002006194, 'vehiclesFlowEpe': 2.3489885, 'vehiclesFlowWarpedOccupancyAuc': 0.773647, 'vehiclesFlowWarpedOccupancyIou': 0.72682697}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.954373, 'vehiclesObservedIou': 0.6652654, 'vehiclesOccludedAuc': 0.01257101, 'vehiclesOccludedIou': 0.0048660925, 'vehiclesFlowEpe': 11.157958, 'vehiclesFlowWarpedOccupancyAuc': 0.7131803, 'vehiclesFlowWarpedOccupancyIou': 0.71748835}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.87481076, 'vehiclesObservedIou': 0.51400375, 'vehiclesOccludedAuc': 0.0044227066, 'vehiclesOccludedIou': 0.0025845359, 'vehiclesFlowEpe': 5.113691, 'vehiclesFlowWarpedOccupancyAuc': 0.62649614, 'vehiclesFlowWarpedOccupancyIou': 0.5457265}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.36872193, 'vehiclesObservedIou': 0.20003738, 'vehiclesOccludedAuc': 0.081151806, 'vehiclesOccludedIou': 0.023773253, 'vehiclesFlowEpe': 6.204066, 'vehiclesFlowWarpedOccupancyAuc': 0.3018458, 'vehiclesFlowWarpedOccupancyIou': 0.20802869}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8011244, 'vehiclesObservedIou': 0.5811484, 'vehiclesOccludedAuc': 0.12934956, 'vehiclesOccludedIou': 0.041384913, 'vehiclesFlowEpe': 6.507887, 'vehiclesFlowWarpedOccupancyAuc': 0.7442184, 'vehiclesFlowWarpedOccupancyIou': 0.67068416}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.48270887, 'vehiclesObservedIou': 0.28557518, 'vehiclesOccludedAuc': 0.17333294, 'vehiclesOccludedIou': 0.032223925, 'vehiclesFlowEpe': 3.2325826, 'vehiclesFlowWarpedOccupancyAuc': 0.52026856, 'vehiclesFlowWarpedOccupancyIou': 0.3587344}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9529032, 'vehiclesObservedIou': 0.80486596, 'vehiclesOccludedAuc': 0.038820162, 'vehiclesOccludedIou': 0.014413959, 'vehiclesFlowEpe': 2.066195, 'vehiclesFlowWarpedOccupancyAuc': 0.87227476, 'vehiclesFlowWarpedOccupancyIou': 0.9062579}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8565707, 'vehiclesObservedIou': 0.53565466, 'vehiclesOccludedAuc': 0.07268509, 'vehiclesOccludedIou': 0.019672865, 'vehiclesFlowEpe': 4.5867443, 'vehiclesFlowWarpedOccupancyAuc': 0.64485586, 'vehiclesFlowWarpedOccupancyIou': 0.5176205}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7609037, 'vehiclesObservedIou': 0.4163293, 'vehiclesOccludedAuc': 0.1038747, 'vehiclesOccludedIou': 0.029292962, 'vehiclesFlowEpe': 4.7298355, 'vehiclesFlowWarpedOccupancyAuc': 0.67428356, 'vehiclesFlowWarpedOccupancyIou': 0.48332742}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.88960534, 'vehiclesObservedIou': 0.60298246, 'vehiclesOccludedAuc': 0.03201688, 'vehiclesOccludedIou': 0.008375387, 'vehiclesFlowEpe': 3.7460008, 'vehiclesFlowWarpedOccupancyAuc': 0.730245, 'vehiclesFlowWarpedOccupancyIou': 0.6420431}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9239704, 'vehiclesObservedIou': 0.7706568, 'vehiclesOccludedAuc': 0.4494472, 'vehiclesOccludedIou': 0.105322905, 'vehiclesFlowEpe': 2.2258413, 'vehiclesFlowWarpedOccupancyAuc': 0.8467181, 'vehiclesFlowWarpedOccupancyIou': 0.8239849}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9858831, 'vehiclesObservedIou': 0.8370776, 'vehiclesOccludedAuc': 0.016300585, 'vehiclesOccludedIou': 0.0030900864, 'vehiclesFlowEpe': 2.8185225, 'vehiclesFlowWarpedOccupancyAuc': 0.8643223, 'vehiclesFlowWarpedOccupancyIou': 0.82544994}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.6497215, 'vehiclesObservedIou': 0.42933726, 'vehiclesOccludedAuc': 0.004513908, 'vehiclesOccludedIou': 0.0015436276, 'vehiclesFlowEpe': 7.668701, 'vehiclesFlowWarpedOccupancyAuc': 0.56470674, 'vehiclesFlowWarpedOccupancyIou': 0.47023356}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.49422997, 'vehiclesObservedIou': 0.19552603, 'vehiclesOccludedAuc': 0.06055714, 'vehiclesOccludedIou': 0.011065118, 'vehiclesFlowEpe': 5.4904356, 'vehiclesFlowWarpedOccupancyAuc': 0.38703582, 'vehiclesFlowWarpedOccupancyIou': 0.17723535}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.91658604, 'vehiclesObservedIou': 0.62463397, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.7585807, 'vehiclesFlowWarpedOccupancyAuc': 0.8471864, 'vehiclesFlowWarpedOccupancyIou': 0.7453509}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9685636, 'vehiclesObservedIou': 0.76500887, 'vehiclesOccludedAuc': 0.2622185, 'vehiclesOccludedIou': 0.041480944, 'vehiclesFlowEpe': 2.7060199, 'vehiclesFlowWarpedOccupancyAuc': 0.9069853, 'vehiclesFlowWarpedOccupancyIou': 0.85043794}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.30635476, 'vehiclesObservedIou': 0.19150113, 'vehiclesOccludedAuc': 0.021317055, 'vehiclesOccludedIou': 0.003345403, 'vehiclesFlowEpe': 2.755893, 'vehiclesFlowWarpedOccupancyAuc': 0.5127827, 'vehiclesFlowWarpedOccupancyIou': 0.2746515}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9705173, 'vehiclesObservedIou': 0.80274445, 'vehiclesOccludedAuc': 0.00950249, 'vehiclesOccludedIou': 0.002734858, 'vehiclesFlowEpe': 8.007775, 'vehiclesFlowWarpedOccupancyAuc': 0.85509527, 'vehiclesFlowWarpedOccupancyIou': 0.8519333}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7882127, 'vehiclesObservedIou': 0.41240343, 'vehiclesOccludedAuc': 0.07764908, 'vehiclesOccludedIou': 0.017964885, 'vehiclesFlowEpe': 3.9767528, 'vehiclesFlowWarpedOccupancyAuc': 0.65525246, 'vehiclesFlowWarpedOccupancyIou': 0.49569023}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.68129337, 'vehiclesObservedIou': 0.34295014, 'vehiclesOccludedAuc': 0.013894078, 'vehiclesOccludedIou': 0.0038258934, 'vehiclesFlowEpe': 7.3272085, 'vehiclesFlowWarpedOccupancyAuc': 0.44475165, 'vehiclesFlowWarpedOccupancyIou': 0.3959998}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.30587563, 'vehiclesObservedIou': 0.15656571, 'vehiclesOccludedAuc': 0.10539604, 'vehiclesOccludedIou': 0.020506505, 'vehiclesFlowEpe': 5.8916435, 'vehiclesFlowWarpedOccupancyAuc': 0.38755426, 'vehiclesFlowWarpedOccupancyIou': 0.18186334}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.60653156, 'vehiclesObservedIou': 0.29699415, 'vehiclesOccludedAuc': 0.07569959, 'vehiclesOccludedIou': 0.019983435, 'vehiclesFlowEpe': 3.2986453, 'vehiclesFlowWarpedOccupancyAuc': 0.60354173, 'vehiclesFlowWarpedOccupancyIou': 0.30312672}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.9858831, 'vehiclesObservedIou': 0.8370776, 'vehiclesOccludedAuc': 0.016300585, 'vehiclesOccludedIou': 0.0030900864, 'vehiclesFlowEpe': 2.8185225, 'vehiclesFlowWarpedOccupancyAuc': 0.8643223, 'vehiclesFlowWarpedOccupancyIou': 0.82544994}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.7408580735714284, 'vehiclesObservedIou': 0.4972776042857143, 'vehiclesOccludedAuc': 0.067470272925, 'vehiclesOccludedIou': 0.015931487635714284, 'vehiclesFlowEpe': 4.564911507142857, 'vehiclesFlowWarpedOccupancyAuc': 0.6575256814285716, 'vehiclesFlowWarpedOccupancyIou': 0.5461731907142857}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00131new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 10:56:37.814025: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:56:37.867271: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:56:37.867568: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.75138855, 'vehiclesObservedIou': 0.47365117, 'vehiclesOccludedAuc': 0.15147306, 'vehiclesOccludedIou': 0.035695918, 'vehiclesFlowEpe': 4.3128986, 'vehiclesFlowWarpedOccupancyAuc': 0.7098039, 'vehiclesFlowWarpedOccupancyIou': 0.6481169}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.92322195, 'vehiclesObservedIou': 0.8055914, 'vehiclesOccludedAuc': 0.027586322, 'vehiclesOccludedIou': 0.008656515, 'vehiclesFlowEpe': 3.2830787, 'vehiclesFlowWarpedOccupancyAuc': 0.8365929, 'vehiclesFlowWarpedOccupancyIou': 0.86967266}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.66482574, 'vehiclesObservedIou': 0.3305973, 'vehiclesOccludedAuc': 0.13555309, 'vehiclesOccludedIou': 0.029786667, 'vehiclesFlowEpe': 6.1360307, 'vehiclesFlowWarpedOccupancyAuc': 0.5496707, 'vehiclesFlowWarpedOccupancyIou': 0.45008886}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7250351, 'vehiclesObservedIou': 0.38804328, 'vehiclesOccludedAuc': 0.020481907, 'vehiclesOccludedIou': 0.003999497, 'vehiclesFlowEpe': 3.8394203, 'vehiclesFlowWarpedOccupancyAuc': 0.65206045, 'vehiclesFlowWarpedOccupancyIou': 0.48591277}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.60452133, 'vehiclesObservedIou': 0.2867496, 'vehiclesOccludedAuc': 0.12699369, 'vehiclesOccludedIou': 0.01684165, 'vehiclesFlowEpe': 3.4974155, 'vehiclesFlowWarpedOccupancyAuc': 0.54052013, 'vehiclesFlowWarpedOccupancyIou': 0.35248956}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5486867, 'vehiclesObservedIou': 0.2511903, 'vehiclesOccludedAuc': 0.03938502, 'vehiclesOccludedIou': 0.013163223, 'vehiclesFlowEpe': 5.158425, 'vehiclesFlowWarpedOccupancyAuc': 0.5786861, 'vehiclesFlowWarpedOccupancyIou': 0.34008926}
DataLossError encountered. Skipping the corrupted record.
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.92322195, 'vehiclesObservedIou': 0.8055914, 'vehiclesOccludedAuc': 0.027586322, 'vehiclesOccludedIou': 0.008656515, 'vehiclesFlowEpe': 3.2830787, 'vehiclesFlowWarpedOccupancyAuc': 0.8365929, 'vehiclesFlowWarpedOccupancyIou': 0.86967266}
Average Time: 0.0012 seconds, Average Metrics: {'vehiclesObservedAuc': 0.7029465616666667, 'vehiclesObservedIou': 0.42263717500000003, 'vehiclesOccludedAuc': 0.08357884816666666, 'vehiclesOccludedIou': 0.018023911666666666, 'vehiclesFlowEpe': 4.371211466666667, 'vehiclesFlowWarpedOccupancyAuc': 0.6445556966666667, 'vehiclesFlowWarpedOccupancyIou': 0.5243950016666666}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00020new.tfrecords...
2024-05-28 10:56:43.126496: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:56:43.191878: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:56:43.192199: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0016 seconds, Metrics: {'vehiclesObservedAuc': 0.8503084, 'vehiclesObservedIou': 0.52325404, 'vehiclesOccludedAuc': 0.057531573, 'vehiclesOccludedIou': 0.018744135, 'vehiclesFlowEpe': 4.164523, 'vehiclesFlowWarpedOccupancyAuc': 0.72500694, 'vehiclesFlowWarpedOccupancyIou': 0.6095791}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.5635215, 'vehiclesObservedIou': 0.2942551, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.6159964, 'vehiclesFlowWarpedOccupancyAuc': 0.6087819, 'vehiclesFlowWarpedOccupancyIou': 0.36514637}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8430508, 'vehiclesObservedIou': 0.68173, 'vehiclesOccludedAuc': 0.08124591, 'vehiclesOccludedIou': 0.021158455, 'vehiclesFlowEpe': 3.8266401, 'vehiclesFlowWarpedOccupancyAuc': 0.81946325, 'vehiclesFlowWarpedOccupancyIou': 0.76868886}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9653143, 'vehiclesObservedIou': 0.7105178, 'vehiclesOccludedAuc': 0.00262687, 'vehiclesOccludedIou': 0.0003572233, 'vehiclesFlowEpe': 3.2996988, 'vehiclesFlowWarpedOccupancyAuc': 0.813727, 'vehiclesFlowWarpedOccupancyIou': 0.7262338}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9113437, 'vehiclesObservedIou': 0.6275338, 'vehiclesOccludedAuc': 0.045285657, 'vehiclesOccludedIou': 0.00821705, 'vehiclesFlowEpe': 1.6283873, 'vehiclesFlowWarpedOccupancyAuc': 0.8375073, 'vehiclesFlowWarpedOccupancyIou': 0.7411147}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.3024477, 'vehiclesObservedIou': 0.17187022, 'vehiclesOccludedAuc': 0.13961531, 'vehiclesOccludedIou': 0.023909148, 'vehiclesFlowEpe': 4.555615, 'vehiclesFlowWarpedOccupancyAuc': 0.39126113, 'vehiclesFlowWarpedOccupancyIou': 0.15552886}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7741543, 'vehiclesObservedIou': 0.3656097, 'vehiclesOccludedAuc': 0.0055055683, 'vehiclesOccludedIou': 0.0018216888, 'vehiclesFlowEpe': 11.071659, 'vehiclesFlowWarpedOccupancyAuc': 0.49855947, 'vehiclesFlowWarpedOccupancyIou': 0.4185605}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.24885742, 'vehiclesObservedIou': 0.110927396, 'vehiclesOccludedAuc': 0.0015066264, 'vehiclesOccludedIou': 0.00040084778, 'vehiclesFlowEpe': 7.624458, 'vehiclesFlowWarpedOccupancyAuc': 0.2752527, 'vehiclesFlowWarpedOccupancyIou': 0.107135534}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.5812161, 'vehiclesObservedIou': 0.29656294, 'vehiclesOccludedAuc': 0.0448637, 'vehiclesOccludedIou': 0.009576294, 'vehiclesFlowEpe': 3.1795254, 'vehiclesFlowWarpedOccupancyAuc': 0.59673274, 'vehiclesFlowWarpedOccupancyIou': 0.3567467}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.55326474, 'vehiclesObservedIou': 0.21424018, 'vehiclesOccludedAuc': 0.18078545, 'vehiclesOccludedIou': 0.01877222, 'vehiclesFlowEpe': 5.366612, 'vehiclesFlowWarpedOccupancyAuc': 0.4122326, 'vehiclesFlowWarpedOccupancyIou': 0.22909598}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.17298618, 'vehiclesObservedIou': 0.10455488, 'vehiclesOccludedAuc': 0.0016173911, 'vehiclesOccludedIou': 4.6924903e-05, 'vehiclesFlowEpe': 2.7885616, 'vehiclesFlowWarpedOccupancyAuc': 0.32984477, 'vehiclesFlowWarpedOccupancyIou': 0.114769}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.59431696, 'vehiclesObservedIou': 0.27965197, 'vehiclesOccludedAuc': 0.00055624195, 'vehiclesOccludedIou': 0.0003526126, 'vehiclesFlowEpe': 3.221959, 'vehiclesFlowWarpedOccupancyAuc': 0.60741603, 'vehiclesFlowWarpedOccupancyIou': 0.36657685}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.94223815, 'vehiclesObservedIou': 0.7186682, 'vehiclesOccludedAuc': 0.27466443, 'vehiclesOccludedIou': 0.04446242, 'vehiclesFlowEpe': 3.709648, 'vehiclesFlowWarpedOccupancyAuc': 0.87326384, 'vehiclesFlowWarpedOccupancyIou': 0.8142102}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.85078615, 'vehiclesObservedIou': 0.5063532, 'vehiclesOccludedAuc': 0.0016972056, 'vehiclesOccludedIou': 0.000799688, 'vehiclesFlowEpe': 3.0900764, 'vehiclesFlowWarpedOccupancyAuc': 0.730036, 'vehiclesFlowWarpedOccupancyIou': 0.57892925}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.33995703, 'vehiclesObservedIou': 0.20608862, 'vehiclesOccludedAuc': 0.042645864, 'vehiclesOccludedIou': 0.007906728, 'vehiclesFlowEpe': 5.223887, 'vehiclesFlowWarpedOccupancyAuc': 0.45321614, 'vehiclesFlowWarpedOccupancyIou': 0.122330494}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.74802375, 'vehiclesObservedIou': 0.41821367, 'vehiclesOccludedAuc': 0.35432926, 'vehiclesOccludedIou': 0.07961343, 'vehiclesFlowEpe': 4.501374, 'vehiclesFlowWarpedOccupancyAuc': 0.6632918, 'vehiclesFlowWarpedOccupancyIou': 0.5062827}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.3237319, 'vehiclesObservedIou': 0.18813205, 'vehiclesOccludedAuc': 0.0032042726, 'vehiclesOccludedIou': 0.0015654132, 'vehiclesFlowEpe': 4.8155346, 'vehiclesFlowWarpedOccupancyAuc': 0.3841629, 'vehiclesFlowWarpedOccupancyIou': 0.21271586}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8829944, 'vehiclesObservedIou': 0.6196884, 'vehiclesOccludedAuc': 0.025936924, 'vehiclesOccludedIou': 0.004960878, 'vehiclesFlowEpe': 12.400646, 'vehiclesFlowWarpedOccupancyAuc': 0.6998632, 'vehiclesFlowWarpedOccupancyIou': 0.714478}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7254673, 'vehiclesObservedIou': 0.43530756, 'vehiclesOccludedAuc': 0.060617108, 'vehiclesOccludedIou': 0.01912594, 'vehiclesFlowEpe': 8.470278, 'vehiclesFlowWarpedOccupancyAuc': 0.5617534, 'vehiclesFlowWarpedOccupancyIou': 0.52285975}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.28213137, 'vehiclesObservedIou': 0.12487655, 'vehiclesOccludedAuc': 0.040797215, 'vehiclesOccludedIou': 0.007224175, 'vehiclesFlowEpe': 6.306983, 'vehiclesFlowWarpedOccupancyAuc': 0.38953787, 'vehiclesFlowWarpedOccupancyIou': 0.14432071}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.68943363, 'vehiclesObservedIou': 0.32843587, 'vehiclesOccludedAuc': 0.0022979304, 'vehiclesOccludedIou': 0.00077681814, 'vehiclesFlowEpe': 3.8430052, 'vehiclesFlowWarpedOccupancyAuc': 0.5705864, 'vehiclesFlowWarpedOccupancyIou': 0.38190758}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7724202, 'vehiclesObservedIou': 0.5434133, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 9.119794, 'vehiclesFlowWarpedOccupancyAuc': 0.750565, 'vehiclesFlowWarpedOccupancyIou': 0.6855838}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7226389, 'vehiclesObservedIou': 0.42369288, 'vehiclesOccludedAuc': 0.018634113, 'vehiclesOccludedIou': 0.0043749837, 'vehiclesFlowEpe': 3.454257, 'vehiclesFlowWarpedOccupancyAuc': 0.6402437, 'vehiclesFlowWarpedOccupancyIou': 0.47834736}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.53452647, 'vehiclesObservedIou': 0.32319155, 'vehiclesOccludedAuc': 0.20762779, 'vehiclesOccludedIou': 0.038359284, 'vehiclesFlowEpe': 5.2829237, 'vehiclesFlowWarpedOccupancyAuc': 0.6241361, 'vehiclesFlowWarpedOccupancyIou': 0.36175382}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.91191405, 'vehiclesObservedIou': 0.55136937, 'vehiclesOccludedAuc': 0.03248713, 'vehiclesOccludedIou': 0.017652169, 'vehiclesFlowEpe': 7.1318316, 'vehiclesFlowWarpedOccupancyAuc': 0.74757165, 'vehiclesFlowWarpedOccupancyIou': 0.60824746}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.72662747, 'vehiclesObservedIou': 0.38734537, 'vehiclesOccludedAuc': 0.065628015, 'vehiclesOccludedIou': 0.011388296, 'vehiclesFlowEpe': 5.2494464, 'vehiclesFlowWarpedOccupancyAuc': 0.5427545, 'vehiclesFlowWarpedOccupancyIou': 0.44545043}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9343611, 'vehiclesObservedIou': 0.7200065, 'vehiclesOccludedAuc': 0.012269202, 'vehiclesOccludedIou': 0.004315526, 'vehiclesFlowEpe': 2.8045716, 'vehiclesFlowWarpedOccupancyAuc': 0.85029113, 'vehiclesFlowWarpedOccupancyIou': 0.77232826}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.51660186, 'vehiclesObservedIou': 0.23311527, 'vehiclesOccludedAuc': 0.00035260414, 'vehiclesOccludedIou': 0.00062454375, 'vehiclesFlowEpe': 3.1994462, 'vehiclesFlowWarpedOccupancyAuc': 0.48157912, 'vehiclesFlowWarpedOccupancyIou': 0.2908156}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.16570066, 'vehiclesObservedIou': 0.0752349, 'vehiclesOccludedAuc': 0.048738394, 'vehiclesOccludedIou': 0.014473306, 'vehiclesFlowEpe': 7.1106586, 'vehiclesFlowWarpedOccupancyAuc': 0.2672347, 'vehiclesFlowWarpedOccupancyIou': 0.07866676}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9620556, 'vehiclesObservedIou': 0.6798161, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 1.6322854, 'vehiclesFlowWarpedOccupancyAuc': 0.83339196, 'vehiclesFlowWarpedOccupancyIou': 0.79309183}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.24749993, 'vehiclesObservedIou': 0.13028072, 'vehiclesOccludedAuc': 0.024654325, 'vehiclesOccludedIou': 0.0048670783, 'vehiclesFlowEpe': 5.0858765, 'vehiclesFlowWarpedOccupancyAuc': 0.34901837, 'vehiclesFlowWarpedOccupancyIou': 0.12201478}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.90572965, 'vehiclesObservedIou': 0.6808816, 'vehiclesOccludedAuc': 0.4872975, 'vehiclesOccludedIou': 0.08868617, 'vehiclesFlowEpe': 9.141367, 'vehiclesFlowWarpedOccupancyAuc': 0.76068383, 'vehiclesFlowWarpedOccupancyIou': 0.7809625}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.96954095, 'vehiclesObservedIou': 0.7001428, 'vehiclesOccludedAuc': 0.42955092, 'vehiclesOccludedIou': 0.10288371, 'vehiclesFlowEpe': 2.7318091, 'vehiclesFlowWarpedOccupancyAuc': 0.843782, 'vehiclesFlowWarpedOccupancyIou': 0.7882354}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6289294, 'vehiclesObservedIou': 0.3135118, 'vehiclesOccludedAuc': 0.011925471, 'vehiclesOccludedIou': 0.0020499392, 'vehiclesFlowEpe': 3.2398176, 'vehiclesFlowWarpedOccupancyAuc': 0.707176, 'vehiclesFlowWarpedOccupancyIou': 0.3655931}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.96954095, 'vehiclesObservedIou': 0.7001428, 'vehiclesOccludedAuc': 0.42955092, 'vehiclesOccludedIou': 0.10288371, 'vehiclesFlowEpe': 2.7318091, 'vehiclesFlowWarpedOccupancyAuc': 0.843782, 'vehiclesFlowWarpedOccupancyIou': 0.7882354}
2024-05-28 10:57:05.159039: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:57:05.220061: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:57:05.220358: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
Average Time: 0.0012 seconds, Average Metrics: {'vehiclesObservedAuc': 0.651296824117647, 'vehiclesObservedIou': 0.4026021854705883, 'vehiclesOccludedAuc': 0.07960282269088235, 'vehiclesOccludedIou': 0.016454914578617644, 'vehiclesFlowEpe': 5.026151544117647, 'vehiclesFlowWarpedOccupancyAuc': 0.6070566305882352, 'vehiclesFlowWarpedOccupancyIou': 0.4567147617058823}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00076new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.34484488, 'vehiclesObservedIou': 0.2052947, 'vehiclesOccludedAuc': 0.15440169, 'vehiclesOccludedIou': 0.013025318, 'vehiclesFlowEpe': 5.1895604, 'vehiclesFlowWarpedOccupancyAuc': 0.38056353, 'vehiclesFlowWarpedOccupancyIou': 0.30041492}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5653546, 'vehiclesObservedIou': 0.30874887, 'vehiclesOccludedAuc': 0.019386614, 'vehiclesOccludedIou': 0.005298835, 'vehiclesFlowEpe': 5.39822, 'vehiclesFlowWarpedOccupancyAuc': 0.49146235, 'vehiclesFlowWarpedOccupancyIou': 0.3825631}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.30844378, 'vehiclesObservedIou': 0.094799004, 'vehiclesOccludedAuc': 0.0012194974, 'vehiclesOccludedIou': 0.0013785283, 'vehiclesFlowEpe': 5.90121, 'vehiclesFlowWarpedOccupancyAuc': 0.27748057, 'vehiclesFlowWarpedOccupancyIou': 0.09319641}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8690617, 'vehiclesObservedIou': 0.58273536, 'vehiclesOccludedAuc': 0.039589554, 'vehiclesOccludedIou': 0.0059428895, 'vehiclesFlowEpe': 3.6585677, 'vehiclesFlowWarpedOccupancyAuc': 0.74928063, 'vehiclesFlowWarpedOccupancyIou': 0.6675471}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.36408818, 'vehiclesObservedIou': 0.18567552, 'vehiclesOccludedAuc': 0.004286606, 'vehiclesOccludedIou': 0.0029195722, 'vehiclesFlowEpe': 5.644762, 'vehiclesFlowWarpedOccupancyAuc': 0.37417305, 'vehiclesFlowWarpedOccupancyIou': 0.21326223}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6414474, 'vehiclesObservedIou': 0.41735318, 'vehiclesOccludedAuc': 0.06207327, 'vehiclesOccludedIou': 0.018946253, 'vehiclesFlowEpe': 14.206018, 'vehiclesFlowWarpedOccupancyAuc': 0.5114711, 'vehiclesFlowWarpedOccupancyIou': 0.49816084}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.14306393, 'vehiclesObservedIou': 0.084916785, 'vehiclesOccludedAuc': 0.20297433, 'vehiclesOccludedIou': 0.021775689, 'vehiclesFlowEpe': 5.6769214, 'vehiclesFlowWarpedOccupancyAuc': 0.26332822, 'vehiclesFlowWarpedOccupancyIou': 0.118063286}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.87820905, 'vehiclesObservedIou': 0.5333117, 'vehiclesOccludedAuc': 0.075453274, 'vehiclesOccludedIou': 0.030409146, 'vehiclesFlowEpe': 3.495576, 'vehiclesFlowWarpedOccupancyAuc': 0.7732877, 'vehiclesFlowWarpedOccupancyIou': 0.6458378}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.57318074, 'vehiclesObservedIou': 0.28671893, 'vehiclesOccludedAuc': 0.080417186, 'vehiclesOccludedIou': 0.032391142, 'vehiclesFlowEpe': 3.8742177, 'vehiclesFlowWarpedOccupancyAuc': 0.6078129, 'vehiclesFlowWarpedOccupancyIou': 0.35433713}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.6954911, 'vehiclesObservedIou': 0.4077183, 'vehiclesOccludedAuc': 0.19069172, 'vehiclesOccludedIou': 0.04646548, 'vehiclesFlowEpe': 4.0829554, 'vehiclesFlowWarpedOccupancyAuc': 0.65285814, 'vehiclesFlowWarpedOccupancyIou': 0.49189416}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6970688, 'vehiclesObservedIou': 0.30896515, 'vehiclesOccludedAuc': 0.026837364, 'vehiclesOccludedIou': 0.00674909, 'vehiclesFlowEpe': 5.4646935, 'vehiclesFlowWarpedOccupancyAuc': 0.39679495, 'vehiclesFlowWarpedOccupancyIou': 0.33329365}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9840405, 'vehiclesObservedIou': 0.80291575, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 1.8176671, 'vehiclesFlowWarpedOccupancyAuc': 0.89770967, 'vehiclesFlowWarpedOccupancyIou': 0.8723604}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8079461, 'vehiclesObservedIou': 0.51433754, 'vehiclesOccludedAuc': 0.41718775, 'vehiclesOccludedIou': 0.10909158, 'vehiclesFlowEpe': 8.05657, 'vehiclesFlowWarpedOccupancyAuc': 0.65387857, 'vehiclesFlowWarpedOccupancyIou': 0.5748303}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9188138, 'vehiclesObservedIou': 0.66193706, 'vehiclesOccludedAuc': 0.19465417, 'vehiclesOccludedIou': 0.045628645, 'vehiclesFlowEpe': 2.7715087, 'vehiclesFlowWarpedOccupancyAuc': 0.8488562, 'vehiclesFlowWarpedOccupancyIou': 0.7313902}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.93886286, 'vehiclesObservedIou': 0.60409826, 'vehiclesOccludedAuc': 0.038452495, 'vehiclesOccludedIou': 0.007475972, 'vehiclesFlowEpe': 2.43431, 'vehiclesFlowWarpedOccupancyAuc': 0.7636465, 'vehiclesFlowWarpedOccupancyIou': 0.6242054}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.6535408, 'vehiclesObservedIou': 0.29493612, 'vehiclesOccludedAuc': 0.013118515, 'vehiclesOccludedIou': 0.003750424, 'vehiclesFlowEpe': 6.1352406, 'vehiclesFlowWarpedOccupancyAuc': 0.4746656, 'vehiclesFlowWarpedOccupancyIou': 0.2595225}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9483775, 'vehiclesObservedIou': 0.6445067, 'vehiclesOccludedAuc': 0.0011657808, 'vehiclesOccludedIou': 0.0012098734, 'vehiclesFlowEpe': 6.2277093, 'vehiclesFlowWarpedOccupancyAuc': 0.7571717, 'vehiclesFlowWarpedOccupancyIou': 0.69469786}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5419216, 'vehiclesObservedIou': 0.2739872, 'vehiclesOccludedAuc': 0.40210286, 'vehiclesOccludedIou': 0.059330072, 'vehiclesFlowEpe': 4.414337, 'vehiclesFlowWarpedOccupancyAuc': 0.5620866, 'vehiclesFlowWarpedOccupancyIou': 0.3515398}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6747654, 'vehiclesObservedIou': 0.3684763, 'vehiclesOccludedAuc': 0.06527026, 'vehiclesOccludedIou': 0.019884748, 'vehiclesFlowEpe': 4.5946455, 'vehiclesFlowWarpedOccupancyAuc': 0.55631495, 'vehiclesFlowWarpedOccupancyIou': 0.42198366}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6333375, 'vehiclesObservedIou': 0.37274238, 'vehiclesOccludedAuc': 0.2788571, 'vehiclesOccludedIou': 0.05844919, 'vehiclesFlowEpe': 3.6774967, 'vehiclesFlowWarpedOccupancyAuc': 0.687199, 'vehiclesFlowWarpedOccupancyIou': 0.5695697}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7795717, 'vehiclesObservedIou': 0.4573284, 'vehiclesOccludedAuc': 0.13232544, 'vehiclesOccludedIou': 0.021983473, 'vehiclesFlowEpe': 3.3247585, 'vehiclesFlowWarpedOccupancyAuc': 0.71191823, 'vehiclesFlowWarpedOccupancyIou': 0.5951381}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.52128124, 'vehiclesObservedIou': 0.40843046, 'vehiclesOccludedAuc': 0.088934965, 'vehiclesOccludedIou': 0.017069243, 'vehiclesFlowEpe': 3.084645, 'vehiclesFlowWarpedOccupancyAuc': 0.7741512, 'vehiclesFlowWarpedOccupancyIou': 0.55148983}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.71008515, 'vehiclesObservedIou': 0.37540492, 'vehiclesOccludedAuc': 0.027943749, 'vehiclesOccludedIou': 0.0035377648, 'vehiclesFlowEpe': 4.133518, 'vehiclesFlowWarpedOccupancyAuc': 0.54219323, 'vehiclesFlowWarpedOccupancyIou': 0.40756285}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9188689, 'vehiclesObservedIou': 0.5778236, 'vehiclesOccludedAuc': 0.008756597, 'vehiclesOccludedIou': 0.0023424528, 'vehiclesFlowEpe': 1.8108466, 'vehiclesFlowWarpedOccupancyAuc': 0.7899351, 'vehiclesFlowWarpedOccupancyIou': 0.6145297}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.50039494, 'vehiclesObservedIou': 0.19843885, 'vehiclesOccludedAuc': 0.06505034, 'vehiclesOccludedIou': 0.019965341, 'vehiclesFlowEpe': 4.440108, 'vehiclesFlowWarpedOccupancyAuc': 0.4608119, 'vehiclesFlowWarpedOccupancyIou': 0.22804879}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.785321, 'vehiclesObservedIou': 0.47333354, 'vehiclesOccludedAuc': 0.08413428, 'vehiclesOccludedIou': 0.015848769, 'vehiclesFlowEpe': 2.5077934, 'vehiclesFlowWarpedOccupancyAuc': 0.6859738, 'vehiclesFlowWarpedOccupancyIou': 0.5377861}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.9840405, 'vehiclesObservedIou': 0.80291575, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 1.8176671, 'vehiclesFlowWarpedOccupancyAuc': 0.89770967, 'vehiclesFlowWarpedOccupancyIou': 0.8723604}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6691301211538462, 'vehiclesObservedIou': 0.4017282530384616, 'vehiclesOccludedAuc': 0.10289559258461536, 'vehiclesOccludedIou': 0.021956518884615386, 'vehiclesFlowEpe': 4.693225249999999, 'vehiclesFlowWarpedOccupancyAuc': 0.6017317457692307, 'vehiclesFlowWarpedOccupancyIou': 0.4666625313846154}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00033new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 10:57:21.610959: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:57:21.668985: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:57:21.669276: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.10774009, 'vehiclesObservedIou': 0.050510846, 'vehiclesOccludedAuc': 0.009052054, 'vehiclesOccludedIou': 0.002768355, 'vehiclesFlowEpe': 5.1769166, 'vehiclesFlowWarpedOccupancyAuc': 0.25193024, 'vehiclesFlowWarpedOccupancyIou': 0.055166885}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8458095, 'vehiclesObservedIou': 0.4675315, 'vehiclesOccludedAuc': 0.00047315608, 'vehiclesOccludedIou': 5.067589e-05, 'vehiclesFlowEpe': 3.7210958, 'vehiclesFlowWarpedOccupancyAuc': 0.6926471, 'vehiclesFlowWarpedOccupancyIou': 0.58658254}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6135082, 'vehiclesObservedIou': 0.36240256, 'vehiclesOccludedAuc': 0.07948996, 'vehiclesOccludedIou': 0.019516148, 'vehiclesFlowEpe': 5.7081766, 'vehiclesFlowWarpedOccupancyAuc': 0.49449322, 'vehiclesFlowWarpedOccupancyIou': 0.38385993}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.58904016, 'vehiclesObservedIou': 0.29461634, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.3040426, 'vehiclesFlowWarpedOccupancyAuc': 0.5815861, 'vehiclesFlowWarpedOccupancyIou': 0.37344587}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7334492, 'vehiclesObservedIou': 0.42372906, 'vehiclesOccludedAuc': 0.0643822, 'vehiclesOccludedIou': 0.018422244, 'vehiclesFlowEpe': 3.8663158, 'vehiclesFlowWarpedOccupancyAuc': 0.6464102, 'vehiclesFlowWarpedOccupancyIou': 0.46672726}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.440993, 'vehiclesObservedIou': 0.1840483, 'vehiclesOccludedAuc': 0.008426102, 'vehiclesOccludedIou': 0.0038712993, 'vehiclesFlowEpe': 10.641641, 'vehiclesFlowWarpedOccupancyAuc': 0.3205347, 'vehiclesFlowWarpedOccupancyIou': 0.22128527}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.79408014, 'vehiclesObservedIou': 0.5365636, 'vehiclesOccludedAuc': 0.067444324, 'vehiclesOccludedIou': 0.012535646, 'vehiclesFlowEpe': 8.022123, 'vehiclesFlowWarpedOccupancyAuc': 0.64121026, 'vehiclesFlowWarpedOccupancyIou': 0.5949743}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.71105975, 'vehiclesObservedIou': 0.53154486, 'vehiclesOccludedAuc': 0.24160346, 'vehiclesOccludedIou': 0.07010629, 'vehiclesFlowEpe': 4.2954435, 'vehiclesFlowWarpedOccupancyAuc': 0.78416157, 'vehiclesFlowWarpedOccupancyIou': 0.61530715}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.12063177, 'vehiclesObservedIou': 0.08185314, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.0524921, 'vehiclesFlowWarpedOccupancyAuc': 0.15749851, 'vehiclesFlowWarpedOccupancyIou': 0.088886954}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.65023685, 'vehiclesObservedIou': 0.34875807, 'vehiclesOccludedAuc': 0.012786752, 'vehiclesOccludedIou': 0.0046278033, 'vehiclesFlowEpe': 4.9151073, 'vehiclesFlowWarpedOccupancyAuc': 0.5544967, 'vehiclesFlowWarpedOccupancyIou': 0.3130284}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7859612, 'vehiclesObservedIou': 0.5232385, 'vehiclesOccludedAuc': 0.13195501, 'vehiclesOccludedIou': 0.040032107, 'vehiclesFlowEpe': 4.568194, 'vehiclesFlowWarpedOccupancyAuc': 0.696181, 'vehiclesFlowWarpedOccupancyIou': 0.44110537}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7187327, 'vehiclesObservedIou': 0.48714998, 'vehiclesOccludedAuc': 0.005358916, 'vehiclesOccludedIou': 0.0017670749, 'vehiclesFlowEpe': 1.5158948, 'vehiclesFlowWarpedOccupancyAuc': 0.7421429, 'vehiclesFlowWarpedOccupancyIou': 0.6444735}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6855279, 'vehiclesObservedIou': 0.3191637, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 5.3349566, 'vehiclesFlowWarpedOccupancyAuc': 0.52212834, 'vehiclesFlowWarpedOccupancyIou': 0.38491997}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.63356674, 'vehiclesObservedIou': 0.30993155, 'vehiclesOccludedAuc': 0.028868444, 'vehiclesOccludedIou': 0.008400078, 'vehiclesFlowEpe': 4.6951303, 'vehiclesFlowWarpedOccupancyAuc': 0.53925186, 'vehiclesFlowWarpedOccupancyIou': 0.3353795}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.35474658, 'vehiclesObservedIou': 0.12712744, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 4.4099436, 'vehiclesFlowWarpedOccupancyAuc': 0.3725909, 'vehiclesFlowWarpedOccupancyIou': 0.15326579}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.78694016, 'vehiclesObservedIou': 0.500989, 'vehiclesOccludedAuc': 0.1616965, 'vehiclesOccludedIou': 0.028999377, 'vehiclesFlowEpe': 3.698451, 'vehiclesFlowWarpedOccupancyAuc': 0.7150794, 'vehiclesFlowWarpedOccupancyIou': 0.5701345}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9431584, 'vehiclesObservedIou': 0.7290382, 'vehiclesOccludedAuc': 0.2556949, 'vehiclesOccludedIou': 0.052455105, 'vehiclesFlowEpe': 3.6761699, 'vehiclesFlowWarpedOccupancyAuc': 0.84282315, 'vehiclesFlowWarpedOccupancyIou': 0.76707965}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.78719574, 'vehiclesObservedIou': 0.44580558, 'vehiclesOccludedAuc': 0.011233317, 'vehiclesOccludedIou': 0.00600473, 'vehiclesFlowEpe': 3.0104144, 'vehiclesFlowWarpedOccupancyAuc': 0.6997984, 'vehiclesFlowWarpedOccupancyIou': 0.52209854}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.74196976, 'vehiclesObservedIou': 0.43669504, 'vehiclesOccludedAuc': 0.104687065, 'vehiclesOccludedIou': 0.01841914, 'vehiclesFlowEpe': 5.2788496, 'vehiclesFlowWarpedOccupancyAuc': 0.6372275, 'vehiclesFlowWarpedOccupancyIou': 0.4955298}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.52145326, 'vehiclesObservedIou': 0.32995433, 'vehiclesOccludedAuc': 0.027616788, 'vehiclesOccludedIou': 0.0062007224, 'vehiclesFlowEpe': 5.851113, 'vehiclesFlowWarpedOccupancyAuc': 0.49138469, 'vehiclesFlowWarpedOccupancyIou': 0.33775905}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.09467209, 'vehiclesObservedIou': 0.039983515, 'vehiclesOccludedAuc': 0.008925556, 'vehiclesOccludedIou': 0.003715024, 'vehiclesFlowEpe': 5.584357, 'vehiclesFlowWarpedOccupancyAuc': 0.16441084, 'vehiclesFlowWarpedOccupancyIou': 0.05111187}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9409515, 'vehiclesObservedIou': 0.703271, 'vehiclesOccludedAuc': 0.03545905, 'vehiclesOccludedIou': 0.00862367, 'vehiclesFlowEpe': 3.443144, 'vehiclesFlowWarpedOccupancyAuc': 0.8195083, 'vehiclesFlowWarpedOccupancyIou': 0.76696706}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8667499, 'vehiclesObservedIou': 0.53334224, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.583981, 'vehiclesFlowWarpedOccupancyAuc': 0.7848705, 'vehiclesFlowWarpedOccupancyIou': 0.66651136}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.31310388, 'vehiclesObservedIou': 0.13826841, 'vehiclesOccludedAuc': 0.0030085528, 'vehiclesOccludedIou': 0.0012219901, 'vehiclesFlowEpe': 5.018553, 'vehiclesFlowWarpedOccupancyAuc': 0.34311336, 'vehiclesFlowWarpedOccupancyIou': 0.17340419}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.87908316, 'vehiclesObservedIou': 0.6115515, 'vehiclesOccludedAuc': 0.00118372, 'vehiclesOccludedIou': 0.00043109586, 'vehiclesFlowEpe': 2.926028, 'vehiclesFlowWarpedOccupancyAuc': 0.75874746, 'vehiclesFlowWarpedOccupancyIou': 0.68663967}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.9431584, 'vehiclesObservedIou': 0.7290382, 'vehiclesOccludedAuc': 0.2556949, 'vehiclesOccludedIou': 0.052455105, 'vehiclesFlowEpe': 3.6761699, 'vehiclesFlowWarpedOccupancyAuc': 0.84282315, 'vehiclesFlowWarpedOccupancyIou': 0.76707965}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6264144652, 'vehiclesObservedIou': 0.38068273043999995, 'vehiclesOccludedAuc': 0.0503738330752, 'vehiclesOccludedIou': 0.01232674303, 'vehiclesFlowEpe': 4.53194138, 'vehiclesFlowWarpedOccupancyAuc': 0.570169088, 'vehiclesFlowWarpedOccupancyIou': 0.42782577516}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00103new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 10:57:37.469345: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:57:37.530441: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:57:37.530733: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.43332052, 'vehiclesObservedIou': 0.22093232, 'vehiclesOccludedAuc': 0.059049264, 'vehiclesOccludedIou': 0.00976169, 'vehiclesFlowEpe': 6.756031, 'vehiclesFlowWarpedOccupancyAuc': 0.4380704, 'vehiclesFlowWarpedOccupancyIou': 0.22289266}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.30606365, 'vehiclesObservedIou': 0.20699367, 'vehiclesOccludedAuc': 0.0846523, 'vehiclesOccludedIou': 0.006829762, 'vehiclesFlowEpe': 5.4228134, 'vehiclesFlowWarpedOccupancyAuc': 0.34510526, 'vehiclesFlowWarpedOccupancyIou': 0.20628469}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5132283, 'vehiclesObservedIou': 0.22783095, 'vehiclesOccludedAuc': 0.0076678293, 'vehiclesOccludedIou': 0.0020210226, 'vehiclesFlowEpe': 4.956245, 'vehiclesFlowWarpedOccupancyAuc': 0.423833, 'vehiclesFlowWarpedOccupancyIou': 0.28676513}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9752921, 'vehiclesObservedIou': 0.8330629, 'vehiclesOccludedAuc': 0.25929278, 'vehiclesOccludedIou': 0.035816833, 'vehiclesFlowEpe': 15.727523, 'vehiclesFlowWarpedOccupancyAuc': 0.87102, 'vehiclesFlowWarpedOccupancyIou': 0.89509535}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.29995677, 'vehiclesObservedIou': 0.17114612, 'vehiclesOccludedAuc': 0.005582304, 'vehiclesOccludedIou': 0.0020871577, 'vehiclesFlowEpe': 5.7687345, 'vehiclesFlowWarpedOccupancyAuc': 0.38178843, 'vehiclesFlowWarpedOccupancyIou': 0.17412332}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.31128162, 'vehiclesObservedIou': 0.16576351, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 6.166329, 'vehiclesFlowWarpedOccupancyAuc': 0.43320417, 'vehiclesFlowWarpedOccupancyIou': 0.19582792}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9430865, 'vehiclesObservedIou': 0.7333306, 'vehiclesOccludedAuc': 0.025363108, 'vehiclesOccludedIou': 0.0074445186, 'vehiclesFlowEpe': 4.1248794, 'vehiclesFlowWarpedOccupancyAuc': 0.8068752, 'vehiclesFlowWarpedOccupancyIou': 0.81049883}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.93440557, 'vehiclesObservedIou': 0.6743685, 'vehiclesOccludedAuc': 0.1252424, 'vehiclesOccludedIou': 0.0386539, 'vehiclesFlowEpe': 2.3032942, 'vehiclesFlowWarpedOccupancyAuc': 0.8571617, 'vehiclesFlowWarpedOccupancyIou': 0.7898154}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.70734125, 'vehiclesObservedIou': 0.40938467, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 4.8091526, 'vehiclesFlowWarpedOccupancyAuc': 0.56699336, 'vehiclesFlowWarpedOccupancyIou': 0.50787103}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.49624622, 'vehiclesObservedIou': 0.28732604, 'vehiclesOccludedAuc': 0.027306305, 'vehiclesOccludedIou': 0.0030538146, 'vehiclesFlowEpe': 3.8906987, 'vehiclesFlowWarpedOccupancyAuc': 0.49910557, 'vehiclesFlowWarpedOccupancyIou': 0.3139897}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8425959, 'vehiclesObservedIou': 0.41373783, 'vehiclesOccludedAuc': 0.12808882, 'vehiclesOccludedIou': 0.03682424, 'vehiclesFlowEpe': 8.6422615, 'vehiclesFlowWarpedOccupancyAuc': 0.6883176, 'vehiclesFlowWarpedOccupancyIou': 0.5056896}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.47902647, 'vehiclesObservedIou': 0.27432597, 'vehiclesOccludedAuc': 0.012071621, 'vehiclesOccludedIou': 0.003068322, 'vehiclesFlowEpe': 20.086355, 'vehiclesFlowWarpedOccupancyAuc': 0.19768922, 'vehiclesFlowWarpedOccupancyIou': 0.22229362}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8204883, 'vehiclesObservedIou': 0.41412202, 'vehiclesOccludedAuc': 0.089133374, 'vehiclesOccludedIou': 0.028362866, 'vehiclesFlowEpe': 7.7746263, 'vehiclesFlowWarpedOccupancyAuc': 0.66078407, 'vehiclesFlowWarpedOccupancyIou': 0.4186392}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9138142, 'vehiclesObservedIou': 0.5791087, 'vehiclesOccludedAuc': 0.041968577, 'vehiclesOccludedIou': 0.0024080093, 'vehiclesFlowEpe': 2.6248329, 'vehiclesFlowWarpedOccupancyAuc': 0.81771815, 'vehiclesFlowWarpedOccupancyIou': 0.69510967}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.59801763, 'vehiclesObservedIou': 0.27814507, 'vehiclesOccludedAuc': 0.023410145, 'vehiclesOccludedIou': 0.007998079, 'vehiclesFlowEpe': 4.0427585, 'vehiclesFlowWarpedOccupancyAuc': 0.5368313, 'vehiclesFlowWarpedOccupancyIou': 0.3019514}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.3818383, 'vehiclesObservedIou': 0.20797771, 'vehiclesOccludedAuc': 0.04707488, 'vehiclesOccludedIou': 0.011385029, 'vehiclesFlowEpe': 4.069482, 'vehiclesFlowWarpedOccupancyAuc': 0.5201556, 'vehiclesFlowWarpedOccupancyIou': 0.24031161}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.1934081, 'vehiclesObservedIou': 0.095300846, 'vehiclesOccludedAuc': 0.0010194913, 'vehiclesOccludedIou': 6.332547e-05, 'vehiclesFlowEpe': 8.370757, 'vehiclesFlowWarpedOccupancyAuc': 0.23594171, 'vehiclesFlowWarpedOccupancyIou': 0.08463174}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5399555, 'vehiclesObservedIou': 0.2787185, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 7.1083674, 'vehiclesFlowWarpedOccupancyAuc': 0.5619595, 'vehiclesFlowWarpedOccupancyIou': 0.3392503}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7476584, 'vehiclesObservedIou': 0.44799095, 'vehiclesOccludedAuc': 0.22624747, 'vehiclesOccludedIou': 0.0359852, 'vehiclesFlowEpe': 2.9694567, 'vehiclesFlowWarpedOccupancyAuc': 0.6901165, 'vehiclesFlowWarpedOccupancyIou': 0.55481195}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.09468471, 'vehiclesObservedIou': 0.04481658, 'vehiclesOccludedAuc': 0.05899012, 'vehiclesOccludedIou': 0.01303778, 'vehiclesFlowEpe': 3.715127, 'vehiclesFlowWarpedOccupancyAuc': 0.20377496, 'vehiclesFlowWarpedOccupancyIou': 0.05327957}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.93526214, 'vehiclesObservedIou': 0.63727605, 'vehiclesOccludedAuc': 0.12587151, 'vehiclesOccludedIou': 0.014477117, 'vehiclesFlowEpe': 2.6022723, 'vehiclesFlowWarpedOccupancyAuc': 0.8352373, 'vehiclesFlowWarpedOccupancyIou': 0.7256246}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8242114, 'vehiclesObservedIou': 0.57311237, 'vehiclesOccludedAuc': 0.036334492, 'vehiclesOccludedIou': 0.005942448, 'vehiclesFlowEpe': 3.3505032, 'vehiclesFlowWarpedOccupancyAuc': 0.7398973, 'vehiclesFlowWarpedOccupancyIou': 0.664295}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.93110687, 'vehiclesObservedIou': 0.61378396, 'vehiclesOccludedAuc': 0.07962104, 'vehiclesOccludedIou': 0.009753556, 'vehiclesFlowEpe': 3.1924841, 'vehiclesFlowWarpedOccupancyAuc': 0.7779703, 'vehiclesFlowWarpedOccupancyIou': 0.6812916}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.58317494, 'vehiclesObservedIou': 0.32973891, 'vehiclesOccludedAuc': 0.045380846, 'vehiclesOccludedIou': 0.010749092, 'vehiclesFlowEpe': 3.3721232, 'vehiclesFlowWarpedOccupancyAuc': 0.6936305, 'vehiclesFlowWarpedOccupancyIou': 0.44716966}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.53558105, 'vehiclesObservedIou': 0.2812756, 'vehiclesOccludedAuc': 0.11234434, 'vehiclesOccludedIou': 0.023176266, 'vehiclesFlowEpe': 5.1293273, 'vehiclesFlowWarpedOccupancyAuc': 0.4685369, 'vehiclesFlowWarpedOccupancyIou': 0.3218026}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9397904, 'vehiclesObservedIou': 0.67626125, 'vehiclesOccludedAuc': 0.037967663, 'vehiclesOccludedIou': 0.00749771, 'vehiclesFlowEpe': 5.25037, 'vehiclesFlowWarpedOccupancyAuc': 0.75229377, 'vehiclesFlowWarpedOccupancyIou': 0.73666054}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.97211546, 'vehiclesObservedIou': 0.8215524, 'vehiclesOccludedAuc': 0.00755551, 'vehiclesOccludedIou': 0.0037066473, 'vehiclesFlowEpe': 7.2158675, 'vehiclesFlowWarpedOccupancyAuc': 0.7394802, 'vehiclesFlowWarpedOccupancyIou': 0.77030367}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5992391, 'vehiclesObservedIou': 0.35174146, 'vehiclesOccludedAuc': 0.048150748, 'vehiclesOccludedIou': 0.024586419, 'vehiclesFlowEpe': 5.9544888, 'vehiclesFlowWarpedOccupancyAuc': 0.6210177, 'vehiclesFlowWarpedOccupancyIou': 0.44516033}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.17962441, 'vehiclesObservedIou': 0.11548798, 'vehiclesOccludedAuc': 0.008379461, 'vehiclesOccludedIou': 0.002394609, 'vehiclesFlowEpe': 7.535275, 'vehiclesFlowWarpedOccupancyAuc': 0.2713817, 'vehiclesFlowWarpedOccupancyIou': 0.13207655}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.84723705, 'vehiclesObservedIou': 0.44249678, 'vehiclesOccludedAuc': 0.003583682, 'vehiclesOccludedIou': 0.002640333, 'vehiclesFlowEpe': 9.353795, 'vehiclesFlowWarpedOccupancyAuc': 0.5934943, 'vehiclesFlowWarpedOccupancyIou': 0.50692445}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7342474, 'vehiclesObservedIou': 0.3589133, 'vehiclesOccludedAuc': 0.018065125, 'vehiclesOccludedIou': 0.0047369627, 'vehiclesFlowEpe': 2.9244418, 'vehiclesFlowWarpedOccupancyAuc': 0.5735633, 'vehiclesFlowWarpedOccupancyIou': 0.429168}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.83666366, 'vehiclesObservedIou': 0.42973584, 'vehiclesOccludedAuc': 0.008509126, 'vehiclesOccludedIou': 0.0033426657, 'vehiclesFlowEpe': 8.043957, 'vehiclesFlowWarpedOccupancyAuc': 0.59284663, 'vehiclesFlowWarpedOccupancyIou': 0.49203303}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.87930375, 'vehiclesObservedIou': 0.6321286, 'vehiclesOccludedAuc': 0.08925401, 'vehiclesOccludedIou': 0.011538457, 'vehiclesFlowEpe': 9.098803, 'vehiclesFlowWarpedOccupancyAuc': 0.7253914, 'vehiclesFlowWarpedOccupancyIou': 0.7726659}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.40658954, 'vehiclesObservedIou': 0.24451777, 'vehiclesOccludedAuc': 0.29113537, 'vehiclesOccludedIou': 0.060258597, 'vehiclesFlowEpe': 8.789324, 'vehiclesFlowWarpedOccupancyAuc': 0.5302192, 'vehiclesFlowWarpedOccupancyIou': 0.4228465}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.8317107, 'vehiclesObservedIou': 0.57007647, 'vehiclesOccludedAuc': 0.00097255857, 'vehiclesOccludedIou': 0.00024805721, 'vehiclesFlowEpe': 7.3282814, 'vehiclesFlowWarpedOccupancyAuc': 0.65654576, 'vehiclesFlowWarpedOccupancyIou': 0.62921214}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.63302815, 'vehiclesObservedIou': 0.29661646, 'vehiclesOccludedAuc': 0.0010755386, 'vehiclesOccludedIou': 0.0009636447, 'vehiclesFlowEpe': 11.119118, 'vehiclesFlowWarpedOccupancyAuc': 0.39358968, 'vehiclesFlowWarpedOccupancyIou': 0.37141168}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.2638662, 'vehiclesObservedIou': 0.123129524, 'vehiclesOccludedAuc': 0.0055992934, 'vehiclesOccludedIou': 0.002681948, 'vehiclesFlowEpe': 8.090525, 'vehiclesFlowWarpedOccupancyAuc': 0.24439712, 'vehiclesFlowWarpedOccupancyIou': 0.14614034}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8477713, 'vehiclesObservedIou': 0.582314, 'vehiclesOccludedAuc': 0.1842041, 'vehiclesOccludedIou': 0.031211387, 'vehiclesFlowEpe': 4.16161, 'vehiclesFlowWarpedOccupancyAuc': 0.6764141, 'vehiclesFlowWarpedOccupancyIou': 0.5693972}
2024-05-28 10:58:01.062413: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:58:01.120140: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:58:01.120423: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.9752921, 'vehiclesObservedIou': 0.8330629, 'vehiclesOccludedAuc': 0.25929278, 'vehiclesOccludedIou': 0.035816833, 'vehiclesFlowEpe': 15.727523, 'vehiclesFlowWarpedOccupancyAuc': 0.87102, 'vehiclesFlowWarpedOccupancyIou': 0.89509535}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6397956192105262, 'vehiclesObservedIou': 0.3959090047368421, 'vehiclesOccludedAuc': 0.06121487374131579, 'vehiclesOccludedIou': 0.012229143838947368, 'vehiclesFlowEpe': 6.364270834210527, 'vehiclesFlowWarpedOccupancyAuc': 0.5690092857894736, 'vehiclesFlowWarpedOccupancyIou': 0.44956096}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00002new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.9114842, 'vehiclesObservedIou': 0.5999371, 'vehiclesOccludedAuc': 0.03860133, 'vehiclesOccludedIou': 0.008423068, 'vehiclesFlowEpe': 2.750315, 'vehiclesFlowWarpedOccupancyAuc': 0.77531695, 'vehiclesFlowWarpedOccupancyIou': 0.6950093}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.49424303, 'vehiclesObservedIou': 0.29989406, 'vehiclesOccludedAuc': 0.048065796, 'vehiclesOccludedIou': 0.017783951, 'vehiclesFlowEpe': 7.9982247, 'vehiclesFlowWarpedOccupancyAuc': 0.50071746, 'vehiclesFlowWarpedOccupancyIou': 0.3640584}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.81816447, 'vehiclesObservedIou': 0.51686454, 'vehiclesOccludedAuc': 0.1219211, 'vehiclesOccludedIou': 0.028086834, 'vehiclesFlowEpe': 3.2543902, 'vehiclesFlowWarpedOccupancyAuc': 0.7066291, 'vehiclesFlowWarpedOccupancyIou': 0.6011667}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.88077843, 'vehiclesObservedIou': 0.5576743, 'vehiclesOccludedAuc': 0.010027176, 'vehiclesOccludedIou': 0.0024859107, 'vehiclesFlowEpe': 4.200403, 'vehiclesFlowWarpedOccupancyAuc': 0.67378384, 'vehiclesFlowWarpedOccupancyIou': 0.5099778}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6771034, 'vehiclesObservedIou': 0.3980827, 'vehiclesOccludedAuc': 0.3207027, 'vehiclesOccludedIou': 0.0525229, 'vehiclesFlowEpe': 3.674377, 'vehiclesFlowWarpedOccupancyAuc': 0.5759127, 'vehiclesFlowWarpedOccupancyIou': 0.45122942}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.118996404, 'vehiclesObservedIou': 0.068446144, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 5.3355656, 'vehiclesFlowWarpedOccupancyAuc': 0.12771285, 'vehiclesFlowWarpedOccupancyIou': 0.06633579}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9829926, 'vehiclesObservedIou': 0.8226903, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 1.2530895, 'vehiclesFlowWarpedOccupancyAuc': 0.8940419, 'vehiclesFlowWarpedOccupancyIou': 0.8954067}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.969657, 'vehiclesObservedIou': 0.768813, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.7317421, 'vehiclesFlowWarpedOccupancyAuc': 0.8573612, 'vehiclesFlowWarpedOccupancyIou': 0.83655936}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9527413, 'vehiclesObservedIou': 0.78358984, 'vehiclesOccludedAuc': 0.12862256, 'vehiclesOccludedIou': 0.035297375, 'vehiclesFlowEpe': 3.3226678, 'vehiclesFlowWarpedOccupancyAuc': 0.8884228, 'vehiclesFlowWarpedOccupancyIou': 0.84712857}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.81476754, 'vehiclesObservedIou': 0.6314517, 'vehiclesOccludedAuc': 0.30622834, 'vehiclesOccludedIou': 0.08318409, 'vehiclesFlowEpe': 3.9829328, 'vehiclesFlowWarpedOccupancyAuc': 0.68829393, 'vehiclesFlowWarpedOccupancyIou': 0.5570015}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.93331975, 'vehiclesObservedIou': 0.70527107, 'vehiclesOccludedAuc': 0.039605543, 'vehiclesOccludedIou': 0.008376522, 'vehiclesFlowEpe': 2.716401, 'vehiclesFlowWarpedOccupancyAuc': 0.7665417, 'vehiclesFlowWarpedOccupancyIou': 0.7025594}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.016837131, 'vehiclesObservedIou': 0.007351743, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.7116456, 'vehiclesFlowWarpedOccupancyAuc': 0.05951309, 'vehiclesFlowWarpedOccupancyIou': 0.0076868488}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.641852, 'vehiclesObservedIou': 0.24572328, 'vehiclesOccludedAuc': 0.21778369, 'vehiclesOccludedIou': 0.030774318, 'vehiclesFlowEpe': 4.629985, 'vehiclesFlowWarpedOccupancyAuc': 0.5570121, 'vehiclesFlowWarpedOccupancyIou': 0.2181003}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.972317, 'vehiclesObservedIou': 0.68779314, 'vehiclesOccludedAuc': 0.49860558, 'vehiclesOccludedIou': 0.07795601, 'vehiclesFlowEpe': 0.77739215, 'vehiclesFlowWarpedOccupancyAuc': 0.86571836, 'vehiclesFlowWarpedOccupancyIou': 0.7461653}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.92538077, 'vehiclesObservedIou': 0.6011012, 'vehiclesOccludedAuc': 0.0041571185, 'vehiclesOccludedIou': 0.0019537476, 'vehiclesFlowEpe': 3.0506067, 'vehiclesFlowWarpedOccupancyAuc': 0.7769033, 'vehiclesFlowWarpedOccupancyIou': 0.68385637}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8222285, 'vehiclesObservedIou': 0.45793536, 'vehiclesOccludedAuc': 0.46212408, 'vehiclesOccludedIou': 0.0784466, 'vehiclesFlowEpe': 3.3525567, 'vehiclesFlowWarpedOccupancyAuc': 0.68457603, 'vehiclesFlowWarpedOccupancyIou': 0.57267004}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9093595, 'vehiclesObservedIou': 0.6082757, 'vehiclesOccludedAuc': 0.00017409775, 'vehiclesOccludedIou': 8.136643e-05, 'vehiclesFlowEpe': 4.382695, 'vehiclesFlowWarpedOccupancyAuc': 0.739967, 'vehiclesFlowWarpedOccupancyIou': 0.7093807}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.87259686, 'vehiclesObservedIou': 0.67732793, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 1.1149552, 'vehiclesFlowWarpedOccupancyAuc': 0.858942, 'vehiclesFlowWarpedOccupancyIou': 0.81655765}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6983438, 'vehiclesObservedIou': 0.33889785, 'vehiclesOccludedAuc': 0.0031921605, 'vehiclesOccludedIou': 0.0018500506, 'vehiclesFlowEpe': 4.6528277, 'vehiclesFlowWarpedOccupancyAuc': 0.51122046, 'vehiclesFlowWarpedOccupancyIou': 0.35639858}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6790877, 'vehiclesObservedIou': 0.3736164, 'vehiclesOccludedAuc': 0.09600458, 'vehiclesOccludedIou': 0.026404608, 'vehiclesFlowEpe': 5.591626, 'vehiclesFlowWarpedOccupancyAuc': 0.5596972, 'vehiclesFlowWarpedOccupancyIou': 0.40256053}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.72597003, 'vehiclesObservedIou': 0.37439013, 'vehiclesOccludedAuc': 0.18003663, 'vehiclesOccludedIou': 0.023840511, 'vehiclesFlowEpe': 2.5546691, 'vehiclesFlowWarpedOccupancyAuc': 0.678988, 'vehiclesFlowWarpedOccupancyIou': 0.49496374}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.30054665, 'vehiclesObservedIou': 0.11901922, 'vehiclesOccludedAuc': 0.005037497, 'vehiclesOccludedIou': 0.0030245734, 'vehiclesFlowEpe': 6.0918403, 'vehiclesFlowWarpedOccupancyAuc': 0.29204282, 'vehiclesFlowWarpedOccupancyIou': 0.1519368}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9515398, 'vehiclesObservedIou': 0.74023634, 'vehiclesOccludedAuc': 0.24620992, 'vehiclesOccludedIou': 0.033722796, 'vehiclesFlowEpe': 2.7269151, 'vehiclesFlowWarpedOccupancyAuc': 0.88877946, 'vehiclesFlowWarpedOccupancyIou': 0.82998186}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.86026794, 'vehiclesObservedIou': 0.5315516, 'vehiclesOccludedAuc': 0.07119532, 'vehiclesOccludedIou': 0.014766272, 'vehiclesFlowEpe': 3.2238677, 'vehiclesFlowWarpedOccupancyAuc': 0.661236, 'vehiclesFlowWarpedOccupancyIou': 0.5732379}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.39377284, 'vehiclesObservedIou': 0.24870569, 'vehiclesOccludedAuc': 0.040145345, 'vehiclesOccludedIou': 0.010778913, 'vehiclesFlowEpe': 7.014883, 'vehiclesFlowWarpedOccupancyAuc': 0.4374636, 'vehiclesFlowWarpedOccupancyIou': 0.31791186}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.24767636, 'vehiclesObservedIou': 0.1173812, 'vehiclesOccludedAuc': 0.051564325, 'vehiclesOccludedIou': 0.011434018, 'vehiclesFlowEpe': 7.942407, 'vehiclesFlowWarpedOccupancyAuc': 0.2869641, 'vehiclesFlowWarpedOccupancyIou': 0.114637464}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.20487498, 'vehiclesObservedIou': 0.09912758, 'vehiclesOccludedAuc': 0.0345468, 'vehiclesOccludedIou': 0.0055573094, 'vehiclesFlowEpe': 4.9307704, 'vehiclesFlowWarpedOccupancyAuc': 0.3744902, 'vehiclesFlowWarpedOccupancyIou': 0.10125553}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9148765, 'vehiclesObservedIou': 0.6014302, 'vehiclesOccludedAuc': 0.010748503, 'vehiclesOccludedIou': 0.0052958527, 'vehiclesFlowEpe': 3.1473718, 'vehiclesFlowWarpedOccupancyAuc': 0.7706391, 'vehiclesFlowWarpedOccupancyIou': 0.6605029}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.76219434, 'vehiclesObservedIou': 0.49951616, 'vehiclesOccludedAuc': 0.20163006, 'vehiclesOccludedIou': 0.046270855, 'vehiclesFlowEpe': 4.24501, 'vehiclesFlowWarpedOccupancyAuc': 0.7411317, 'vehiclesFlowWarpedOccupancyIou': 0.54350346}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.4488445, 'vehiclesObservedIou': 0.22515078, 'vehiclesOccludedAuc': 0.06329501, 'vehiclesOccludedIou': 0.008963962, 'vehiclesFlowEpe': 4.3692513, 'vehiclesFlowWarpedOccupancyAuc': 0.5178082, 'vehiclesFlowWarpedOccupancyIou': 0.25812665}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9523837, 'vehiclesObservedIou': 0.7303066, 'vehiclesOccludedAuc': 0.5389428, 'vehiclesOccludedIou': 0.06513438, 'vehiclesFlowEpe': 3.4276, 'vehiclesFlowWarpedOccupancyAuc': 0.8508334, 'vehiclesFlowWarpedOccupancyIou': 0.8327764}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6789392, 'vehiclesObservedIou': 0.2648913, 'vehiclesOccludedAuc': 0.045413844, 'vehiclesOccludedIou': 0.009772566, 'vehiclesFlowEpe': 5.6232357, 'vehiclesFlowWarpedOccupancyAuc': 0.54397917, 'vehiclesFlowWarpedOccupancyIou': 0.27275756}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.9829926, 'vehiclesObservedIou': 0.8226903, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 1.2530895, 'vehiclesFlowWarpedOccupancyAuc': 0.8940419, 'vehiclesFlowWarpedOccupancyIou': 0.8954067}
2024-05-28 10:58:21.296615: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:58:21.352721: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:58:21.353019: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.70419181953125, 'vehiclesObservedIou': 0.45945137990625, 'vehiclesOccludedAuc': 0.11826818455468749, 'vehiclesOccludedIou': 0.0216309174946875, 'vehiclesFlowEpe': 3.9931943796875, 'vehiclesFlowWarpedOccupancyAuc': 0.62851999125, 'vehiclesFlowWarpedOccupancyIou': 0.5059812932125001}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00005new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.7052261, 'vehiclesObservedIou': 0.35708457, 'vehiclesOccludedAuc': 0.2913776, 'vehiclesOccludedIou': 0.08740403, 'vehiclesFlowEpe': 3.3280141, 'vehiclesFlowWarpedOccupancyAuc': 0.59009427, 'vehiclesFlowWarpedOccupancyIou': 0.45071542}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.47570542, 'vehiclesObservedIou': 0.24486972, 'vehiclesOccludedAuc': 0.007093129, 'vehiclesOccludedIou': 0.0025078764, 'vehiclesFlowEpe': 2.9670854, 'vehiclesFlowWarpedOccupancyAuc': 0.610802, 'vehiclesFlowWarpedOccupancyIou': 0.35127944}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8458905, 'vehiclesObservedIou': 0.5107969, 'vehiclesOccludedAuc': 0.037531592, 'vehiclesOccludedIou': 0.012927057, 'vehiclesFlowEpe': 5.1614494, 'vehiclesFlowWarpedOccupancyAuc': 0.6100371, 'vehiclesFlowWarpedOccupancyIou': 0.5314361}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.70980877, 'vehiclesObservedIou': 0.40250543, 'vehiclesOccludedAuc': 0.00035696776, 'vehiclesOccludedIou': 7.455478e-05, 'vehiclesFlowEpe': 6.92197, 'vehiclesFlowWarpedOccupancyAuc': 0.52539897, 'vehiclesFlowWarpedOccupancyIou': 0.50298333}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.63556415, 'vehiclesObservedIou': 0.33023217, 'vehiclesOccludedAuc': 0.004447107, 'vehiclesOccludedIou': 0.0012875913, 'vehiclesFlowEpe': 2.5838642, 'vehiclesFlowWarpedOccupancyAuc': 0.61322945, 'vehiclesFlowWarpedOccupancyIou': 0.4101514}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.89213663, 'vehiclesObservedIou': 0.6535454, 'vehiclesOccludedAuc': 0.26363233, 'vehiclesOccludedIou': 0.04667793, 'vehiclesFlowEpe': 7.795027, 'vehiclesFlowWarpedOccupancyAuc': 0.7925509, 'vehiclesFlowWarpedOccupancyIou': 0.6906783}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.42908305, 'vehiclesObservedIou': 0.24949168, 'vehiclesOccludedAuc': 0.24257484, 'vehiclesOccludedIou': 0.023166165, 'vehiclesFlowEpe': 4.4911385, 'vehiclesFlowWarpedOccupancyAuc': 0.55845904, 'vehiclesFlowWarpedOccupancyIou': 0.3548466}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.66415936, 'vehiclesObservedIou': 0.36719817, 'vehiclesOccludedAuc': 0.0372653, 'vehiclesOccludedIou': 0.0030145028, 'vehiclesFlowEpe': 9.790022, 'vehiclesFlowWarpedOccupancyAuc': 0.41982388, 'vehiclesFlowWarpedOccupancyIou': 0.32484183}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9489474, 'vehiclesObservedIou': 0.6965086, 'vehiclesOccludedAuc': 0.008063151, 'vehiclesOccludedIou': 0.003641754, 'vehiclesFlowEpe': 2.0409615, 'vehiclesFlowWarpedOccupancyAuc': 0.8469324, 'vehiclesFlowWarpedOccupancyIou': 0.77460873}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.67910266, 'vehiclesObservedIou': 0.3716799, 'vehiclesOccludedAuc': 0.10635679, 'vehiclesOccludedIou': 0.019948572, 'vehiclesFlowEpe': 6.137039, 'vehiclesFlowWarpedOccupancyAuc': 0.46743312, 'vehiclesFlowWarpedOccupancyIou': 0.40818393}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9398183, 'vehiclesObservedIou': 0.5591893, 'vehiclesOccludedAuc': 0.0017425469, 'vehiclesOccludedIou': 0.0014827182, 'vehiclesFlowEpe': 3.0959446, 'vehiclesFlowWarpedOccupancyAuc': 0.7707767, 'vehiclesFlowWarpedOccupancyIou': 0.65752304}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8641942, 'vehiclesObservedIou': 0.5899102, 'vehiclesOccludedAuc': 0.28232923, 'vehiclesOccludedIou': 0.046082526, 'vehiclesFlowEpe': 7.6574388, 'vehiclesFlowWarpedOccupancyAuc': 0.77235496, 'vehiclesFlowWarpedOccupancyIou': 0.7327446}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9121938, 'vehiclesObservedIou': 0.6056482, 'vehiclesOccludedAuc': 0.21142747, 'vehiclesOccludedIou': 0.014366768, 'vehiclesFlowEpe': 1.9255769, 'vehiclesFlowWarpedOccupancyAuc': 0.7965678, 'vehiclesFlowWarpedOccupancyIou': 0.6811151}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9139424, 'vehiclesObservedIou': 0.59563786, 'vehiclesOccludedAuc': 0.021855805, 'vehiclesOccludedIou': 0.010556519, 'vehiclesFlowEpe': 2.2432356, 'vehiclesFlowWarpedOccupancyAuc': 0.79899335, 'vehiclesFlowWarpedOccupancyIou': 0.6951246}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.13402338, 'vehiclesObservedIou': 0.047025055, 'vehiclesOccludedAuc': 0.005700921, 'vehiclesOccludedIou': 0.0027294727, 'vehiclesFlowEpe': 7.2715755, 'vehiclesFlowWarpedOccupancyAuc': 0.11448451, 'vehiclesFlowWarpedOccupancyIou': 0.0413072}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.875463, 'vehiclesObservedIou': 0.5388856, 'vehiclesOccludedAuc': 0.0035097075, 'vehiclesOccludedIou': 0.001964701, 'vehiclesFlowEpe': 4.4096723, 'vehiclesFlowWarpedOccupancyAuc': 0.72741354, 'vehiclesFlowWarpedOccupancyIou': 0.6726903}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.81202555, 'vehiclesObservedIou': 0.5190645, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.8588037, 'vehiclesFlowWarpedOccupancyAuc': 0.7202106, 'vehiclesFlowWarpedOccupancyIou': 0.607651}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.86690474, 'vehiclesObservedIou': 0.5574806, 'vehiclesOccludedAuc': 0.0147174075, 'vehiclesOccludedIou': 0.0076723583, 'vehiclesFlowEpe': 3.3867705, 'vehiclesFlowWarpedOccupancyAuc': 0.7362678, 'vehiclesFlowWarpedOccupancyIou': 0.66434664}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9832157, 'vehiclesObservedIou': 0.7698316, 'vehiclesOccludedAuc': 0.04946039, 'vehiclesOccludedIou': 0.021291047, 'vehiclesFlowEpe': 6.676009, 'vehiclesFlowWarpedOccupancyAuc': 0.8475916, 'vehiclesFlowWarpedOccupancyIou': 0.8148449}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9429573, 'vehiclesObservedIou': 0.6564848, 'vehiclesOccludedAuc': 0.25636783, 'vehiclesOccludedIou': 0.06773551, 'vehiclesFlowEpe': 8.359456, 'vehiclesFlowWarpedOccupancyAuc': 0.72081786, 'vehiclesFlowWarpedOccupancyIou': 0.6309506}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.35364616, 'vehiclesObservedIou': 0.14955872, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 12.133349, 'vehiclesFlowWarpedOccupancyAuc': 0.2750241, 'vehiclesFlowWarpedOccupancyIou': 0.16757882}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.46384692, 'vehiclesObservedIou': 0.22934361, 'vehiclesOccludedAuc': 0.11185825, 'vehiclesOccludedIou': 0.022465138, 'vehiclesFlowEpe': 3.7320127, 'vehiclesFlowWarpedOccupancyAuc': 0.5783545, 'vehiclesFlowWarpedOccupancyIou': 0.31195524}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.9832157, 'vehiclesObservedIou': 0.7698316, 'vehiclesOccludedAuc': 0.04946039, 'vehiclesOccludedIou': 0.021291047, 'vehiclesFlowEpe': 6.676009, 'vehiclesFlowWarpedOccupancyAuc': 0.8475916, 'vehiclesFlowWarpedOccupancyIou': 0.8148449}
Average Time: 0.0012 seconds, Average Metrics: {'vehiclesObservedAuc': 0.7294479768181819, 'vehiclesObservedIou': 0.4546351175, 'vehiclesOccludedAuc': 0.08898492566636364, 'vehiclesOccludedIou': 0.018045308703636364, 'vehiclesFlowEpe': 5.225746168181817, 'vehiclesFlowWarpedOccupancyAuc': 0.6315281113636363, 'vehiclesFlowWarpedOccupancyIou': 0.5217071418181818}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00007new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 10:58:35.962227: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:58:36.023323: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:58:36.023631: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.96639115, 'vehiclesObservedIou': 0.8031819, 'vehiclesOccludedAuc': 0.16527979, 'vehiclesOccludedIou': 0.044999328, 'vehiclesFlowEpe': 6.0882225, 'vehiclesFlowWarpedOccupancyAuc': 0.8652694, 'vehiclesFlowWarpedOccupancyIou': 0.8422786}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.8656258, 'vehiclesObservedIou': 0.49780345, 'vehiclesOccludedAuc': 0.024780907, 'vehiclesOccludedIou': 0.009126447, 'vehiclesFlowEpe': 4.538422, 'vehiclesFlowWarpedOccupancyAuc': 0.6915912, 'vehiclesFlowWarpedOccupancyIou': 0.56607395}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9170833, 'vehiclesObservedIou': 0.6155823, 'vehiclesOccludedAuc': 0.046239857, 'vehiclesOccludedIou': 0.016859505, 'vehiclesFlowEpe': 2.3767896, 'vehiclesFlowWarpedOccupancyAuc': 0.72731537, 'vehiclesFlowWarpedOccupancyIou': 0.64082974}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8523092, 'vehiclesObservedIou': 0.5915557, 'vehiclesOccludedAuc': 0.43464246, 'vehiclesOccludedIou': 0.1293065, 'vehiclesFlowEpe': 8.458626, 'vehiclesFlowWarpedOccupancyAuc': 0.70208716, 'vehiclesFlowWarpedOccupancyIou': 0.6164013}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.6934186, 'vehiclesObservedIou': 0.35068023, 'vehiclesOccludedAuc': 0.070510596, 'vehiclesOccludedIou': 0.011369834, 'vehiclesFlowEpe': 6.2491674, 'vehiclesFlowWarpedOccupancyAuc': 0.5410789, 'vehiclesFlowWarpedOccupancyIou': 0.3768829}
DataLossError encountered. Skipping the corrupted record.
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.96639115, 'vehiclesObservedIou': 0.8031819, 'vehiclesOccludedAuc': 0.16527979, 'vehiclesOccludedIou': 0.044999328, 'vehiclesFlowEpe': 6.0882225, 'vehiclesFlowWarpedOccupancyAuc': 0.8652694, 'vehiclesFlowWarpedOccupancyIou': 0.8422786}
Average Time: 0.0012 seconds, Average Metrics: {'vehiclesObservedAuc': 0.8589656099999999, 'vehiclesObservedIou': 0.571760716, 'vehiclesOccludedAuc': 0.14829072199999999, 'vehiclesOccludedIou': 0.042332322799999995, 'vehiclesFlowEpe': 5.542245500000001, 'vehiclesFlowWarpedOccupancyAuc': 0.7054684059999999, 'vehiclesFlowWarpedOccupancyIou': 0.6084932980000001}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00094new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 10:58:39.560120: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:58:39.614527: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:58:39.614815: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.61017126, 'vehiclesObservedIou': 0.33213228, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.4155734, 'vehiclesFlowWarpedOccupancyAuc': 0.57061094, 'vehiclesFlowWarpedOccupancyIou': 0.4611401}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8031772, 'vehiclesObservedIou': 0.44066334, 'vehiclesOccludedAuc': 0.004959147, 'vehiclesOccludedIou': 0.0019415425, 'vehiclesFlowEpe': 4.221194, 'vehiclesFlowWarpedOccupancyAuc': 0.56931347, 'vehiclesFlowWarpedOccupancyIou': 0.4950655}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8973608, 'vehiclesObservedIou': 0.6129342, 'vehiclesOccludedAuc': 0.01150132, 'vehiclesOccludedIou': 0.0045913234, 'vehiclesFlowEpe': 7.052167, 'vehiclesFlowWarpedOccupancyAuc': 0.7254479, 'vehiclesFlowWarpedOccupancyIou': 0.72117335}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.65193284, 'vehiclesObservedIou': 0.40041164, 'vehiclesOccludedAuc': 0.46415097, 'vehiclesOccludedIou': 0.056378704, 'vehiclesFlowEpe': 2.895948, 'vehiclesFlowWarpedOccupancyAuc': 0.7414157, 'vehiclesFlowWarpedOccupancyIou': 0.5237806}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.07719033, 'vehiclesObservedIou': 0.037832506, 'vehiclesOccludedAuc': 0.0017459365, 'vehiclesOccludedIou': 0.001676268, 'vehiclesFlowEpe': 10.023077, 'vehiclesFlowWarpedOccupancyAuc': 0.12539434, 'vehiclesFlowWarpedOccupancyIou': 0.041629843}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.23522955, 'vehiclesObservedIou': 0.10517336, 'vehiclesOccludedAuc': 0.10151426, 'vehiclesOccludedIou': 0.010129706, 'vehiclesFlowEpe': 7.450357, 'vehiclesFlowWarpedOccupancyAuc': 0.29227933, 'vehiclesFlowWarpedOccupancyIou': 0.11024187}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.96473706, 'vehiclesObservedIou': 0.7387676, 'vehiclesOccludedAuc': 0.0011804476, 'vehiclesOccludedIou': 0.0008884658, 'vehiclesFlowEpe': 3.1080992, 'vehiclesFlowWarpedOccupancyAuc': 0.8585716, 'vehiclesFlowWarpedOccupancyIou': 0.819846}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9631655, 'vehiclesObservedIou': 0.73434246, 'vehiclesOccludedAuc': 0.009522154, 'vehiclesOccludedIou': 0.0038042553, 'vehiclesFlowEpe': 6.694417, 'vehiclesFlowWarpedOccupancyAuc': 0.7836557, 'vehiclesFlowWarpedOccupancyIou': 0.78086144}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.38204184, 'vehiclesObservedIou': 0.20992789, 'vehiclesOccludedAuc': 0.00019636887, 'vehiclesOccludedIou': 0.00023626546, 'vehiclesFlowEpe': 4.6461415, 'vehiclesFlowWarpedOccupancyAuc': 0.31466746, 'vehiclesFlowWarpedOccupancyIou': 0.2634697}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9138353, 'vehiclesObservedIou': 0.6717526, 'vehiclesOccludedAuc': 0.07386037, 'vehiclesOccludedIou': 0.026883252, 'vehiclesFlowEpe': 2.2798781, 'vehiclesFlowWarpedOccupancyAuc': 0.84169006, 'vehiclesFlowWarpedOccupancyIou': 0.7783124}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.71157736, 'vehiclesObservedIou': 0.36855718, 'vehiclesOccludedAuc': 0.11576932, 'vehiclesOccludedIou': 0.034826312, 'vehiclesFlowEpe': 3.1895366, 'vehiclesFlowWarpedOccupancyAuc': 0.6503939, 'vehiclesFlowWarpedOccupancyIou': 0.43736935}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.59178483, 'vehiclesObservedIou': 0.4302025, 'vehiclesOccludedAuc': 0.07083389, 'vehiclesOccludedIou': 0.013046787, 'vehiclesFlowEpe': 5.7841854, 'vehiclesFlowWarpedOccupancyAuc': 0.6449926, 'vehiclesFlowWarpedOccupancyIou': 0.5130435}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.81696534, 'vehiclesObservedIou': 0.51946473, 'vehiclesOccludedAuc': 0.06165869, 'vehiclesOccludedIou': 0.00089803577, 'vehiclesFlowEpe': 1.9595757, 'vehiclesFlowWarpedOccupancyAuc': 0.77526325, 'vehiclesFlowWarpedOccupancyIou': 0.620854}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8056618, 'vehiclesObservedIou': 0.49360642, 'vehiclesOccludedAuc': 0.01781959, 'vehiclesOccludedIou': 0.004935774, 'vehiclesFlowEpe': 4.569399, 'vehiclesFlowWarpedOccupancyAuc': 0.6241605, 'vehiclesFlowWarpedOccupancyIou': 0.5681061}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5505763, 'vehiclesObservedIou': 0.26599044, 'vehiclesOccludedAuc': 0.0918551, 'vehiclesOccludedIou': 0.025556939, 'vehiclesFlowEpe': 3.4669344, 'vehiclesFlowWarpedOccupancyAuc': 0.58334494, 'vehiclesFlowWarpedOccupancyIou': 0.3334333}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.3337579, 'vehiclesObservedIou': 0.13984458, 'vehiclesOccludedAuc': 0.001865892, 'vehiclesOccludedIou': 0.0010412028, 'vehiclesFlowEpe': 4.1008115, 'vehiclesFlowWarpedOccupancyAuc': 0.37863117, 'vehiclesFlowWarpedOccupancyIou': 0.149759}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9155973, 'vehiclesObservedIou': 0.5749322, 'vehiclesOccludedAuc': 0.0039982377, 'vehiclesOccludedIou': 0.0023000892, 'vehiclesFlowEpe': 7.1710224, 'vehiclesFlowWarpedOccupancyAuc': 0.59769356, 'vehiclesFlowWarpedOccupancyIou': 0.5633797}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.8491449, 'vehiclesObservedIou': 0.48865107, 'vehiclesOccludedAuc': 0.013488176, 'vehiclesOccludedIou': 0.004473434, 'vehiclesFlowEpe': 10.966863, 'vehiclesFlowWarpedOccupancyAuc': 0.60709447, 'vehiclesFlowWarpedOccupancyIou': 0.49485907}
Time: 0.0014 seconds, Metrics: {'vehiclesObservedAuc': 0.13269922, 'vehiclesObservedIou': 0.04662801, 'vehiclesOccludedAuc': 0.030609785, 'vehiclesOccludedIou': 0.0063490095, 'vehiclesFlowEpe': 5.46674, 'vehiclesFlowWarpedOccupancyAuc': 0.17777233, 'vehiclesFlowWarpedOccupancyIou': 0.039210763}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.1925093, 'vehiclesObservedIou': 0.07384304, 'vehiclesOccludedAuc': 0.067928895, 'vehiclesOccludedIou': 0.0070097307, 'vehiclesFlowEpe': 3.5407343, 'vehiclesFlowWarpedOccupancyAuc': 0.2003095, 'vehiclesFlowWarpedOccupancyIou': 0.0948892}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6231318, 'vehiclesObservedIou': 0.29969752, 'vehiclesOccludedAuc': 0.19275337, 'vehiclesOccludedIou': 0.042510074, 'vehiclesFlowEpe': 3.796372, 'vehiclesFlowWarpedOccupancyAuc': 0.6098345, 'vehiclesFlowWarpedOccupancyIou': 0.3631312}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7641628, 'vehiclesObservedIou': 0.43280423, 'vehiclesOccludedAuc': 0.09877706, 'vehiclesOccludedIou': 0.025314046, 'vehiclesFlowEpe': 5.1549664, 'vehiclesFlowWarpedOccupancyAuc': 0.55721194, 'vehiclesFlowWarpedOccupancyIou': 0.43996203}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.50474405, 'vehiclesObservedIou': 0.24833946, 'vehiclesOccludedAuc': 0.03334465, 'vehiclesOccludedIou': 0.009738783, 'vehiclesFlowEpe': 4.7468805, 'vehiclesFlowWarpedOccupancyAuc': 0.54144263, 'vehiclesFlowWarpedOccupancyIou': 0.26474226}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.08348739, 'vehiclesObservedIou': 0.021159064, 'vehiclesOccludedAuc': 0.020520195, 'vehiclesOccludedIou': 0.0040481286, 'vehiclesFlowEpe': 6.626728, 'vehiclesFlowWarpedOccupancyAuc': 0.10134396, 'vehiclesFlowWarpedOccupancyIou': 0.014116232}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.82820976, 'vehiclesObservedIou': 0.49109775, 'vehiclesOccludedAuc': 0.011772351, 'vehiclesOccludedIou': 0.004835406, 'vehiclesFlowEpe': 6.37778, 'vehiclesFlowWarpedOccupancyAuc': 0.6305565, 'vehiclesFlowWarpedOccupancyIou': 0.5296403}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.94564676, 'vehiclesObservedIou': 0.68213713, 'vehiclesOccludedAuc': 0.0630186, 'vehiclesOccludedIou': 0.013941802, 'vehiclesFlowEpe': 2.2043386, 'vehiclesFlowWarpedOccupancyAuc': 0.7505838, 'vehiclesFlowWarpedOccupancyIou': 0.64572155}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.75262475, 'vehiclesObservedIou': 0.44911876, 'vehiclesOccludedAuc': 0.053568214, 'vehiclesOccludedIou': 0.017102003, 'vehiclesFlowEpe': 7.4008293, 'vehiclesFlowWarpedOccupancyAuc': 0.5822036, 'vehiclesFlowWarpedOccupancyIou': 0.5227706}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8038521, 'vehiclesObservedIou': 0.58228385, 'vehiclesOccludedAuc': 0.3552174, 'vehiclesOccludedIou': 0.029589528, 'vehiclesFlowEpe': 4.026664, 'vehiclesFlowWarpedOccupancyAuc': 0.79948866, 'vehiclesFlowWarpedOccupancyIou': 0.7105208}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8813806, 'vehiclesObservedIou': 0.6359792, 'vehiclesOccludedAuc': 0.18284307, 'vehiclesOccludedIou': 0.022939201, 'vehiclesFlowEpe': 4.467621, 'vehiclesFlowWarpedOccupancyAuc': 0.81087863, 'vehiclesFlowWarpedOccupancyIou': 0.6989884}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.25813115, 'vehiclesObservedIou': 0.1014998, 'vehiclesOccludedAuc': 0.00039027227, 'vehiclesOccludedIou': 2.6409474e-05, 'vehiclesFlowEpe': 4.8446474, 'vehiclesFlowWarpedOccupancyAuc': 0.3214808, 'vehiclesFlowWarpedOccupancyIou': 0.108262025}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.96473706, 'vehiclesObservedIou': 0.7387676, 'vehiclesOccludedAuc': 0.0011804476, 'vehiclesOccludedIou': 0.0008884658, 'vehiclesFlowEpe': 3.1080992, 'vehiclesFlowWarpedOccupancyAuc': 0.8585716, 'vehiclesFlowWarpedOccupancyIou': 0.819846}
Average Time: 0.0012 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6281495696666666, 'vehiclesObservedIou': 0.38765916033333325, 'vehiclesOccludedAuc': 0.07188879106466667, 'vehiclesOccludedIou': 0.012567082583466668, 'vehiclesFlowEpe': 5.054982723333334, 'vehiclesFlowWarpedOccupancyAuc': 0.558924258, 'vehiclesFlowWarpedOccupancyIou': 0.43694267276666665}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00016new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 10:58:58.706012: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:58:58.760666: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:58:58.760946: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.53030485, 'vehiclesObservedIou': 0.2897889, 'vehiclesOccludedAuc': 0.13659391, 'vehiclesOccludedIou': 0.03381405, 'vehiclesFlowEpe': 4.5230002, 'vehiclesFlowWarpedOccupancyAuc': 0.6206514, 'vehiclesFlowWarpedOccupancyIou': 0.38236716}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7733985, 'vehiclesObservedIou': 0.42125604, 'vehiclesOccludedAuc': 0.14984085, 'vehiclesOccludedIou': 0.04056691, 'vehiclesFlowEpe': 2.1863098, 'vehiclesFlowWarpedOccupancyAuc': 0.7075715, 'vehiclesFlowWarpedOccupancyIou': 0.49628454}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.97354925, 'vehiclesObservedIou': 0.8279132, 'vehiclesOccludedAuc': 0.47090408, 'vehiclesOccludedIou': 0.109813854, 'vehiclesFlowEpe': 4.56065, 'vehiclesFlowWarpedOccupancyAuc': 0.8541783, 'vehiclesFlowWarpedOccupancyIou': 0.86043084}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.32681713, 'vehiclesObservedIou': 0.15351309, 'vehiclesOccludedAuc': 0.1708452, 'vehiclesOccludedIou': 0.019360438, 'vehiclesFlowEpe': 16.230106, 'vehiclesFlowWarpedOccupancyAuc': 0.26821116, 'vehiclesFlowWarpedOccupancyIou': 0.17239454}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7196385, 'vehiclesObservedIou': 0.41712725, 'vehiclesOccludedAuc': 0.1277966, 'vehiclesOccludedIou': 0.0400615, 'vehiclesFlowEpe': 5.4476266, 'vehiclesFlowWarpedOccupancyAuc': 0.56922686, 'vehiclesFlowWarpedOccupancyIou': 0.45427245}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.91706914, 'vehiclesObservedIou': 0.67229074, 'vehiclesOccludedAuc': 0.03921407, 'vehiclesOccludedIou': 0.018113172, 'vehiclesFlowEpe': 2.5185866, 'vehiclesFlowWarpedOccupancyAuc': 0.8547015, 'vehiclesFlowWarpedOccupancyIou': 0.7534057}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.90826416, 'vehiclesObservedIou': 0.6451542, 'vehiclesOccludedAuc': 0.4842277, 'vehiclesOccludedIou': 0.1296002, 'vehiclesFlowEpe': 3.187593, 'vehiclesFlowWarpedOccupancyAuc': 0.81081295, 'vehiclesFlowWarpedOccupancyIou': 0.689811}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8161343, 'vehiclesObservedIou': 0.56573546, 'vehiclesOccludedAuc': 0.3627024, 'vehiclesOccludedIou': 0.05487632, 'vehiclesFlowEpe': 3.608731, 'vehiclesFlowWarpedOccupancyAuc': 0.7615094, 'vehiclesFlowWarpedOccupancyIou': 0.7070159}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.6420036, 'vehiclesObservedIou': 0.34576404, 'vehiclesOccludedAuc': 0.3886571, 'vehiclesOccludedIou': 0.0771751, 'vehiclesFlowEpe': 5.822547, 'vehiclesFlowWarpedOccupancyAuc': 0.6005024, 'vehiclesFlowWarpedOccupancyIou': 0.48249352}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.595812, 'vehiclesObservedIou': 0.2813449, 'vehiclesOccludedAuc': 0.011080291, 'vehiclesOccludedIou': 0.008379999, 'vehiclesFlowEpe': 4.6247396, 'vehiclesFlowWarpedOccupancyAuc': 0.55446845, 'vehiclesFlowWarpedOccupancyIou': 0.3198246}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.82106113, 'vehiclesObservedIou': 0.4755394, 'vehiclesOccludedAuc': 0.017595157, 'vehiclesOccludedIou': 0.005015284, 'vehiclesFlowEpe': 2.3982794, 'vehiclesFlowWarpedOccupancyAuc': 0.70635515, 'vehiclesFlowWarpedOccupancyIou': 0.5672196}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.87305236, 'vehiclesObservedIou': 0.5616956, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 1.6938019, 'vehiclesFlowWarpedOccupancyAuc': 0.8260694, 'vehiclesFlowWarpedOccupancyIou': 0.7046222}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.16477792, 'vehiclesObservedIou': 0.07515656, 'vehiclesOccludedAuc': 0.016619463, 'vehiclesOccludedIou': 0.0050227134, 'vehiclesFlowEpe': 9.533199, 'vehiclesFlowWarpedOccupancyAuc': 0.13956724, 'vehiclesFlowWarpedOccupancyIou': 0.05080862}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5428007, 'vehiclesObservedIou': 0.36453703, 'vehiclesOccludedAuc': 0.0677236, 'vehiclesOccludedIou': 0.025982125, 'vehiclesFlowEpe': 5.8723164, 'vehiclesFlowWarpedOccupancyAuc': 0.6353245, 'vehiclesFlowWarpedOccupancyIou': 0.49564233}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.52201796, 'vehiclesObservedIou': 0.2813084, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 7.277664, 'vehiclesFlowWarpedOccupancyAuc': 0.40086153, 'vehiclesFlowWarpedOccupancyIou': 0.38181177}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7434225, 'vehiclesObservedIou': 0.42605835, 'vehiclesOccludedAuc': 0.024127748, 'vehiclesOccludedIou': 0.009281325, 'vehiclesFlowEpe': 4.375331, 'vehiclesFlowWarpedOccupancyAuc': 0.6655389, 'vehiclesFlowWarpedOccupancyIou': 0.50755054}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8196764, 'vehiclesObservedIou': 0.47392344, 'vehiclesOccludedAuc': 0.0787182, 'vehiclesOccludedIou': 0.017562848, 'vehiclesFlowEpe': 2.9561543, 'vehiclesFlowWarpedOccupancyAuc': 0.6468505, 'vehiclesFlowWarpedOccupancyIou': 0.49374902}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8366539, 'vehiclesObservedIou': 0.56719285, 'vehiclesOccludedAuc': 0.01508766, 'vehiclesOccludedIou': 0.004719958, 'vehiclesFlowEpe': 2.5480027, 'vehiclesFlowWarpedOccupancyAuc': 0.77336806, 'vehiclesFlowWarpedOccupancyIou': 0.65580976}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8610902, 'vehiclesObservedIou': 0.56920916, 'vehiclesOccludedAuc': 0.07498038, 'vehiclesOccludedIou': 0.028734218, 'vehiclesFlowEpe': 5.1571803, 'vehiclesFlowWarpedOccupancyAuc': 0.6912557, 'vehiclesFlowWarpedOccupancyIou': 0.599682}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8463725, 'vehiclesObservedIou': 0.5572048, 'vehiclesOccludedAuc': 0.312715, 'vehiclesOccludedIou': 0.07555921, 'vehiclesFlowEpe': 6.4678235, 'vehiclesFlowWarpedOccupancyAuc': 0.74050623, 'vehiclesFlowWarpedOccupancyIou': 0.64344436}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7620778, 'vehiclesObservedIou': 0.48403874, 'vehiclesOccludedAuc': 0.005019988, 'vehiclesOccludedIou': 0.0017223147, 'vehiclesFlowEpe': 5.569319, 'vehiclesFlowWarpedOccupancyAuc': 0.6515696, 'vehiclesFlowWarpedOccupancyIou': 0.5618974}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.34465843, 'vehiclesObservedIou': 0.15453155, 'vehiclesOccludedAuc': 0.025536308, 'vehiclesOccludedIou': 0.0061280467, 'vehiclesFlowEpe': 2.893159, 'vehiclesFlowWarpedOccupancyAuc': 0.43222505, 'vehiclesFlowWarpedOccupancyIou': 0.19539219}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.64878684, 'vehiclesObservedIou': 0.3934557, 'vehiclesOccludedAuc': 0.25536352, 'vehiclesOccludedIou': 0.026620995, 'vehiclesFlowEpe': 6.813831, 'vehiclesFlowWarpedOccupancyAuc': 0.6339618, 'vehiclesFlowWarpedOccupancyIou': 0.55052364}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.63087475, 'vehiclesObservedIou': 0.3192434, 'vehiclesOccludedAuc': 0.006067834, 'vehiclesOccludedIou': 0.0029062047, 'vehiclesFlowEpe': 4.5538864, 'vehiclesFlowWarpedOccupancyAuc': 0.48343816, 'vehiclesFlowWarpedOccupancyIou': 0.38194576}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.23348086, 'vehiclesObservedIou': 0.1151103, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 5.5618176, 'vehiclesFlowWarpedOccupancyAuc': 0.37599394, 'vehiclesFlowWarpedOccupancyIou': 0.1304009}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.73412406, 'vehiclesObservedIou': 0.4985511, 'vehiclesOccludedAuc': 0.0050413515, 'vehiclesOccludedIou': 0.0027400348, 'vehiclesFlowEpe': 4.8512654, 'vehiclesFlowWarpedOccupancyAuc': 0.66153514, 'vehiclesFlowWarpedOccupancyIou': 0.61303174}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7107711, 'vehiclesObservedIou': 0.40180457, 'vehiclesOccludedAuc': 0.016232042, 'vehiclesOccludedIou': 0.005950517, 'vehiclesFlowEpe': 6.176432, 'vehiclesFlowWarpedOccupancyAuc': 0.556674, 'vehiclesFlowWarpedOccupancyIou': 0.47497877}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.98733, 'vehiclesObservedIou': 0.83317125, 'vehiclesOccludedAuc': 0.2217995, 'vehiclesOccludedIou': 0.021816675, 'vehiclesFlowEpe': 1.9614702, 'vehiclesFlowWarpedOccupancyAuc': 0.8951092, 'vehiclesFlowWarpedOccupancyIou': 0.89912146}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.98393714, 'vehiclesObservedIou': 0.7588878, 'vehiclesOccludedAuc': 0.055924997, 'vehiclesOccludedIou': 0.013940392, 'vehiclesFlowEpe': 1.8392153, 'vehiclesFlowWarpedOccupancyAuc': 0.8428507, 'vehiclesFlowWarpedOccupancyIou': 0.79149765}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.86935955, 'vehiclesObservedIou': 0.5461887, 'vehiclesOccludedAuc': 0.091946475, 'vehiclesOccludedIou': 0.022771055, 'vehiclesFlowEpe': 3.2787795, 'vehiclesFlowWarpedOccupancyAuc': 0.7501942, 'vehiclesFlowWarpedOccupancyIou': 0.58452266}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.47317305, 'vehiclesObservedIou': 0.28059897, 'vehiclesOccludedAuc': 0.5728422, 'vehiclesOccludedIou': 0.08170892, 'vehiclesFlowEpe': 4.5255547, 'vehiclesFlowWarpedOccupancyAuc': 0.65352994, 'vehiclesFlowWarpedOccupancyIou': 0.34159046}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.19048212, 'vehiclesObservedIou': 0.08037155, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 1.9472601, 'vehiclesFlowWarpedOccupancyAuc': 0.258914, 'vehiclesFlowWarpedOccupancyIou': 0.10468194}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8938024, 'vehiclesObservedIou': 0.68832004, 'vehiclesOccludedAuc': 0.3717045, 'vehiclesOccludedIou': 0.04890192, 'vehiclesFlowEpe': 2.999823, 'vehiclesFlowWarpedOccupancyAuc': 0.80148566, 'vehiclesFlowWarpedOccupancyIou': 0.74395925}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.98733, 'vehiclesObservedIou': 0.83317125, 'vehiclesOccludedAuc': 0.2217995, 'vehiclesOccludedIou': 0.021816675, 'vehiclesFlowEpe': 1.9614702, 'vehiclesFlowWarpedOccupancyAuc': 0.8951092, 'vehiclesFlowWarpedOccupancyIou': 0.89912146}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6877810636363635, 'vehiclesObservedIou': 0.44018142666666665, 'vehiclesOccludedAuc': 0.13869418559090907, 'vehiclesOccludedIou': 0.02844988785757576, 'vehiclesFlowEpe': 4.6654986515151515, 'vehiclesFlowWarpedOccupancyAuc': 0.6310609854545454, 'vehiclesFlowWarpedOccupancyIou': 0.5088540687878788}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00056new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 10:59:19.757550: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:59:19.841420: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:59:19.841707: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.1830731, 'vehiclesObservedIou': 0.07892915, 'vehiclesOccludedAuc': 0.0036955443, 'vehiclesOccludedIou': 0.0009104441, 'vehiclesFlowEpe': 2.2198517, 'vehiclesFlowWarpedOccupancyAuc': 0.32701755, 'vehiclesFlowWarpedOccupancyIou': 0.066846214}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.76236033, 'vehiclesObservedIou': 0.37240973, 'vehiclesOccludedAuc': 0.0027017922, 'vehiclesOccludedIou': 0.0017989951, 'vehiclesFlowEpe': 5.453412, 'vehiclesFlowWarpedOccupancyAuc': 0.5238443, 'vehiclesFlowWarpedOccupancyIou': 0.40686888}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.44805178, 'vehiclesObservedIou': 0.18441992, 'vehiclesOccludedAuc': 0.0104610445, 'vehiclesOccludedIou': 0.0020634648, 'vehiclesFlowEpe': 3.4480824, 'vehiclesFlowWarpedOccupancyAuc': 0.54633796, 'vehiclesFlowWarpedOccupancyIou': 0.23658967}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9502503, 'vehiclesObservedIou': 0.64564484, 'vehiclesOccludedAuc': 0.004587814, 'vehiclesOccludedIou': 0.0018352021, 'vehiclesFlowEpe': 3.4843416, 'vehiclesFlowWarpedOccupancyAuc': 0.7882145, 'vehiclesFlowWarpedOccupancyIou': 0.6869971}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7995411, 'vehiclesObservedIou': 0.46207786, 'vehiclesOccludedAuc': 0.0030951158, 'vehiclesOccludedIou': 0.0012864913, 'vehiclesFlowEpe': 13.700411, 'vehiclesFlowWarpedOccupancyAuc': 0.51983917, 'vehiclesFlowWarpedOccupancyIou': 0.48895347}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.68196017, 'vehiclesObservedIou': 0.37730375, 'vehiclesOccludedAuc': 0.008649005, 'vehiclesOccludedIou': 0.0050083986, 'vehiclesFlowEpe': 4.7659674, 'vehiclesFlowWarpedOccupancyAuc': 0.59875005, 'vehiclesFlowWarpedOccupancyIou': 0.48423567}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5598262, 'vehiclesObservedIou': 0.29108423, 'vehiclesOccludedAuc': 0.21303892, 'vehiclesOccludedIou': 0.014494404, 'vehiclesFlowEpe': 3.3856337, 'vehiclesFlowWarpedOccupancyAuc': 0.5419471, 'vehiclesFlowWarpedOccupancyIou': 0.32350308}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.6075582, 'vehiclesObservedIou': 0.2651796, 'vehiclesOccludedAuc': 0.097230196, 'vehiclesOccludedIou': 0.020396767, 'vehiclesFlowEpe': 4.6754603, 'vehiclesFlowWarpedOccupancyAuc': 0.5772021, 'vehiclesFlowWarpedOccupancyIou': 0.34124035}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.47182143, 'vehiclesObservedIou': 0.26971316, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.1501029, 'vehiclesFlowWarpedOccupancyAuc': 0.56947076, 'vehiclesFlowWarpedOccupancyIou': 0.31498665}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8679491, 'vehiclesObservedIou': 0.4802067, 'vehiclesOccludedAuc': 0.020699952, 'vehiclesOccludedIou': 0.0063143326, 'vehiclesFlowEpe': 2.506787, 'vehiclesFlowWarpedOccupancyAuc': 0.6965952, 'vehiclesFlowWarpedOccupancyIou': 0.5193398}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7172203, 'vehiclesObservedIou': 0.43933702, 'vehiclesOccludedAuc': 0.13583064, 'vehiclesOccludedIou': 0.029310944, 'vehiclesFlowEpe': 6.373538, 'vehiclesFlowWarpedOccupancyAuc': 0.50062996, 'vehiclesFlowWarpedOccupancyIou': 0.44391206}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.67409855, 'vehiclesObservedIou': 0.42106175, 'vehiclesOccludedAuc': 0.06768398, 'vehiclesOccludedIou': 0.022095961, 'vehiclesFlowEpe': 3.3862166, 'vehiclesFlowWarpedOccupancyAuc': 0.6587963, 'vehiclesFlowWarpedOccupancyIou': 0.4894604}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.94338435, 'vehiclesObservedIou': 0.74235576, 'vehiclesOccludedAuc': 0.037371617, 'vehiclesOccludedIou': 0.013945099, 'vehiclesFlowEpe': 3.7642586, 'vehiclesFlowWarpedOccupancyAuc': 0.82000995, 'vehiclesFlowWarpedOccupancyIou': 0.78656924}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.93485683, 'vehiclesObservedIou': 0.6966556, 'vehiclesOccludedAuc': 0.11897107, 'vehiclesOccludedIou': 0.036350757, 'vehiclesFlowEpe': 8.304982, 'vehiclesFlowWarpedOccupancyAuc': 0.82664007, 'vehiclesFlowWarpedOccupancyIou': 0.8089431}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.54626656, 'vehiclesObservedIou': 0.329487, 'vehiclesOccludedAuc': 0.24410988, 'vehiclesOccludedIou': 0.06256144, 'vehiclesFlowEpe': 4.7316127, 'vehiclesFlowWarpedOccupancyAuc': 0.6387146, 'vehiclesFlowWarpedOccupancyIou': 0.5160407}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.64658785, 'vehiclesObservedIou': 0.37056693, 'vehiclesOccludedAuc': 0.0066186385, 'vehiclesOccludedIou': 0.0021767828, 'vehiclesFlowEpe': 2.9600935, 'vehiclesFlowWarpedOccupancyAuc': 0.6531373, 'vehiclesFlowWarpedOccupancyIou': 0.46846738}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9349251, 'vehiclesObservedIou': 0.6001113, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 1.5342565, 'vehiclesFlowWarpedOccupancyAuc': 0.8088269, 'vehiclesFlowWarpedOccupancyIou': 0.69922954}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7674101, 'vehiclesObservedIou': 0.40337184, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 6.594907, 'vehiclesFlowWarpedOccupancyAuc': 0.5819135, 'vehiclesFlowWarpedOccupancyIou': 0.535147}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.887479, 'vehiclesObservedIou': 0.71323484, 'vehiclesOccludedAuc': 0.096252285, 'vehiclesOccludedIou': 0.013699368, 'vehiclesFlowEpe': 3.5618892, 'vehiclesFlowWarpedOccupancyAuc': 0.8160553, 'vehiclesFlowWarpedOccupancyIou': 0.7942734}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.74889356, 'vehiclesObservedIou': 0.37789726, 'vehiclesOccludedAuc': 0.08593917, 'vehiclesOccludedIou': 0.015554376, 'vehiclesFlowEpe': 4.702632, 'vehiclesFlowWarpedOccupancyAuc': 0.59354746, 'vehiclesFlowWarpedOccupancyIou': 0.47375506}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8675003, 'vehiclesObservedIou': 0.54015875, 'vehiclesOccludedAuc': 0.044556826, 'vehiclesOccludedIou': 0.011800019, 'vehiclesFlowEpe': 3.0537457, 'vehiclesFlowWarpedOccupancyAuc': 0.7526864, 'vehiclesFlowWarpedOccupancyIou': 0.6079489}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.26865554, 'vehiclesObservedIou': 0.13054536, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 4.571582, 'vehiclesFlowWarpedOccupancyAuc': 0.39396486, 'vehiclesFlowWarpedOccupancyIou': 0.1542872}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.8736623, 'vehiclesObservedIou': 0.47700515, 'vehiclesOccludedAuc': 0.029910259, 'vehiclesOccludedIou': 0.01272723, 'vehiclesFlowEpe': 4.1541977, 'vehiclesFlowWarpedOccupancyAuc': 0.7259876, 'vehiclesFlowWarpedOccupancyIou': 0.5438261}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.42180738, 'vehiclesObservedIou': 0.20299457, 'vehiclesOccludedAuc': 0.104271345, 'vehiclesOccludedIou': 0.022951454, 'vehiclesFlowEpe': 6.5833893, 'vehiclesFlowWarpedOccupancyAuc': 0.37697405, 'vehiclesFlowWarpedOccupancyIou': 0.17546508}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8787346, 'vehiclesObservedIou': 0.65802526, 'vehiclesOccludedAuc': 0.042488564, 'vehiclesOccludedIou': 0.015931081, 'vehiclesFlowEpe': 2.2211323, 'vehiclesFlowWarpedOccupancyAuc': 0.8262185, 'vehiclesFlowWarpedOccupancyIou': 0.7414487}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.35944957, 'vehiclesObservedIou': 0.19439952, 'vehiclesOccludedAuc': 0.007295322, 'vehiclesOccludedIou': 0.00063604454, 'vehiclesFlowEpe': 4.1155925, 'vehiclesFlowWarpedOccupancyAuc': 0.61559135, 'vehiclesFlowWarpedOccupancyIou': 0.17488171}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.9502503, 'vehiclesObservedIou': 0.64564484, 'vehiclesOccludedAuc': 0.004587814, 'vehiclesOccludedIou': 0.0018352021, 'vehiclesFlowEpe': 3.4843416, 'vehiclesFlowWarpedOccupancyAuc': 0.7882145, 'vehiclesFlowWarpedOccupancyIou': 0.6869971}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6847432153846155, 'vehiclesObservedIou': 0.41246834038461533, 'vehiclesOccludedAuc': 0.053286883857692306, 'vehiclesOccludedIou': 0.012071117536153845, 'vehiclesFlowEpe': 4.477079830769231, 'vehiclesFlowWarpedOccupancyAuc': 0.6261120303846154, 'vehiclesFlowWarpedOccupancyIou': 0.4724314020769231}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00027new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 10:59:36.370428: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:59:36.424556: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:59:36.424843: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.29884955, 'vehiclesObservedIou': 0.15835835, 'vehiclesOccludedAuc': 0.0006524356, 'vehiclesOccludedIou': 4.669223e-05, 'vehiclesFlowEpe': 8.793478, 'vehiclesFlowWarpedOccupancyAuc': 0.18693168, 'vehiclesFlowWarpedOccupancyIou': 0.17880611}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6986516, 'vehiclesObservedIou': 0.4171048, 'vehiclesOccludedAuc': 0.034329873, 'vehiclesOccludedIou': 0.007893196, 'vehiclesFlowEpe': 2.75194, 'vehiclesFlowWarpedOccupancyAuc': 0.6576202, 'vehiclesFlowWarpedOccupancyIou': 0.49702516}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9543043, 'vehiclesObservedIou': 0.7441421, 'vehiclesOccludedAuc': 0.13303684, 'vehiclesOccludedIou': 0.023232665, 'vehiclesFlowEpe': 3.4697049, 'vehiclesFlowWarpedOccupancyAuc': 0.8500067, 'vehiclesFlowWarpedOccupancyIou': 0.81503123}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7890173, 'vehiclesObservedIou': 0.43003213, 'vehiclesOccludedAuc': 0.23281081, 'vehiclesOccludedIou': 0.060988057, 'vehiclesFlowEpe': 3.3098564, 'vehiclesFlowWarpedOccupancyAuc': 0.63983345, 'vehiclesFlowWarpedOccupancyIou': 0.44068417}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9894353, 'vehiclesObservedIou': 0.7936301, 'vehiclesOccludedAuc': 0.1802494, 'vehiclesOccludedIou': 0.069401875, 'vehiclesFlowEpe': 1.7437755, 'vehiclesFlowWarpedOccupancyAuc': 0.84407073, 'vehiclesFlowWarpedOccupancyIou': 0.7155914}
Time: 0.0014 seconds, Metrics: {'vehiclesObservedAuc': 0.72916037, 'vehiclesObservedIou': 0.4294923, 'vehiclesOccludedAuc': 0.020062648, 'vehiclesOccludedIou': 0.003877867, 'vehiclesFlowEpe': 3.1983514, 'vehiclesFlowWarpedOccupancyAuc': 0.635793, 'vehiclesFlowWarpedOccupancyIou': 0.4734942}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.85144037, 'vehiclesObservedIou': 0.48257837, 'vehiclesOccludedAuc': 0.0068536946, 'vehiclesOccludedIou': 0.003149302, 'vehiclesFlowEpe': 4.575711, 'vehiclesFlowWarpedOccupancyAuc': 0.6529877, 'vehiclesFlowWarpedOccupancyIou': 0.58518183}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.91879797, 'vehiclesObservedIou': 0.64561325, 'vehiclesOccludedAuc': 0.0014022677, 'vehiclesOccludedIou': 0.00070864416, 'vehiclesFlowEpe': 4.371256, 'vehiclesFlowWarpedOccupancyAuc': 0.7997966, 'vehiclesFlowWarpedOccupancyIou': 0.7589009}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.85100144, 'vehiclesObservedIou': 0.54831964, 'vehiclesOccludedAuc': 0.029235734, 'vehiclesOccludedIou': 0.00481301, 'vehiclesFlowEpe': 4.297408, 'vehiclesFlowWarpedOccupancyAuc': 0.7420844, 'vehiclesFlowWarpedOccupancyIou': 0.67038065}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.94269407, 'vehiclesObservedIou': 0.7000118, 'vehiclesOccludedAuc': 0.0023330166, 'vehiclesOccludedIou': 0.0012582612, 'vehiclesFlowEpe': 4.5860248, 'vehiclesFlowWarpedOccupancyAuc': 0.8582744, 'vehiclesFlowWarpedOccupancyIou': 0.7733943}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.93044925, 'vehiclesObservedIou': 0.7329745, 'vehiclesOccludedAuc': 0.039213005, 'vehiclesOccludedIou': 0.013347777, 'vehiclesFlowEpe': 1.8639473, 'vehiclesFlowWarpedOccupancyAuc': 0.8406047, 'vehiclesFlowWarpedOccupancyIou': 0.728909}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8162384, 'vehiclesObservedIou': 0.45814276, 'vehiclesOccludedAuc': 0.0012484429, 'vehiclesOccludedIou': 4.832936e-05, 'vehiclesFlowEpe': 2.4856305, 'vehiclesFlowWarpedOccupancyAuc': 0.71078426, 'vehiclesFlowWarpedOccupancyIou': 0.5075458}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.87601304, 'vehiclesObservedIou': 0.59942335, 'vehiclesOccludedAuc': 0.15852633, 'vehiclesOccludedIou': 0.053790733, 'vehiclesFlowEpe': 2.2761917, 'vehiclesFlowWarpedOccupancyAuc': 0.83634573, 'vehiclesFlowWarpedOccupancyIou': 0.72520053}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9544969, 'vehiclesObservedIou': 0.7641261, 'vehiclesOccludedAuc': 0.06324787, 'vehiclesOccludedIou': 0.02863743, 'vehiclesFlowEpe': 3.9723845, 'vehiclesFlowWarpedOccupancyAuc': 0.83464706, 'vehiclesFlowWarpedOccupancyIou': 0.8214067}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.6578917, 'vehiclesObservedIou': 0.31031013, 'vehiclesOccludedAuc': 0.003400967, 'vehiclesOccludedIou': 0.0013247208, 'vehiclesFlowEpe': 6.7606354, 'vehiclesFlowWarpedOccupancyAuc': 0.43448466, 'vehiclesFlowWarpedOccupancyIou': 0.35155648}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.42750564, 'vehiclesObservedIou': 0.2046098, 'vehiclesOccludedAuc': 0.07148444, 'vehiclesOccludedIou': 0.012720138, 'vehiclesFlowEpe': 8.807207, 'vehiclesFlowWarpedOccupancyAuc': 0.34817135, 'vehiclesFlowWarpedOccupancyIou': 0.18141684}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.15898596, 'vehiclesObservedIou': 0.069309995, 'vehiclesOccludedAuc': 0.021100176, 'vehiclesOccludedIou': 0.00516733, 'vehiclesFlowEpe': 5.8990107, 'vehiclesFlowWarpedOccupancyAuc': 0.28342202, 'vehiclesFlowWarpedOccupancyIou': 0.08043336}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8393952, 'vehiclesObservedIou': 0.51984346, 'vehiclesOccludedAuc': 0.008312166, 'vehiclesOccludedIou': 0.0037499862, 'vehiclesFlowEpe': 6.2825885, 'vehiclesFlowWarpedOccupancyAuc': 0.6726674, 'vehiclesFlowWarpedOccupancyIou': 0.57825303}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7303865, 'vehiclesObservedIou': 0.32146072, 'vehiclesOccludedAuc': 0.040026437, 'vehiclesOccludedIou': 0.009123011, 'vehiclesFlowEpe': 3.6118202, 'vehiclesFlowWarpedOccupancyAuc': 0.48939577, 'vehiclesFlowWarpedOccupancyIou': 0.4406189}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.82838374, 'vehiclesObservedIou': 0.4424229, 'vehiclesOccludedAuc': 0.044999532, 'vehiclesOccludedIou': 0.01194307, 'vehiclesFlowEpe': 2.4990494, 'vehiclesFlowWarpedOccupancyAuc': 0.7107107, 'vehiclesFlowWarpedOccupancyIou': 0.5309799}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.9097001, 'vehiclesObservedIou': 0.625334, 'vehiclesOccludedAuc': 0.019693349, 'vehiclesOccludedIou': 0.005849351, 'vehiclesFlowEpe': 1.747628, 'vehiclesFlowWarpedOccupancyAuc': 0.8126765, 'vehiclesFlowWarpedOccupancyIou': 0.7142418}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.76942426, 'vehiclesObservedIou': 0.5473506, 'vehiclesOccludedAuc': 0.060057696, 'vehiclesOccludedIou': 0.024160031, 'vehiclesFlowEpe': 4.74383, 'vehiclesFlowWarpedOccupancyAuc': 0.7749414, 'vehiclesFlowWarpedOccupancyIou': 0.70942783}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8824442, 'vehiclesObservedIou': 0.58901703, 'vehiclesOccludedAuc': 0.21523899, 'vehiclesOccludedIou': 0.050739318, 'vehiclesFlowEpe': 3.5023186, 'vehiclesFlowWarpedOccupancyAuc': 0.8114524, 'vehiclesFlowWarpedOccupancyIou': 0.69533795}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.13150282, 'vehiclesObservedIou': 0.06075136, 'vehiclesOccludedAuc': 0.0040079555, 'vehiclesOccludedIou': 0.0023393477, 'vehiclesFlowEpe': 6.489015, 'vehiclesFlowWarpedOccupancyAuc': 0.26248664, 'vehiclesFlowWarpedOccupancyIou': 0.056508996}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.91559494, 'vehiclesObservedIou': 0.6488048, 'vehiclesOccludedAuc': 0.026118606, 'vehiclesOccludedIou': 0.01297099, 'vehiclesFlowEpe': 2.6669436, 'vehiclesFlowWarpedOccupancyAuc': 0.76766896, 'vehiclesFlowWarpedOccupancyIou': 0.6707867}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.6598412, 'vehiclesObservedIou': 0.39417917, 'vehiclesOccludedAuc': 0.20139503, 'vehiclesOccludedIou': 0.06434638, 'vehiclesFlowEpe': 4.234607, 'vehiclesFlowWarpedOccupancyAuc': 0.6501771, 'vehiclesFlowWarpedOccupancyIou': 0.5540405}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8297424, 'vehiclesObservedIou': 0.5054322, 'vehiclesOccludedAuc': 0.013989213, 'vehiclesOccludedIou': 0.0048544505, 'vehiclesFlowEpe': 3.242425, 'vehiclesFlowWarpedOccupancyAuc': 0.66778773, 'vehiclesFlowWarpedOccupancyIou': 0.5963224}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.3026574, 'vehiclesObservedIou': 0.16150044, 'vehiclesOccludedAuc': 0.017501289, 'vehiclesOccludedIou': 0.004302166, 'vehiclesFlowEpe': 5.4695005, 'vehiclesFlowWarpedOccupancyAuc': 0.3927773, 'vehiclesFlowWarpedOccupancyIou': 0.15270448}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.88278127, 'vehiclesObservedIou': 0.53560776, 'vehiclesOccludedAuc': 0.0014482767, 'vehiclesOccludedIou': 0.0014374612, 'vehiclesFlowEpe': 4.2064266, 'vehiclesFlowWarpedOccupancyAuc': 0.72572565, 'vehiclesFlowWarpedOccupancyIou': 0.64938366}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.73417985, 'vehiclesObservedIou': 0.42130846, 'vehiclesOccludedAuc': 0.06421781, 'vehiclesOccludedIou': 0.024788484, 'vehiclesFlowEpe': 4.045182, 'vehiclesFlowWarpedOccupancyAuc': 0.6389986, 'vehiclesFlowWarpedOccupancyIou': 0.49798}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8097242, 'vehiclesObservedIou': 0.45798653, 'vehiclesOccludedAuc': 0.35817608, 'vehiclesOccludedIou': 0.09759438, 'vehiclesFlowEpe': 3.1732252, 'vehiclesFlowWarpedOccupancyAuc': 0.6452262, 'vehiclesFlowWarpedOccupancyIou': 0.5105372}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.9894353, 'vehiclesObservedIou': 0.7936301, 'vehiclesOccludedAuc': 0.1802494, 'vehiclesOccludedIou': 0.069401875, 'vehiclesFlowEpe': 1.7437755, 'vehiclesFlowWarpedOccupancyAuc': 0.84407073, 'vehiclesFlowWarpedOccupancyIou': 0.7155914}
Average Time: 0.0012 seconds, Average Metrics: {'vehiclesObservedAuc': 0.7442158464516129, 'vehiclesObservedIou': 0.4748122227419354, 'vehiclesOccludedAuc': 0.06691517356774193, 'vehiclesOccludedIou': 0.019632401753225802, 'vehiclesFlowEpe': 4.163776538709676, 'vehiclesFlowWarpedOccupancyAuc': 0.6509209996774195, 'vehiclesFlowWarpedOccupancyIou': 0.5374865163225807}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00071new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 10:59:56.706727: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:59:56.761285: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 10:59:56.761574: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9498644, 'vehiclesObservedIou': 0.68479973, 'vehiclesOccludedAuc': 0.00023436357, 'vehiclesOccludedIou': 0.00024053283, 'vehiclesFlowEpe': 2.9194336, 'vehiclesFlowWarpedOccupancyAuc': 0.8013155, 'vehiclesFlowWarpedOccupancyIou': 0.7990416}
Time: 0.0014 seconds, Metrics: {'vehiclesObservedAuc': 0.84336215, 'vehiclesObservedIou': 0.47277585, 'vehiclesOccludedAuc': 0.35513386, 'vehiclesOccludedIou': 0.05024127, 'vehiclesFlowEpe': 4.2809863, 'vehiclesFlowWarpedOccupancyAuc': 0.6471379, 'vehiclesFlowWarpedOccupancyIou': 0.49106574}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.26360533, 'vehiclesObservedIou': 0.114522964, 'vehiclesOccludedAuc': 0.055145282, 'vehiclesOccludedIou': 0.02118884, 'vehiclesFlowEpe': 7.409006, 'vehiclesFlowWarpedOccupancyAuc': 0.28346348, 'vehiclesFlowWarpedOccupancyIou': 0.08523157}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.65507907, 'vehiclesObservedIou': 0.31961784, 'vehiclesOccludedAuc': 0.0029096454, 'vehiclesOccludedIou': 0.00016022121, 'vehiclesFlowEpe': 4.314173, 'vehiclesFlowWarpedOccupancyAuc': 0.58688486, 'vehiclesFlowWarpedOccupancyIou': 0.3604616}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.19097178, 'vehiclesObservedIou': 0.09576673, 'vehiclesOccludedAuc': 0.16140725, 'vehiclesOccludedIou': 0.040089536, 'vehiclesFlowEpe': 6.1949797, 'vehiclesFlowWarpedOccupancyAuc': 0.2726081, 'vehiclesFlowWarpedOccupancyIou': 0.18782167}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.84000194, 'vehiclesObservedIou': 0.5144211, 'vehiclesOccludedAuc': 0.002447502, 'vehiclesOccludedIou': 0.0015491366, 'vehiclesFlowEpe': 2.0375292, 'vehiclesFlowWarpedOccupancyAuc': 0.77732205, 'vehiclesFlowWarpedOccupancyIou': 0.6113479}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6843717, 'vehiclesObservedIou': 0.35789078, 'vehiclesOccludedAuc': 0.37247604, 'vehiclesOccludedIou': 0.035526626, 'vehiclesFlowEpe': 5.2892504, 'vehiclesFlowWarpedOccupancyAuc': 0.49094963, 'vehiclesFlowWarpedOccupancyIou': 0.4291657}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.80275303, 'vehiclesObservedIou': 0.48841283, 'vehiclesOccludedAuc': 0.0010925737, 'vehiclesOccludedIou': 0.0009239007, 'vehiclesFlowEpe': 3.9784532, 'vehiclesFlowWarpedOccupancyAuc': 0.65891844, 'vehiclesFlowWarpedOccupancyIou': 0.5625902}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.80984426, 'vehiclesObservedIou': 0.52584267, 'vehiclesOccludedAuc': 0.004544439, 'vehiclesOccludedIou': 0.0044944505, 'vehiclesFlowEpe': 6.6493, 'vehiclesFlowWarpedOccupancyAuc': 0.5743933, 'vehiclesFlowWarpedOccupancyIou': 0.5664324}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7195527, 'vehiclesObservedIou': 0.40172204, 'vehiclesOccludedAuc': 0.19709824, 'vehiclesOccludedIou': 0.042901434, 'vehiclesFlowEpe': 7.4799275, 'vehiclesFlowWarpedOccupancyAuc': 0.51385313, 'vehiclesFlowWarpedOccupancyIou': 0.4191435}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.72148263, 'vehiclesObservedIou': 0.43102205, 'vehiclesOccludedAuc': 0.063547656, 'vehiclesOccludedIou': 0.016555052, 'vehiclesFlowEpe': 3.7713325, 'vehiclesFlowWarpedOccupancyAuc': 0.7086827, 'vehiclesFlowWarpedOccupancyIou': 0.5841783}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.47228265, 'vehiclesObservedIou': 0.27538398, 'vehiclesOccludedAuc': 0.00041817405, 'vehiclesOccludedIou': 0.00069989846, 'vehiclesFlowEpe': 11.833366, 'vehiclesFlowWarpedOccupancyAuc': 0.2717687, 'vehiclesFlowWarpedOccupancyIou': 0.27975917}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.51972127, 'vehiclesObservedIou': 0.24217883, 'vehiclesOccludedAuc': 0.108504005, 'vehiclesOccludedIou': 0.013506381, 'vehiclesFlowEpe': 4.0360637, 'vehiclesFlowWarpedOccupancyAuc': 0.5638144, 'vehiclesFlowWarpedOccupancyIou': 0.2427597}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.47001278, 'vehiclesObservedIou': 0.22981063, 'vehiclesOccludedAuc': 0.07859586, 'vehiclesOccludedIou': 0.017792387, 'vehiclesFlowEpe': 6.0603952, 'vehiclesFlowWarpedOccupancyAuc': 0.45294303, 'vehiclesFlowWarpedOccupancyIou': 0.2452926}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.6907922, 'vehiclesObservedIou': 0.28662977, 'vehiclesOccludedAuc': 0.013300098, 'vehiclesOccludedIou': 0.0047102417, 'vehiclesFlowEpe': 3.374672, 'vehiclesFlowWarpedOccupancyAuc': 0.63399625, 'vehiclesFlowWarpedOccupancyIou': 0.33989608}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.95604223, 'vehiclesObservedIou': 0.70408076, 'vehiclesOccludedAuc': 0.0060066236, 'vehiclesOccludedIou': 0.0016135698, 'vehiclesFlowEpe': 2.543199, 'vehiclesFlowWarpedOccupancyAuc': 0.85035354, 'vehiclesFlowWarpedOccupancyIou': 0.8003016}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7007932, 'vehiclesObservedIou': 0.33206066, 'vehiclesOccludedAuc': 0.002341743, 'vehiclesOccludedIou': 0.001057815, 'vehiclesFlowEpe': 2.7782257, 'vehiclesFlowWarpedOccupancyAuc': 0.6759338, 'vehiclesFlowWarpedOccupancyIou': 0.41051424}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.67947924, 'vehiclesObservedIou': 0.33706042, 'vehiclesOccludedAuc': 0.16789463, 'vehiclesOccludedIou': 0.025185766, 'vehiclesFlowEpe': 8.850249, 'vehiclesFlowWarpedOccupancyAuc': 0.5019903, 'vehiclesFlowWarpedOccupancyIou': 0.40649712}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.81084096, 'vehiclesObservedIou': 0.5552747, 'vehiclesOccludedAuc': 0.0354995, 'vehiclesOccludedIou': 0.010931924, 'vehiclesFlowEpe': 3.563032, 'vehiclesFlowWarpedOccupancyAuc': 0.7318427, 'vehiclesFlowWarpedOccupancyIou': 0.65341365}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6499586, 'vehiclesObservedIou': 0.304781, 'vehiclesOccludedAuc': 0.073894486, 'vehiclesOccludedIou': 0.020415695, 'vehiclesFlowEpe': 3.1122785, 'vehiclesFlowWarpedOccupancyAuc': 0.6132657, 'vehiclesFlowWarpedOccupancyIou': 0.34952998}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8189053, 'vehiclesObservedIou': 0.4735183, 'vehiclesOccludedAuc': 0.03130387, 'vehiclesOccludedIou': 0.0070946333, 'vehiclesFlowEpe': 7.3627257, 'vehiclesFlowWarpedOccupancyAuc': 0.5401535, 'vehiclesFlowWarpedOccupancyIou': 0.50099355}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6034861, 'vehiclesObservedIou': 0.31433433, 'vehiclesOccludedAuc': 0.22783403, 'vehiclesOccludedIou': 0.03953927, 'vehiclesFlowEpe': 4.341705, 'vehiclesFlowWarpedOccupancyAuc': 0.60541546, 'vehiclesFlowWarpedOccupancyIou': 0.41521138}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9043205, 'vehiclesObservedIou': 0.60363644, 'vehiclesOccludedAuc': 0.0011431688, 'vehiclesOccludedIou': 0.0004062234, 'vehiclesFlowEpe': 2.1742759, 'vehiclesFlowWarpedOccupancyAuc': 0.8346991, 'vehiclesFlowWarpedOccupancyIou': 0.6838895}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.76635325, 'vehiclesObservedIou': 0.46483615, 'vehiclesOccludedAuc': 0.30016318, 'vehiclesOccludedIou': 0.067284465, 'vehiclesFlowEpe': 3.4013908, 'vehiclesFlowWarpedOccupancyAuc': 0.664886, 'vehiclesFlowWarpedOccupancyIou': 0.49036336}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8719902, 'vehiclesObservedIou': 0.44356513, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 4.3549395, 'vehiclesFlowWarpedOccupancyAuc': 0.71305585, 'vehiclesFlowWarpedOccupancyIou': 0.55922496}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.4845109, 'vehiclesObservedIou': 0.3187037, 'vehiclesOccludedAuc': 0.0016947737, 'vehiclesOccludedIou': 0.0010338075, 'vehiclesFlowEpe': 3.9293427, 'vehiclesFlowWarpedOccupancyAuc': 0.5722862, 'vehiclesFlowWarpedOccupancyIou': 0.31664833}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.95604223, 'vehiclesObservedIou': 0.70408076, 'vehiclesOccludedAuc': 0.0060066236, 'vehiclesOccludedIou': 0.0016135698, 'vehiclesFlowEpe': 2.543199, 'vehiclesFlowWarpedOccupancyAuc': 0.85035354, 'vehiclesFlowWarpedOccupancyIou': 0.8003016}
Average Time: 0.0012 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6877068603846154, 'vehiclesObservedIou': 0.3958711301538462, 'vehiclesOccludedAuc': 0.08710119207, 'vehiclesOccludedIou': 0.016351656807692308, 'vehiclesFlowEpe': 4.847701234615386, 'vehiclesFlowWarpedOccupancyAuc': 0.5977666776923077, 'vehiclesFlowWarpedOccupancyIou': 0.45349136153846153}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00101new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 11:00:13.321345: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:00:13.374403: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:00:13.374681: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.33475125, 'vehiclesObservedIou': 0.14730875, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 5.455423, 'vehiclesFlowWarpedOccupancyAuc': 0.38478032, 'vehiclesFlowWarpedOccupancyIou': 0.18751633}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.4863785, 'vehiclesObservedIou': 0.24826072, 'vehiclesOccludedAuc': 0.08278546, 'vehiclesOccludedIou': 0.029077865, 'vehiclesFlowEpe': 5.108681, 'vehiclesFlowWarpedOccupancyAuc': 0.5123935, 'vehiclesFlowWarpedOccupancyIou': 0.27683127}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8025743, 'vehiclesObservedIou': 0.43893483, 'vehiclesOccludedAuc': 0.038394064, 'vehiclesOccludedIou': 0.009348539, 'vehiclesFlowEpe': 3.258181, 'vehiclesFlowWarpedOccupancyAuc': 0.6500453, 'vehiclesFlowWarpedOccupancyIou': 0.45435885}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.26839238, 'vehiclesObservedIou': 0.08152702, 'vehiclesOccludedAuc': 0.060239658, 'vehiclesOccludedIou': 0.009936116, 'vehiclesFlowEpe': 7.6133094, 'vehiclesFlowWarpedOccupancyAuc': 0.2118572, 'vehiclesFlowWarpedOccupancyIou': 0.05785796}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7532855, 'vehiclesObservedIou': 0.31551394, 'vehiclesOccludedAuc': 0.020805953, 'vehiclesOccludedIou': 0.0068037044, 'vehiclesFlowEpe': 6.4178133, 'vehiclesFlowWarpedOccupancyAuc': 0.49066094, 'vehiclesFlowWarpedOccupancyIou': 0.29728237}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.48867223, 'vehiclesObservedIou': 0.3228341, 'vehiclesOccludedAuc': 0.0015793333, 'vehiclesOccludedIou': 2.580402e-05, 'vehiclesFlowEpe': 4.435034, 'vehiclesFlowWarpedOccupancyAuc': 0.47855765, 'vehiclesFlowWarpedOccupancyIou': 0.34024003}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6630205, 'vehiclesObservedIou': 0.33715078, 'vehiclesOccludedAuc': 0.025593428, 'vehiclesOccludedIou': 0.0065881284, 'vehiclesFlowEpe': 7.2385607, 'vehiclesFlowWarpedOccupancyAuc': 0.40093565, 'vehiclesFlowWarpedOccupancyIou': 0.35494828}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.8025743, 'vehiclesObservedIou': 0.43893483, 'vehiclesOccludedAuc': 0.038394064, 'vehiclesOccludedIou': 0.009348539, 'vehiclesFlowEpe': 3.258181, 'vehiclesFlowWarpedOccupancyAuc': 0.6500453, 'vehiclesFlowWarpedOccupancyIou': 0.45435885}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.5424392371428571, 'vehiclesObservedIou': 0.2702185914285714, 'vehiclesOccludedAuc': 0.032771128042857145, 'vehiclesOccludedIou': 0.008825736688571428, 'vehiclesFlowEpe': 5.646714628571429, 'vehiclesFlowWarpedOccupancyAuc': 0.44703293714285713, 'vehiclesFlowWarpedOccupancyIou': 0.28129072714285713}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00130new.tfrecords...
2024-05-28 11:00:18.025906: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:00:18.078690: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:00:18.078971: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.72288126, 'vehiclesObservedIou': 0.4140663, 'vehiclesOccludedAuc': 0.4194119, 'vehiclesOccludedIou': 0.10175484, 'vehiclesFlowEpe': 5.534467, 'vehiclesFlowWarpedOccupancyAuc': 0.579821, 'vehiclesFlowWarpedOccupancyIou': 0.4424323}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.72639126, 'vehiclesObservedIou': 0.4296638, 'vehiclesOccludedAuc': 0.0784716, 'vehiclesOccludedIou': 0.0259603, 'vehiclesFlowEpe': 5.601363, 'vehiclesFlowWarpedOccupancyAuc': 0.65353763, 'vehiclesFlowWarpedOccupancyIou': 0.56499505}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.20733115, 'vehiclesObservedIou': 0.12640816, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 9.470262, 'vehiclesFlowWarpedOccupancyAuc': 0.3356268, 'vehiclesFlowWarpedOccupancyIou': 0.11970337}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6321553, 'vehiclesObservedIou': 0.47173885, 'vehiclesOccludedAuc': 0.0077710957, 'vehiclesOccludedIou': 0.0032424727, 'vehiclesFlowEpe': 2.94906, 'vehiclesFlowWarpedOccupancyAuc': 0.73851025, 'vehiclesFlowWarpedOccupancyIou': 0.57853436}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.69846714, 'vehiclesObservedIou': 0.4469251, 'vehiclesOccludedAuc': 0.008867426, 'vehiclesOccludedIou': 0.004059838, 'vehiclesFlowEpe': 9.592743, 'vehiclesFlowWarpedOccupancyAuc': 0.59454525, 'vehiclesFlowWarpedOccupancyIou': 0.5434555}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8063982, 'vehiclesObservedIou': 0.6104676, 'vehiclesOccludedAuc': 0.009445494, 'vehiclesOccludedIou': 0.0036345911, 'vehiclesFlowEpe': 3.1580002, 'vehiclesFlowWarpedOccupancyAuc': 0.7195998, 'vehiclesFlowWarpedOccupancyIou': 0.6394868}
DataLossError encountered. Skipping the corrupted record.
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.8063982, 'vehiclesObservedIou': 0.6104676, 'vehiclesOccludedAuc': 0.009445494, 'vehiclesOccludedIou': 0.0036345911, 'vehiclesFlowEpe': 3.1580002, 'vehiclesFlowWarpedOccupancyAuc': 0.7195998, 'vehiclesFlowWarpedOccupancyIou': 0.6394868}
2024-05-28 11:00:22.129503: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:00:22.182109: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:00:22.182396: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6322707183333333, 'vehiclesObservedIou': 0.4165449683333333, 'vehiclesOccludedAuc': 0.08732791928333335, 'vehiclesOccludedIou': 0.023108673633333337, 'vehiclesFlowEpe': 6.0509825333333325, 'vehiclesFlowWarpedOccupancyAuc': 0.6036067883333334, 'vehiclesFlowWarpedOccupancyIou': 0.4814345633333333}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00134new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.674708, 'vehiclesObservedIou': 0.36817667, 'vehiclesOccludedAuc': 0.012294038, 'vehiclesOccludedIou': 0.0052049705, 'vehiclesFlowEpe': 6.9634686, 'vehiclesFlowWarpedOccupancyAuc': 0.5381109, 'vehiclesFlowWarpedOccupancyIou': 0.4132744}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7352228, 'vehiclesObservedIou': 0.4274579, 'vehiclesOccludedAuc': 0.0063879, 'vehiclesOccludedIou': 0.0033109356, 'vehiclesFlowEpe': 5.115868, 'vehiclesFlowWarpedOccupancyAuc': 0.59426445, 'vehiclesFlowWarpedOccupancyIou': 0.4991284}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.47403988, 'vehiclesObservedIou': 0.22185612, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.7581446, 'vehiclesFlowWarpedOccupancyAuc': 0.579011, 'vehiclesFlowWarpedOccupancyIou': 0.27030846}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.87163454, 'vehiclesObservedIou': 0.5520186, 'vehiclesOccludedAuc': 0.020649519, 'vehiclesOccludedIou': 0.0071628727, 'vehiclesFlowEpe': 4.4960413, 'vehiclesFlowWarpedOccupancyAuc': 0.68009114, 'vehiclesFlowWarpedOccupancyIou': 0.5966553}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.62681633, 'vehiclesObservedIou': 0.35280004, 'vehiclesOccludedAuc': 0.11673819, 'vehiclesOccludedIou': 0.02187435, 'vehiclesFlowEpe': 5.354176, 'vehiclesFlowWarpedOccupancyAuc': 0.62727475, 'vehiclesFlowWarpedOccupancyIou': 0.4386239}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.65896237, 'vehiclesObservedIou': 0.30771053, 'vehiclesOccludedAuc': 0.071920246, 'vehiclesOccludedIou': 0.025240876, 'vehiclesFlowEpe': 3.2547321, 'vehiclesFlowWarpedOccupancyAuc': 0.6824849, 'vehiclesFlowWarpedOccupancyIou': 0.4007063}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8515012, 'vehiclesObservedIou': 0.5074001, 'vehiclesOccludedAuc': 0.08076327, 'vehiclesOccludedIou': 0.026751673, 'vehiclesFlowEpe': 4.543001, 'vehiclesFlowWarpedOccupancyAuc': 0.67065984, 'vehiclesFlowWarpedOccupancyIou': 0.570921}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7353213, 'vehiclesObservedIou': 0.3966746, 'vehiclesOccludedAuc': 0.010892785, 'vehiclesOccludedIou': 0.0040331474, 'vehiclesFlowEpe': 2.7717009, 'vehiclesFlowWarpedOccupancyAuc': 0.65154743, 'vehiclesFlowWarpedOccupancyIou': 0.4466967}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7516049, 'vehiclesObservedIou': 0.40280932, 'vehiclesOccludedAuc': 0.15502459, 'vehiclesOccludedIou': 0.026519299, 'vehiclesFlowEpe': 7.8904476, 'vehiclesFlowWarpedOccupancyAuc': 0.6831153, 'vehiclesFlowWarpedOccupancyIou': 0.40512308}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.84077156, 'vehiclesObservedIou': 0.581924, 'vehiclesOccludedAuc': 0.13613674, 'vehiclesOccludedIou': 0.029753031, 'vehiclesFlowEpe': 3.758162, 'vehiclesFlowWarpedOccupancyAuc': 0.7564466, 'vehiclesFlowWarpedOccupancyIou': 0.7205822}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.733806, 'vehiclesObservedIou': 0.3847192, 'vehiclesOccludedAuc': 0.019870926, 'vehiclesOccludedIou': 0.0042456067, 'vehiclesFlowEpe': 2.4425752, 'vehiclesFlowWarpedOccupancyAuc': 0.66097236, 'vehiclesFlowWarpedOccupancyIou': 0.53447056}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.64141953, 'vehiclesObservedIou': 0.29892066, 'vehiclesOccludedAuc': 0.1152176, 'vehiclesOccludedIou': 0.014257667, 'vehiclesFlowEpe': 3.784762, 'vehiclesFlowWarpedOccupancyAuc': 0.55580235, 'vehiclesFlowWarpedOccupancyIou': 0.45113707}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8255167, 'vehiclesObservedIou': 0.61694723, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 7.1913676, 'vehiclesFlowWarpedOccupancyAuc': 0.7169103, 'vehiclesFlowWarpedOccupancyIou': 0.7727529}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8496271, 'vehiclesObservedIou': 0.50067365, 'vehiclesOccludedAuc': 0.25238597, 'vehiclesOccludedIou': 0.059990056, 'vehiclesFlowEpe': 3.0512574, 'vehiclesFlowWarpedOccupancyAuc': 0.7194985, 'vehiclesFlowWarpedOccupancyIou': 0.59732807}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.15180206, 'vehiclesObservedIou': 0.07195299, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 4.518776, 'vehiclesFlowWarpedOccupancyAuc': 0.12105886, 'vehiclesFlowWarpedOccupancyIou': 0.051101316}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.102801576, 'vehiclesObservedIou': 0.059831258, 'vehiclesOccludedAuc': 0.00077914685, 'vehiclesOccludedIou': 0.0005643182, 'vehiclesFlowEpe': 4.4996185, 'vehiclesFlowWarpedOccupancyAuc': 0.12487715, 'vehiclesFlowWarpedOccupancyIou': 0.06434401}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.3383185, 'vehiclesObservedIou': 0.15295094, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 5.1243496, 'vehiclesFlowWarpedOccupancyAuc': 0.46441093, 'vehiclesFlowWarpedOccupancyIou': 0.17579955}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9386983, 'vehiclesObservedIou': 0.6100364, 'vehiclesOccludedAuc': 0.4689074, 'vehiclesOccludedIou': 0.081871554, 'vehiclesFlowEpe': 3.4619904, 'vehiclesFlowWarpedOccupancyAuc': 0.7493799, 'vehiclesFlowWarpedOccupancyIou': 0.67153496}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7071226, 'vehiclesObservedIou': 0.3655355, 'vehiclesOccludedAuc': 0.12096791, 'vehiclesOccludedIou': 0.03625407, 'vehiclesFlowEpe': 3.0567443, 'vehiclesFlowWarpedOccupancyAuc': 0.5998452, 'vehiclesFlowWarpedOccupancyIou': 0.40738052}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.1358586, 'vehiclesObservedIou': 0.06354111, 'vehiclesOccludedAuc': 0.00022113489, 'vehiclesOccludedIou': 0.00014809107, 'vehiclesFlowEpe': 13.696871, 'vehiclesFlowWarpedOccupancyAuc': 0.20061283, 'vehiclesFlowWarpedOccupancyIou': 0.085302345}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.85203874, 'vehiclesObservedIou': 0.53587925, 'vehiclesOccludedAuc': 0.3022735, 'vehiclesOccludedIou': 0.04894623, 'vehiclesFlowEpe': 4.4601517, 'vehiclesFlowWarpedOccupancyAuc': 0.7191008, 'vehiclesFlowWarpedOccupancyIou': 0.63397604}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.75634146, 'vehiclesObservedIou': 0.4286213, 'vehiclesOccludedAuc': 0.011702787, 'vehiclesOccludedIou': 0.0033110976, 'vehiclesFlowEpe': 3.1925159, 'vehiclesFlowWarpedOccupancyAuc': 0.64309144, 'vehiclesFlowWarpedOccupancyIou': 0.47961807}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.9386983, 'vehiclesObservedIou': 0.6100364, 'vehiclesOccludedAuc': 0.4689074, 'vehiclesOccludedIou': 0.081871554, 'vehiclesFlowEpe': 3.4619904, 'vehiclesFlowWarpedOccupancyAuc': 0.7493799, 'vehiclesFlowWarpedOccupancyIou': 0.67153496}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.647906093, 'vehiclesObservedIou': 0.37311078945454546, 'vehiclesOccludedAuc': 0.08650607512454546, 'vehiclesOccludedIou': 0.01815635662590909, 'vehiclesFlowEpe': 4.790305531818182, 'vehiclesFlowWarpedOccupancyAuc': 0.5790257695454545, 'vehiclesFlowWarpedOccupancyIou': 0.4403075068636364}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00133new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 11:00:35.988735: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:00:36.041358: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:00:36.041638: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.4714909, 'vehiclesObservedIou': 0.23244435, 'vehiclesOccludedAuc': 0.19815193, 'vehiclesOccludedIou': 0.04193112, 'vehiclesFlowEpe': 5.621553, 'vehiclesFlowWarpedOccupancyAuc': 0.5678499, 'vehiclesFlowWarpedOccupancyIou': 0.29202846}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.76190305, 'vehiclesObservedIou': 0.41008958, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.7383292, 'vehiclesFlowWarpedOccupancyAuc': 0.6545579, 'vehiclesFlowWarpedOccupancyIou': 0.4937962}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9539424, 'vehiclesObservedIou': 0.7079715, 'vehiclesOccludedAuc': 0.087650426, 'vehiclesOccludedIou': 0.028587319, 'vehiclesFlowEpe': 4.358783, 'vehiclesFlowWarpedOccupancyAuc': 0.8593205, 'vehiclesFlowWarpedOccupancyIou': 0.7550025}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.814446, 'vehiclesObservedIou': 0.4749252, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 5.0372, 'vehiclesFlowWarpedOccupancyAuc': 0.6630269, 'vehiclesFlowWarpedOccupancyIou': 0.54653317}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7124937, 'vehiclesObservedIou': 0.4102062, 'vehiclesOccludedAuc': 0.11534848, 'vehiclesOccludedIou': 0.021995652, 'vehiclesFlowEpe': 3.9692004, 'vehiclesFlowWarpedOccupancyAuc': 0.6141867, 'vehiclesFlowWarpedOccupancyIou': 0.4652466}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.56222916, 'vehiclesObservedIou': 0.26151213, 'vehiclesOccludedAuc': 0.28587034, 'vehiclesOccludedIou': 0.056242567, 'vehiclesFlowEpe': 5.4933057, 'vehiclesFlowWarpedOccupancyAuc': 0.4905013, 'vehiclesFlowWarpedOccupancyIou': 0.33023337}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8478901, 'vehiclesObservedIou': 0.5280701, 'vehiclesOccludedAuc': 0.36526817, 'vehiclesOccludedIou': 0.072859965, 'vehiclesFlowEpe': 4.335377, 'vehiclesFlowWarpedOccupancyAuc': 0.70094985, 'vehiclesFlowWarpedOccupancyIou': 0.57855}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9563771, 'vehiclesObservedIou': 0.70393264, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 1.8972634, 'vehiclesFlowWarpedOccupancyAuc': 0.8697099, 'vehiclesFlowWarpedOccupancyIou': 0.8007001}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.77097565, 'vehiclesObservedIou': 0.47193173, 'vehiclesOccludedAuc': 0.0086587835, 'vehiclesOccludedIou': 0.00408204, 'vehiclesFlowEpe': 2.3873808, 'vehiclesFlowWarpedOccupancyAuc': 0.7260686, 'vehiclesFlowWarpedOccupancyIou': 0.5509142}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8218874, 'vehiclesObservedIou': 0.4276683, 'vehiclesOccludedAuc': 0.35488394, 'vehiclesOccludedIou': 0.11113035, 'vehiclesFlowEpe': 4.0238047, 'vehiclesFlowWarpedOccupancyAuc': 0.64120185, 'vehiclesFlowWarpedOccupancyIou': 0.501094}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.84878725, 'vehiclesObservedIou': 0.5673967, 'vehiclesOccludedAuc': 0.13583374, 'vehiclesOccludedIou': 0.028173808, 'vehiclesFlowEpe': 6.043336, 'vehiclesFlowWarpedOccupancyAuc': 0.7244343, 'vehiclesFlowWarpedOccupancyIou': 0.67897856}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8043643, 'vehiclesObservedIou': 0.52026796, 'vehiclesOccludedAuc': 0.28420743, 'vehiclesOccludedIou': 0.05271583, 'vehiclesFlowEpe': 5.167301, 'vehiclesFlowWarpedOccupancyAuc': 0.73209196, 'vehiclesFlowWarpedOccupancyIou': 0.66891384}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.80764985, 'vehiclesObservedIou': 0.41597918, 'vehiclesOccludedAuc': 0.074020505, 'vehiclesOccludedIou': 0.02280783, 'vehiclesFlowEpe': 2.6379697, 'vehiclesFlowWarpedOccupancyAuc': 0.7214647, 'vehiclesFlowWarpedOccupancyIou': 0.51830107}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.67653173, 'vehiclesObservedIou': 0.4178143, 'vehiclesOccludedAuc': 0.00033839035, 'vehiclesOccludedIou': 0.00047891444, 'vehiclesFlowEpe': 6.294159, 'vehiclesFlowWarpedOccupancyAuc': 0.5817888, 'vehiclesFlowWarpedOccupancyIou': 0.4838379}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.59661967, 'vehiclesObservedIou': 0.3097521, 'vehiclesOccludedAuc': 0.00022489112, 'vehiclesOccludedIou': 0.00042193139, 'vehiclesFlowEpe': 5.574889, 'vehiclesFlowWarpedOccupancyAuc': 0.51457965, 'vehiclesFlowWarpedOccupancyIou': 0.38264322}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9522803, 'vehiclesObservedIou': 0.71571904, 'vehiclesOccludedAuc': 0.6308983, 'vehiclesOccludedIou': 0.20773005, 'vehiclesFlowEpe': 3.7240653, 'vehiclesFlowWarpedOccupancyAuc': 0.85516727, 'vehiclesFlowWarpedOccupancyIou': 0.8337163}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5800712, 'vehiclesObservedIou': 0.26967347, 'vehiclesOccludedAuc': 0.025083648, 'vehiclesOccludedIou': 0.010067483, 'vehiclesFlowEpe': 5.3943214, 'vehiclesFlowWarpedOccupancyAuc': 0.47449666, 'vehiclesFlowWarpedOccupancyIou': 0.35955375}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.93781036, 'vehiclesObservedIou': 0.6637117, 'vehiclesOccludedAuc': 0.6741651, 'vehiclesOccludedIou': 0.16217694, 'vehiclesFlowEpe': 9.089657, 'vehiclesFlowWarpedOccupancyAuc': 0.7985266, 'vehiclesFlowWarpedOccupancyIou': 0.7748695}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.860104, 'vehiclesObservedIou': 0.5403716, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 4.3524914, 'vehiclesFlowWarpedOccupancyAuc': 0.7502864, 'vehiclesFlowWarpedOccupancyIou': 0.65253365}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.67077786, 'vehiclesObservedIou': 0.33906752, 'vehiclesOccludedAuc': 0.039476883, 'vehiclesOccludedIou': 0.0093524875, 'vehiclesFlowEpe': 3.7150931, 'vehiclesFlowWarpedOccupancyAuc': 0.63254124, 'vehiclesFlowWarpedOccupancyIou': 0.33753178}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.25719553, 'vehiclesObservedIou': 0.10538066, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 4.1513443, 'vehiclesFlowWarpedOccupancyAuc': 0.36576787, 'vehiclesFlowWarpedOccupancyIou': 0.13161373}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.80636567, 'vehiclesObservedIou': 0.49370617, 'vehiclesOccludedAuc': 0.18946013, 'vehiclesOccludedIou': 0.04175156, 'vehiclesFlowEpe': 3.5349312, 'vehiclesFlowWarpedOccupancyAuc': 0.75824684, 'vehiclesFlowWarpedOccupancyIou': 0.5559867}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6040899, 'vehiclesObservedIou': 0.2800981, 'vehiclesOccludedAuc': 0.013062508, 'vehiclesOccludedIou': 0.0064358506, 'vehiclesFlowEpe': 5.3773756, 'vehiclesFlowWarpedOccupancyAuc': 0.46290112, 'vehiclesFlowWarpedOccupancyIou': 0.32157713}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.48479474, 'vehiclesObservedIou': 0.22302878, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.7449214, 'vehiclesFlowWarpedOccupancyAuc': 0.63514876, 'vehiclesFlowWarpedOccupancyIou': 0.28649968}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6327598, 'vehiclesObservedIou': 0.29809994, 'vehiclesOccludedAuc': 0.016138472, 'vehiclesOccludedIou': 0.0060193352, 'vehiclesFlowEpe': 4.917933, 'vehiclesFlowWarpedOccupancyAuc': 0.5296726, 'vehiclesFlowWarpedOccupancyIou': 0.34083313}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6902585, 'vehiclesObservedIou': 0.37629846, 'vehiclesOccludedAuc': 0.012832576, 'vehiclesOccludedIou': 0.003500259, 'vehiclesFlowEpe': 3.2773566, 'vehiclesFlowWarpedOccupancyAuc': 0.64314437, 'vehiclesFlowWarpedOccupancyIou': 0.42215404}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8759334, 'vehiclesObservedIou': 0.5914093, 'vehiclesOccludedAuc': 0.001982857, 'vehiclesOccludedIou': 0.0015005146, 'vehiclesFlowEpe': 5.1774187, 'vehiclesFlowWarpedOccupancyAuc': 0.6543988, 'vehiclesFlowWarpedOccupancyIou': 0.6384134}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.93311083, 'vehiclesObservedIou': 0.63561636, 'vehiclesOccludedAuc': 0.007728118, 'vehiclesOccludedIou': 0.003039387, 'vehiclesFlowEpe': 2.6209295, 'vehiclesFlowWarpedOccupancyAuc': 0.83279157, 'vehiclesFlowWarpedOccupancyIou': 0.68030167}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.9563771, 'vehiclesObservedIou': 0.70393264, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 1.8972634, 'vehiclesFlowWarpedOccupancyAuc': 0.8697099, 'vehiclesFlowWarpedOccupancyIou': 0.8007001}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.7390407267857142, 'vehiclesObservedIou': 0.4425765382142857, 'vehiclesOccludedAuc': 0.12576020064178572, 'vehiclesOccludedIou': 0.031892899776071425, 'vehiclesFlowEpe': 4.416346085714286, 'vehiclesFlowWarpedOccupancyAuc': 0.6591008182142859, 'vehiclesFlowWarpedOccupancyIou': 0.5136556303571429}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00021new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 11:00:53.500869: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:00:53.554580: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:00:53.554874: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.90639615, 'vehiclesObservedIou': 0.62402993, 'vehiclesOccludedAuc': 0.02294368, 'vehiclesOccludedIou': 0.0067939335, 'vehiclesFlowEpe': 5.9278913, 'vehiclesFlowWarpedOccupancyAuc': 0.69402456, 'vehiclesFlowWarpedOccupancyIou': 0.6414292}
Time: 0.0014 seconds, Metrics: {'vehiclesObservedAuc': 0.8728926, 'vehiclesObservedIou': 0.6023808, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 4.0334787, 'vehiclesFlowWarpedOccupancyAuc': 0.73353446, 'vehiclesFlowWarpedOccupancyIou': 0.69568366}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8991955, 'vehiclesObservedIou': 0.6418036, 'vehiclesOccludedAuc': 0.03828702, 'vehiclesOccludedIou': 0.0100234235, 'vehiclesFlowEpe': 4.8779197, 'vehiclesFlowWarpedOccupancyAuc': 0.78472424, 'vehiclesFlowWarpedOccupancyIou': 0.7663592}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.30136272, 'vehiclesObservedIou': 0.13007873, 'vehiclesOccludedAuc': 0.01739109, 'vehiclesOccludedIou': 0.007404661, 'vehiclesFlowEpe': 4.49828, 'vehiclesFlowWarpedOccupancyAuc': 0.43065852, 'vehiclesFlowWarpedOccupancyIou': 0.14436086}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.30497715, 'vehiclesObservedIou': 0.13321275, 'vehiclesOccludedAuc': 6.0639883e-05, 'vehiclesOccludedIou': 2.1477585e-05, 'vehiclesFlowEpe': 2.7039247, 'vehiclesFlowWarpedOccupancyAuc': 0.33201006, 'vehiclesFlowWarpedOccupancyIou': 0.18454425}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.45781124, 'vehiclesObservedIou': 0.22496614, 'vehiclesOccludedAuc': 0.04664237, 'vehiclesOccludedIou': 0.005994206, 'vehiclesFlowEpe': 4.290435, 'vehiclesFlowWarpedOccupancyAuc': 0.5065318, 'vehiclesFlowWarpedOccupancyIou': 0.27494833}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5344293, 'vehiclesObservedIou': 0.32199538, 'vehiclesOccludedAuc': 0.0021767318, 'vehiclesOccludedIou': 0.0018297862, 'vehiclesFlowEpe': 2.6023068, 'vehiclesFlowWarpedOccupancyAuc': 0.4296528, 'vehiclesFlowWarpedOccupancyIou': 0.37901387}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.51429045, 'vehiclesObservedIou': 0.20652026, 'vehiclesOccludedAuc': 0.07834523, 'vehiclesOccludedIou': 0.021941202, 'vehiclesFlowEpe': 7.858802, 'vehiclesFlowWarpedOccupancyAuc': 0.3005103, 'vehiclesFlowWarpedOccupancyIou': 0.31562218}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8421963, 'vehiclesObservedIou': 0.52927876, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 5.5168676, 'vehiclesFlowWarpedOccupancyAuc': 0.7545377, 'vehiclesFlowWarpedOccupancyIou': 0.62627983}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8254597, 'vehiclesObservedIou': 0.45504963, 'vehiclesOccludedAuc': 0.20323531, 'vehiclesOccludedIou': 0.04600762, 'vehiclesFlowEpe': 3.1290956, 'vehiclesFlowWarpedOccupancyAuc': 0.6729422, 'vehiclesFlowWarpedOccupancyIou': 0.4650992}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.67997533, 'vehiclesObservedIou': 0.38696378, 'vehiclesOccludedAuc': 0.093201235, 'vehiclesOccludedIou': 0.021443525, 'vehiclesFlowEpe': 7.11182, 'vehiclesFlowWarpedOccupancyAuc': 0.47811276, 'vehiclesFlowWarpedOccupancyIou': 0.4360177}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.32505178, 'vehiclesObservedIou': 0.18252507, 'vehiclesOccludedAuc': 0.017517187, 'vehiclesOccludedIou': 0.0036491472, 'vehiclesFlowEpe': 7.347531, 'vehiclesFlowWarpedOccupancyAuc': 0.35475674, 'vehiclesFlowWarpedOccupancyIou': 0.20137681}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9600395, 'vehiclesObservedIou': 0.6911636, 'vehiclesOccludedAuc': 0.00017034342, 'vehiclesOccludedIou': 0.00015338008, 'vehiclesFlowEpe': 2.210043, 'vehiclesFlowWarpedOccupancyAuc': 0.8266694, 'vehiclesFlowWarpedOccupancyIou': 0.79331833}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.83778805, 'vehiclesObservedIou': 0.63818777, 'vehiclesOccludedAuc': 0.35813692, 'vehiclesOccludedIou': 0.08419121, 'vehiclesFlowEpe': 3.5029078, 'vehiclesFlowWarpedOccupancyAuc': 0.82006115, 'vehiclesFlowWarpedOccupancyIou': 0.71750504}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.72760534, 'vehiclesObservedIou': 0.39084584, 'vehiclesOccludedAuc': 0.00396745, 'vehiclesOccludedIou': 0.0025891222, 'vehiclesFlowEpe': 2.8307784, 'vehiclesFlowWarpedOccupancyAuc': 0.7082045, 'vehiclesFlowWarpedOccupancyIou': 0.50474995}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.74996144, 'vehiclesObservedIou': 0.46712574, 'vehiclesOccludedAuc': 0.029053703, 'vehiclesOccludedIou': 0.008670785, 'vehiclesFlowEpe': 5.5068903, 'vehiclesFlowWarpedOccupancyAuc': 0.61716485, 'vehiclesFlowWarpedOccupancyIou': 0.5069408}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.95376027, 'vehiclesObservedIou': 0.8408156, 'vehiclesOccludedAuc': 0.024369232, 'vehiclesOccludedIou': 0.006647798, 'vehiclesFlowEpe': 6.004548, 'vehiclesFlowWarpedOccupancyAuc': 0.8901944, 'vehiclesFlowWarpedOccupancyIou': 0.8929926}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7055697, 'vehiclesObservedIou': 0.4994069, 'vehiclesOccludedAuc': 0.054500494, 'vehiclesOccludedIou': 0.018041711, 'vehiclesFlowEpe': 7.9486294, 'vehiclesFlowWarpedOccupancyAuc': 0.5465392, 'vehiclesFlowWarpedOccupancyIou': 0.5378096}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.72474134, 'vehiclesObservedIou': 0.4090614, 'vehiclesOccludedAuc': 0.17542228, 'vehiclesOccludedIou': 0.042262994, 'vehiclesFlowEpe': 4.3405313, 'vehiclesFlowWarpedOccupancyAuc': 0.59937567, 'vehiclesFlowWarpedOccupancyIou': 0.4516581}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.33683345, 'vehiclesObservedIou': 0.16177091, 'vehiclesOccludedAuc': 0.07287965, 'vehiclesOccludedIou': 0.010038485, 'vehiclesFlowEpe': 7.5787373, 'vehiclesFlowWarpedOccupancyAuc': 0.33143488, 'vehiclesFlowWarpedOccupancyIou': 0.15103874}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7439711, 'vehiclesObservedIou': 0.42681253, 'vehiclesOccludedAuc': 0.0017211105, 'vehiclesOccludedIou': 0.0015714144, 'vehiclesFlowEpe': 5.1946, 'vehiclesFlowWarpedOccupancyAuc': 0.5564017, 'vehiclesFlowWarpedOccupancyIou': 0.52287316}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.640447, 'vehiclesObservedIou': 0.41968194, 'vehiclesOccludedAuc': 0.4473948, 'vehiclesOccludedIou': 0.092921905, 'vehiclesFlowEpe': 6.073117, 'vehiclesFlowWarpedOccupancyAuc': 0.5531939, 'vehiclesFlowWarpedOccupancyIou': 0.43577147}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.55807096, 'vehiclesObservedIou': 0.22796428, 'vehiclesOccludedAuc': 0.119989686, 'vehiclesOccludedIou': 0.03971236, 'vehiclesFlowEpe': 2.762919, 'vehiclesFlowWarpedOccupancyAuc': 0.6379837, 'vehiclesFlowWarpedOccupancyIou': 0.26433837}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.6898656, 'vehiclesObservedIou': 0.35504425, 'vehiclesOccludedAuc': 0.17307526, 'vehiclesOccludedIou': 0.029611558, 'vehiclesFlowEpe': 2.5208275, 'vehiclesFlowWarpedOccupancyAuc': 0.7099586, 'vehiclesFlowWarpedOccupancyIou': 0.51390713}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.98078513, 'vehiclesObservedIou': 0.88162285, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.5508933, 'vehiclesFlowWarpedOccupancyAuc': 0.9198571, 'vehiclesFlowWarpedOccupancyIou': 0.9442441}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.20170452, 'vehiclesObservedIou': 0.09428902, 'vehiclesOccludedAuc': 0.004122765, 'vehiclesOccludedIou': 0.000758027, 'vehiclesFlowEpe': 14.285616, 'vehiclesFlowWarpedOccupancyAuc': 0.2001341, 'vehiclesFlowWarpedOccupancyIou': 0.098067105}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.17605624, 'vehiclesObservedIou': 0.070902616, 'vehiclesOccludedAuc': 0.032812465, 'vehiclesOccludedIou': 0.009544227, 'vehiclesFlowEpe': 9.274144, 'vehiclesFlowWarpedOccupancyAuc': 0.1867449, 'vehiclesFlowWarpedOccupancyIou': 0.048749354}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.30367416, 'vehiclesObservedIou': 0.1437095, 'vehiclesOccludedAuc': 0.049247883, 'vehiclesOccludedIou': 0.013608951, 'vehiclesFlowEpe': 5.69046, 'vehiclesFlowWarpedOccupancyAuc': 0.39105892, 'vehiclesFlowWarpedOccupancyIou': 0.17816661}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8771473, 'vehiclesObservedIou': 0.51307553, 'vehiclesOccludedAuc': 0.051323056, 'vehiclesOccludedIou': 0.013094114, 'vehiclesFlowEpe': 3.3521047, 'vehiclesFlowWarpedOccupancyAuc': 0.7516461, 'vehiclesFlowWarpedOccupancyIou': 0.62246895}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.66729814, 'vehiclesObservedIou': 0.35337287, 'vehiclesOccludedAuc': 0.05300769, 'vehiclesOccludedIou': 0.009120667, 'vehiclesFlowEpe': 4.7100096, 'vehiclesFlowWarpedOccupancyAuc': 0.56557447, 'vehiclesFlowWarpedOccupancyIou': 0.38300005}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.50819904, 'vehiclesObservedIou': 0.33361727, 'vehiclesOccludedAuc': 0.001772249, 'vehiclesOccludedIou': 0.00018001688, 'vehiclesFlowEpe': 3.8665411, 'vehiclesFlowWarpedOccupancyAuc': 0.5673333, 'vehiclesFlowWarpedOccupancyIou': 0.38389018}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8744559, 'vehiclesObservedIou': 0.6029251, 'vehiclesOccludedAuc': 0.03922797, 'vehiclesOccludedIou': 0.013474352, 'vehiclesFlowEpe': 3.1063206, 'vehiclesFlowWarpedOccupancyAuc': 0.7486143, 'vehiclesFlowWarpedOccupancyIou': 0.6926209}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7453353, 'vehiclesObservedIou': 0.36105844, 'vehiclesOccludedAuc': 0.021585949, 'vehiclesOccludedIou': 0.0096504595, 'vehiclesFlowEpe': 6.637902, 'vehiclesFlowWarpedOccupancyAuc': 0.5731334, 'vehiclesFlowWarpedOccupancyIou': 0.43745482}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.98078513, 'vehiclesObservedIou': 0.88162285, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.5508933, 'vehiclesFlowWarpedOccupancyAuc': 0.9198571, 'vehiclesFlowWarpedOccupancyIou': 0.9442441}
Average Time: 0.0012 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6493135666666666, 'vehiclesObservedIou': 0.4036745086666667, 'vehiclesOccludedAuc': 0.06768428635160606, 'vehiclesOccludedIou': 0.016089470274090908, 'vehiclesFlowEpe': 5.146874930303031, 'vehiclesFlowWarpedOccupancyAuc': 0.5810083236363637, 'vehiclesFlowWarpedOccupancyIou': 0.4609788014848485}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00025new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 11:01:14.794972: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:01:14.848510: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:01:14.848832: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9038413, 'vehiclesObservedIou': 0.62591094, 'vehiclesOccludedAuc': 0.0015499643, 'vehiclesOccludedIou': 0.0012900981, 'vehiclesFlowEpe': 2.992548, 'vehiclesFlowWarpedOccupancyAuc': 0.8089498, 'vehiclesFlowWarpedOccupancyIou': 0.6884685}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.25558937, 'vehiclesObservedIou': 0.12455173, 'vehiclesOccludedAuc': 0.010474363, 'vehiclesOccludedIou': 0.003598603, 'vehiclesFlowEpe': 13.045224, 'vehiclesFlowWarpedOccupancyAuc': 0.26314792, 'vehiclesFlowWarpedOccupancyIou': 0.15035976}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8717452, 'vehiclesObservedIou': 0.5499428, 'vehiclesOccludedAuc': 0.1298672, 'vehiclesOccludedIou': 0.023237512, 'vehiclesFlowEpe': 8.569581, 'vehiclesFlowWarpedOccupancyAuc': 0.5565588, 'vehiclesFlowWarpedOccupancyIou': 0.5012718}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6777353, 'vehiclesObservedIou': 0.3566899, 'vehiclesOccludedAuc': 0.03173894, 'vehiclesOccludedIou': 0.009457397, 'vehiclesFlowEpe': 4.4814043, 'vehiclesFlowWarpedOccupancyAuc': 0.58633065, 'vehiclesFlowWarpedOccupancyIou': 0.41385278}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.3496059, 'vehiclesObservedIou': 0.14714205, 'vehiclesOccludedAuc': 0.009517657, 'vehiclesOccludedIou': 0.0041913223, 'vehiclesFlowEpe': 3.9798973, 'vehiclesFlowWarpedOccupancyAuc': 0.44186693, 'vehiclesFlowWarpedOccupancyIou': 0.15908861}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.4319296, 'vehiclesObservedIou': 0.14792994, 'vehiclesOccludedAuc': 0.023757016, 'vehiclesOccludedIou': 0.0051416513, 'vehiclesFlowEpe': 7.181579, 'vehiclesFlowWarpedOccupancyAuc': 0.2833096, 'vehiclesFlowWarpedOccupancyIou': 0.12888199}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9481495, 'vehiclesObservedIou': 0.72990364, 'vehiclesOccludedAuc': 0.023941137, 'vehiclesOccludedIou': 0.014215127, 'vehiclesFlowEpe': 6.539069, 'vehiclesFlowWarpedOccupancyAuc': 0.8454444, 'vehiclesFlowWarpedOccupancyIou': 0.7978383}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.54608554, 'vehiclesObservedIou': 0.31820732, 'vehiclesOccludedAuc': 0.46261007, 'vehiclesOccludedIou': 0.11873983, 'vehiclesFlowEpe': 2.861464, 'vehiclesFlowWarpedOccupancyAuc': 0.6661606, 'vehiclesFlowWarpedOccupancyIou': 0.42933953}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.6161164, 'vehiclesObservedIou': 0.30718005, 'vehiclesOccludedAuc': 0.100123696, 'vehiclesOccludedIou': 0.028091788, 'vehiclesFlowEpe': 5.136087, 'vehiclesFlowWarpedOccupancyAuc': 0.59160805, 'vehiclesFlowWarpedOccupancyIou': 0.4036169}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.91464674, 'vehiclesObservedIou': 0.6139441, 'vehiclesOccludedAuc': 0.044372313, 'vehiclesOccludedIou': 0.005855881, 'vehiclesFlowEpe': 1.8105909, 'vehiclesFlowWarpedOccupancyAuc': 0.8057425, 'vehiclesFlowWarpedOccupancyIou': 0.7524934}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7823032, 'vehiclesObservedIou': 0.48976588, 'vehiclesOccludedAuc': 0.13628972, 'vehiclesOccludedIou': 0.036292277, 'vehiclesFlowEpe': 4.847132, 'vehiclesFlowWarpedOccupancyAuc': 0.68706036, 'vehiclesFlowWarpedOccupancyIou': 0.5632287}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.88643295, 'vehiclesObservedIou': 0.6331499, 'vehiclesOccludedAuc': 0.055382334, 'vehiclesOccludedIou': 0.008331489, 'vehiclesFlowEpe': 2.2894862, 'vehiclesFlowWarpedOccupancyAuc': 0.8535671, 'vehiclesFlowWarpedOccupancyIou': 0.76348644}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9672412, 'vehiclesObservedIou': 0.70153296, 'vehiclesOccludedAuc': 0.055186227, 'vehiclesOccludedIou': 0.012318068, 'vehiclesFlowEpe': 5.789492, 'vehiclesFlowWarpedOccupancyAuc': 0.7273382, 'vehiclesFlowWarpedOccupancyIou': 0.62590355}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6401242, 'vehiclesObservedIou': 0.4264957, 'vehiclesOccludedAuc': 0.07225381, 'vehiclesOccludedIou': 0.022700563, 'vehiclesFlowEpe': 5.4843006, 'vehiclesFlowWarpedOccupancyAuc': 0.65809995, 'vehiclesFlowWarpedOccupancyIou': 0.49883044}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5310277, 'vehiclesObservedIou': 0.27187547, 'vehiclesOccludedAuc': 0.09368407, 'vehiclesOccludedIou': 0.028141871, 'vehiclesFlowEpe': 4.2511563, 'vehiclesFlowWarpedOccupancyAuc': 0.4739844, 'vehiclesFlowWarpedOccupancyIou': 0.28184304}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9656917, 'vehiclesObservedIou': 0.7920462, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.8372648, 'vehiclesFlowWarpedOccupancyAuc': 0.90301955, 'vehiclesFlowWarpedOccupancyIou': 0.9052956}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.814186, 'vehiclesObservedIou': 0.4038977, 'vehiclesOccludedAuc': 0.04202042, 'vehiclesOccludedIou': 0.007273925, 'vehiclesFlowEpe': 3.008514, 'vehiclesFlowWarpedOccupancyAuc': 0.5820028, 'vehiclesFlowWarpedOccupancyIou': 0.47991246}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5159987, 'vehiclesObservedIou': 0.27273652, 'vehiclesOccludedAuc': 0.019977674, 'vehiclesOccludedIou': 0.004903796, 'vehiclesFlowEpe': 3.3200781, 'vehiclesFlowWarpedOccupancyAuc': 0.57175744, 'vehiclesFlowWarpedOccupancyIou': 0.3638691}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7583402, 'vehiclesObservedIou': 0.43534103, 'vehiclesOccludedAuc': 0.10226543, 'vehiclesOccludedIou': 0.021607414, 'vehiclesFlowEpe': 3.2507691, 'vehiclesFlowWarpedOccupancyAuc': 0.67390984, 'vehiclesFlowWarpedOccupancyIou': 0.49659604}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.82521313, 'vehiclesObservedIou': 0.42572778, 'vehiclesOccludedAuc': 0.02189248, 'vehiclesOccludedIou': 0.009003769, 'vehiclesFlowEpe': 9.440836, 'vehiclesFlowWarpedOccupancyAuc': 0.6149238, 'vehiclesFlowWarpedOccupancyIou': 0.5100175}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.09660957, 'vehiclesObservedIou': 0.041506376, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 4.8690577, 'vehiclesFlowWarpedOccupancyAuc': 0.10067358, 'vehiclesFlowWarpedOccupancyIou': 0.043312225}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.26877743, 'vehiclesObservedIou': 0.1426913, 'vehiclesOccludedAuc': 0.020330759, 'vehiclesOccludedIou': 0.004714049, 'vehiclesFlowEpe': 7.291505, 'vehiclesFlowWarpedOccupancyAuc': 0.3281033, 'vehiclesFlowWarpedOccupancyIou': 0.13599238}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.81482786, 'vehiclesObservedIou': 0.5043584, 'vehiclesOccludedAuc': 0.01931725, 'vehiclesOccludedIou': 0.0046284124, 'vehiclesFlowEpe': 16.555817, 'vehiclesFlowWarpedOccupancyAuc': 0.53801054, 'vehiclesFlowWarpedOccupancyIou': 0.4835099}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.9672412, 'vehiclesObservedIou': 0.70153296, 'vehiclesOccludedAuc': 0.055186227, 'vehiclesOccludedIou': 0.012318068, 'vehiclesFlowEpe': 5.789492, 'vehiclesFlowWarpedOccupancyAuc': 0.7273382, 'vehiclesFlowWarpedOccupancyIou': 0.62590355}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6687921169565217, 'vehiclesObservedIou': 0.4114142472173911, 'vehiclesOccludedAuc': 0.0641979361, 'vehiclesOccludedIou': 0.016249341004347828, 'vehiclesFlowEpe': 5.644906665217392, 'vehiclesFlowWarpedOccupancyAuc': 0.5896334830434783, 'vehiclesFlowWarpedOccupancyIou': 0.4598699541304347}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00054new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 11:01:29.539759: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:01:29.592381: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:01:29.592667: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.85779375, 'vehiclesObservedIou': 0.4344776, 'vehiclesOccludedAuc': 0.00042668422, 'vehiclesOccludedIou': 0.000247013, 'vehiclesFlowEpe': 2.2133708, 'vehiclesFlowWarpedOccupancyAuc': 0.6581283, 'vehiclesFlowWarpedOccupancyIou': 0.54907626}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.68950975, 'vehiclesObservedIou': 0.3691142, 'vehiclesOccludedAuc': 0.5352685, 'vehiclesOccludedIou': 0.10897985, 'vehiclesFlowEpe': 11.67983, 'vehiclesFlowWarpedOccupancyAuc': 0.56870633, 'vehiclesFlowWarpedOccupancyIou': 0.54090476}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9573448, 'vehiclesObservedIou': 0.7522076, 'vehiclesOccludedAuc': 0.028837685, 'vehiclesOccludedIou': 0.006749324, 'vehiclesFlowEpe': 2.274239, 'vehiclesFlowWarpedOccupancyAuc': 0.84702003, 'vehiclesFlowWarpedOccupancyIou': 0.7861033}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.47853678, 'vehiclesObservedIou': 0.21316335, 'vehiclesOccludedAuc': 0.015309159, 'vehiclesOccludedIou': 0.004778265, 'vehiclesFlowEpe': 4.6911416, 'vehiclesFlowWarpedOccupancyAuc': 0.46516603, 'vehiclesFlowWarpedOccupancyIou': 0.248694}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6388708, 'vehiclesObservedIou': 0.34993362, 'vehiclesOccludedAuc': 0.010171376, 'vehiclesOccludedIou': 0.005499079, 'vehiclesFlowEpe': 4.9239693, 'vehiclesFlowWarpedOccupancyAuc': 0.56876326, 'vehiclesFlowWarpedOccupancyIou': 0.44093063}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.46234727, 'vehiclesObservedIou': 0.21125573, 'vehiclesOccludedAuc': 0.0008950166, 'vehiclesOccludedIou': 0.00096065435, 'vehiclesFlowEpe': 5.9706717, 'vehiclesFlowWarpedOccupancyAuc': 0.47663203, 'vehiclesFlowWarpedOccupancyIou': 0.21231288}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.75236684, 'vehiclesObservedIou': 0.4567638, 'vehiclesOccludedAuc': 0.0822004, 'vehiclesOccludedIou': 0.024905141, 'vehiclesFlowEpe': 4.2381907, 'vehiclesFlowWarpedOccupancyAuc': 0.6751915, 'vehiclesFlowWarpedOccupancyIou': 0.5581858}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.5031501, 'vehiclesObservedIou': 0.21599512, 'vehiclesOccludedAuc': 0.020458367, 'vehiclesOccludedIou': 0.0077265077, 'vehiclesFlowEpe': 7.788123, 'vehiclesFlowWarpedOccupancyAuc': 0.39335507, 'vehiclesFlowWarpedOccupancyIou': 0.2588043}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.49378395, 'vehiclesObservedIou': 0.25890484, 'vehiclesOccludedAuc': 0.033150688, 'vehiclesOccludedIou': 0.004900282, 'vehiclesFlowEpe': 7.524273, 'vehiclesFlowWarpedOccupancyAuc': 0.32184708, 'vehiclesFlowWarpedOccupancyIou': 0.26373625}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.84876764, 'vehiclesObservedIou': 0.51806235, 'vehiclesOccludedAuc': 0.04610824, 'vehiclesOccludedIou': 0.024343781, 'vehiclesFlowEpe': 3.5831733, 'vehiclesFlowWarpedOccupancyAuc': 0.7048771, 'vehiclesFlowWarpedOccupancyIou': 0.54576075}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.18006235, 'vehiclesObservedIou': 0.0930386, 'vehiclesOccludedAuc': 0.018935373, 'vehiclesOccludedIou': 0.0033516982, 'vehiclesFlowEpe': 7.1508617, 'vehiclesFlowWarpedOccupancyAuc': 0.26469555, 'vehiclesFlowWarpedOccupancyIou': 0.10090782}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5333258, 'vehiclesObservedIou': 0.35834497, 'vehiclesOccludedAuc': 0.01800432, 'vehiclesOccludedIou': 0.0050257295, 'vehiclesFlowEpe': 3.7463021, 'vehiclesFlowWarpedOccupancyAuc': 0.62326413, 'vehiclesFlowWarpedOccupancyIou': 0.5140928}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9066488, 'vehiclesObservedIou': 0.6087675, 'vehiclesOccludedAuc': 0.042514745, 'vehiclesOccludedIou': 0.0107698105, 'vehiclesFlowEpe': 5.1685276, 'vehiclesFlowWarpedOccupancyAuc': 0.67956614, 'vehiclesFlowWarpedOccupancyIou': 0.62036455}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8916338, 'vehiclesObservedIou': 0.54749954, 'vehiclesOccludedAuc': 0.08293771, 'vehiclesOccludedIou': 0.01323197, 'vehiclesFlowEpe': 2.3365016, 'vehiclesFlowWarpedOccupancyAuc': 0.817535, 'vehiclesFlowWarpedOccupancyIou': 0.6525655}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.96544313, 'vehiclesObservedIou': 0.7780223, 'vehiclesOccludedAuc': 0.63411754, 'vehiclesOccludedIou': 0.08898255, 'vehiclesFlowEpe': 1.922833, 'vehiclesFlowWarpedOccupancyAuc': 0.8759228, 'vehiclesFlowWarpedOccupancyIou': 0.8244639}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.13235545, 'vehiclesObservedIou': 0.07168849, 'vehiclesOccludedAuc': 0.0067607416, 'vehiclesOccludedIou': 0.00214184, 'vehiclesFlowEpe': 7.5438447, 'vehiclesFlowWarpedOccupancyAuc': 0.1179895, 'vehiclesFlowWarpedOccupancyIou': 0.060160488}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.12834206, 'vehiclesObservedIou': 0.0857014, 'vehiclesOccludedAuc': 0.005160136, 'vehiclesOccludedIou': 0.0020540827, 'vehiclesFlowEpe': 12.834996, 'vehiclesFlowWarpedOccupancyAuc': 0.22669055, 'vehiclesFlowWarpedOccupancyIou': 0.10206395}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.88393503, 'vehiclesObservedIou': 0.51263076, 'vehiclesOccludedAuc': 0.06960014, 'vehiclesOccludedIou': 0.01933772, 'vehiclesFlowEpe': 7.143423, 'vehiclesFlowWarpedOccupancyAuc': 0.6277262, 'vehiclesFlowWarpedOccupancyIou': 0.56028426}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8761565, 'vehiclesObservedIou': 0.5442171, 'vehiclesOccludedAuc': 0.0077330517, 'vehiclesOccludedIou': 0.0024305684, 'vehiclesFlowEpe': 4.5909224, 'vehiclesFlowWarpedOccupancyAuc': 0.6954913, 'vehiclesFlowWarpedOccupancyIou': 0.60170513}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.79404366, 'vehiclesObservedIou': 0.49509555, 'vehiclesOccludedAuc': 0.021616839, 'vehiclesOccludedIou': 0.0038630078, 'vehiclesFlowEpe': 8.336769, 'vehiclesFlowWarpedOccupancyAuc': 0.6043622, 'vehiclesFlowWarpedOccupancyIou': 0.5382925}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.21592881, 'vehiclesObservedIou': 0.10738078, 'vehiclesOccludedAuc': 0.00047302246, 'vehiclesOccludedIou': 0.00035713665, 'vehiclesFlowEpe': 5.0734334, 'vehiclesFlowWarpedOccupancyAuc': 0.20222943, 'vehiclesFlowWarpedOccupancyIou': 0.1325457}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9305387, 'vehiclesObservedIou': 0.7717704, 'vehiclesOccludedAuc': 0.18786627, 'vehiclesOccludedIou': 0.016791247, 'vehiclesFlowEpe': 4.902623, 'vehiclesFlowWarpedOccupancyAuc': 0.8386554, 'vehiclesFlowWarpedOccupancyIou': 0.8627784}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.87169236, 'vehiclesObservedIou': 0.5180449, 'vehiclesOccludedAuc': 0.0045678434, 'vehiclesOccludedIou': 0.0016518431, 'vehiclesFlowEpe': 4.6166005, 'vehiclesFlowWarpedOccupancyAuc': 0.76380444, 'vehiclesFlowWarpedOccupancyIou': 0.6420074}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6421636, 'vehiclesObservedIou': 0.2862523, 'vehiclesOccludedAuc': 0.000779476, 'vehiclesOccludedIou': 0.00037776396, 'vehiclesFlowEpe': 5.5342383, 'vehiclesFlowWarpedOccupancyAuc': 0.5063476, 'vehiclesFlowWarpedOccupancyIou': 0.38434044}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.76435626, 'vehiclesObservedIou': 0.48354074, 'vehiclesOccludedAuc': 0.13583761, 'vehiclesOccludedIou': 0.024601955, 'vehiclesFlowEpe': 4.504705, 'vehiclesFlowWarpedOccupancyAuc': 0.68435377, 'vehiclesFlowWarpedOccupancyIou': 0.5730547}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.82323045, 'vehiclesObservedIou': 0.4783199, 'vehiclesOccludedAuc': 0.01325336, 'vehiclesOccludedIou': 0.0016498032, 'vehiclesFlowEpe': 3.511526, 'vehiclesFlowWarpedOccupancyAuc': 0.74603564, 'vehiclesFlowWarpedOccupancyIou': 0.6077808}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.17267159, 'vehiclesObservedIou': 0.074514054, 'vehiclesOccludedAuc': 0.0006521055, 'vehiclesOccludedIou': 0.000725602, 'vehiclesFlowEpe': 4.82654, 'vehiclesFlowWarpedOccupancyAuc': 0.25034404, 'vehiclesFlowWarpedOccupancyIou': 0.09459308}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.93989676, 'vehiclesObservedIou': 0.7103184, 'vehiclesOccludedAuc': 0.0031076358, 'vehiclesOccludedIou': 0.0011344445, 'vehiclesFlowEpe': 1.6968207, 'vehiclesFlowWarpedOccupancyAuc': 0.8770615, 'vehiclesFlowWarpedOccupancyIou': 0.80804}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.6791629, 'vehiclesObservedIou': 0.4003122, 'vehiclesOccludedAuc': 0.3554429, 'vehiclesOccludedIou': 0.057164118, 'vehiclesFlowEpe': 13.274732, 'vehiclesFlowWarpedOccupancyAuc': 0.4502402, 'vehiclesFlowWarpedOccupancyIou': 0.49274063}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.41547453, 'vehiclesObservedIou': 0.19817758, 'vehiclesOccludedAuc': 0.081010945, 'vehiclesOccludedIou': 0.010419523, 'vehiclesFlowEpe': 2.653012, 'vehiclesFlowWarpedOccupancyAuc': 0.4620891, 'vehiclesFlowWarpedOccupancyIou': 0.23280625}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5601109, 'vehiclesObservedIou': 0.27401456, 'vehiclesOccludedAuc': 0.034643058, 'vehiclesOccludedIou': 0.0081490055, 'vehiclesFlowEpe': 8.599978, 'vehiclesFlowWarpedOccupancyAuc': 0.4526811, 'vehiclesFlowWarpedOccupancyIou': 0.26423696}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6748399, 'vehiclesObservedIou': 0.32798097, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 4.024954, 'vehiclesFlowWarpedOccupancyAuc': 0.52345324, 'vehiclesFlowWarpedOccupancyIou': 0.46637884}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.85173684, 'vehiclesObservedIou': 0.53666484, 'vehiclesOccludedAuc': 0.15933788, 'vehiclesOccludedIou': 0.026066856, 'vehiclesFlowEpe': 3.1563766, 'vehiclesFlowWarpedOccupancyAuc': 0.7574599, 'vehiclesFlowWarpedOccupancyIou': 0.67233086}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.96544313, 'vehiclesObservedIou': 0.7780223, 'vehiclesOccludedAuc': 0.63411754, 'vehiclesOccludedIou': 0.08898255, 'vehiclesFlowEpe': 1.922833, 'vehiclesFlowWarpedOccupancyAuc': 0.8759228, 'vehiclesFlowWarpedOccupancyIou': 0.8244639}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.652006723030303, 'vehiclesObservedIou': 0.3952174558787879, 'vehiclesOccludedAuc': 0.0805205702509091, 'vehiclesOccludedIou': 0.014829338547272725, 'vehiclesFlowEpe': 5.516287969696969, 'vehiclesFlowWarpedOccupancyAuc': 0.5675056200000002, 'vehiclesFlowWarpedOccupancyIou': 0.46100132993939397}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00147new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 11:01:50.260293: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:01:50.312551: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:01:50.312834: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.27380854, 'vehiclesObservedIou': 0.10703763, 'vehiclesOccludedAuc': 0.11374568, 'vehiclesOccludedIou': 0.02918983, 'vehiclesFlowEpe': 4.2183156, 'vehiclesFlowWarpedOccupancyAuc': 0.4171766, 'vehiclesFlowWarpedOccupancyIou': 0.10833902}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8089711, 'vehiclesObservedIou': 0.5203213, 'vehiclesOccludedAuc': 0.06625218, 'vehiclesOccludedIou': 0.02124835, 'vehiclesFlowEpe': 7.692299, 'vehiclesFlowWarpedOccupancyAuc': 0.69957256, 'vehiclesFlowWarpedOccupancyIou': 0.639937}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.943952, 'vehiclesObservedIou': 0.67147446, 'vehiclesOccludedAuc': 0.039652307, 'vehiclesOccludedIou': 0.015177662, 'vehiclesFlowEpe': 2.147884, 'vehiclesFlowWarpedOccupancyAuc': 0.81733763, 'vehiclesFlowWarpedOccupancyIou': 0.728264}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.5422714, 'vehiclesObservedIou': 0.2746391, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 6.7913756, 'vehiclesFlowWarpedOccupancyAuc': 0.38903433, 'vehiclesFlowWarpedOccupancyIou': 0.34641528}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6589783, 'vehiclesObservedIou': 0.34128976, 'vehiclesOccludedAuc': 0.5731815, 'vehiclesOccludedIou': 0.16269124, 'vehiclesFlowEpe': 4.3826246, 'vehiclesFlowWarpedOccupancyAuc': 0.5564001, 'vehiclesFlowWarpedOccupancyIou': 0.43520394}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7652682, 'vehiclesObservedIou': 0.50347435, 'vehiclesOccludedAuc': 0.1790317, 'vehiclesOccludedIou': 0.023781091, 'vehiclesFlowEpe': 2.6952505, 'vehiclesFlowWarpedOccupancyAuc': 0.7438876, 'vehiclesFlowWarpedOccupancyIou': 0.5128024}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.6109049, 'vehiclesObservedIou': 0.36404008, 'vehiclesOccludedAuc': 0.11151705, 'vehiclesOccludedIou': 0.017165177, 'vehiclesFlowEpe': 7.1345053, 'vehiclesFlowWarpedOccupancyAuc': 0.48654068, 'vehiclesFlowWarpedOccupancyIou': 0.4145453}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.3302682, 'vehiclesObservedIou': 0.10653137, 'vehiclesOccludedAuc': 0.016453799, 'vehiclesOccludedIou': 0.0043915515, 'vehiclesFlowEpe': 6.2241735, 'vehiclesFlowWarpedOccupancyAuc': 0.3515221, 'vehiclesFlowWarpedOccupancyIou': 0.13270198}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.84463155, 'vehiclesObservedIou': 0.4699168, 'vehiclesOccludedAuc': 0.006082697, 'vehiclesOccludedIou': 0.003977436, 'vehiclesFlowEpe': 6.662135, 'vehiclesFlowWarpedOccupancyAuc': 0.61391175, 'vehiclesFlowWarpedOccupancyIou': 0.50852937}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7576128, 'vehiclesObservedIou': 0.42667162, 'vehiclesOccludedAuc': 0.03773451, 'vehiclesOccludedIou': 0.019705655, 'vehiclesFlowEpe': 3.752611, 'vehiclesFlowWarpedOccupancyAuc': 0.7084421, 'vehiclesFlowWarpedOccupancyIou': 0.50672275}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.07817403, 'vehiclesObservedIou': 0.023125999, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.806268, 'vehiclesFlowWarpedOccupancyAuc': 0.11008368, 'vehiclesFlowWarpedOccupancyIou': 0.019637099}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7195554, 'vehiclesObservedIou': 0.36107838, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 5.1460223, 'vehiclesFlowWarpedOccupancyAuc': 0.5951396, 'vehiclesFlowWarpedOccupancyIou': 0.5128509}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9485374, 'vehiclesObservedIou': 0.7413216, 'vehiclesOccludedAuc': 0.03818873, 'vehiclesOccludedIou': 0.006051967, 'vehiclesFlowEpe': 5.224986, 'vehiclesFlowWarpedOccupancyAuc': 0.7727574, 'vehiclesFlowWarpedOccupancyIou': 0.73966736}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.57287055, 'vehiclesObservedIou': 0.2677764, 'vehiclesOccludedAuc': 0.035166603, 'vehiclesOccludedIou': 0.013593498, 'vehiclesFlowEpe': 4.193157, 'vehiclesFlowWarpedOccupancyAuc': 0.49962583, 'vehiclesFlowWarpedOccupancyIou': 0.32353112}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6713518, 'vehiclesObservedIou': 0.34163922, 'vehiclesOccludedAuc': 0.12545267, 'vehiclesOccludedIou': 0.028088603, 'vehiclesFlowEpe': 4.975883, 'vehiclesFlowWarpedOccupancyAuc': 0.5305567, 'vehiclesFlowWarpedOccupancyIou': 0.35577798}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7759348, 'vehiclesObservedIou': 0.45705912, 'vehiclesOccludedAuc': 0.24953566, 'vehiclesOccludedIou': 0.066311024, 'vehiclesFlowEpe': 3.7242463, 'vehiclesFlowWarpedOccupancyAuc': 0.74023116, 'vehiclesFlowWarpedOccupancyIou': 0.58126986}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8158216, 'vehiclesObservedIou': 0.420619, 'vehiclesOccludedAuc': 0.32246798, 'vehiclesOccludedIou': 0.07295037, 'vehiclesFlowEpe': 6.0896745, 'vehiclesFlowWarpedOccupancyAuc': 0.7013604, 'vehiclesFlowWarpedOccupancyIou': 0.5377332}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7883171, 'vehiclesObservedIou': 0.5023928, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 0.71029776, 'vehiclesFlowWarpedOccupancyAuc': 0.7966296, 'vehiclesFlowWarpedOccupancyIou': 0.6797323}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.98038113, 'vehiclesObservedIou': 0.76938856, 'vehiclesOccludedAuc': 0.0063818716, 'vehiclesOccludedIou': 0.0036354424, 'vehiclesFlowEpe': 4.2941513, 'vehiclesFlowWarpedOccupancyAuc': 0.81930226, 'vehiclesFlowWarpedOccupancyIou': 0.79940134}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.45010853, 'vehiclesObservedIou': 0.17124388, 'vehiclesOccludedAuc': 0.005469033, 'vehiclesOccludedIou': 0.0022010107, 'vehiclesFlowEpe': 7.670489, 'vehiclesFlowWarpedOccupancyAuc': 0.38709292, 'vehiclesFlowWarpedOccupancyIou': 0.17816935}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.6960915, 'vehiclesObservedIou': 0.44708177, 'vehiclesOccludedAuc': 0.044076275, 'vehiclesOccludedIou': 0.009370016, 'vehiclesFlowEpe': 2.8534892, 'vehiclesFlowWarpedOccupancyAuc': 0.6545197, 'vehiclesFlowWarpedOccupancyIou': 0.4794602}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.46182516, 'vehiclesObservedIou': 0.25756088, 'vehiclesOccludedAuc': 0.035290297, 'vehiclesOccludedIou': 0.011291709, 'vehiclesFlowEpe': 7.259995, 'vehiclesFlowWarpedOccupancyAuc': 0.2929215, 'vehiclesFlowWarpedOccupancyIou': 0.22960497}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.79511416, 'vehiclesObservedIou': 0.61730886, 'vehiclesOccludedAuc': 0.11863488, 'vehiclesOccludedIou': 0.025293838, 'vehiclesFlowEpe': 2.5919313, 'vehiclesFlowWarpedOccupancyAuc': 0.79134053, 'vehiclesFlowWarpedOccupancyIou': 0.6647098}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.905512, 'vehiclesObservedIou': 0.61569244, 'vehiclesOccludedAuc': 0.0013962826, 'vehiclesOccludedIou': 0.0011802968, 'vehiclesFlowEpe': 4.0944967, 'vehiclesFlowWarpedOccupancyAuc': 0.73124814, 'vehiclesFlowWarpedOccupancyIou': 0.66599506}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.16532144, 'vehiclesObservedIou': 0.07602433, 'vehiclesOccludedAuc': 0.009182367, 'vehiclesOccludedIou': 0.002795174, 'vehiclesFlowEpe': 21.061962, 'vehiclesFlowWarpedOccupancyAuc': 0.12721108, 'vehiclesFlowWarpedOccupancyIou': 0.069269195}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.95776486, 'vehiclesObservedIou': 0.7454637, 'vehiclesOccludedAuc': 0.08196515, 'vehiclesOccludedIou': 0.010589641, 'vehiclesFlowEpe': 3.4150128, 'vehiclesFlowWarpedOccupancyAuc': 0.85758007, 'vehiclesFlowWarpedOccupancyIou': 0.8428394}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.5976736, 'vehiclesObservedIou': 0.46485734, 'vehiclesOccludedAuc': 0.01771826, 'vehiclesOccludedIou': 0.0037249639, 'vehiclesFlowEpe': 5.530429, 'vehiclesFlowWarpedOccupancyAuc': 0.61932796, 'vehiclesFlowWarpedOccupancyIou': 0.51173466}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.92539036, 'vehiclesObservedIou': 0.65111166, 'vehiclesOccludedAuc': 0.0712948, 'vehiclesOccludedIou': 0.020661712, 'vehiclesFlowEpe': 2.7806025, 'vehiclesFlowWarpedOccupancyAuc': 0.861041, 'vehiclesFlowWarpedOccupancyIou': 0.7727107}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7421929, 'vehiclesObservedIou': 0.47656992, 'vehiclesOccludedAuc': 0.020781938, 'vehiclesOccludedIou': 0.009362216, 'vehiclesFlowEpe': 4.738958, 'vehiclesFlowWarpedOccupancyAuc': 0.69575393, 'vehiclesFlowWarpedOccupancyIou': 0.5688884}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.5998221, 'vehiclesObservedIou': 0.33928886, 'vehiclesOccludedAuc': 0.20430496, 'vehiclesOccludedIou': 0.024150647, 'vehiclesFlowEpe': 2.537427, 'vehiclesFlowWarpedOccupancyAuc': 0.66579044, 'vehiclesFlowWarpedOccupancyIou': 0.42510417}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.2930753, 'vehiclesObservedIou': 0.1308581, 'vehiclesOccludedAuc': 0.05481133, 'vehiclesOccludedIou': 0.010287208, 'vehiclesFlowEpe': 6.127185, 'vehiclesFlowWarpedOccupancyAuc': 0.32779202, 'vehiclesFlowWarpedOccupancyIou': 0.11244151}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.98038113, 'vehiclesObservedIou': 0.76938856, 'vehiclesOccludedAuc': 0.0063818716, 'vehiclesOccludedIou': 0.0036354424, 'vehiclesFlowEpe': 4.2941513, 'vehiclesFlowWarpedOccupancyAuc': 0.81930226, 'vehiclesFlowWarpedOccupancyIou': 0.79940134}
Average Time: 0.0012 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6605646035483873, 'vehiclesObservedIou': 0.4084793319032257, 'vehiclesOccludedAuc': 0.08341195194193547, 'vehiclesOccludedIou': 0.01996346223548387, 'vehiclesFlowEpe': 5.146059282580644, 'vehiclesFlowWarpedOccupancyAuc': 0.5922945603225807, 'vehiclesFlowWarpedOccupancyIou': 0.4646448262580645}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00102new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 11:02:10.342707: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:02:10.395340: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:02:10.395635: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7626215, 'vehiclesObservedIou': 0.39431682, 'vehiclesOccludedAuc': 0.053234473, 'vehiclesOccludedIou': 0.0121134445, 'vehiclesFlowEpe': 2.505038, 'vehiclesFlowWarpedOccupancyAuc': 0.6763328, 'vehiclesFlowWarpedOccupancyIou': 0.4720047}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.56489384, 'vehiclesObservedIou': 0.32346475, 'vehiclesOccludedAuc': 0.12410986, 'vehiclesOccludedIou': 0.01270208, 'vehiclesFlowEpe': 3.7952282, 'vehiclesFlowWarpedOccupancyAuc': 0.5369131, 'vehiclesFlowWarpedOccupancyIou': 0.34969184}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8741696, 'vehiclesObservedIou': 0.6814679, 'vehiclesOccludedAuc': 0.1263215, 'vehiclesOccludedIou': 0.041092865, 'vehiclesFlowEpe': 2.5659935, 'vehiclesFlowWarpedOccupancyAuc': 0.84479755, 'vehiclesFlowWarpedOccupancyIou': 0.7784285}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.49299514, 'vehiclesObservedIou': 0.2835222, 'vehiclesOccludedAuc': 0.058479637, 'vehiclesOccludedIou': 0.008821044, 'vehiclesFlowEpe': 8.471554, 'vehiclesFlowWarpedOccupancyAuc': 0.46225676, 'vehiclesFlowWarpedOccupancyIou': 0.3336348}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.67560583, 'vehiclesObservedIou': 0.37988028, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.9215052, 'vehiclesFlowWarpedOccupancyAuc': 0.7508714, 'vehiclesFlowWarpedOccupancyIou': 0.46719512}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9517519, 'vehiclesObservedIou': 0.6741912, 'vehiclesOccludedAuc': 0.11023163, 'vehiclesOccludedIou': 0.034570936, 'vehiclesFlowEpe': 2.1515942, 'vehiclesFlowWarpedOccupancyAuc': 0.88471705, 'vehiclesFlowWarpedOccupancyIou': 0.8127761}
DataLossError encountered. Skipping the corrupted record.
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.9517519, 'vehiclesObservedIou': 0.6741912, 'vehiclesOccludedAuc': 0.11023163, 'vehiclesOccludedIou': 0.034570936, 'vehiclesFlowEpe': 2.1515942, 'vehiclesFlowWarpedOccupancyAuc': 0.88471705, 'vehiclesFlowWarpedOccupancyIou': 0.8127761}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.7203396349999999, 'vehiclesObservedIou': 0.45614052499999996, 'vehiclesOccludedAuc': 0.07872951666666667, 'vehiclesOccludedIou': 0.018216728249999998, 'vehiclesFlowEpe': 3.7351521833333323, 'vehiclesFlowWarpedOccupancyAuc': 0.6926481099999999, 'vehiclesFlowWarpedOccupancyIou': 0.5356218433333333}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00065new.tfrecords...
2024-05-28 11:02:14.501831: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:02:14.554694: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:02:14.554978: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.841486, 'vehiclesObservedIou': 0.6751717, 'vehiclesOccludedAuc': 0.013631684, 'vehiclesOccludedIou': 0.004051851, 'vehiclesFlowEpe': 6.709314, 'vehiclesFlowWarpedOccupancyAuc': 0.7563571, 'vehiclesFlowWarpedOccupancyIou': 0.79051375}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.1352751, 'vehiclesObservedIou': 0.06846066, 'vehiclesOccludedAuc': 0.012405959, 'vehiclesOccludedIou': 0.0026767869, 'vehiclesFlowEpe': 3.703082, 'vehiclesFlowWarpedOccupancyAuc': 0.29692295, 'vehiclesFlowWarpedOccupancyIou': 0.09243888}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.34754765, 'vehiclesObservedIou': 0.18215099, 'vehiclesOccludedAuc': 0.00082265225, 'vehiclesOccludedIou': 0.00013070417, 'vehiclesFlowEpe': 7.1292973, 'vehiclesFlowWarpedOccupancyAuc': 0.46574792, 'vehiclesFlowWarpedOccupancyIou': 0.21513891}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9108725, 'vehiclesObservedIou': 0.57213527, 'vehiclesOccludedAuc': 0.033479016, 'vehiclesOccludedIou': 0.011786576, 'vehiclesFlowEpe': 2.9289796, 'vehiclesFlowWarpedOccupancyAuc': 0.6993415, 'vehiclesFlowWarpedOccupancyIou': 0.6488167}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.49805835, 'vehiclesObservedIou': 0.2054221, 'vehiclesOccludedAuc': 0.13174255, 'vehiclesOccludedIou': 0.014606913, 'vehiclesFlowEpe': 3.6294918, 'vehiclesFlowWarpedOccupancyAuc': 0.38128382, 'vehiclesFlowWarpedOccupancyIou': 0.2949139}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6925803, 'vehiclesObservedIou': 0.38550246, 'vehiclesOccludedAuc': 0.2516023, 'vehiclesOccludedIou': 0.054985628, 'vehiclesFlowEpe': 4.26809, 'vehiclesFlowWarpedOccupancyAuc': 0.6436617, 'vehiclesFlowWarpedOccupancyIou': 0.45878744}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8082822, 'vehiclesObservedIou': 0.48982698, 'vehiclesOccludedAuc': 0.31455702, 'vehiclesOccludedIou': 0.04456747, 'vehiclesFlowEpe': 3.7589974, 'vehiclesFlowWarpedOccupancyAuc': 0.6676509, 'vehiclesFlowWarpedOccupancyIou': 0.55836797}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.13546878, 'vehiclesObservedIou': 0.07634334, 'vehiclesOccludedAuc': 0.023479383, 'vehiclesOccludedIou': 0.0027597975, 'vehiclesFlowEpe': 4.16789, 'vehiclesFlowWarpedOccupancyAuc': 0.40886825, 'vehiclesFlowWarpedOccupancyIou': 0.09938837}
Time: 0.0015 seconds, Metrics: {'vehiclesObservedAuc': 0.8723776, 'vehiclesObservedIou': 0.58677316, 'vehiclesOccludedAuc': 0.12206434, 'vehiclesOccludedIou': 0.022732986, 'vehiclesFlowEpe': 9.466289, 'vehiclesFlowWarpedOccupancyAuc': 0.60078275, 'vehiclesFlowWarpedOccupancyIou': 0.59710443}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.65672815, 'vehiclesObservedIou': 0.45583934, 'vehiclesOccludedAuc': 0.026864294, 'vehiclesOccludedIou': 0.008877115, 'vehiclesFlowEpe': 4.00169, 'vehiclesFlowWarpedOccupancyAuc': 0.689896, 'vehiclesFlowWarpedOccupancyIou': 0.4727913}
Time: 0.0014 seconds, Metrics: {'vehiclesObservedAuc': 0.5555733, 'vehiclesObservedIou': 0.3008363, 'vehiclesOccludedAuc': 0.05462716, 'vehiclesOccludedIou': 0.023329597, 'vehiclesFlowEpe': 3.8265176, 'vehiclesFlowWarpedOccupancyAuc': 0.5550384, 'vehiclesFlowWarpedOccupancyIou': 0.36178732}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.767313, 'vehiclesObservedIou': 0.35525787, 'vehiclesOccludedAuc': 0.086437985, 'vehiclesOccludedIou': 0.029665377, 'vehiclesFlowEpe': 4.608328, 'vehiclesFlowWarpedOccupancyAuc': 0.624614, 'vehiclesFlowWarpedOccupancyIou': 0.42841738}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7559179, 'vehiclesObservedIou': 0.46308735, 'vehiclesOccludedAuc': 0.3531049, 'vehiclesOccludedIou': 0.012733373, 'vehiclesFlowEpe': 4.224841, 'vehiclesFlowWarpedOccupancyAuc': 0.721107, 'vehiclesFlowWarpedOccupancyIou': 0.67347074}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.77751666, 'vehiclesObservedIou': 0.47386363, 'vehiclesOccludedAuc': 0.27788007, 'vehiclesOccludedIou': 0.04084126, 'vehiclesFlowEpe': 3.5253682, 'vehiclesFlowWarpedOccupancyAuc': 0.6894162, 'vehiclesFlowWarpedOccupancyIou': 0.5375437}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.96494853, 'vehiclesObservedIou': 0.62724555, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 1.7903998, 'vehiclesFlowWarpedOccupancyAuc': 0.81783485, 'vehiclesFlowWarpedOccupancyIou': 0.7194888}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.71293986, 'vehiclesObservedIou': 0.43712008, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.3997452, 'vehiclesFlowWarpedOccupancyAuc': 0.6852693, 'vehiclesFlowWarpedOccupancyIou': 0.55073494}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.74833834, 'vehiclesObservedIou': 0.45491454, 'vehiclesOccludedAuc': 0.0075932797, 'vehiclesOccludedIou': 0.002358905, 'vehiclesFlowEpe': 7.469572, 'vehiclesFlowWarpedOccupancyAuc': 0.5253215, 'vehiclesFlowWarpedOccupancyIou': 0.5571735}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6905561, 'vehiclesObservedIou': 0.36395162, 'vehiclesOccludedAuc': 0.063681215, 'vehiclesOccludedIou': 0.016461458, 'vehiclesFlowEpe': 2.9208927, 'vehiclesFlowWarpedOccupancyAuc': 0.6142016, 'vehiclesFlowWarpedOccupancyIou': 0.40801105}
Time: 0.0014 seconds, Metrics: {'vehiclesObservedAuc': 0.639022, 'vehiclesObservedIou': 0.32523966, 'vehiclesOccludedAuc': 0.004754246, 'vehiclesOccludedIou': 0.0017975034, 'vehiclesFlowEpe': 3.7351234, 'vehiclesFlowWarpedOccupancyAuc': 0.581483, 'vehiclesFlowWarpedOccupancyIou': 0.38848755}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6522599, 'vehiclesObservedIou': 0.353144, 'vehiclesOccludedAuc': 0.29946586, 'vehiclesOccludedIou': 0.031166764, 'vehiclesFlowEpe': 3.3480349, 'vehiclesFlowWarpedOccupancyAuc': 0.5869122, 'vehiclesFlowWarpedOccupancyIou': 0.4368372}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.72785425, 'vehiclesObservedIou': 0.37178835, 'vehiclesOccludedAuc': 0.022750657, 'vehiclesOccludedIou': 0.009197623, 'vehiclesFlowEpe': 8.1423, 'vehiclesFlowWarpedOccupancyAuc': 0.46252418, 'vehiclesFlowWarpedOccupancyIou': 0.4002294}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.28173447, 'vehiclesObservedIou': 0.14292483, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 4.1552715, 'vehiclesFlowWarpedOccupancyAuc': 0.38859865, 'vehiclesFlowWarpedOccupancyIou': 0.18617682}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.74278456, 'vehiclesObservedIou': 0.4332493, 'vehiclesOccludedAuc': 0.05166888, 'vehiclesOccludedIou': 0.012247974, 'vehiclesFlowEpe': 3.6802611, 'vehiclesFlowWarpedOccupancyAuc': 0.5902455, 'vehiclesFlowWarpedOccupancyIou': 0.49439916}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.34229136, 'vehiclesObservedIou': 0.16009803, 'vehiclesOccludedAuc': 0.042551335, 'vehiclesOccludedIou': 0.013348053, 'vehiclesFlowEpe': 7.046031, 'vehiclesFlowWarpedOccupancyAuc': 0.36786616, 'vehiclesFlowWarpedOccupancyIou': 0.17805082}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.14627007, 'vehiclesObservedIou': 0.055190302, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.9174747, 'vehiclesFlowWarpedOccupancyAuc': 0.18485987, 'vehiclesFlowWarpedOccupancyIou': 0.050408594}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7372513, 'vehiclesObservedIou': 0.35352132, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 4.745665, 'vehiclesFlowWarpedOccupancyAuc': 0.6003085, 'vehiclesFlowWarpedOccupancyIou': 0.456377}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.4009413, 'vehiclesObservedIou': 0.23567489, 'vehiclesOccludedAuc': 0.037669994, 'vehiclesOccludedIou': 0.013387104, 'vehiclesFlowEpe': 5.154661, 'vehiclesFlowWarpedOccupancyAuc': 0.4733287, 'vehiclesFlowWarpedOccupancyIou': 0.26243746}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.29218608, 'vehiclesObservedIou': 0.12728769, 'vehiclesOccludedAuc': 0.008795011, 'vehiclesOccludedIou': 0.0031640427, 'vehiclesFlowEpe': 5.3847513, 'vehiclesFlowWarpedOccupancyAuc': 0.4313104, 'vehiclesFlowWarpedOccupancyIou': 0.14587684}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.55034673, 'vehiclesObservedIou': 0.28174195, 'vehiclesOccludedAuc': 0.09145749, 'vehiclesOccludedIou': 0.009038713, 'vehiclesFlowEpe': 3.4698591, 'vehiclesFlowWarpedOccupancyAuc': 0.5908813, 'vehiclesFlowWarpedOccupancyIou': 0.32833815}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.96975327, 'vehiclesObservedIou': 0.83045036, 'vehiclesOccludedAuc': 0.06786234, 'vehiclesOccludedIou': 0.011012781, 'vehiclesFlowEpe': 5.699916, 'vehiclesFlowWarpedOccupancyAuc': 0.8704434, 'vehiclesFlowWarpedOccupancyIou': 0.90730625}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9316379, 'vehiclesObservedIou': 0.6721524, 'vehiclesOccludedAuc': 0.09557712, 'vehiclesOccludedIou': 0.02527798, 'vehiclesFlowEpe': 2.274049, 'vehiclesFlowWarpedOccupancyAuc': 0.8361049, 'vehiclesFlowWarpedOccupancyIou': 0.7345099}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.96975327, 'vehiclesObservedIou': 0.83045036, 'vehiclesOccludedAuc': 0.06786234, 'vehiclesOccludedIou': 0.011012781, 'vehiclesFlowEpe': 5.699916, 'vehiclesFlowWarpedOccupancyAuc': 0.8704434, 'vehiclesFlowWarpedOccupancyIou': 0.90730625}
Average Time: 0.0012 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6221326938709677, 'vehiclesObservedIou': 0.3714956781290323, 'vehiclesOccludedAuc': 0.08053312067580645, 'vehiclesOccludedIou': 0.013619494699032253, 'vehiclesFlowEpe': 4.589747858064516, 'vehiclesFlowWarpedOccupancyAuc': 0.5744575, 'vehiclesFlowWarpedOccupancyIou': 0.4333652975483871}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00046new.tfrecords...
2024-05-28 11:02:34.370001: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:02:34.421738: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:02:34.422015: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9411285, 'vehiclesObservedIou': 0.6808286, 'vehiclesOccludedAuc': 0.008009317, 'vehiclesOccludedIou': 0.003452518, 'vehiclesFlowEpe': 2.3815246, 'vehiclesFlowWarpedOccupancyAuc': 0.81951946, 'vehiclesFlowWarpedOccupancyIou': 0.75607824}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8174493, 'vehiclesObservedIou': 0.49903885, 'vehiclesOccludedAuc': 0.1139568, 'vehiclesOccludedIou': 0.019822292, 'vehiclesFlowEpe': 3.9814873, 'vehiclesFlowWarpedOccupancyAuc': 0.69688785, 'vehiclesFlowWarpedOccupancyIou': 0.5946994}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9234753, 'vehiclesObservedIou': 0.6604977, 'vehiclesOccludedAuc': 0.008660452, 'vehiclesOccludedIou': 0.0035387299, 'vehiclesFlowEpe': 5.1689053, 'vehiclesFlowWarpedOccupancyAuc': 0.7867086, 'vehiclesFlowWarpedOccupancyIou': 0.7310273}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8601706, 'vehiclesObservedIou': 0.56052625, 'vehiclesOccludedAuc': 0.20135413, 'vehiclesOccludedIou': 0.035071176, 'vehiclesFlowEpe': 4.163076, 'vehiclesFlowWarpedOccupancyAuc': 0.7797306, 'vehiclesFlowWarpedOccupancyIou': 0.6869289}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.64116615, 'vehiclesObservedIou': 0.33893028, 'vehiclesOccludedAuc': 0.019278925, 'vehiclesOccludedIou': 0.005342886, 'vehiclesFlowEpe': 3.478767, 'vehiclesFlowWarpedOccupancyAuc': 0.5686523, 'vehiclesFlowWarpedOccupancyIou': 0.36376476}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9560112, 'vehiclesObservedIou': 0.72789276, 'vehiclesOccludedAuc': 0.009891242, 'vehiclesOccludedIou': 0.0045854473, 'vehiclesFlowEpe': 2.935792, 'vehiclesFlowWarpedOccupancyAuc': 0.81613714, 'vehiclesFlowWarpedOccupancyIou': 0.759408}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7290947, 'vehiclesObservedIou': 0.5082595, 'vehiclesOccludedAuc': 0.094409734, 'vehiclesOccludedIou': 0.01600125, 'vehiclesFlowEpe': 6.0121303, 'vehiclesFlowWarpedOccupancyAuc': 0.70598257, 'vehiclesFlowWarpedOccupancyIou': 0.5792047}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.29623377, 'vehiclesObservedIou': 0.13286762, 'vehiclesOccludedAuc': 0.029525, 'vehiclesOccludedIou': 0.007688887, 'vehiclesFlowEpe': 6.3199196, 'vehiclesFlowWarpedOccupancyAuc': 0.39162147, 'vehiclesFlowWarpedOccupancyIou': 0.15028298}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.77130663, 'vehiclesObservedIou': 0.5011076, 'vehiclesOccludedAuc': 0.036548514, 'vehiclesOccludedIou': 0.012849775, 'vehiclesFlowEpe': 6.9901276, 'vehiclesFlowWarpedOccupancyAuc': 0.7211586, 'vehiclesFlowWarpedOccupancyIou': 0.5374397}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7541019, 'vehiclesObservedIou': 0.4588601, 'vehiclesOccludedAuc': 0.07908948, 'vehiclesOccludedIou': 0.008148855, 'vehiclesFlowEpe': 2.8441825, 'vehiclesFlowWarpedOccupancyAuc': 0.7154596, 'vehiclesFlowWarpedOccupancyIou': 0.582726}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9173741, 'vehiclesObservedIou': 0.68827635, 'vehiclesOccludedAuc': 0.18025267, 'vehiclesOccludedIou': 0.06273154, 'vehiclesFlowEpe': 5.947059, 'vehiclesFlowWarpedOccupancyAuc': 0.7495801, 'vehiclesFlowWarpedOccupancyIou': 0.6533877}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.38339043, 'vehiclesObservedIou': 0.18845698, 'vehiclesOccludedAuc': 0.07405981, 'vehiclesOccludedIou': 0.011595651, 'vehiclesFlowEpe': 4.2327924, 'vehiclesFlowWarpedOccupancyAuc': 0.51485974, 'vehiclesFlowWarpedOccupancyIou': 0.17575835}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5756291, 'vehiclesObservedIou': 0.2855097, 'vehiclesOccludedAuc': 0.0005748959, 'vehiclesOccludedIou': 0.0009906893, 'vehiclesFlowEpe': 3.0828214, 'vehiclesFlowWarpedOccupancyAuc': 0.5351131, 'vehiclesFlowWarpedOccupancyIou': 0.32331637}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9304128, 'vehiclesObservedIou': 0.78023493, 'vehiclesOccludedAuc': 0.01684873, 'vehiclesOccludedIou': 0.0051994137, 'vehiclesFlowEpe': 3.1711679, 'vehiclesFlowWarpedOccupancyAuc': 0.8465385, 'vehiclesFlowWarpedOccupancyIou': 0.8439786}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.32071206, 'vehiclesObservedIou': 0.15127726, 'vehiclesOccludedAuc': 0.105619594, 'vehiclesOccludedIou': 0.025297428, 'vehiclesFlowEpe': 4.9741983, 'vehiclesFlowWarpedOccupancyAuc': 0.4319103, 'vehiclesFlowWarpedOccupancyIou': 0.20540747}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.75101554, 'vehiclesObservedIou': 0.40595078, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.7903132, 'vehiclesFlowWarpedOccupancyAuc': 0.5899501, 'vehiclesFlowWarpedOccupancyIou': 0.47481036}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.84667444, 'vehiclesObservedIou': 0.6270187, 'vehiclesOccludedAuc': 0.017797805, 'vehiclesOccludedIou': 0.0049181236, 'vehiclesFlowEpe': 2.1311884, 'vehiclesFlowWarpedOccupancyAuc': 0.83991885, 'vehiclesFlowWarpedOccupancyIou': 0.70030856}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.38413438, 'vehiclesObservedIou': 0.21251906, 'vehiclesOccludedAuc': 0.044085182, 'vehiclesOccludedIou': 0.015289046, 'vehiclesFlowEpe': 3.9241729, 'vehiclesFlowWarpedOccupancyAuc': 0.35360336, 'vehiclesFlowWarpedOccupancyIou': 0.24417117}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.2002679, 'vehiclesObservedIou': 0.0843324, 'vehiclesOccludedAuc': 0.0055538905, 'vehiclesOccludedIou': 0.0031466265, 'vehiclesFlowEpe': 5.216861, 'vehiclesFlowWarpedOccupancyAuc': 0.30865687, 'vehiclesFlowWarpedOccupancyIou': 0.08808845}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.74344444, 'vehiclesObservedIou': 0.4495145, 'vehiclesOccludedAuc': 0.007437391, 'vehiclesOccludedIou': 0.0032347918, 'vehiclesFlowEpe': 2.7964687, 'vehiclesFlowWarpedOccupancyAuc': 0.7226981, 'vehiclesFlowWarpedOccupancyIou': 0.5397244}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7986277, 'vehiclesObservedIou': 0.4442807, 'vehiclesOccludedAuc': 0.0005319208, 'vehiclesOccludedIou': 0.00027892995, 'vehiclesFlowEpe': 3.2254028, 'vehiclesFlowWarpedOccupancyAuc': 0.68077385, 'vehiclesFlowWarpedOccupancyIou': 0.52705693}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.91933143, 'vehiclesObservedIou': 0.6552354, 'vehiclesOccludedAuc': 0.07534455, 'vehiclesOccludedIou': 0.019544581, 'vehiclesFlowEpe': 3.310803, 'vehiclesFlowWarpedOccupancyAuc': 0.76727265, 'vehiclesFlowWarpedOccupancyIou': 0.6837404}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7897089, 'vehiclesObservedIou': 0.36033574, 'vehiclesOccludedAuc': 0.0016334779, 'vehiclesOccludedIou': 0.00046608245, 'vehiclesFlowEpe': 21.781559, 'vehiclesFlowWarpedOccupancyAuc': 0.4985038, 'vehiclesFlowWarpedOccupancyIou': 0.41724032}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.69448024, 'vehiclesObservedIou': 0.33676806, 'vehiclesOccludedAuc': 0.023072982, 'vehiclesOccludedIou': 0.0070051886, 'vehiclesFlowEpe': 4.5338235, 'vehiclesFlowWarpedOccupancyAuc': 0.6014307, 'vehiclesFlowWarpedOccupancyIou': 0.3968287}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8994504, 'vehiclesObservedIou': 0.5733246, 'vehiclesOccludedAuc': 0.07708771, 'vehiclesOccludedIou': 0.022624496, 'vehiclesFlowEpe': 4.786011, 'vehiclesFlowWarpedOccupancyAuc': 0.72887355, 'vehiclesFlowWarpedOccupancyIou': 0.6031187}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.3333785, 'vehiclesObservedIou': 0.15356207, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 4.742218, 'vehiclesFlowWarpedOccupancyAuc': 0.46548268, 'vehiclesFlowWarpedOccupancyIou': 0.2014474}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.916584, 'vehiclesObservedIou': 0.69751084, 'vehiclesOccludedAuc': 0.123051725, 'vehiclesOccludedIou': 0.020615906, 'vehiclesFlowEpe': 3.834074, 'vehiclesFlowWarpedOccupancyAuc': 0.79567176, 'vehiclesFlowWarpedOccupancyIou': 0.7741305}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7394685, 'vehiclesObservedIou': 0.3733165, 'vehiclesOccludedAuc': 0.04174829, 'vehiclesOccludedIou': 0.009589115, 'vehiclesFlowEpe': 5.771149, 'vehiclesFlowWarpedOccupancyAuc': 0.5510595, 'vehiclesFlowWarpedOccupancyIou': 0.5002728}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9701785, 'vehiclesObservedIou': 0.7245811, 'vehiclesOccludedAuc': 0.001429169, 'vehiclesOccludedIou': 0.0004891583, 'vehiclesFlowEpe': 1.2128457, 'vehiclesFlowWarpedOccupancyAuc': 0.88236696, 'vehiclesFlowWarpedOccupancyIou': 0.82332265}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.9701785, 'vehiclesObservedIou': 0.7245811, 'vehiclesOccludedAuc': 0.001429169, 'vehiclesOccludedIou': 0.0004891583, 'vehiclesFlowEpe': 1.2128457, 'vehiclesFlowWarpedOccupancyAuc': 0.88236696, 'vehiclesFlowWarpedOccupancyIou': 0.82332265}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.7173931520689654, 'vehiclesObservedIou': 0.45726948034482756, 'vehiclesOccludedAuc': 0.04816735817586207, 'vehiclesOccludedIou': 0.011362709772413793, 'vehiclesFlowEpe': 4.715201427586207, 'vehiclesFlowWarpedOccupancyAuc': 0.6505559537931035, 'vehiclesFlowWarpedOccupancyIou': 0.5144024072413792}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00043new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 11:02:52.544656: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:02:52.596785: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:02:52.597063: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0016 seconds, Metrics: {'vehiclesObservedAuc': 0.81369585, 'vehiclesObservedIou': 0.52538556, 'vehiclesOccludedAuc': 0.3257759, 'vehiclesOccludedIou': 0.05265555, 'vehiclesFlowEpe': 6.714786, 'vehiclesFlowWarpedOccupancyAuc': 0.6599953, 'vehiclesFlowWarpedOccupancyIou': 0.6044365}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.24881421, 'vehiclesObservedIou': 0.12082929, 'vehiclesOccludedAuc': 0.073507294, 'vehiclesOccludedIou': 0.012399125, 'vehiclesFlowEpe': 6.6357336, 'vehiclesFlowWarpedOccupancyAuc': 0.30951643, 'vehiclesFlowWarpedOccupancyIou': 0.109800406}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.915674, 'vehiclesObservedIou': 0.60783035, 'vehiclesOccludedAuc': 0.111799315, 'vehiclesOccludedIou': 0.039858297, 'vehiclesFlowEpe': 3.9486349, 'vehiclesFlowWarpedOccupancyAuc': 0.7953793, 'vehiclesFlowWarpedOccupancyIou': 0.7298943}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7680325, 'vehiclesObservedIou': 0.4962158, 'vehiclesOccludedAuc': 0.11418307, 'vehiclesOccludedIou': 0.026837265, 'vehiclesFlowEpe': 4.5567975, 'vehiclesFlowWarpedOccupancyAuc': 0.7234933, 'vehiclesFlowWarpedOccupancyIou': 0.6458038}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.34288168, 'vehiclesObservedIou': 0.1995874, 'vehiclesOccludedAuc': 0.27840164, 'vehiclesOccludedIou': 0.028996322, 'vehiclesFlowEpe': 9.045513, 'vehiclesFlowWarpedOccupancyAuc': 0.42022616, 'vehiclesFlowWarpedOccupancyIou': 0.28412345}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.60808146, 'vehiclesObservedIou': 0.29862434, 'vehiclesOccludedAuc': 0.006501412, 'vehiclesOccludedIou': 0.0028693331, 'vehiclesFlowEpe': 5.413477, 'vehiclesFlowWarpedOccupancyAuc': 0.5045504, 'vehiclesFlowWarpedOccupancyIou': 0.35704935}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6030837, 'vehiclesObservedIou': 0.3091624, 'vehiclesOccludedAuc': 0.10462861, 'vehiclesOccludedIou': 0.02913266, 'vehiclesFlowEpe': 3.5568593, 'vehiclesFlowWarpedOccupancyAuc': 0.5489367, 'vehiclesFlowWarpedOccupancyIou': 0.32604074}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.25944608, 'vehiclesObservedIou': 0.13548003, 'vehiclesOccludedAuc': 0.013965517, 'vehiclesOccludedIou': 0.004628402, 'vehiclesFlowEpe': 5.7266684, 'vehiclesFlowWarpedOccupancyAuc': 0.39093027, 'vehiclesFlowWarpedOccupancyIou': 0.15380988}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7532492, 'vehiclesObservedIou': 0.38122126, 'vehiclesOccludedAuc': 0.12824821, 'vehiclesOccludedIou': 0.040566143, 'vehiclesFlowEpe': 4.0898237, 'vehiclesFlowWarpedOccupancyAuc': 0.55881923, 'vehiclesFlowWarpedOccupancyIou': 0.45017374}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.5767049, 'vehiclesObservedIou': 0.26076728, 'vehiclesOccludedAuc': 0.00042123708, 'vehiclesOccludedIou': 0.0006216193, 'vehiclesFlowEpe': 5.084668, 'vehiclesFlowWarpedOccupancyAuc': 0.4706247, 'vehiclesFlowWarpedOccupancyIou': 0.36632618}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6690192, 'vehiclesObservedIou': 0.39479977, 'vehiclesOccludedAuc': 0.053339854, 'vehiclesOccludedIou': 0.016225794, 'vehiclesFlowEpe': 4.4824243, 'vehiclesFlowWarpedOccupancyAuc': 0.62279236, 'vehiclesFlowWarpedOccupancyIou': 0.43790436}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.47694394, 'vehiclesObservedIou': 0.2814958, 'vehiclesOccludedAuc': 0.23596105, 'vehiclesOccludedIou': 0.016767658, 'vehiclesFlowEpe': 4.2034073, 'vehiclesFlowWarpedOccupancyAuc': 0.5788394, 'vehiclesFlowWarpedOccupancyIou': 0.34321135}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.80311096, 'vehiclesObservedIou': 0.5549783, 'vehiclesOccludedAuc': 0.0015757105, 'vehiclesOccludedIou': 0.00076148484, 'vehiclesFlowEpe': 9.67823, 'vehiclesFlowWarpedOccupancyAuc': 0.6270156, 'vehiclesFlowWarpedOccupancyIou': 0.5982749}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8918947, 'vehiclesObservedIou': 0.61526775, 'vehiclesOccludedAuc': 0.036349583, 'vehiclesOccludedIou': 0.0056609497, 'vehiclesFlowEpe': 3.9819956, 'vehiclesFlowWarpedOccupancyAuc': 0.69295067, 'vehiclesFlowWarpedOccupancyIou': 0.65030813}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.91072464, 'vehiclesObservedIou': 0.7009784, 'vehiclesOccludedAuc': 0.0941324, 'vehiclesOccludedIou': 0.028929252, 'vehiclesFlowEpe': 1.8599145, 'vehiclesFlowWarpedOccupancyAuc': 0.8533416, 'vehiclesFlowWarpedOccupancyIou': 0.77424425}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.5051054, 'vehiclesObservedIou': 0.24392141, 'vehiclesOccludedAuc': 0.0040260856, 'vehiclesOccludedIou': 0.0019800016, 'vehiclesFlowEpe': 9.71632, 'vehiclesFlowWarpedOccupancyAuc': 0.26351056, 'vehiclesFlowWarpedOccupancyIou': 0.22332259}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9844102, 'vehiclesObservedIou': 0.80766207, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.348922, 'vehiclesFlowWarpedOccupancyAuc': 0.8729277, 'vehiclesFlowWarpedOccupancyIou': 0.88005507}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.13227874, 'vehiclesObservedIou': 0.06566818, 'vehiclesOccludedAuc': 0.040535748, 'vehiclesOccludedIou': 0.0040789163, 'vehiclesFlowEpe': 6.9327455, 'vehiclesFlowWarpedOccupancyAuc': 0.17173192, 'vehiclesFlowWarpedOccupancyIou': 0.065867}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7876997, 'vehiclesObservedIou': 0.4389828, 'vehiclesOccludedAuc': 0.008434501, 'vehiclesOccludedIou': 0.0027738817, 'vehiclesFlowEpe': 3.2939582, 'vehiclesFlowWarpedOccupancyAuc': 0.57464963, 'vehiclesFlowWarpedOccupancyIou': 0.5024725}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.1546552, 'vehiclesObservedIou': 0.06894535, 'vehiclesOccludedAuc': 0.010936593, 'vehiclesOccludedIou': 0.0040791077, 'vehiclesFlowEpe': 6.9541435, 'vehiclesFlowWarpedOccupancyAuc': 0.23697533, 'vehiclesFlowWarpedOccupancyIou': 0.061529215}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.99167836, 'vehiclesObservedIou': 0.86730325, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 1.8658409, 'vehiclesFlowWarpedOccupancyAuc': 0.88925797, 'vehiclesFlowWarpedOccupancyIou': 0.91026205}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.99254316, 'vehiclesObservedIou': 0.8240667, 'vehiclesOccludedAuc': 0.121385284, 'vehiclesOccludedIou': 0.040559053, 'vehiclesFlowEpe': 4.541204, 'vehiclesFlowWarpedOccupancyAuc': 0.800678, 'vehiclesFlowWarpedOccupancyIou': 0.65940475}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7995161, 'vehiclesObservedIou': 0.5430395, 'vehiclesOccludedAuc': 0.25746608, 'vehiclesOccludedIou': 0.019626044, 'vehiclesFlowEpe': 2.4908676, 'vehiclesFlowWarpedOccupancyAuc': 0.75400186, 'vehiclesFlowWarpedOccupancyIou': 0.65854055}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7307662, 'vehiclesObservedIou': 0.39322692, 'vehiclesOccludedAuc': 0.3684241, 'vehiclesOccludedIou': 0.099903084, 'vehiclesFlowEpe': 4.5200033, 'vehiclesFlowWarpedOccupancyAuc': 0.59126294, 'vehiclesFlowWarpedOccupancyIou': 0.4721921}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.99254316, 'vehiclesObservedIou': 0.8240667, 'vehiclesOccludedAuc': 0.121385284, 'vehiclesOccludedIou': 0.040559053, 'vehiclesFlowEpe': 4.541204, 'vehiclesFlowWarpedOccupancyAuc': 0.800678, 'vehiclesFlowWarpedOccupancyIou': 0.65940475}
Average Time: 0.0012 seconds, Average Metrics: {'vehiclesObservedAuc': 0.65500042, 'vehiclesObservedIou': 0.42230999625000004, 'vehiclesOccludedAuc': 0.09958329975750001, 'vehiclesOccludedIou': 0.019996247635, 'vehiclesFlowEpe': 5.110122420833333, 'vehiclesFlowWarpedOccupancyAuc': 0.5796836387500001, 'vehiclesFlowWarpedOccupancyIou': 0.46937696504166676}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00112new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 11:03:08.096966: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:03:08.150252: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:03:08.150545: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.6001752, 'vehiclesObservedIou': 0.32361296, 'vehiclesOccludedAuc': 0.0003704314, 'vehiclesOccludedIou': 0.0005807021, 'vehiclesFlowEpe': 5.2940354, 'vehiclesFlowWarpedOccupancyAuc': 0.4050548, 'vehiclesFlowWarpedOccupancyIou': 0.4236404}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.4036141, 'vehiclesObservedIou': 0.19581331, 'vehiclesOccludedAuc': 0.044771947, 'vehiclesOccludedIou': 0.007978788, 'vehiclesFlowEpe': 2.9369626, 'vehiclesFlowWarpedOccupancyAuc': 0.57983947, 'vehiclesFlowWarpedOccupancyIou': 0.24996552}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.70144, 'vehiclesObservedIou': 0.36179626, 'vehiclesOccludedAuc': 0.04563835, 'vehiclesOccludedIou': 0.0099751875, 'vehiclesFlowEpe': 4.403731, 'vehiclesFlowWarpedOccupancyAuc': 0.62555677, 'vehiclesFlowWarpedOccupancyIou': 0.3622209}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8216932, 'vehiclesObservedIou': 0.4609543, 'vehiclesOccludedAuc': 0.06392294, 'vehiclesOccludedIou': 0.01636261, 'vehiclesFlowEpe': 5.7045674, 'vehiclesFlowWarpedOccupancyAuc': 0.6598307, 'vehiclesFlowWarpedOccupancyIou': 0.54942244}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.2962828, 'vehiclesObservedIou': 0.1253929, 'vehiclesOccludedAuc': 0.009761871, 'vehiclesOccludedIou': 0.0022115835, 'vehiclesFlowEpe': 6.3362246, 'vehiclesFlowWarpedOccupancyAuc': 0.3671621, 'vehiclesFlowWarpedOccupancyIou': 0.12503591}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.6428905, 'vehiclesObservedIou': 0.36665702, 'vehiclesOccludedAuc': 0.03860976, 'vehiclesOccludedIou': 0.0071257106, 'vehiclesFlowEpe': 7.3800144, 'vehiclesFlowWarpedOccupancyAuc': 0.51256096, 'vehiclesFlowWarpedOccupancyIou': 0.3794856}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.4190234, 'vehiclesObservedIou': 0.1574159, 'vehiclesOccludedAuc': 0.14164615, 'vehiclesOccludedIou': 0.014146764, 'vehiclesFlowEpe': 4.1108017, 'vehiclesFlowWarpedOccupancyAuc': 0.492077, 'vehiclesFlowWarpedOccupancyIou': 0.21911283}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.88625497, 'vehiclesObservedIou': 0.59972364, 'vehiclesOccludedAuc': 0.17475821, 'vehiclesOccludedIou': 0.037305664, 'vehiclesFlowEpe': 4.613506, 'vehiclesFlowWarpedOccupancyAuc': 0.7278775, 'vehiclesFlowWarpedOccupancyIou': 0.6527558}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.15572366, 'vehiclesObservedIou': 0.06633997, 'vehiclesOccludedAuc': 0.0010107781, 'vehiclesOccludedIou': 0.0017413714, 'vehiclesFlowEpe': 1.8178949, 'vehiclesFlowWarpedOccupancyAuc': 0.20697999, 'vehiclesFlowWarpedOccupancyIou': 0.05973656}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.5465908, 'vehiclesObservedIou': 0.33811405, 'vehiclesOccludedAuc': 0.048485883, 'vehiclesOccludedIou': 0.013968488, 'vehiclesFlowEpe': 7.003976, 'vehiclesFlowWarpedOccupancyAuc': 0.531685, 'vehiclesFlowWarpedOccupancyIou': 0.35759318}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.34790087, 'vehiclesObservedIou': 0.15382884, 'vehiclesOccludedAuc': 0.10461473, 'vehiclesOccludedIou': 0.028455216, 'vehiclesFlowEpe': 2.42924, 'vehiclesFlowWarpedOccupancyAuc': 0.48410332, 'vehiclesFlowWarpedOccupancyIou': 0.20217194}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.954894, 'vehiclesObservedIou': 0.73757356, 'vehiclesOccludedAuc': 0.018912412, 'vehiclesOccludedIou': 0.0104343, 'vehiclesFlowEpe': 2.824604, 'vehiclesFlowWarpedOccupancyAuc': 0.82590866, 'vehiclesFlowWarpedOccupancyIou': 0.80748475}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8474227, 'vehiclesObservedIou': 0.5319055, 'vehiclesOccludedAuc': 0.0059420154, 'vehiclesOccludedIou': 0.00044776517, 'vehiclesFlowEpe': 3.5774188, 'vehiclesFlowWarpedOccupancyAuc': 0.74306595, 'vehiclesFlowWarpedOccupancyIou': 0.57220364}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7664628, 'vehiclesObservedIou': 0.3131827, 'vehiclesOccludedAuc': 0.014651933, 'vehiclesOccludedIou': 0.0036535547, 'vehiclesFlowEpe': 9.317274, 'vehiclesFlowWarpedOccupancyAuc': 0.6045243, 'vehiclesFlowWarpedOccupancyIou': 0.47739208}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9778249, 'vehiclesObservedIou': 0.83820087, 'vehiclesOccludedAuc': 0.0068617854, 'vehiclesOccludedIou': 0.0042256545, 'vehiclesFlowEpe': 2.0643926, 'vehiclesFlowWarpedOccupancyAuc': 0.8799184, 'vehiclesFlowWarpedOccupancyIou': 0.90306}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.4461832, 'vehiclesObservedIou': 0.24480596, 'vehiclesOccludedAuc': 0.058293905, 'vehiclesOccludedIou': 0.021061113, 'vehiclesFlowEpe': 5.3473616, 'vehiclesFlowWarpedOccupancyAuc': 0.48803222, 'vehiclesFlowWarpedOccupancyIou': 0.3249213}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.43850306, 'vehiclesObservedIou': 0.26078525, 'vehiclesOccludedAuc': 0.012207149, 'vehiclesOccludedIou': 0.0051268656, 'vehiclesFlowEpe': 4.3637743, 'vehiclesFlowWarpedOccupancyAuc': 0.40327293, 'vehiclesFlowWarpedOccupancyIou': 0.3285819}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7879788, 'vehiclesObservedIou': 0.5082793, 'vehiclesOccludedAuc': 0.004541224, 'vehiclesOccludedIou': 0.0024892779, 'vehiclesFlowEpe': 4.492806, 'vehiclesFlowWarpedOccupancyAuc': 0.66629946, 'vehiclesFlowWarpedOccupancyIou': 0.5533662}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.4561118, 'vehiclesObservedIou': 0.27128252, 'vehiclesOccludedAuc': 0.06404369, 'vehiclesOccludedIou': 0.015711714, 'vehiclesFlowEpe': 4.3262877, 'vehiclesFlowWarpedOccupancyAuc': 0.5546758, 'vehiclesFlowWarpedOccupancyIou': 0.33120832}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.88120055, 'vehiclesObservedIou': 0.5552889, 'vehiclesOccludedAuc': 0.21007773, 'vehiclesOccludedIou': 0.02997482, 'vehiclesFlowEpe': 4.3545094, 'vehiclesFlowWarpedOccupancyAuc': 0.7227161, 'vehiclesFlowWarpedOccupancyIou': 0.5924966}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.77089864, 'vehiclesObservedIou': 0.46579453, 'vehiclesOccludedAuc': 0.078819975, 'vehiclesOccludedIou': 0.025218388, 'vehiclesFlowEpe': 6.6026926, 'vehiclesFlowWarpedOccupancyAuc': 0.67462647, 'vehiclesFlowWarpedOccupancyIou': 0.5906402}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.13149618, 'vehiclesObservedIou': 0.06852931, 'vehiclesOccludedAuc': 0.006270757, 'vehiclesOccludedIou': 0.0019439305, 'vehiclesFlowEpe': 3.1597958, 'vehiclesFlowWarpedOccupancyAuc': 0.1298729, 'vehiclesFlowWarpedOccupancyIou': 0.055701345}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.39966828, 'vehiclesObservedIou': 0.21683806, 'vehiclesOccludedAuc': 0.5093774, 'vehiclesOccludedIou': 0.050605986, 'vehiclesFlowEpe': 5.7896814, 'vehiclesFlowWarpedOccupancyAuc': 0.6068747, 'vehiclesFlowWarpedOccupancyIou': 0.34725556}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8237025, 'vehiclesObservedIou': 0.48523286, 'vehiclesOccludedAuc': 0.34681743, 'vehiclesOccludedIou': 0.05772508, 'vehiclesFlowEpe': 4.997182, 'vehiclesFlowWarpedOccupancyAuc': 0.6720944, 'vehiclesFlowWarpedOccupancyIou': 0.59097904}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.6934584, 'vehiclesObservedIou': 0.3450146, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 4.530565, 'vehiclesFlowWarpedOccupancyAuc': 0.5815608, 'vehiclesFlowWarpedOccupancyIou': 0.47855422}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9109593, 'vehiclesObservedIou': 0.7215183, 'vehiclesOccludedAuc': 0.047967114, 'vehiclesOccludedIou': 0.017336506, 'vehiclesFlowEpe': 3.0805411, 'vehiclesFlowWarpedOccupancyAuc': 0.8362486, 'vehiclesFlowWarpedOccupancyIou': 0.77781683}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7368817, 'vehiclesObservedIou': 0.30397362, 'vehiclesOccludedAuc': 0.04330468, 'vehiclesOccludedIou': 0.012735103, 'vehiclesFlowEpe': 6.0381427, 'vehiclesFlowWarpedOccupancyAuc': 0.568257, 'vehiclesFlowWarpedOccupancyIou': 0.39201656}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.30942732, 'vehiclesObservedIou': 0.15360783, 'vehiclesOccludedAuc': 0.07415255, 'vehiclesOccludedIou': 0.01083065, 'vehiclesFlowEpe': 6.9797974, 'vehiclesFlowWarpedOccupancyAuc': 0.3875284, 'vehiclesFlowWarpedOccupancyIou': 0.19151995}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.9778249, 'vehiclesObservedIou': 0.83820087, 'vehiclesOccludedAuc': 0.0068617854, 'vehiclesOccludedIou': 0.0042256545, 'vehiclesFlowEpe': 2.0643926, 'vehiclesFlowWarpedOccupancyAuc': 0.8799184, 'vehiclesFlowWarpedOccupancyIou': 0.90306}
Average Time: 0.0012 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6126665582142857, 'vehiclesObservedIou': 0.3632665292857143, 'vehiclesOccludedAuc': 0.07770831429642855, 'vehiclesOccludedIou': 0.01462045690964286, 'vehiclesFlowEpe': 4.7813493000000005, 'vehiclesFlowWarpedOccupancyAuc': 0.5692215964285714, 'vehiclesFlowWarpedOccupancyIou': 0.4248692705357143}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00072new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 11:03:26.577839: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:03:26.629411: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:03:26.629688: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.16411927, 'vehiclesObservedIou': 0.0698067, 'vehiclesOccludedAuc': 0.020617379, 'vehiclesOccludedIou': 0.004123039, 'vehiclesFlowEpe': 10.596754, 'vehiclesFlowWarpedOccupancyAuc': 0.12523077, 'vehiclesFlowWarpedOccupancyIou': 0.062109016}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.46079153, 'vehiclesObservedIou': 0.31838608, 'vehiclesOccludedAuc': 0.072976075, 'vehiclesOccludedIou': 0.0139307, 'vehiclesFlowEpe': 3.7811096, 'vehiclesFlowWarpedOccupancyAuc': 0.5106756, 'vehiclesFlowWarpedOccupancyIou': 0.43598706}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.96865165, 'vehiclesObservedIou': 0.86590606, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.8380857, 'vehiclesFlowWarpedOccupancyAuc': 0.8961195, 'vehiclesFlowWarpedOccupancyIou': 0.91641897}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.5610769, 'vehiclesObservedIou': 0.27460402, 'vehiclesOccludedAuc': 0.07069524, 'vehiclesOccludedIou': 0.015264538, 'vehiclesFlowEpe': 4.602711, 'vehiclesFlowWarpedOccupancyAuc': 0.5039698, 'vehiclesFlowWarpedOccupancyIou': 0.29867396}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.60849303, 'vehiclesObservedIou': 0.43578315, 'vehiclesOccludedAuc': 0.2211108, 'vehiclesOccludedIou': 0.020441763, 'vehiclesFlowEpe': 3.3644323, 'vehiclesFlowWarpedOccupancyAuc': 0.6622345, 'vehiclesFlowWarpedOccupancyIou': 0.49586192}
DataLossError encountered. Skipping the corrupted record.
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.96865165, 'vehiclesObservedIou': 0.86590606, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.8380857, 'vehiclesFlowWarpedOccupancyAuc': 0.8961195, 'vehiclesFlowWarpedOccupancyIou': 0.91641897}
Average Time: 0.0012 seconds, Average Metrics: {'vehiclesObservedAuc': 0.552626476, 'vehiclesObservedIou': 0.392897202, 'vehiclesOccludedAuc': 0.0770798988, 'vehiclesOccludedIou': 0.010752008, 'vehiclesFlowEpe': 5.03661852, 'vehiclesFlowWarpedOccupancyAuc': 0.539646034, 'vehiclesFlowWarpedOccupancyIou': 0.4418101851999999}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00106new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 11:03:30.139046: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:03:30.191980: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:03:30.192267: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.91070795, 'vehiclesObservedIou': 0.5497533, 'vehiclesOccludedAuc': 0.011631655, 'vehiclesOccludedIou': 0.004452973, 'vehiclesFlowEpe': 3.002941, 'vehiclesFlowWarpedOccupancyAuc': 0.7821095, 'vehiclesFlowWarpedOccupancyIou': 0.6504472}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.81121665, 'vehiclesObservedIou': 0.5069481, 'vehiclesOccludedAuc': 0.075422585, 'vehiclesOccludedIou': 0.0093345735, 'vehiclesFlowEpe': 3.9285293, 'vehiclesFlowWarpedOccupancyAuc': 0.6973756, 'vehiclesFlowWarpedOccupancyIou': 0.5203156}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.79466563, 'vehiclesObservedIou': 0.44313422, 'vehiclesOccludedAuc': 0.11736351, 'vehiclesOccludedIou': 0.028221464, 'vehiclesFlowEpe': 2.5507095, 'vehiclesFlowWarpedOccupancyAuc': 0.65607417, 'vehiclesFlowWarpedOccupancyIou': 0.55372673}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.32450005, 'vehiclesObservedIou': 0.20743226, 'vehiclesOccludedAuc': 0.19362555, 'vehiclesOccludedIou': 0.03537087, 'vehiclesFlowEpe': 6.0961885, 'vehiclesFlowWarpedOccupancyAuc': 0.4641725, 'vehiclesFlowWarpedOccupancyIou': 0.28194445}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.79628575, 'vehiclesObservedIou': 0.48102623, 'vehiclesOccludedAuc': 0.13244143, 'vehiclesOccludedIou': 0.020995136, 'vehiclesFlowEpe': 3.435522, 'vehiclesFlowWarpedOccupancyAuc': 0.59391636, 'vehiclesFlowWarpedOccupancyIou': 0.49592048}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9734097, 'vehiclesObservedIou': 0.80553216, 'vehiclesOccludedAuc': 0.038566638, 'vehiclesOccludedIou': 0.010868709, 'vehiclesFlowEpe': 4.102788, 'vehiclesFlowWarpedOccupancyAuc': 0.8314975, 'vehiclesFlowWarpedOccupancyIou': 0.7928293}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.30682343, 'vehiclesObservedIou': 0.12979709, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 8.310954, 'vehiclesFlowWarpedOccupancyAuc': 0.29887187, 'vehiclesFlowWarpedOccupancyIou': 0.14154783}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.13259804, 'vehiclesObservedIou': 0.062773734, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 1.5588336, 'vehiclesFlowWarpedOccupancyAuc': 0.18577662, 'vehiclesFlowWarpedOccupancyIou': 0.085531086}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7301505, 'vehiclesObservedIou': 0.4530401, 'vehiclesOccludedAuc': 0.23518178, 'vehiclesOccludedIou': 0.05489103, 'vehiclesFlowEpe': 5.573105, 'vehiclesFlowWarpedOccupancyAuc': 0.6328799, 'vehiclesFlowWarpedOccupancyIou': 0.57644314}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.17046408, 'vehiclesObservedIou': 0.06577407, 'vehiclesOccludedAuc': 0.0015555604, 'vehiclesOccludedIou': 0.001516939, 'vehiclesFlowEpe': 12.794365, 'vehiclesFlowWarpedOccupancyAuc': 0.26151896, 'vehiclesFlowWarpedOccupancyIou': 0.07029917}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.5327625, 'vehiclesObservedIou': 0.29287457, 'vehiclesOccludedAuc': 0.077555455, 'vehiclesOccludedIou': 0.015984368, 'vehiclesFlowEpe': 5.9384656, 'vehiclesFlowWarpedOccupancyAuc': 0.38473096, 'vehiclesFlowWarpedOccupancyIou': 0.25009614}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.92023575, 'vehiclesObservedIou': 0.66555643, 'vehiclesOccludedAuc': 0.05899045, 'vehiclesOccludedIou': 0.018529618, 'vehiclesFlowEpe': 6.379672, 'vehiclesFlowWarpedOccupancyAuc': 0.73890364, 'vehiclesFlowWarpedOccupancyIou': 0.7646575}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6522427, 'vehiclesObservedIou': 0.3333646, 'vehiclesOccludedAuc': 0.174467, 'vehiclesOccludedIou': 0.013117706, 'vehiclesFlowEpe': 3.943958, 'vehiclesFlowWarpedOccupancyAuc': 0.52981573, 'vehiclesFlowWarpedOccupancyIou': 0.4204143}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.88753355, 'vehiclesObservedIou': 0.6449727, 'vehiclesOccludedAuc': 0.05912258, 'vehiclesOccludedIou': 0.018668428, 'vehiclesFlowEpe': 1.873145, 'vehiclesFlowWarpedOccupancyAuc': 0.8251206, 'vehiclesFlowWarpedOccupancyIou': 0.7028078}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.5531693, 'vehiclesObservedIou': 0.27195057, 'vehiclesOccludedAuc': 0.32424223, 'vehiclesOccludedIou': 0.082830414, 'vehiclesFlowEpe': 3.7588015, 'vehiclesFlowWarpedOccupancyAuc': 0.5852019, 'vehiclesFlowWarpedOccupancyIou': 0.34429684}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8820739, 'vehiclesObservedIou': 0.5609009, 'vehiclesOccludedAuc': 0.04720339, 'vehiclesOccludedIou': 0.01659836, 'vehiclesFlowEpe': 3.1961875, 'vehiclesFlowWarpedOccupancyAuc': 0.7557257, 'vehiclesFlowWarpedOccupancyIou': 0.6417144}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.97141236, 'vehiclesObservedIou': 0.8339496, 'vehiclesOccludedAuc': 0.0015035529, 'vehiclesOccludedIou': 0.0010636867, 'vehiclesFlowEpe': 5.0118423, 'vehiclesFlowWarpedOccupancyAuc': 0.8738155, 'vehiclesFlowWarpedOccupancyIou': 0.8780886}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.13684787, 'vehiclesObservedIou': 0.05940129, 'vehiclesOccludedAuc': 0.0031629906, 'vehiclesOccludedIou': 0.001421797, 'vehiclesFlowEpe': 4.6315084, 'vehiclesFlowWarpedOccupancyAuc': 0.2065043, 'vehiclesFlowWarpedOccupancyIou': 0.04869547}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.97059095, 'vehiclesObservedIou': 0.6897308, 'vehiclesOccludedAuc': 0.011804069, 'vehiclesOccludedIou': 0.0053284885, 'vehiclesFlowEpe': 1.0900218, 'vehiclesFlowWarpedOccupancyAuc': 0.8788438, 'vehiclesFlowWarpedOccupancyIou': 0.7909464}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.75591624, 'vehiclesObservedIou': 0.3994462, 'vehiclesOccludedAuc': 0.036903065, 'vehiclesOccludedIou': 0.009658081, 'vehiclesFlowEpe': 4.565802, 'vehiclesFlowWarpedOccupancyAuc': 0.59204185, 'vehiclesFlowWarpedOccupancyIou': 0.47536132}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.80768776, 'vehiclesObservedIou': 0.47639632, 'vehiclesOccludedAuc': 0.10966162, 'vehiclesOccludedIou': 0.017338995, 'vehiclesFlowEpe': 4.3343797, 'vehiclesFlowWarpedOccupancyAuc': 0.6701375, 'vehiclesFlowWarpedOccupancyIou': 0.5784881}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.99999577, 'vehiclesObservedIou': 0.95749885, 'vehiclesOccludedAuc': 0.0016288334, 'vehiclesOccludedIou': 0.0009244057, 'vehiclesFlowEpe': 0.28945667, 'vehiclesFlowWarpedOccupancyAuc': 0.9488617, 'vehiclesFlowWarpedOccupancyIou': 0.97707814}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.891402, 'vehiclesObservedIou': 0.58714175, 'vehiclesOccludedAuc': 0.0032958079, 'vehiclesOccludedIou': 0.0022803468, 'vehiclesFlowEpe': 2.6310906, 'vehiclesFlowWarpedOccupancyAuc': 0.78589106, 'vehiclesFlowWarpedOccupancyIou': 0.69449353}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.16620353, 'vehiclesObservedIou': 0.05914233, 'vehiclesOccludedAuc': 0.058478206, 'vehiclesOccludedIou': 0.006685004, 'vehiclesFlowEpe': 4.363966, 'vehiclesFlowWarpedOccupancyAuc': 0.20935021, 'vehiclesFlowWarpedOccupancyIou': 0.0469303}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.5798784, 'vehiclesObservedIou': 0.40344092, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.236519, 'vehiclesFlowWarpedOccupancyAuc': 0.62555325, 'vehiclesFlowWarpedOccupancyIou': 0.45241886}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.3101848, 'vehiclesObservedIou': 0.14572233, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 4.856407, 'vehiclesFlowWarpedOccupancyAuc': 0.38032413, 'vehiclesFlowWarpedOccupancyIou': 0.17857848}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.77621627, 'vehiclesObservedIou': 0.46540698, 'vehiclesOccludedAuc': 0.23570101, 'vehiclesOccludedIou': 0.06650642, 'vehiclesFlowEpe': 8.026096, 'vehiclesFlowWarpedOccupancyAuc': 0.59480625, 'vehiclesFlowWarpedOccupancyIou': 0.54113376}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.99999577, 'vehiclesObservedIou': 0.95749885, 'vehiclesOccludedAuc': 0.0016288334, 'vehiclesOccludedIou': 0.0009244057, 'vehiclesFlowEpe': 0.28945667, 'vehiclesFlowWarpedOccupancyAuc': 0.9488617, 'vehiclesFlowWarpedOccupancyIou': 0.97707814}
Average Time: 0.0012 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6572287196296295, 'vehiclesObservedIou': 0.42785586681481474, 'vehiclesOccludedAuc': 0.07442625808148148, 'vehiclesOccludedIou': 0.01639214122962963, 'vehiclesFlowEpe': 4.425231665555556, 'vehiclesFlowWarpedOccupancyAuc': 0.5922155948148148, 'vehiclesFlowWarpedOccupancyIou': 0.4798224046666666}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00062new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 11:03:47.533152: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:03:47.585473: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:03:47.585762: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8550963, 'vehiclesObservedIou': 0.56403285, 'vehiclesOccludedAuc': 0.0056012953, 'vehiclesOccludedIou': 0.0022035695, 'vehiclesFlowEpe': 4.50243, 'vehiclesFlowWarpedOccupancyAuc': 0.58376, 'vehiclesFlowWarpedOccupancyIou': 0.5740222}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.53479886, 'vehiclesObservedIou': 0.29929754, 'vehiclesOccludedAuc': 0.016144589, 'vehiclesOccludedIou': 0.004348274, 'vehiclesFlowEpe': 4.206373, 'vehiclesFlowWarpedOccupancyAuc': 0.50269, 'vehiclesFlowWarpedOccupancyIou': 0.37839016}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.36830676, 'vehiclesObservedIou': 0.1630869, 'vehiclesOccludedAuc': 0.008634408, 'vehiclesOccludedIou': 0.0022907641, 'vehiclesFlowEpe': 5.774808, 'vehiclesFlowWarpedOccupancyAuc': 0.2674146, 'vehiclesFlowWarpedOccupancyIou': 0.09449697}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.14145987, 'vehiclesObservedIou': 0.10269148, 'vehiclesOccludedAuc': 0.025952991, 'vehiclesOccludedIou': 0.006870517, 'vehiclesFlowEpe': 4.7114053, 'vehiclesFlowWarpedOccupancyAuc': 0.48151624, 'vehiclesFlowWarpedOccupancyIou': 0.25585237}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.41028628, 'vehiclesObservedIou': 0.22271638, 'vehiclesOccludedAuc': 0.028215077, 'vehiclesOccludedIou': 0.009131474, 'vehiclesFlowEpe': 3.2529633, 'vehiclesFlowWarpedOccupancyAuc': 0.5729832, 'vehiclesFlowWarpedOccupancyIou': 0.25542256}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8281201, 'vehiclesObservedIou': 0.42685196, 'vehiclesOccludedAuc': 0.0041810046, 'vehiclesOccludedIou': 0.0009218165, 'vehiclesFlowEpe': 5.8980503, 'vehiclesFlowWarpedOccupancyAuc': 0.5466651, 'vehiclesFlowWarpedOccupancyIou': 0.4300492}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8091109, 'vehiclesObservedIou': 0.4295429, 'vehiclesOccludedAuc': 0.21528172, 'vehiclesOccludedIou': 0.056018636, 'vehiclesFlowEpe': 2.6042984, 'vehiclesFlowWarpedOccupancyAuc': 0.6878133, 'vehiclesFlowWarpedOccupancyIou': 0.40570936}
DataLossError encountered. Skipping the corrupted record.
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.8550963, 'vehiclesObservedIou': 0.56403285, 'vehiclesOccludedAuc': 0.0056012953, 'vehiclesOccludedIou': 0.0022035695, 'vehiclesFlowEpe': 4.50243, 'vehiclesFlowWarpedOccupancyAuc': 0.58376, 'vehiclesFlowWarpedOccupancyIou': 0.5740222}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.5638827242857143, 'vehiclesObservedIou': 0.31546000142857145, 'vehiclesOccludedAuc': 0.04343015498571429, 'vehiclesOccludedIou': 0.011683578728571427, 'vehiclesFlowEpe': 4.421475471428572, 'vehiclesFlowWarpedOccupancyAuc': 0.5204060628571429, 'vehiclesFlowWarpedOccupancyIou': 0.3419918314285714}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00035new.tfrecords...
2024-05-28 11:03:52.430838: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:03:52.482589: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:03:52.482866: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9166975, 'vehiclesObservedIou': 0.61492354, 'vehiclesOccludedAuc': 0.097437344, 'vehiclesOccludedIou': 0.029604748, 'vehiclesFlowEpe': 2.218027, 'vehiclesFlowWarpedOccupancyAuc': 0.85601276, 'vehiclesFlowWarpedOccupancyIou': 0.7219137}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7033133, 'vehiclesObservedIou': 0.4256697, 'vehiclesOccludedAuc': 0.23642027, 'vehiclesOccludedIou': 0.048917565, 'vehiclesFlowEpe': 3.3993998, 'vehiclesFlowWarpedOccupancyAuc': 0.6996181, 'vehiclesFlowWarpedOccupancyIou': 0.5673347}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8083303, 'vehiclesObservedIou': 0.43587852, 'vehiclesOccludedAuc': 0.09262684, 'vehiclesOccludedIou': 0.02340743, 'vehiclesFlowEpe': 11.395688, 'vehiclesFlowWarpedOccupancyAuc': 0.6129139, 'vehiclesFlowWarpedOccupancyIou': 0.48377302}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7649489, 'vehiclesObservedIou': 0.43561965, 'vehiclesOccludedAuc': 0.122693725, 'vehiclesOccludedIou': 0.040374488, 'vehiclesFlowEpe': 3.86917, 'vehiclesFlowWarpedOccupancyAuc': 0.6740327, 'vehiclesFlowWarpedOccupancyIou': 0.50995016}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.6001089, 'vehiclesObservedIou': 0.29643783, 'vehiclesOccludedAuc': 0.03758259, 'vehiclesOccludedIou': 0.008263436, 'vehiclesFlowEpe': 8.616188, 'vehiclesFlowWarpedOccupancyAuc': 0.48971, 'vehiclesFlowWarpedOccupancyIou': 0.36424804}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.15013671, 'vehiclesObservedIou': 0.061697472, 'vehiclesOccludedAuc': 0.04429908, 'vehiclesOccludedIou': 0.009034839, 'vehiclesFlowEpe': 6.753242, 'vehiclesFlowWarpedOccupancyAuc': 0.19398086, 'vehiclesFlowWarpedOccupancyIou': 0.07281426}
DataLossError encountered. Skipping the corrupted record.
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.9166975, 'vehiclesObservedIou': 0.61492354, 'vehiclesOccludedAuc': 0.097437344, 'vehiclesOccludedIou': 0.029604748, 'vehiclesFlowEpe': 2.218027, 'vehiclesFlowWarpedOccupancyAuc': 0.85601276, 'vehiclesFlowWarpedOccupancyIou': 0.7219137}
2024-05-28 11:03:56.485457: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:03:56.539188: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:03:56.539484: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.657255935, 'vehiclesObservedIou': 0.3783711186666667, 'vehiclesOccludedAuc': 0.1051766415, 'vehiclesOccludedIou': 0.026600417666666668, 'vehiclesFlowEpe': 6.041952466666667, 'vehiclesFlowWarpedOccupancyAuc': 0.5877113866666667, 'vehiclesFlowWarpedOccupancyIou': 0.45333898}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00041new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7780526, 'vehiclesObservedIou': 0.44977555, 'vehiclesOccludedAuc': 0.43485534, 'vehiclesOccludedIou': 0.086775646, 'vehiclesFlowEpe': 5.049357, 'vehiclesFlowWarpedOccupancyAuc': 0.7174431, 'vehiclesFlowWarpedOccupancyIou': 0.4739805}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.782705, 'vehiclesObservedIou': 0.5315447, 'vehiclesOccludedAuc': 0.068991646, 'vehiclesOccludedIou': 0.0173836, 'vehiclesFlowEpe': 4.745704, 'vehiclesFlowWarpedOccupancyAuc': 0.6791723, 'vehiclesFlowWarpedOccupancyIou': 0.57468736}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.18563513, 'vehiclesObservedIou': 0.106542826, 'vehiclesOccludedAuc': 0.0029470786, 'vehiclesOccludedIou': 0.0021358787, 'vehiclesFlowEpe': 9.763086, 'vehiclesFlowWarpedOccupancyAuc': 0.24725148, 'vehiclesFlowWarpedOccupancyIou': 0.105707005}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.5359095, 'vehiclesObservedIou': 0.27098396, 'vehiclesOccludedAuc': 0.09687063, 'vehiclesOccludedIou': 0.023281632, 'vehiclesFlowEpe': 2.659483, 'vehiclesFlowWarpedOccupancyAuc': 0.6103249, 'vehiclesFlowWarpedOccupancyIou': 0.30353048}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.938159, 'vehiclesObservedIou': 0.6392843, 'vehiclesOccludedAuc': 0.001427885, 'vehiclesOccludedIou': 0.0006847524, 'vehiclesFlowEpe': 2.0183854, 'vehiclesFlowWarpedOccupancyAuc': 0.8349773, 'vehiclesFlowWarpedOccupancyIou': 0.7702507}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.97331804, 'vehiclesObservedIou': 0.6887747, 'vehiclesOccludedAuc': 0.010491003, 'vehiclesOccludedIou': 0.00414409, 'vehiclesFlowEpe': 2.7252686, 'vehiclesFlowWarpedOccupancyAuc': 0.8640392, 'vehiclesFlowWarpedOccupancyIou': 0.783417}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9229593, 'vehiclesObservedIou': 0.6783741, 'vehiclesOccludedAuc': 0.001266633, 'vehiclesOccludedIou': 0.00063695817, 'vehiclesFlowEpe': 2.66956, 'vehiclesFlowWarpedOccupancyAuc': 0.8219076, 'vehiclesFlowWarpedOccupancyIou': 0.774171}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8522476, 'vehiclesObservedIou': 0.5088054, 'vehiclesOccludedAuc': 0.074890256, 'vehiclesOccludedIou': 0.017411552, 'vehiclesFlowEpe': 5.005543, 'vehiclesFlowWarpedOccupancyAuc': 0.6228858, 'vehiclesFlowWarpedOccupancyIou': 0.54637724}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8427852, 'vehiclesObservedIou': 0.5030552, 'vehiclesOccludedAuc': 0.21809408, 'vehiclesOccludedIou': 0.055481244, 'vehiclesFlowEpe': 4.2887173, 'vehiclesFlowWarpedOccupancyAuc': 0.7080684, 'vehiclesFlowWarpedOccupancyIou': 0.5581319}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7586911, 'vehiclesObservedIou': 0.52634084, 'vehiclesOccludedAuc': 0.05599776, 'vehiclesOccludedIou': 0.008878794, 'vehiclesFlowEpe': 4.750451, 'vehiclesFlowWarpedOccupancyAuc': 0.753677, 'vehiclesFlowWarpedOccupancyIou': 0.6039973}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.23641704, 'vehiclesObservedIou': 0.10314095, 'vehiclesOccludedAuc': 0.03428206, 'vehiclesOccludedIou': 0.0062861573, 'vehiclesFlowEpe': 4.3213186, 'vehiclesFlowWarpedOccupancyAuc': 0.4476112, 'vehiclesFlowWarpedOccupancyIou': 0.121088885}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.21072868, 'vehiclesObservedIou': 0.087350525, 'vehiclesOccludedAuc': 0.0021935853, 'vehiclesOccludedIou': 0.0010329954, 'vehiclesFlowEpe': 9.257677, 'vehiclesFlowWarpedOccupancyAuc': 0.29378232, 'vehiclesFlowWarpedOccupancyIou': 0.092568204}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.4566439, 'vehiclesObservedIou': 0.20006177, 'vehiclesOccludedAuc': 0.058780663, 'vehiclesOccludedIou': 0.012972333, 'vehiclesFlowEpe': 4.316302, 'vehiclesFlowWarpedOccupancyAuc': 0.41174227, 'vehiclesFlowWarpedOccupancyIou': 0.24650516}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7077585, 'vehiclesObservedIou': 0.40009454, 'vehiclesOccludedAuc': 0.007029808, 'vehiclesOccludedIou': 0.0023832375, 'vehiclesFlowEpe': 3.7196066, 'vehiclesFlowWarpedOccupancyAuc': 0.6958632, 'vehiclesFlowWarpedOccupancyIou': 0.35845503}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.40505037, 'vehiclesObservedIou': 0.16406415, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.0642252, 'vehiclesFlowWarpedOccupancyAuc': 0.62152433, 'vehiclesFlowWarpedOccupancyIou': 0.20879044}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9055566, 'vehiclesObservedIou': 0.651205, 'vehiclesOccludedAuc': 0.105889924, 'vehiclesOccludedIou': 0.025134068, 'vehiclesFlowEpe': 3.92755, 'vehiclesFlowWarpedOccupancyAuc': 0.8030886, 'vehiclesFlowWarpedOccupancyIou': 0.7164063}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.5156877, 'vehiclesObservedIou': 0.26174587, 'vehiclesOccludedAuc': 0.021286303, 'vehiclesOccludedIou': 0.009382123, 'vehiclesFlowEpe': 6.4898586, 'vehiclesFlowWarpedOccupancyAuc': 0.44489917, 'vehiclesFlowWarpedOccupancyIou': 0.31199834}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8554337, 'vehiclesObservedIou': 0.60344315, 'vehiclesOccludedAuc': 0.095601305, 'vehiclesOccludedIou': 0.030891418, 'vehiclesFlowEpe': 10.449634, 'vehiclesFlowWarpedOccupancyAuc': 0.76591957, 'vehiclesFlowWarpedOccupancyIou': 0.6152334}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8859521, 'vehiclesObservedIou': 0.582616, 'vehiclesOccludedAuc': 0.024111306, 'vehiclesOccludedIou': 0.0074610156, 'vehiclesFlowEpe': 4.953733, 'vehiclesFlowWarpedOccupancyAuc': 0.6447787, 'vehiclesFlowWarpedOccupancyIou': 0.57556367}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.3345572, 'vehiclesObservedIou': 0.18543252, 'vehiclesOccludedAuc': 0.13074364, 'vehiclesOccludedIou': 0.019524025, 'vehiclesFlowEpe': 5.1595244, 'vehiclesFlowWarpedOccupancyAuc': 0.44248796, 'vehiclesFlowWarpedOccupancyIou': 0.26207158}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.72957176, 'vehiclesObservedIou': 0.41927993, 'vehiclesOccludedAuc': 0.15778121, 'vehiclesOccludedIou': 0.020213304, 'vehiclesFlowEpe': 5.594439, 'vehiclesFlowWarpedOccupancyAuc': 0.5681853, 'vehiclesFlowWarpedOccupancyIou': 0.50240684}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.82640016, 'vehiclesObservedIou': 0.6251234, 'vehiclesOccludedAuc': 0.066405304, 'vehiclesOccludedIou': 0.013627833, 'vehiclesFlowEpe': 4.750395, 'vehiclesFlowWarpedOccupancyAuc': 0.74317354, 'vehiclesFlowWarpedOccupancyIou': 0.7438389}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8241352, 'vehiclesObservedIou': 0.5274819, 'vehiclesOccludedAuc': 0.059977785, 'vehiclesOccludedIou': 0.019647175, 'vehiclesFlowEpe': 2.9229746, 'vehiclesFlowWarpedOccupancyAuc': 0.7423911, 'vehiclesFlowWarpedOccupancyIou': 0.533279}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.67437375, 'vehiclesObservedIou': 0.37242195, 'vehiclesOccludedAuc': 0.014000401, 'vehiclesOccludedIou': 0.005862112, 'vehiclesFlowEpe': 7.7111917, 'vehiclesFlowWarpedOccupancyAuc': 0.58182824, 'vehiclesFlowWarpedOccupancyIou': 0.4567329}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8624839, 'vehiclesObservedIou': 0.4821072, 'vehiclesOccludedAuc': 0.024800565, 'vehiclesOccludedIou': 0.009213725, 'vehiclesFlowEpe': 3.3532116, 'vehiclesFlowWarpedOccupancyAuc': 0.6212779, 'vehiclesFlowWarpedOccupancyIou': 0.47649923}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.97331804, 'vehiclesObservedIou': 0.6887747, 'vehiclesOccludedAuc': 0.010491003, 'vehiclesOccludedIou': 0.00414409, 'vehiclesFlowEpe': 2.7252686, 'vehiclesFlowWarpedOccupancyAuc': 0.8640392, 'vehiclesFlowWarpedOccupancyIou': 0.783417}
Average Time: 0.0012 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6800485212000001, 'vehiclesObservedIou': 0.42276201723999995, 'vehiclesOccludedAuc': 0.070748646836, 'vehiclesOccludedIou': 0.0160178267628, 'vehiclesFlowEpe': 4.906687864, 'vehiclesFlowWarpedOccupancyAuc': 0.6275320192, 'vehiclesFlowWarpedOccupancyIou': 0.46862753456}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00117new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 11:04:13.038525: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:04:13.098265: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:04:13.098554: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.14316961, 'vehiclesObservedIou': 0.062642254, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 5.473162, 'vehiclesFlowWarpedOccupancyAuc': 0.1879516, 'vehiclesFlowWarpedOccupancyIou': 0.06255704}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9035222, 'vehiclesObservedIou': 0.6159822, 'vehiclesOccludedAuc': 0.26988006, 'vehiclesOccludedIou': 0.07175342, 'vehiclesFlowEpe': 9.139399, 'vehiclesFlowWarpedOccupancyAuc': 0.8032918, 'vehiclesFlowWarpedOccupancyIou': 0.67349815}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.823668, 'vehiclesObservedIou': 0.48726323, 'vehiclesOccludedAuc': 0.05941376, 'vehiclesOccludedIou': 0.00788304, 'vehiclesFlowEpe': 1.8836559, 'vehiclesFlowWarpedOccupancyAuc': 0.8082497, 'vehiclesFlowWarpedOccupancyIou': 0.5948551}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.92871535, 'vehiclesObservedIou': 0.69283277, 'vehiclesOccludedAuc': 0.0067882715, 'vehiclesOccludedIou': 0.003362468, 'vehiclesFlowEpe': 9.170944, 'vehiclesFlowWarpedOccupancyAuc': 0.73403937, 'vehiclesFlowWarpedOccupancyIou': 0.7590005}
Time: 0.0014 seconds, Metrics: {'vehiclesObservedAuc': 0.6997327, 'vehiclesObservedIou': 0.430926, 'vehiclesOccludedAuc': 0.036783993, 'vehiclesOccludedIou': 0.011624044, 'vehiclesFlowEpe': 4.6397476, 'vehiclesFlowWarpedOccupancyAuc': 0.61120176, 'vehiclesFlowWarpedOccupancyIou': 0.47683296}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8048104, 'vehiclesObservedIou': 0.45229003, 'vehiclesOccludedAuc': 0.030798512, 'vehiclesOccludedIou': 0.008925622, 'vehiclesFlowEpe': 4.949875, 'vehiclesFlowWarpedOccupancyAuc': 0.616583, 'vehiclesFlowWarpedOccupancyIou': 0.50064945}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.92871535, 'vehiclesObservedIou': 0.69283277, 'vehiclesOccludedAuc': 0.0067882715, 'vehiclesOccludedIou': 0.003362468, 'vehiclesFlowEpe': 9.170944, 'vehiclesFlowWarpedOccupancyAuc': 0.73403937, 'vehiclesFlowWarpedOccupancyIou': 0.7590005}
Average Time: 0.0012 seconds, Average Metrics: {'vehiclesObservedAuc': 0.7172697100000001, 'vehiclesObservedIou': 0.456989414, 'vehiclesOccludedAuc': 0.06727743274999999, 'vehiclesOccludedIou': 0.017258098999999995, 'vehiclesFlowEpe': 5.876130583333333, 'vehiclesFlowWarpedOccupancyAuc': 0.626886205, 'vehiclesFlowWarpedOccupancyIou': 0.5112321999999999}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00124new.tfrecords...
2024-05-28 11:04:17.275549: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:04:17.327236: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:04:17.327523: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.5489921, 'vehiclesObservedIou': 0.30264202, 'vehiclesOccludedAuc': 0.016667383, 'vehiclesOccludedIou': 0.005138913, 'vehiclesFlowEpe': 9.866883, 'vehiclesFlowWarpedOccupancyAuc': 0.36506528, 'vehiclesFlowWarpedOccupancyIou': 0.34353936}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8992656, 'vehiclesObservedIou': 0.5811409, 'vehiclesOccludedAuc': 0.10404447, 'vehiclesOccludedIou': 0.02659293, 'vehiclesFlowEpe': 4.905529, 'vehiclesFlowWarpedOccupancyAuc': 0.62849355, 'vehiclesFlowWarpedOccupancyIou': 0.54094917}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.55236775, 'vehiclesObservedIou': 0.2767602, 'vehiclesOccludedAuc': 0.05971397, 'vehiclesOccludedIou': 0.013118278, 'vehiclesFlowEpe': 3.6805465, 'vehiclesFlowWarpedOccupancyAuc': 0.6173228, 'vehiclesFlowWarpedOccupancyIou': 0.3464104}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.43736506, 'vehiclesObservedIou': 0.18466926, 'vehiclesOccludedAuc': 0.0044684466, 'vehiclesOccludedIou': 0.0011315017, 'vehiclesFlowEpe': 5.840099, 'vehiclesFlowWarpedOccupancyAuc': 0.45110893, 'vehiclesFlowWarpedOccupancyIou': 0.19498576}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.1767797, 'vehiclesObservedIou': 0.07548985, 'vehiclesOccludedAuc': 0.015002595, 'vehiclesOccludedIou': 0.0052370215, 'vehiclesFlowEpe': 2.7770221, 'vehiclesFlowWarpedOccupancyAuc': 0.28601205, 'vehiclesFlowWarpedOccupancyIou': 0.08585571}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.73015785, 'vehiclesObservedIou': 0.49906355, 'vehiclesOccludedAuc': 0.26564384, 'vehiclesOccludedIou': 0.09285925, 'vehiclesFlowEpe': 3.8284647, 'vehiclesFlowWarpedOccupancyAuc': 0.7254613, 'vehiclesFlowWarpedOccupancyIou': 0.61715096}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.22853616, 'vehiclesObservedIou': 0.12423388, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 6.3219438, 'vehiclesFlowWarpedOccupancyAuc': 0.21244006, 'vehiclesFlowWarpedOccupancyIou': 0.13124037}
DataLossError encountered. Skipping the corrupted record.
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.8992656, 'vehiclesObservedIou': 0.5811409, 'vehiclesOccludedAuc': 0.10404447, 'vehiclesOccludedIou': 0.02659293, 'vehiclesFlowEpe': 4.905529, 'vehiclesFlowWarpedOccupancyAuc': 0.62849355, 'vehiclesFlowWarpedOccupancyIou': 0.54094917}
2024-05-28 11:04:21.969777: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:04:22.020783: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:04:22.021089: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.5104948885714286, 'vehiclesObservedIou': 0.29199995142857144, 'vehiclesOccludedAuc': 0.06650581494285715, 'vehiclesOccludedIou': 0.020582556314285714, 'vehiclesFlowEpe': 5.3172125857142865, 'vehiclesFlowWarpedOccupancyAuc': 0.46941485285714285, 'vehiclesFlowWarpedOccupancyIou': 0.3228759614285714}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00057new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.784011, 'vehiclesObservedIou': 0.44707274, 'vehiclesOccludedAuc': 0.0063942107, 'vehiclesOccludedIou': 0.002756505, 'vehiclesFlowEpe': 2.9958682, 'vehiclesFlowWarpedOccupancyAuc': 0.6632078, 'vehiclesFlowWarpedOccupancyIou': 0.49879515}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.75444853, 'vehiclesObservedIou': 0.4134797, 'vehiclesOccludedAuc': 0.03821258, 'vehiclesOccludedIou': 0.006768098, 'vehiclesFlowEpe': 2.1881552, 'vehiclesFlowWarpedOccupancyAuc': 0.71223146, 'vehiclesFlowWarpedOccupancyIou': 0.5077526}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.4510597, 'vehiclesObservedIou': 0.19576904, 'vehiclesOccludedAuc': 0.01127775, 'vehiclesOccludedIou': 0.0045187077, 'vehiclesFlowEpe': 4.667133, 'vehiclesFlowWarpedOccupancyAuc': 0.45191756, 'vehiclesFlowWarpedOccupancyIou': 0.22304311}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7831357, 'vehiclesObservedIou': 0.41364112, 'vehiclesOccludedAuc': 0.006704659, 'vehiclesOccludedIou': 0.0025254758, 'vehiclesFlowEpe': 2.2360466, 'vehiclesFlowWarpedOccupancyAuc': 0.7795054, 'vehiclesFlowWarpedOccupancyIou': 0.5048156}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6852231, 'vehiclesObservedIou': 0.33859685, 'vehiclesOccludedAuc': 0.4572077, 'vehiclesOccludedIou': 0.069544636, 'vehiclesFlowEpe': 4.4886575, 'vehiclesFlowWarpedOccupancyAuc': 0.55802476, 'vehiclesFlowWarpedOccupancyIou': 0.42579246}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7102403, 'vehiclesObservedIou': 0.37524864, 'vehiclesOccludedAuc': 0.044610992, 'vehiclesOccludedIou': 0.01381219, 'vehiclesFlowEpe': 3.7722428, 'vehiclesFlowWarpedOccupancyAuc': 0.5930264, 'vehiclesFlowWarpedOccupancyIou': 0.4317736}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.26316878, 'vehiclesObservedIou': 0.14927603, 'vehiclesOccludedAuc': 0.11401574, 'vehiclesOccludedIou': 0.028619729, 'vehiclesFlowEpe': 4.851896, 'vehiclesFlowWarpedOccupancyAuc': 0.48653686, 'vehiclesFlowWarpedOccupancyIou': 0.19896232}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.19064006, 'vehiclesObservedIou': 0.11139767, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.7742631, 'vehiclesFlowWarpedOccupancyAuc': 0.29110527, 'vehiclesFlowWarpedOccupancyIou': 0.13495333}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.66567236, 'vehiclesObservedIou': 0.402161, 'vehiclesOccludedAuc': 0.0027898701, 'vehiclesOccludedIou': 0.0014994114, 'vehiclesFlowEpe': 3.163712, 'vehiclesFlowWarpedOccupancyAuc': 0.61848164, 'vehiclesFlowWarpedOccupancyIou': 0.4641693}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.6943798, 'vehiclesObservedIou': 0.42941517, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 6.375752, 'vehiclesFlowWarpedOccupancyAuc': 0.6762619, 'vehiclesFlowWarpedOccupancyIou': 0.5587646}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.58467966, 'vehiclesObservedIou': 0.3301643, 'vehiclesOccludedAuc': 0.04981475, 'vehiclesOccludedIou': 0.003244655, 'vehiclesFlowEpe': 6.198326, 'vehiclesFlowWarpedOccupancyAuc': 0.5122813, 'vehiclesFlowWarpedOccupancyIou': 0.34987307}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.88440627, 'vehiclesObservedIou': 0.5298122, 'vehiclesOccludedAuc': 0.040169332, 'vehiclesOccludedIou': 0.015155587, 'vehiclesFlowEpe': 2.2313898, 'vehiclesFlowWarpedOccupancyAuc': 0.7871902, 'vehiclesFlowWarpedOccupancyIou': 0.67491746}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8653073, 'vehiclesObservedIou': 0.55973333, 'vehiclesOccludedAuc': 0.024107978, 'vehiclesOccludedIou': 0.0072871093, 'vehiclesFlowEpe': 2.3975146, 'vehiclesFlowWarpedOccupancyAuc': 0.70545137, 'vehiclesFlowWarpedOccupancyIou': 0.59421563}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.974264, 'vehiclesObservedIou': 0.80788344, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.394447, 'vehiclesFlowWarpedOccupancyAuc': 0.85908926, 'vehiclesFlowWarpedOccupancyIou': 0.8824276}
Time: 0.0014 seconds, Metrics: {'vehiclesObservedAuc': 0.4686061, 'vehiclesObservedIou': 0.19485337, 'vehiclesOccludedAuc': 0.04616515, 'vehiclesOccludedIou': 0.007587624, 'vehiclesFlowEpe': 9.306687, 'vehiclesFlowWarpedOccupancyAuc': 0.29754403, 'vehiclesFlowWarpedOccupancyIou': 0.25618783}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.57462156, 'vehiclesObservedIou': 0.29151356, 'vehiclesOccludedAuc': 0.0007462697, 'vehiclesOccludedIou': 0.00049361645, 'vehiclesFlowEpe': 9.164427, 'vehiclesFlowWarpedOccupancyAuc': 0.44189346, 'vehiclesFlowWarpedOccupancyIou': 0.34282008}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.6325668, 'vehiclesObservedIou': 0.2873109, 'vehiclesOccludedAuc': 0.0069452245, 'vehiclesOccludedIou': 0.0036567517, 'vehiclesFlowEpe': 3.701109, 'vehiclesFlowWarpedOccupancyAuc': 0.5345184, 'vehiclesFlowWarpedOccupancyIou': 0.3337254}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.95535535, 'vehiclesObservedIou': 0.76563364, 'vehiclesOccludedAuc': 0.0010221079, 'vehiclesOccludedIou': 0.00056279096, 'vehiclesFlowEpe': 3.1623461, 'vehiclesFlowWarpedOccupancyAuc': 0.8673215, 'vehiclesFlowWarpedOccupancyIou': 0.81640923}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8788548, 'vehiclesObservedIou': 0.5326502, 'vehiclesOccludedAuc': 0.00092099106, 'vehiclesOccludedIou': 0.00017516801, 'vehiclesFlowEpe': 1.9431615, 'vehiclesFlowWarpedOccupancyAuc': 0.7791034, 'vehiclesFlowWarpedOccupancyIou': 0.6029839}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7635844, 'vehiclesObservedIou': 0.40894836, 'vehiclesOccludedAuc': 0.034587856, 'vehiclesOccludedIou': 0.00851146, 'vehiclesFlowEpe': 3.1341887, 'vehiclesFlowWarpedOccupancyAuc': 0.65876454, 'vehiclesFlowWarpedOccupancyIou': 0.49296698}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.94865036, 'vehiclesObservedIou': 0.62320775, 'vehiclesOccludedAuc': 0.06050044, 'vehiclesOccludedIou': 0.010783142, 'vehiclesFlowEpe': 3.4080176, 'vehiclesFlowWarpedOccupancyAuc': 0.76100665, 'vehiclesFlowWarpedOccupancyIou': 0.6336013}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7443794, 'vehiclesObservedIou': 0.41804525, 'vehiclesOccludedAuc': 0.7182966, 'vehiclesOccludedIou': 0.055376887, 'vehiclesFlowEpe': 2.1133056, 'vehiclesFlowWarpedOccupancyAuc': 0.7436214, 'vehiclesFlowWarpedOccupancyIou': 0.6255309}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7944894, 'vehiclesObservedIou': 0.47463816, 'vehiclesOccludedAuc': 0.199305, 'vehiclesOccludedIou': 0.055835277, 'vehiclesFlowEpe': 5.0502377, 'vehiclesFlowWarpedOccupancyAuc': 0.65209633, 'vehiclesFlowWarpedOccupancyIou': 0.5481809}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9310083, 'vehiclesObservedIou': 0.60870326, 'vehiclesOccludedAuc': 0.1948965, 'vehiclesOccludedIou': 0.053017043, 'vehiclesFlowEpe': 4.0853114, 'vehiclesFlowWarpedOccupancyAuc': 0.7670202, 'vehiclesFlowWarpedOccupancyIou': 0.6673052}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9227187, 'vehiclesObservedIou': 0.6247501, 'vehiclesOccludedAuc': 0.006812199, 'vehiclesOccludedIou': 0.0031987552, 'vehiclesFlowEpe': 6.311548, 'vehiclesFlowWarpedOccupancyAuc': 0.6957479, 'vehiclesFlowWarpedOccupancyIou': 0.6384747}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.6903977, 'vehiclesObservedIou': 0.36375555, 'vehiclesOccludedAuc': 0.061614703, 'vehiclesOccludedIou': 0.02062559, 'vehiclesFlowEpe': 6.7418427, 'vehiclesFlowWarpedOccupancyAuc': 0.53194076, 'vehiclesFlowWarpedOccupancyIou': 0.39756888}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9593412, 'vehiclesObservedIou': 0.7379296, 'vehiclesOccludedAuc': 0.02142915, 'vehiclesOccludedIou': 0.009641364, 'vehiclesFlowEpe': 3.8370576, 'vehiclesFlowWarpedOccupancyAuc': 0.84442544, 'vehiclesFlowWarpedOccupancyIou': 0.8045566}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.711523, 'vehiclesObservedIou': 0.3444156, 'vehiclesOccludedAuc': 0.088302374, 'vehiclesOccludedIou': 0.014863882, 'vehiclesFlowEpe': 3.0883954, 'vehiclesFlowWarpedOccupancyAuc': 0.6246369, 'vehiclesFlowWarpedOccupancyIou': 0.39731055}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7927001, 'vehiclesObservedIou': 0.4760001, 'vehiclesOccludedAuc': 0.4480801, 'vehiclesOccludedIou': 0.069228485, 'vehiclesFlowEpe': 3.569574, 'vehiclesFlowWarpedOccupancyAuc': 0.7002441, 'vehiclesFlowWarpedOccupancyIou': 0.55041754}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.18108687, 'vehiclesObservedIou': 0.0984384, 'vehiclesOccludedAuc': 0.0018079568, 'vehiclesOccludedIou': 0.0013959217, 'vehiclesFlowEpe': 9.523798, 'vehiclesFlowWarpedOccupancyAuc': 0.19431137, 'vehiclesFlowWarpedOccupancyIou': 0.10898263}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.47550768, 'vehiclesObservedIou': 0.20010936, 'vehiclesOccludedAuc': 0.14357269, 'vehiclesOccludedIou': 0.027263599, 'vehiclesFlowEpe': 3.5987163, 'vehiclesFlowWarpedOccupancyAuc': 0.56294876, 'vehiclesFlowWarpedOccupancyIou': 0.21037066}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.84851694, 'vehiclesObservedIou': 0.5509035, 'vehiclesOccludedAuc': 0.48659348, 'vehiclesOccludedIou': 0.109554686, 'vehiclesFlowEpe': 3.843265, 'vehiclesFlowWarpedOccupancyAuc': 0.6875362, 'vehiclesFlowWarpedOccupancyIou': 0.63306564}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.84609646, 'vehiclesObservedIou': 0.44600862, 'vehiclesOccludedAuc': 0.05672083, 'vehiclesOccludedIou': 0.018841853, 'vehiclesFlowEpe': 3.3414125, 'vehiclesFlowWarpedOccupancyAuc': 0.7435714, 'vehiclesFlowWarpedOccupancyIou': 0.5777439}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.974264, 'vehiclesObservedIou': 0.80788344, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.394447, 'vehiclesFlowWarpedOccupancyAuc': 0.85908926, 'vehiclesFlowWarpedOccupancyIou': 0.8824276}
2024-05-28 11:04:43.511837: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:04:43.563836: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:04:43.564124: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
Average Time: 0.0012 seconds, Average Metrics: {'vehiclesObservedAuc': 0.7094133842424242, 'vehiclesObservedIou': 0.4227717124242424, 'vehiclesOccludedAuc': 0.10223106617454546, 'vehiclesOccludedIou': 0.018980181824848483, 'vehiclesFlowEpe': 4.26241833030303, 'vehiclesFlowWarpedOccupancyAuc': 0.6297746642424242, 'vehiclesFlowWarpedOccupancyIou': 0.4875290500000001}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00004new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0015 seconds, Metrics: {'vehiclesObservedAuc': 0.8704587, 'vehiclesObservedIou': 0.47646064, 'vehiclesOccludedAuc': 0.20859373, 'vehiclesOccludedIou': 0.018840732, 'vehiclesFlowEpe': 5.0161, 'vehiclesFlowWarpedOccupancyAuc': 0.68433917, 'vehiclesFlowWarpedOccupancyIou': 0.5462466}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.76173097, 'vehiclesObservedIou': 0.41386926, 'vehiclesOccludedAuc': 0.102419995, 'vehiclesOccludedIou': 0.02701182, 'vehiclesFlowEpe': 3.3369722, 'vehiclesFlowWarpedOccupancyAuc': 0.6639008, 'vehiclesFlowWarpedOccupancyIou': 0.48471984}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.28505144, 'vehiclesObservedIou': 0.10876971, 'vehiclesOccludedAuc': 0.00539536, 'vehiclesOccludedIou': 0.001007002, 'vehiclesFlowEpe': 6.320098, 'vehiclesFlowWarpedOccupancyAuc': 0.42709547, 'vehiclesFlowWarpedOccupancyIou': 0.103706166}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.96334326, 'vehiclesObservedIou': 0.71954924, 'vehiclesOccludedAuc': 0.24285066, 'vehiclesOccludedIou': 0.057659876, 'vehiclesFlowEpe': 4.7973433, 'vehiclesFlowWarpedOccupancyAuc': 0.848023, 'vehiclesFlowWarpedOccupancyIou': 0.76655316}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8974859, 'vehiclesObservedIou': 0.64599305, 'vehiclesOccludedAuc': 0.13988271, 'vehiclesOccludedIou': 0.03108825, 'vehiclesFlowEpe': 1.6489542, 'vehiclesFlowWarpedOccupancyAuc': 0.8435219, 'vehiclesFlowWarpedOccupancyIou': 0.6619797}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8591615, 'vehiclesObservedIou': 0.5238877, 'vehiclesOccludedAuc': 0.0054302337, 'vehiclesOccludedIou': 0.002265593, 'vehiclesFlowEpe': 2.505467, 'vehiclesFlowWarpedOccupancyAuc': 0.7106371, 'vehiclesFlowWarpedOccupancyIou': 0.62383175}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6492169, 'vehiclesObservedIou': 0.34750438, 'vehiclesOccludedAuc': 0.042431135, 'vehiclesOccludedIou': 0.0060058497, 'vehiclesFlowEpe': 8.017135, 'vehiclesFlowWarpedOccupancyAuc': 0.47082788, 'vehiclesFlowWarpedOccupancyIou': 0.53972656}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7775454, 'vehiclesObservedIou': 0.6032009, 'vehiclesOccludedAuc': 0.043332357, 'vehiclesOccludedIou': 0.017615097, 'vehiclesFlowEpe': 4.1090508, 'vehiclesFlowWarpedOccupancyAuc': 0.7576746, 'vehiclesFlowWarpedOccupancyIou': 0.6849753}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.67336106, 'vehiclesObservedIou': 0.38385764, 'vehiclesOccludedAuc': 0.17515916, 'vehiclesOccludedIou': 0.043302756, 'vehiclesFlowEpe': 4.003154, 'vehiclesFlowWarpedOccupancyAuc': 0.6515442, 'vehiclesFlowWarpedOccupancyIou': 0.4905499}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5499635, 'vehiclesObservedIou': 0.28856316, 'vehiclesOccludedAuc': 0.0024633864, 'vehiclesOccludedIou': 0.0009419873, 'vehiclesFlowEpe': 4.277761, 'vehiclesFlowWarpedOccupancyAuc': 0.49104244, 'vehiclesFlowWarpedOccupancyIou': 0.34760436}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.72297335, 'vehiclesObservedIou': 0.41540718, 'vehiclesOccludedAuc': 0.1150477, 'vehiclesOccludedIou': 0.013151259, 'vehiclesFlowEpe': 4.132275, 'vehiclesFlowWarpedOccupancyAuc': 0.5924859, 'vehiclesFlowWarpedOccupancyIou': 0.4498679}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.81593555, 'vehiclesObservedIou': 0.44736567, 'vehiclesOccludedAuc': 0.011056095, 'vehiclesOccludedIou': 0.004511846, 'vehiclesFlowEpe': 2.3558855, 'vehiclesFlowWarpedOccupancyAuc': 0.7392446, 'vehiclesFlowWarpedOccupancyIou': 0.5583815}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9336872, 'vehiclesObservedIou': 0.72579855, 'vehiclesOccludedAuc': 0.19707035, 'vehiclesOccludedIou': 0.04560934, 'vehiclesFlowEpe': 2.497817, 'vehiclesFlowWarpedOccupancyAuc': 0.8386533, 'vehiclesFlowWarpedOccupancyIou': 0.7816456}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7996371, 'vehiclesObservedIou': 0.46157247, 'vehiclesOccludedAuc': 0.12269788, 'vehiclesOccludedIou': 0.036172684, 'vehiclesFlowEpe': 3.2253714, 'vehiclesFlowWarpedOccupancyAuc': 0.69411975, 'vehiclesFlowWarpedOccupancyIou': 0.50169873}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.88975537, 'vehiclesObservedIou': 0.601022, 'vehiclesOccludedAuc': 0.0007489183, 'vehiclesOccludedIou': 0.0005111631, 'vehiclesFlowEpe': 2.750222, 'vehiclesFlowWarpedOccupancyAuc': 0.79288065, 'vehiclesFlowWarpedOccupancyIou': 0.6988555}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9424135, 'vehiclesObservedIou': 0.74083567, 'vehiclesOccludedAuc': 0.08596131, 'vehiclesOccludedIou': 0.01490722, 'vehiclesFlowEpe': 12.90305, 'vehiclesFlowWarpedOccupancyAuc': 0.7276645, 'vehiclesFlowWarpedOccupancyIou': 0.7130387}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.08960067, 'vehiclesObservedIou': 0.05116117, 'vehiclesOccludedAuc': 0.013944208, 'vehiclesOccludedIou': 0.0021558965, 'vehiclesFlowEpe': 4.3679714, 'vehiclesFlowWarpedOccupancyAuc': 0.26280725, 'vehiclesFlowWarpedOccupancyIou': 0.051026452}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.58877057, 'vehiclesObservedIou': 0.25752643, 'vehiclesOccludedAuc': 0.12750481, 'vehiclesOccludedIou': 0.035411388, 'vehiclesFlowEpe': 2.849849, 'vehiclesFlowWarpedOccupancyAuc': 0.58793545, 'vehiclesFlowWarpedOccupancyIou': 0.2990814}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5063751, 'vehiclesObservedIou': 0.2909365, 'vehiclesOccludedAuc': 0.108444445, 'vehiclesOccludedIou': 0.033482585, 'vehiclesFlowEpe': 8.809943, 'vehiclesFlowWarpedOccupancyAuc': 0.56775624, 'vehiclesFlowWarpedOccupancyIou': 0.40588814}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7627495, 'vehiclesObservedIou': 0.4147755, 'vehiclesOccludedAuc': 0.23964593, 'vehiclesOccludedIou': 0.0522469, 'vehiclesFlowEpe': 4.21609, 'vehiclesFlowWarpedOccupancyAuc': 0.69369084, 'vehiclesFlowWarpedOccupancyIou': 0.52699}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.332554, 'vehiclesObservedIou': 0.19271629, 'vehiclesOccludedAuc': 0.0060097566, 'vehiclesOccludedIou': 0.002733006, 'vehiclesFlowEpe': 9.232902, 'vehiclesFlowWarpedOccupancyAuc': 0.3522668, 'vehiclesFlowWarpedOccupancyIou': 0.25882223}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8637836, 'vehiclesObservedIou': 0.6206146, 'vehiclesOccludedAuc': 0.094815955, 'vehiclesOccludedIou': 0.020728884, 'vehiclesFlowEpe': 5.7720804, 'vehiclesFlowWarpedOccupancyAuc': 0.7313007, 'vehiclesFlowWarpedOccupancyIou': 0.6642596}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6305924, 'vehiclesObservedIou': 0.30662802, 'vehiclesOccludedAuc': 0.35753563, 'vehiclesOccludedIou': 0.10998085, 'vehiclesFlowEpe': 2.655652, 'vehiclesFlowWarpedOccupancyAuc': 0.66443545, 'vehiclesFlowWarpedOccupancyIou': 0.3941258}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5480817, 'vehiclesObservedIou': 0.29192892, 'vehiclesOccludedAuc': 0.14094697, 'vehiclesOccludedIou': 0.045977246, 'vehiclesFlowEpe': 5.038723, 'vehiclesFlowWarpedOccupancyAuc': 0.58066124, 'vehiclesFlowWarpedOccupancyIou': 0.39861608}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.41747257, 'vehiclesObservedIou': 0.24968855, 'vehiclesOccludedAuc': 0.07658031, 'vehiclesOccludedIou': 0.016699836, 'vehiclesFlowEpe': 4.0126348, 'vehiclesFlowWarpedOccupancyAuc': 0.57950544, 'vehiclesFlowWarpedOccupancyIou': 0.32450444}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.91284496, 'vehiclesObservedIou': 0.6556912, 'vehiclesOccludedAuc': 0.06518559, 'vehiclesOccludedIou': 0.026102725, 'vehiclesFlowEpe': 4.8662357, 'vehiclesFlowWarpedOccupancyAuc': 0.7894564, 'vehiclesFlowWarpedOccupancyIou': 0.7306297}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.96334326, 'vehiclesObservedIou': 0.71954924, 'vehiclesOccludedAuc': 0.24285066, 'vehiclesOccludedIou': 0.057659876, 'vehiclesFlowEpe': 4.7973433, 'vehiclesFlowWarpedOccupancyAuc': 0.848023, 'vehiclesFlowWarpedOccupancyIou': 0.76655316}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6940209911538463, 'vehiclesObservedIou': 0.4321278615384615, 'vehiclesOccludedAuc': 0.10504440711538462, 'vehiclesOccludedIou': 0.025620068907692306, 'vehiclesFlowEpe': 4.758412988461538, 'vehiclesFlowWarpedOccupancyAuc': 0.6439796565384616, 'vehiclesFlowWarpedOccupancyIou': 0.5002817349230769}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00023new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 11:05:00.035329: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:05:00.085964: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:05:00.086246: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.62054664, 'vehiclesObservedIou': 0.40629312, 'vehiclesOccludedAuc': 0.0954732, 'vehiclesOccludedIou': 0.020354554, 'vehiclesFlowEpe': 4.1201777, 'vehiclesFlowWarpedOccupancyAuc': 0.5992795, 'vehiclesFlowWarpedOccupancyIou': 0.47022405}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9456999, 'vehiclesObservedIou': 0.6463986, 'vehiclesOccludedAuc': 0.069153294, 'vehiclesOccludedIou': 0.03109844, 'vehiclesFlowEpe': 2.0048766, 'vehiclesFlowWarpedOccupancyAuc': 0.85298115, 'vehiclesFlowWarpedOccupancyIou': 0.74146914}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8082433, 'vehiclesObservedIou': 0.5076879, 'vehiclesOccludedAuc': 0.2101104, 'vehiclesOccludedIou': 0.009746489, 'vehiclesFlowEpe': 5.3149285, 'vehiclesFlowWarpedOccupancyAuc': 0.64569604, 'vehiclesFlowWarpedOccupancyIou': 0.5836781}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.82608086, 'vehiclesObservedIou': 0.56824374, 'vehiclesOccludedAuc': 0.09463845, 'vehiclesOccludedIou': 0.026707545, 'vehiclesFlowEpe': 5.88094, 'vehiclesFlowWarpedOccupancyAuc': 0.7479222, 'vehiclesFlowWarpedOccupancyIou': 0.7395661}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.90155256, 'vehiclesObservedIou': 0.49646974, 'vehiclesOccludedAuc': 0.2337677, 'vehiclesOccludedIou': 0.071559474, 'vehiclesFlowEpe': 8.396428, 'vehiclesFlowWarpedOccupancyAuc': 0.631483, 'vehiclesFlowWarpedOccupancyIou': 0.54529566}
DataLossError encountered. Skipping the corrupted record.
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.9456999, 'vehiclesObservedIou': 0.6463986, 'vehiclesOccludedAuc': 0.069153294, 'vehiclesOccludedIou': 0.03109844, 'vehiclesFlowEpe': 2.0048766, 'vehiclesFlowWarpedOccupancyAuc': 0.85298115, 'vehiclesFlowWarpedOccupancyIou': 0.74146914}
Average Time: 0.0012 seconds, Average Metrics: {'vehiclesObservedAuc': 0.820424652, 'vehiclesObservedIou': 0.52501862, 'vehiclesOccludedAuc': 0.1406286088, 'vehiclesOccludedIou': 0.031893300400000005, 'vehiclesFlowEpe': 5.14347016, 'vehiclesFlowWarpedOccupancyAuc': 0.6954723780000001, 'vehiclesFlowWarpedOccupancyIou': 0.6160466099999999}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00140new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 11:05:03.622894: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:05:03.674111: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:05:03.674398: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.39599305, 'vehiclesObservedIou': 0.19304849, 'vehiclesOccludedAuc': 0.08990001, 'vehiclesOccludedIou': 0.00635847, 'vehiclesFlowEpe': 4.5847087, 'vehiclesFlowWarpedOccupancyAuc': 0.47920626, 'vehiclesFlowWarpedOccupancyIou': 0.22852999}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.39490703, 'vehiclesObservedIou': 0.19676088, 'vehiclesOccludedAuc': 0.00022190828, 'vehiclesOccludedIou': 0.00042673413, 'vehiclesFlowEpe': 3.7834222, 'vehiclesFlowWarpedOccupancyAuc': 0.52467924, 'vehiclesFlowWarpedOccupancyIou': 0.2415544}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6281887, 'vehiclesObservedIou': 0.371574, 'vehiclesOccludedAuc': 0.036005072, 'vehiclesOccludedIou': 0.013983612, 'vehiclesFlowEpe': 5.141552, 'vehiclesFlowWarpedOccupancyAuc': 0.5967172, 'vehiclesFlowWarpedOccupancyIou': 0.4535446}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9286612, 'vehiclesObservedIou': 0.66300917, 'vehiclesOccludedAuc': 0.015591964, 'vehiclesOccludedIou': 0.0035273274, 'vehiclesFlowEpe': 5.0092683, 'vehiclesFlowWarpedOccupancyAuc': 0.77190304, 'vehiclesFlowWarpedOccupancyIou': 0.7804296}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.60596424, 'vehiclesObservedIou': 0.28571725, 'vehiclesOccludedAuc': 0.10414437, 'vehiclesOccludedIou': 0.017149322, 'vehiclesFlowEpe': 3.749833, 'vehiclesFlowWarpedOccupancyAuc': 0.5757121, 'vehiclesFlowWarpedOccupancyIou': 0.29895514}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9232849, 'vehiclesObservedIou': 0.66902643, 'vehiclesOccludedAuc': 0.1232208, 'vehiclesOccludedIou': 0.021821555, 'vehiclesFlowEpe': 5.1068482, 'vehiclesFlowWarpedOccupancyAuc': 0.76735896, 'vehiclesFlowWarpedOccupancyIou': 0.7431252}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8489587, 'vehiclesObservedIou': 0.635643, 'vehiclesOccludedAuc': 0.065213956, 'vehiclesOccludedIou': 0.0132181365, 'vehiclesFlowEpe': 3.5780072, 'vehiclesFlowWarpedOccupancyAuc': 0.8428375, 'vehiclesFlowWarpedOccupancyIou': 0.7882243}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7901723, 'vehiclesObservedIou': 0.43687695, 'vehiclesOccludedAuc': 0.1292873, 'vehiclesOccludedIou': 0.04189487, 'vehiclesFlowEpe': 3.967564, 'vehiclesFlowWarpedOccupancyAuc': 0.6632129, 'vehiclesFlowWarpedOccupancyIou': 0.4958267}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8121728, 'vehiclesObservedIou': 0.43214622, 'vehiclesOccludedAuc': 0.011500456, 'vehiclesOccludedIou': 0.0018345728, 'vehiclesFlowEpe': 5.1577463, 'vehiclesFlowWarpedOccupancyAuc': 0.6147391, 'vehiclesFlowWarpedOccupancyIou': 0.5850656}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.90066016, 'vehiclesObservedIou': 0.54576993, 'vehiclesOccludedAuc': 0.0052472255, 'vehiclesOccludedIou': 0.0024720498, 'vehiclesFlowEpe': 5.424734, 'vehiclesFlowWarpedOccupancyAuc': 0.70171756, 'vehiclesFlowWarpedOccupancyIou': 0.7257492}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8604307, 'vehiclesObservedIou': 0.5440563, 'vehiclesOccludedAuc': 0.6918788, 'vehiclesOccludedIou': 0.13393705, 'vehiclesFlowEpe': 3.787109, 'vehiclesFlowWarpedOccupancyAuc': 0.745863, 'vehiclesFlowWarpedOccupancyIou': 0.6768092}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.13065732, 'vehiclesObservedIou': 0.04665526, 'vehiclesOccludedAuc': 0.10835637, 'vehiclesOccludedIou': 0.013142844, 'vehiclesFlowEpe': 3.7502918, 'vehiclesFlowWarpedOccupancyAuc': 0.274938, 'vehiclesFlowWarpedOccupancyIou': 0.05391274}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.85534173, 'vehiclesObservedIou': 0.554288, 'vehiclesOccludedAuc': 0.20411117, 'vehiclesOccludedIou': 0.042781565, 'vehiclesFlowEpe': 2.5841527, 'vehiclesFlowWarpedOccupancyAuc': 0.77289885, 'vehiclesFlowWarpedOccupancyIou': 0.58975184}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.26248947, 'vehiclesObservedIou': 0.1339375, 'vehiclesOccludedAuc': 0.07792172, 'vehiclesOccludedIou': 0.011639259, 'vehiclesFlowEpe': 3.7188847, 'vehiclesFlowWarpedOccupancyAuc': 0.48082435, 'vehiclesFlowWarpedOccupancyIou': 0.1601425}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.66743296, 'vehiclesObservedIou': 0.37483057, 'vehiclesOccludedAuc': 0.07801251, 'vehiclesOccludedIou': 0.011191228, 'vehiclesFlowEpe': 5.227238, 'vehiclesFlowWarpedOccupancyAuc': 0.55805385, 'vehiclesFlowWarpedOccupancyIou': 0.38736624}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9319131, 'vehiclesObservedIou': 0.6891572, 'vehiclesOccludedAuc': 0.060461745, 'vehiclesOccludedIou': 0.008071999, 'vehiclesFlowEpe': 4.660619, 'vehiclesFlowWarpedOccupancyAuc': 0.67125225, 'vehiclesFlowWarpedOccupancyIou': 0.6407904}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.29417208, 'vehiclesObservedIou': 0.139797, 'vehiclesOccludedAuc': 0.0029081, 'vehiclesOccludedIou': 0.0015840313, 'vehiclesFlowEpe': 8.887635, 'vehiclesFlowWarpedOccupancyAuc': 0.30606735, 'vehiclesFlowWarpedOccupancyIou': 0.1501695}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.84743977, 'vehiclesObservedIou': 0.5209921, 'vehiclesOccludedAuc': 0.017403094, 'vehiclesOccludedIou': 0.0045837266, 'vehiclesFlowEpe': 6.2065964, 'vehiclesFlowWarpedOccupancyAuc': 0.5618872, 'vehiclesFlowWarpedOccupancyIou': 0.49092278}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.23499122, 'vehiclesObservedIou': 0.10000867, 'vehiclesOccludedAuc': 0.024482206, 'vehiclesOccludedIou': 0.008580923, 'vehiclesFlowEpe': 5.325798, 'vehiclesFlowWarpedOccupancyAuc': 0.31189868, 'vehiclesFlowWarpedOccupancyIou': 0.10059137}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.48941195, 'vehiclesObservedIou': 0.30899084, 'vehiclesOccludedAuc': 0.027411655, 'vehiclesOccludedIou': 0.0070172832, 'vehiclesFlowEpe': 14.202375, 'vehiclesFlowWarpedOccupancyAuc': 0.3600281, 'vehiclesFlowWarpedOccupancyIou': 0.31330994}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.4115233, 'vehiclesObservedIou': 0.23368846, 'vehiclesOccludedAuc': 0.04067473, 'vehiclesOccludedIou': 0.0080869375, 'vehiclesFlowEpe': 7.73438, 'vehiclesFlowWarpedOccupancyAuc': 0.35327372, 'vehiclesFlowWarpedOccupancyIou': 0.193469}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7422472, 'vehiclesObservedIou': 0.36918607, 'vehiclesOccludedAuc': 0.516118, 'vehiclesOccludedIou': 0.059008762, 'vehiclesFlowEpe': 12.357229, 'vehiclesFlowWarpedOccupancyAuc': 0.52684283, 'vehiclesFlowWarpedOccupancyIou': 0.57879466}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.9319131, 'vehiclesObservedIou': 0.6891572, 'vehiclesOccludedAuc': 0.060461745, 'vehiclesOccludedIou': 0.008071999, 'vehiclesFlowEpe': 4.660619, 'vehiclesFlowWarpedOccupancyAuc': 0.67125225, 'vehiclesFlowWarpedOccupancyIou': 0.6407904}
Average Time: 0.0012 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6344097218181817, 'vehiclesObservedIou': 0.38387092227272723, 'vehiclesOccludedAuc': 0.11045787099000001, 'vehiclesOccludedIou': 0.019650557192272728, 'vehiclesFlowEpe': 5.63390875, 'vehiclesFlowWarpedOccupancyAuc': 0.5664505472727271, 'vehiclesFlowWarpedOccupancyIou': 0.4398652227272727}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00129new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 11:05:18.019819: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:05:18.078367: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:05:18.078650: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.35111478, 'vehiclesObservedIou': 0.15571216, 'vehiclesOccludedAuc': 0.060959697, 'vehiclesOccludedIou': 0.009334318, 'vehiclesFlowEpe': 3.4163933, 'vehiclesFlowWarpedOccupancyAuc': 0.5227248, 'vehiclesFlowWarpedOccupancyIou': 0.18730494}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.3336449, 'vehiclesObservedIou': 0.15925282, 'vehiclesOccludedAuc': 0.0070811533, 'vehiclesOccludedIou': 0.0016038078, 'vehiclesFlowEpe': 3.887341, 'vehiclesFlowWarpedOccupancyAuc': 0.2742623, 'vehiclesFlowWarpedOccupancyIou': 0.23110493}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6326367, 'vehiclesObservedIou': 0.30799416, 'vehiclesOccludedAuc': 0.039660476, 'vehiclesOccludedIou': 0.009352201, 'vehiclesFlowEpe': 8.071985, 'vehiclesFlowWarpedOccupancyAuc': 0.4724174, 'vehiclesFlowWarpedOccupancyIou': 0.33317274}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.93254936, 'vehiclesObservedIou': 0.67501014, 'vehiclesOccludedAuc': 0.00028980087, 'vehiclesOccludedIou': 0.000116458985, 'vehiclesFlowEpe': 4.733483, 'vehiclesFlowWarpedOccupancyAuc': 0.83138895, 'vehiclesFlowWarpedOccupancyIou': 0.78874594}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7917896, 'vehiclesObservedIou': 0.44015497, 'vehiclesOccludedAuc': 0.020672819, 'vehiclesOccludedIou': 0.0058172387, 'vehiclesFlowEpe': 5.9310284, 'vehiclesFlowWarpedOccupancyAuc': 0.55591154, 'vehiclesFlowWarpedOccupancyIou': 0.42399144}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.71011275, 'vehiclesObservedIou': 0.25278142, 'vehiclesOccludedAuc': 0.0011158151, 'vehiclesOccludedIou': 0.0015919914, 'vehiclesFlowEpe': 5.810516, 'vehiclesFlowWarpedOccupancyAuc': 0.5233335, 'vehiclesFlowWarpedOccupancyIou': 0.2615796}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.173266, 'vehiclesObservedIou': 0.08529794, 'vehiclesOccludedAuc': 0.0026650145, 'vehiclesOccludedIou': 0.00087129243, 'vehiclesFlowEpe': 6.661536, 'vehiclesFlowWarpedOccupancyAuc': 0.29304072, 'vehiclesFlowWarpedOccupancyIou': 0.09393933}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.88418406, 'vehiclesObservedIou': 0.682909, 'vehiclesOccludedAuc': 0.04699937, 'vehiclesOccludedIou': 0.021938464, 'vehiclesFlowEpe': 6.0849404, 'vehiclesFlowWarpedOccupancyAuc': 0.7063042, 'vehiclesFlowWarpedOccupancyIou': 0.688929}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.66862947, 'vehiclesObservedIou': 0.3502118, 'vehiclesOccludedAuc': 0.0023524521, 'vehiclesOccludedIou': 0.0013999462, 'vehiclesFlowEpe': 4.383311, 'vehiclesFlowWarpedOccupancyAuc': 0.5683688, 'vehiclesFlowWarpedOccupancyIou': 0.4208937}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7586905, 'vehiclesObservedIou': 0.4791019, 'vehiclesOccludedAuc': 0.014222648, 'vehiclesOccludedIou': 0.003905944, 'vehiclesFlowEpe': 6.695076, 'vehiclesFlowWarpedOccupancyAuc': 0.597103, 'vehiclesFlowWarpedOccupancyIou': 0.5538348}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.90929776, 'vehiclesObservedIou': 0.61421883, 'vehiclesOccludedAuc': 0.10428919, 'vehiclesOccludedIou': 0.01765462, 'vehiclesFlowEpe': 2.7141793, 'vehiclesFlowWarpedOccupancyAuc': 0.64394975, 'vehiclesFlowWarpedOccupancyIou': 0.62877774}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5117982, 'vehiclesObservedIou': 0.18574525, 'vehiclesOccludedAuc': 0.031780176, 'vehiclesOccludedIou': 0.010739474, 'vehiclesFlowEpe': 4.7848115, 'vehiclesFlowWarpedOccupancyAuc': 0.45944464, 'vehiclesFlowWarpedOccupancyIou': 0.24084689}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.6679322, 'vehiclesObservedIou': 0.3451503, 'vehiclesOccludedAuc': 0.08319766, 'vehiclesOccludedIou': 0.010122166, 'vehiclesFlowEpe': 4.1860175, 'vehiclesFlowWarpedOccupancyAuc': 0.5841735, 'vehiclesFlowWarpedOccupancyIou': 0.41974753}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.21516724, 'vehiclesObservedIou': 0.085449226, 'vehiclesOccludedAuc': 0.040280223, 'vehiclesOccludedIou': 0.009245281, 'vehiclesFlowEpe': 7.6654654, 'vehiclesFlowWarpedOccupancyAuc': 0.22178078, 'vehiclesFlowWarpedOccupancyIou': 0.07932727}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.28551126, 'vehiclesObservedIou': 0.11273156, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 6.6907673, 'vehiclesFlowWarpedOccupancyAuc': 0.19329336, 'vehiclesFlowWarpedOccupancyIou': 0.100773774}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.81538093, 'vehiclesObservedIou': 0.504418, 'vehiclesOccludedAuc': 0.014071553, 'vehiclesOccludedIou': 0.005060355, 'vehiclesFlowEpe': 4.3505826, 'vehiclesFlowWarpedOccupancyAuc': 0.67868125, 'vehiclesFlowWarpedOccupancyIou': 0.5731671}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.56428784, 'vehiclesObservedIou': 0.27834207, 'vehiclesOccludedAuc': 0.046180602, 'vehiclesOccludedIou': 0.0071280594, 'vehiclesFlowEpe': 5.7840915, 'vehiclesFlowWarpedOccupancyAuc': 0.46751416, 'vehiclesFlowWarpedOccupancyIou': 0.32156482}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.6123871, 'vehiclesObservedIou': 0.34619278, 'vehiclesOccludedAuc': 0.26025605, 'vehiclesOccludedIou': 0.028948229, 'vehiclesFlowEpe': 2.8846025, 'vehiclesFlowWarpedOccupancyAuc': 0.54775035, 'vehiclesFlowWarpedOccupancyIou': 0.38562483}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8905139, 'vehiclesObservedIou': 0.5689337, 'vehiclesOccludedAuc': 0.00066675484, 'vehiclesOccludedIou': 0.00020130147, 'vehiclesFlowEpe': 1.7615833, 'vehiclesFlowWarpedOccupancyAuc': 0.76359475, 'vehiclesFlowWarpedOccupancyIou': 0.66682816}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.84847206, 'vehiclesObservedIou': 0.52038056, 'vehiclesOccludedAuc': 0.071254656, 'vehiclesOccludedIou': 0.0129675185, 'vehiclesFlowEpe': 2.8311574, 'vehiclesFlowWarpedOccupancyAuc': 0.700494, 'vehiclesFlowWarpedOccupancyIou': 0.5274062}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.71914506, 'vehiclesObservedIou': 0.37525487, 'vehiclesOccludedAuc': 0.08183095, 'vehiclesOccludedIou': 0.009591793, 'vehiclesFlowEpe': 4.0481896, 'vehiclesFlowWarpedOccupancyAuc': 0.5662813, 'vehiclesFlowWarpedOccupancyIou': 0.4497655}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.18018086, 'vehiclesObservedIou': 0.07704696, 'vehiclesOccludedAuc': 0.03250388, 'vehiclesOccludedIou': 0.010457204, 'vehiclesFlowEpe': 3.119347, 'vehiclesFlowWarpedOccupancyAuc': 0.28758892, 'vehiclesFlowWarpedOccupancyIou': 0.0870141}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.71968174, 'vehiclesObservedIou': 0.37804633, 'vehiclesOccludedAuc': 0.026761698, 'vehiclesOccludedIou': 0.009241516, 'vehiclesFlowEpe': 4.378234, 'vehiclesFlowWarpedOccupancyAuc': 0.59855825, 'vehiclesFlowWarpedOccupancyIou': 0.38913977}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.85586655, 'vehiclesObservedIou': 0.5428505, 'vehiclesOccludedAuc': 0.21442613, 'vehiclesOccludedIou': 0.03954882, 'vehiclesFlowEpe': 4.345537, 'vehiclesFlowWarpedOccupancyAuc': 0.6855849, 'vehiclesFlowWarpedOccupancyIou': 0.6350622}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.1559585, 'vehiclesObservedIou': 0.09444935, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 6.631889, 'vehiclesFlowWarpedOccupancyAuc': 0.3162747, 'vehiclesFlowWarpedOccupancyIou': 0.1096229}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.69843376, 'vehiclesObservedIou': 0.38067234, 'vehiclesOccludedAuc': 0.093142755, 'vehiclesOccludedIou': 0.018740572, 'vehiclesFlowEpe': 4.13034, 'vehiclesFlowWarpedOccupancyAuc': 0.63078254, 'vehiclesFlowWarpedOccupancyIou': 0.44521368}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8293048, 'vehiclesObservedIou': 0.47782144, 'vehiclesOccludedAuc': 0.00028043168, 'vehiclesOccludedIou': 0.00031664243, 'vehiclesFlowEpe': 2.4028342, 'vehiclesFlowWarpedOccupancyAuc': 0.7296696, 'vehiclesFlowWarpedOccupancyIou': 0.591614}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.91365397, 'vehiclesObservedIou': 0.57892984, 'vehiclesOccludedAuc': 0.082803145, 'vehiclesOccludedIou': 0.025073236, 'vehiclesFlowEpe': 4.3434067, 'vehiclesFlowWarpedOccupancyAuc': 0.71832806, 'vehiclesFlowWarpedOccupancyIou': 0.62252504}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.61107945, 'vehiclesObservedIou': 0.30475986, 'vehiclesOccludedAuc': 0.43990165, 'vehiclesOccludedIou': 0.033622477, 'vehiclesFlowEpe': 3.5310166, 'vehiclesFlowWarpedOccupancyAuc': 0.59988207, 'vehiclesFlowWarpedOccupancyIou': 0.40586686}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.58637315, 'vehiclesObservedIou': 0.28170058, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 4.66865, 'vehiclesFlowWarpedOccupancyAuc': 0.4316011, 'vehiclesFlowWarpedOccupancyIou': 0.33690342}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8508283, 'vehiclesObservedIou': 0.5272088, 'vehiclesOccludedAuc': 0.023588832, 'vehiclesOccludedIou': 0.00618151, 'vehiclesFlowEpe': 5.2983956, 'vehiclesFlowWarpedOccupancyAuc': 0.6746288, 'vehiclesFlowWarpedOccupancyIou': 0.61012393}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.81024605, 'vehiclesObservedIou': 0.521869, 'vehiclesOccludedAuc': 0.0662085, 'vehiclesOccludedIou': 0.017423425, 'vehiclesFlowEpe': 3.827495, 'vehiclesFlowWarpedOccupancyAuc': 0.66906583, 'vehiclesFlowWarpedOccupancyIou': 0.52621853}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.61956745, 'vehiclesObservedIou': 0.25019604, 'vehiclesOccludedAuc': 0.00041877848, 'vehiclesOccludedIou': 4.5533812e-05, 'vehiclesFlowEpe': 4.1819363, 'vehiclesFlowWarpedOccupancyAuc': 0.46136573, 'vehiclesFlowWarpedOccupancyIou': 0.31788483}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.93254936, 'vehiclesObservedIou': 0.67501014, 'vehiclesOccludedAuc': 0.00028980087, 'vehiclesOccludedIou': 0.000116458985, 'vehiclesFlowEpe': 4.733483, 'vehiclesFlowWarpedOccupancyAuc': 0.83138895, 'vehiclesFlowWarpedOccupancyIou': 0.78874594}
Average Time: 0.0012 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6396268560606062, 'vehiclesObservedIou': 0.36184225745454546, 'vehiclesOccludedAuc': 0.05787463214757575, 'vehiclesOccludedIou': 0.009946708973545455, 'vehiclesFlowEpe': 4.673822406060606, 'vehiclesFlowWarpedOccupancyAuc': 0.5447013196969698, 'vehiclesFlowWarpedOccupancyIou': 0.40771259072727273}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00144new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 11:05:39.648541: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:05:39.699626: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:05:39.699921: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8833401, 'vehiclesObservedIou': 0.6408139, 'vehiclesOccludedAuc': 0.03137359, 'vehiclesOccludedIou': 0.010333913, 'vehiclesFlowEpe': 4.9332347, 'vehiclesFlowWarpedOccupancyAuc': 0.6607544, 'vehiclesFlowWarpedOccupancyIou': 0.64183116}
Time: 0.0020 seconds, Metrics: {'vehiclesObservedAuc': 0.59987867, 'vehiclesObservedIou': 0.36809435, 'vehiclesOccludedAuc': 0.040039163, 'vehiclesOccludedIou': 0.023968142, 'vehiclesFlowEpe': 5.9155064, 'vehiclesFlowWarpedOccupancyAuc': 0.6306511, 'vehiclesFlowWarpedOccupancyIou': 0.50320387}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.93026733, 'vehiclesObservedIou': 0.6566128, 'vehiclesOccludedAuc': 0.13634767, 'vehiclesOccludedIou': 0.021850316, 'vehiclesFlowEpe': 2.6846004, 'vehiclesFlowWarpedOccupancyAuc': 0.8247332, 'vehiclesFlowWarpedOccupancyIou': 0.78287834}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.47744012, 'vehiclesObservedIou': 0.22273321, 'vehiclesOccludedAuc': 0.10980882, 'vehiclesOccludedIou': 0.022692578, 'vehiclesFlowEpe': 3.610197, 'vehiclesFlowWarpedOccupancyAuc': 0.5654993, 'vehiclesFlowWarpedOccupancyIou': 0.2726829}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.83708334, 'vehiclesObservedIou': 0.50276804, 'vehiclesOccludedAuc': 0.45536497, 'vehiclesOccludedIou': 0.04883144, 'vehiclesFlowEpe': 2.8067727, 'vehiclesFlowWarpedOccupancyAuc': 0.7671883, 'vehiclesFlowWarpedOccupancyIou': 0.67517823}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.88558036, 'vehiclesObservedIou': 0.5695748, 'vehiclesOccludedAuc': 0.016335305, 'vehiclesOccludedIou': 0.0037464765, 'vehiclesFlowEpe': 2.0183926, 'vehiclesFlowWarpedOccupancyAuc': 0.7793479, 'vehiclesFlowWarpedOccupancyIou': 0.6459522}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9920654, 'vehiclesObservedIou': 0.8360067, 'vehiclesOccludedAuc': 0.024292067, 'vehiclesOccludedIou': 0.007842975, 'vehiclesFlowEpe': 2.0963893, 'vehiclesFlowWarpedOccupancyAuc': 0.8895917, 'vehiclesFlowWarpedOccupancyIou': 0.8102098}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.32932967, 'vehiclesObservedIou': 0.12386882, 'vehiclesOccludedAuc': 0.119573094, 'vehiclesOccludedIou': 0.015479378, 'vehiclesFlowEpe': 2.4289067, 'vehiclesFlowWarpedOccupancyAuc': 0.3576759, 'vehiclesFlowWarpedOccupancyIou': 0.17600507}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9443889, 'vehiclesObservedIou': 0.7718114, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.6123803, 'vehiclesFlowWarpedOccupancyAuc': 0.8646718, 'vehiclesFlowWarpedOccupancyIou': 0.85703695}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.32595286, 'vehiclesObservedIou': 0.14509392, 'vehiclesOccludedAuc': 0.015577049, 'vehiclesOccludedIou': 0.0068799593, 'vehiclesFlowEpe': 5.2921457, 'vehiclesFlowWarpedOccupancyAuc': 0.4138995, 'vehiclesFlowWarpedOccupancyIou': 0.19292003}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.4872091, 'vehiclesObservedIou': 0.2716508, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.0085454, 'vehiclesFlowWarpedOccupancyAuc': 0.55280596, 'vehiclesFlowWarpedOccupancyIou': 0.33172187}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.2707919, 'vehiclesObservedIou': 0.1435888, 'vehiclesOccludedAuc': 0.22818628, 'vehiclesOccludedIou': 0.030321136, 'vehiclesFlowEpe': 3.5113516, 'vehiclesFlowWarpedOccupancyAuc': 0.596016, 'vehiclesFlowWarpedOccupancyIou': 0.23493354}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8550856, 'vehiclesObservedIou': 0.52048606, 'vehiclesOccludedAuc': 0.08445387, 'vehiclesOccludedIou': 0.02701322, 'vehiclesFlowEpe': 2.649402, 'vehiclesFlowWarpedOccupancyAuc': 0.73427045, 'vehiclesFlowWarpedOccupancyIou': 0.6129228}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8610471, 'vehiclesObservedIou': 0.5017117, 'vehiclesOccludedAuc': 0.1383938, 'vehiclesOccludedIou': 0.03847766, 'vehiclesFlowEpe': 5.8922186, 'vehiclesFlowWarpedOccupancyAuc': 0.693378, 'vehiclesFlowWarpedOccupancyIou': 0.60173047}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.94228846, 'vehiclesObservedIou': 0.6674, 'vehiclesOccludedAuc': 0.0067777084, 'vehiclesOccludedIou': 0.0027732635, 'vehiclesFlowEpe': 2.5494916, 'vehiclesFlowWarpedOccupancyAuc': 0.8126121, 'vehiclesFlowWarpedOccupancyIou': 0.7344103}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.45984536, 'vehiclesObservedIou': 0.16634049, 'vehiclesOccludedAuc': 0.02458557, 'vehiclesOccludedIou': 0.0063643684, 'vehiclesFlowEpe': 6.6789064, 'vehiclesFlowWarpedOccupancyAuc': 0.4308934, 'vehiclesFlowWarpedOccupancyIou': 0.17555128}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.77174705, 'vehiclesObservedIou': 0.43291214, 'vehiclesOccludedAuc': 0.16430932, 'vehiclesOccludedIou': 0.0478686, 'vehiclesFlowEpe': 3.7986526, 'vehiclesFlowWarpedOccupancyAuc': 0.69650275, 'vehiclesFlowWarpedOccupancyIou': 0.54379714}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.39433745, 'vehiclesObservedIou': 0.1937688, 'vehiclesOccludedAuc': 0.0065992884, 'vehiclesOccludedIou': 0.0037365414, 'vehiclesFlowEpe': 3.9752483, 'vehiclesFlowWarpedOccupancyAuc': 0.5369332, 'vehiclesFlowWarpedOccupancyIou': 0.2176816}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.84635204, 'vehiclesObservedIou': 0.5385197, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 4.174582, 'vehiclesFlowWarpedOccupancyAuc': 0.6988504, 'vehiclesFlowWarpedOccupancyIou': 0.6463526}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.39020464, 'vehiclesObservedIou': 0.15950893, 'vehiclesOccludedAuc': 0.01299294, 'vehiclesOccludedIou': 0.0017731411, 'vehiclesFlowEpe': 3.1973476, 'vehiclesFlowWarpedOccupancyAuc': 0.4554167, 'vehiclesFlowWarpedOccupancyIou': 0.21384709}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.92633593, 'vehiclesObservedIou': 0.7430228, 'vehiclesOccludedAuc': 0.49720246, 'vehiclesOccludedIou': 0.08700345, 'vehiclesFlowEpe': 3.085057, 'vehiclesFlowWarpedOccupancyAuc': 0.8911147, 'vehiclesFlowWarpedOccupancyIou': 0.8084375}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6744631, 'vehiclesObservedIou': 0.2896627, 'vehiclesOccludedAuc': 0.0061978255, 'vehiclesOccludedIou': 0.0018362079, 'vehiclesFlowEpe': 7.17894, 'vehiclesFlowWarpedOccupancyAuc': 0.5348082, 'vehiclesFlowWarpedOccupancyIou': 0.40230697}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8108405, 'vehiclesObservedIou': 0.6025792, 'vehiclesOccludedAuc': 0.17517866, 'vehiclesOccludedIou': 0.047256995, 'vehiclesFlowEpe': 3.7148275, 'vehiclesFlowWarpedOccupancyAuc': 0.75807464, 'vehiclesFlowWarpedOccupancyIou': 0.6407961}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9400425, 'vehiclesObservedIou': 0.6619535, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.9299982, 'vehiclesFlowWarpedOccupancyAuc': 0.7864409, 'vehiclesFlowWarpedOccupancyIou': 0.76597565}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6635898, 'vehiclesObservedIou': 0.5629394, 'vehiclesOccludedAuc': 0.2557742, 'vehiclesOccludedIou': 0.08075126, 'vehiclesFlowEpe': 5.550716, 'vehiclesFlowWarpedOccupancyAuc': 0.7566915, 'vehiclesFlowWarpedOccupancyIou': 0.59516495}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.81888705, 'vehiclesObservedIou': 0.38664806, 'vehiclesOccludedAuc': 0.052838545, 'vehiclesOccludedIou': 0.016443964, 'vehiclesFlowEpe': 7.113907, 'vehiclesFlowWarpedOccupancyAuc': 0.55309373, 'vehiclesFlowWarpedOccupancyIou': 0.443721}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.73884165, 'vehiclesObservedIou': 0.39038774, 'vehiclesOccludedAuc': 0.106391825, 'vehiclesOccludedIou': 0.026949655, 'vehiclesFlowEpe': 3.913464, 'vehiclesFlowWarpedOccupancyAuc': 0.64605117, 'vehiclesFlowWarpedOccupancyIou': 0.45285934}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.57645637, 'vehiclesObservedIou': 0.26100338, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.32628, 'vehiclesFlowWarpedOccupancyAuc': 0.7158997, 'vehiclesFlowWarpedOccupancyIou': 0.39957246}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.1684011, 'vehiclesObservedIou': 0.124451846, 'vehiclesOccludedAuc': 0.41457492, 'vehiclesOccludedIou': 0.055089284, 'vehiclesFlowEpe': 8.688099, 'vehiclesFlowWarpedOccupancyAuc': 0.56081444, 'vehiclesFlowWarpedOccupancyIou': 0.32272246}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.98173386, 'vehiclesObservedIou': 0.857342, 'vehiclesOccludedAuc': 0.04914491, 'vehiclesOccludedIou': 0.008897545, 'vehiclesFlowEpe': 8.202752, 'vehiclesFlowWarpedOccupancyAuc': 0.8651879, 'vehiclesFlowWarpedOccupancyIou': 0.8920275}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.71064174, 'vehiclesObservedIou': 0.34240067, 'vehiclesOccludedAuc': 0.1662273, 'vehiclesOccludedIou': 0.032655913, 'vehiclesFlowEpe': 3.387183, 'vehiclesFlowWarpedOccupancyAuc': 0.5828486, 'vehiclesFlowWarpedOccupancyIou': 0.37516242}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.13162923, 'vehiclesObservedIou': 0.05408552, 'vehiclesOccludedAuc': 0.0005034283, 'vehiclesOccludedIou': 0.00038685845, 'vehiclesFlowEpe': 7.051747, 'vehiclesFlowWarpedOccupancyAuc': 0.13662508, 'vehiclesFlowWarpedOccupancyIou': 0.059144463}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7541996, 'vehiclesObservedIou': 0.4427593, 'vehiclesOccludedAuc': 0.060832605, 'vehiclesOccludedIou': 0.026541388, 'vehiclesFlowEpe': 4.0752316, 'vehiclesFlowWarpedOccupancyAuc': 0.6635626, 'vehiclesFlowWarpedOccupancyIou': 0.49443308}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.43930674, 'vehiclesObservedIou': 0.22968055, 'vehiclesOccludedAuc': 0.0032362838, 'vehiclesOccludedIou': 0.0022727628, 'vehiclesFlowEpe': 8.242276, 'vehiclesFlowWarpedOccupancyAuc': 0.43882242, 'vehiclesFlowWarpedOccupancyIou': 0.24201496}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.9920654, 'vehiclesObservedIou': 0.8360067, 'vehiclesOccludedAuc': 0.024292067, 'vehiclesOccludedIou': 0.007842975, 'vehiclesFlowEpe': 2.0963893, 'vehiclesFlowWarpedOccupancyAuc': 0.8895917, 'vehiclesFlowWarpedOccupancyIou': 0.8102098}
Average Time: 0.0012 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6711648417647059, 'vehiclesObservedIou': 0.4230053537058824, 'vehiclesOccludedAuc': 0.10009157257058825, 'vehiclesOccludedIou': 0.020765835039705884, 'vehiclesFlowEpe': 4.449845594117647, 'vehiclesFlowWarpedOccupancyAuc': 0.6426978717647058, 'vehiclesFlowWarpedOccupancyIou': 0.49309370861764706}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00113new.tfrecords...
2024-05-28 11:06:01.438636: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:06:01.488934: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:06:01.489213: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7336481, 'vehiclesObservedIou': 0.37604502, 'vehiclesOccludedAuc': 0.24262841, 'vehiclesOccludedIou': 0.072260045, 'vehiclesFlowEpe': 6.076508, 'vehiclesFlowWarpedOccupancyAuc': 0.59954894, 'vehiclesFlowWarpedOccupancyIou': 0.40672043}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.73653954, 'vehiclesObservedIou': 0.42785078, 'vehiclesOccludedAuc': 0.06891795, 'vehiclesOccludedIou': 0.014482301, 'vehiclesFlowEpe': 5.707018, 'vehiclesFlowWarpedOccupancyAuc': 0.59642196, 'vehiclesFlowWarpedOccupancyIou': 0.48485965}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.48494938, 'vehiclesObservedIou': 0.31096473, 'vehiclesOccludedAuc': 0.012893824, 'vehiclesOccludedIou': 0.0035248934, 'vehiclesFlowEpe': 7.336695, 'vehiclesFlowWarpedOccupancyAuc': 0.44249684, 'vehiclesFlowWarpedOccupancyIou': 0.33204162}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6773695, 'vehiclesObservedIou': 0.46180788, 'vehiclesOccludedAuc': 0.063521475, 'vehiclesOccludedIou': 0.009332119, 'vehiclesFlowEpe': 2.4191477, 'vehiclesFlowWarpedOccupancyAuc': 0.66162, 'vehiclesFlowWarpedOccupancyIou': 0.5123528}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.59466624, 'vehiclesObservedIou': 0.3160122, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 4.8862543, 'vehiclesFlowWarpedOccupancyAuc': 0.46704075, 'vehiclesFlowWarpedOccupancyIou': 0.41113818}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8962697, 'vehiclesObservedIou': 0.62242484, 'vehiclesOccludedAuc': 0.09030653, 'vehiclesOccludedIou': 0.02299776, 'vehiclesFlowEpe': 2.998609, 'vehiclesFlowWarpedOccupancyAuc': 0.699273, 'vehiclesFlowWarpedOccupancyIou': 0.62069726}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.79170895, 'vehiclesObservedIou': 0.42630684, 'vehiclesOccludedAuc': 0.055565756, 'vehiclesOccludedIou': 0.024984125, 'vehiclesFlowEpe': 3.6925483, 'vehiclesFlowWarpedOccupancyAuc': 0.6156862, 'vehiclesFlowWarpedOccupancyIou': 0.50514853}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.835525, 'vehiclesObservedIou': 0.5053724, 'vehiclesOccludedAuc': 0.0020812522, 'vehiclesOccludedIou': 0.00058539264, 'vehiclesFlowEpe': 3.4499605, 'vehiclesFlowWarpedOccupancyAuc': 0.64594275, 'vehiclesFlowWarpedOccupancyIou': 0.54056966}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5823644, 'vehiclesObservedIou': 0.2615179, 'vehiclesOccludedAuc': 0.17684798, 'vehiclesOccludedIou': 0.060376562, 'vehiclesFlowEpe': 6.2234793, 'vehiclesFlowWarpedOccupancyAuc': 0.42130727, 'vehiclesFlowWarpedOccupancyIou': 0.28509766}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.74145144, 'vehiclesObservedIou': 0.4628595, 'vehiclesOccludedAuc': 0.005438176, 'vehiclesOccludedIou': 0.002860647, 'vehiclesFlowEpe': 4.052929, 'vehiclesFlowWarpedOccupancyAuc': 0.6887655, 'vehiclesFlowWarpedOccupancyIou': 0.5508888}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.40001297, 'vehiclesObservedIou': 0.22040573, 'vehiclesOccludedAuc': 0.16038081, 'vehiclesOccludedIou': 0.043950673, 'vehiclesFlowEpe': 7.778015, 'vehiclesFlowWarpedOccupancyAuc': 0.41029745, 'vehiclesFlowWarpedOccupancyIou': 0.2609058}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6740959, 'vehiclesObservedIou': 0.38389015, 'vehiclesOccludedAuc': 0.24660629, 'vehiclesOccludedIou': 0.048667204, 'vehiclesFlowEpe': 3.7110877, 'vehiclesFlowWarpedOccupancyAuc': 0.59693813, 'vehiclesFlowWarpedOccupancyIou': 0.43847367}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.4426664, 'vehiclesObservedIou': 0.21521406, 'vehiclesOccludedAuc': 0.1880845, 'vehiclesOccludedIou': 0.026379574, 'vehiclesFlowEpe': 5.815965, 'vehiclesFlowWarpedOccupancyAuc': 0.503554, 'vehiclesFlowWarpedOccupancyIou': 0.26876435}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.79320836, 'vehiclesObservedIou': 0.57778347, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.231733, 'vehiclesFlowWarpedOccupancyAuc': 0.82017213, 'vehiclesFlowWarpedOccupancyIou': 0.75192195}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7739562, 'vehiclesObservedIou': 0.44374362, 'vehiclesOccludedAuc': 0.10420244, 'vehiclesOccludedIou': 0.021732865, 'vehiclesFlowEpe': 4.179084, 'vehiclesFlowWarpedOccupancyAuc': 0.66962624, 'vehiclesFlowWarpedOccupancyIou': 0.4399628}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.5022859, 'vehiclesObservedIou': 0.054184236, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 6.499033, 'vehiclesFlowWarpedOccupancyAuc': 0.30063874, 'vehiclesFlowWarpedOccupancyIou': 0.29265434}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.86378235, 'vehiclesObservedIou': 0.50162804, 'vehiclesOccludedAuc': 0.07386368, 'vehiclesOccludedIou': 0.01787167, 'vehiclesFlowEpe': 2.7213602, 'vehiclesFlowWarpedOccupancyAuc': 0.700392, 'vehiclesFlowWarpedOccupancyIou': 0.4979093}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8710033, 'vehiclesObservedIou': 0.58363694, 'vehiclesOccludedAuc': 0.027326183, 'vehiclesOccludedIou': 0.011130938, 'vehiclesFlowEpe': 7.0152235, 'vehiclesFlowWarpedOccupancyAuc': 0.7352556, 'vehiclesFlowWarpedOccupancyIou': 0.64092094}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.073867016, 'vehiclesObservedIou': 0.037213214, 'vehiclesOccludedAuc': 0.15029845, 'vehiclesOccludedIou': 0.048322875, 'vehiclesFlowEpe': 4.0868826, 'vehiclesFlowWarpedOccupancyAuc': 0.2683243, 'vehiclesFlowWarpedOccupancyIou': 0.067769274}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.22017108, 'vehiclesObservedIou': 0.08273903, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 1.6671641, 'vehiclesFlowWarpedOccupancyAuc': 0.27470985, 'vehiclesFlowWarpedOccupancyIou': 0.11305814}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7047393, 'vehiclesObservedIou': 0.35493645, 'vehiclesOccludedAuc': 0.0034781785, 'vehiclesOccludedIou': 0.0012437138, 'vehiclesFlowEpe': 3.674907, 'vehiclesFlowWarpedOccupancyAuc': 0.6235906, 'vehiclesFlowWarpedOccupancyIou': 0.45238703}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.89095163, 'vehiclesObservedIou': 0.64657205, 'vehiclesOccludedAuc': 0.012244174, 'vehiclesOccludedIou': 0.004298669, 'vehiclesFlowEpe': 4.093834, 'vehiclesFlowWarpedOccupancyAuc': 0.79349774, 'vehiclesFlowWarpedOccupancyIou': 0.70832056}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.86370325, 'vehiclesObservedIou': 0.55539393, 'vehiclesOccludedAuc': 0.07138879, 'vehiclesOccludedIou': 0.018600523, 'vehiclesFlowEpe': 2.7755923, 'vehiclesFlowWarpedOccupancyAuc': 0.6931075, 'vehiclesFlowWarpedOccupancyIou': 0.5974412}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.4312538, 'vehiclesObservedIou': 0.22882958, 'vehiclesOccludedAuc': 0.0082308715, 'vehiclesOccludedIou': 0.0034000024, 'vehiclesFlowEpe': 4.891797, 'vehiclesFlowWarpedOccupancyAuc': 0.39247513, 'vehiclesFlowWarpedOccupancyIou': 0.28519186}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.85910296, 'vehiclesObservedIou': 0.50381196, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.4816203, 'vehiclesFlowWarpedOccupancyAuc': 0.77721655, 'vehiclesFlowWarpedOccupancyIou': 0.6142621}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5522029, 'vehiclesObservedIou': 0.36105853, 'vehiclesOccludedAuc': 0.05187922, 'vehiclesOccludedIou': 0.010941749, 'vehiclesFlowEpe': 3.9952667, 'vehiclesFlowWarpedOccupancyAuc': 0.62414306, 'vehiclesFlowWarpedOccupancyIou': 0.32743922}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.83717096, 'vehiclesObservedIou': 0.47772893, 'vehiclesOccludedAuc': 0.0012441077, 'vehiclesOccludedIou': 0.0012572545, 'vehiclesFlowEpe': 7.4077435, 'vehiclesFlowWarpedOccupancyAuc': 0.48475632, 'vehiclesFlowWarpedOccupancyIou': 0.46533388}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.78561324, 'vehiclesObservedIou': 0.49095172, 'vehiclesOccludedAuc': 0.09436923, 'vehiclesOccludedIou': 0.018806268, 'vehiclesFlowEpe': 5.1126595, 'vehiclesFlowWarpedOccupancyAuc': 0.526703, 'vehiclesFlowWarpedOccupancyIou': 0.41334528}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5881758, 'vehiclesObservedIou': 0.3827984, 'vehiclesOccludedAuc': 0.003772201, 'vehiclesOccludedIou': 0.002214306, 'vehiclesFlowEpe': 5.8230066, 'vehiclesFlowWarpedOccupancyAuc': 0.50013757, 'vehiclesFlowWarpedOccupancyIou': 0.42849326}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.94119656, 'vehiclesObservedIou': 0.72773796, 'vehiclesOccludedAuc': 0.0007511911, 'vehiclesOccludedIou': 0.0004115129, 'vehiclesFlowEpe': 2.2967622, 'vehiclesFlowWarpedOccupancyAuc': 0.8464256, 'vehiclesFlowWarpedOccupancyIou': 0.8096019}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.2622509, 'vehiclesObservedIou': 0.1421994, 'vehiclesOccludedAuc': 0.04839364, 'vehiclesOccludedIou': 0.008333458, 'vehiclesFlowEpe': 9.291973, 'vehiclesFlowWarpedOccupancyAuc': 0.2521538, 'vehiclesFlowWarpedOccupancyIou': 0.13650376}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9025461, 'vehiclesObservedIou': 0.8091439, 'vehiclesOccludedAuc': 0.24538733, 'vehiclesOccludedIou': 0.03931837, 'vehiclesFlowEpe': 12.661186, 'vehiclesFlowWarpedOccupancyAuc': 0.82198334, 'vehiclesFlowWarpedOccupancyIou': 0.7949234}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.5029434, 'vehiclesObservedIou': 0.26278758, 'vehiclesOccludedAuc': 0.004790674, 'vehiclesOccludedIou': 0.0014819702, 'vehiclesFlowEpe': 4.36405, 'vehiclesFlowWarpedOccupancyAuc': 0.55914384, 'vehiclesFlowWarpedOccupancyIou': 0.35952732}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6382286, 'vehiclesObservedIou': 0.3087085, 'vehiclesOccludedAuc': 0.026644386, 'vehiclesOccludedIou': 0.008159931, 'vehiclesFlowEpe': 4.035269, 'vehiclesFlowWarpedOccupancyAuc': 0.5631602, 'vehiclesFlowWarpedOccupancyIou': 0.3950302}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.1473113, 'vehiclesObservedIou': 0.07838228, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 9.935255, 'vehiclesFlowWarpedOccupancyAuc': 0.14991276, 'vehiclesFlowWarpedOccupancyIou': 0.07873558}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7696546, 'vehiclesObservedIou': 0.6038352, 'vehiclesOccludedAuc': 0.048956774, 'vehiclesOccludedIou': 0.025436528, 'vehiclesFlowEpe': 2.7688072, 'vehiclesFlowWarpedOccupancyAuc': 0.8234385, 'vehiclesFlowWarpedOccupancyIou': 0.7193158}
2024-05-28 11:06:25.897697: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:06:25.952058: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:06:25.952339: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9089526, 'vehiclesObservedIou': 0.5069783, 'vehiclesOccludedAuc': 0.006057794, 'vehiclesOccludedIou': 0.0024797097, 'vehiclesFlowEpe': 4.9822006, 'vehiclesFlowWarpedOccupancyAuc': 0.72145617, 'vehiclesFlowWarpedOccupancyIou': 0.6512936}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8139223, 'vehiclesObservedIou': 0.57920647, 'vehiclesOccludedAuc': 0.15323633, 'vehiclesOccludedIou': 0.038082883, 'vehiclesFlowEpe': 2.9984746, 'vehiclesFlowWarpedOccupancyAuc': 0.75133884, 'vehiclesFlowWarpedOccupancyIou': 0.65172017}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.94300014, 'vehiclesObservedIou': 0.81097716, 'vehiclesOccludedAuc': 0.019859578, 'vehiclesOccludedIou': 0.008616537, 'vehiclesFlowEpe': 1.8558764, 'vehiclesFlowWarpedOccupancyAuc': 0.8610284, 'vehiclesFlowWarpedOccupancyIou': 0.871516}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.94300014, 'vehiclesObservedIou': 0.81097716, 'vehiclesOccludedAuc': 0.019859578, 'vehiclesOccludedIou': 0.008616537, 'vehiclesFlowEpe': 1.8558764, 'vehiclesFlowWarpedOccupancyAuc': 0.8610284, 'vehiclesFlowWarpedOccupancyIou': 0.871516}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6674990273333332, 'vehiclesObservedIou': 0.4129138174358974, 'vehiclesOccludedAuc': 0.06332431220512821, 'vehiclesOccludedIou': 0.01596264178307692, 'vehiclesFlowEpe': 4.820384053846154, 'vehiclesFlowWarpedOccupancyAuc': 0.5867610402564102, 'vehiclesFlowWarpedOccupancyIou': 0.4662112121538461}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00091new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.8696586, 'vehiclesObservedIou': 0.5937844, 'vehiclesOccludedAuc': 0.035997313, 'vehiclesOccludedIou': 0.007107585, 'vehiclesFlowEpe': 8.139115, 'vehiclesFlowWarpedOccupancyAuc': 0.65090775, 'vehiclesFlowWarpedOccupancyIou': 0.6819823}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.93982, 'vehiclesObservedIou': 0.6470801, 'vehiclesOccludedAuc': 0.3070941, 'vehiclesOccludedIou': 0.042166747, 'vehiclesFlowEpe': 12.447425, 'vehiclesFlowWarpedOccupancyAuc': 0.8011646, 'vehiclesFlowWarpedOccupancyIou': 0.7563233}
2024-05-28 11:06:29.294742: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:06:29.359234: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:06:29.359529: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8550869, 'vehiclesObservedIou': 0.5278934, 'vehiclesOccludedAuc': 0.11944156, 'vehiclesOccludedIou': 0.029603189, 'vehiclesFlowEpe': 3.0975146, 'vehiclesFlowWarpedOccupancyAuc': 0.68540114, 'vehiclesFlowWarpedOccupancyIou': 0.55114233}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.93981147, 'vehiclesObservedIou': 0.7148184, 'vehiclesOccludedAuc': 0.09687619, 'vehiclesOccludedIou': 0.019406691, 'vehiclesFlowEpe': 2.7096915, 'vehiclesFlowWarpedOccupancyAuc': 0.8491688, 'vehiclesFlowWarpedOccupancyIou': 0.8010794}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7976957, 'vehiclesObservedIou': 0.42242205, 'vehiclesOccludedAuc': 0.34986567, 'vehiclesOccludedIou': 0.08981462, 'vehiclesFlowEpe': 3.6538029, 'vehiclesFlowWarpedOccupancyAuc': 0.68106073, 'vehiclesFlowWarpedOccupancyIou': 0.52993834}
DataLossError encountered. Skipping the corrupted record.
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.93982, 'vehiclesObservedIou': 0.6470801, 'vehiclesOccludedAuc': 0.3070941, 'vehiclesOccludedIou': 0.042166747, 'vehiclesFlowEpe': 12.447425, 'vehiclesFlowWarpedOccupancyAuc': 0.8011646, 'vehiclesFlowWarpedOccupancyIou': 0.7563233}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.880414534, 'vehiclesObservedIou': 0.58119967, 'vehiclesOccludedAuc': 0.1818549666, 'vehiclesOccludedIou': 0.0376197664, 'vehiclesFlowEpe': 6.0095098, 'vehiclesFlowWarpedOccupancyAuc': 0.733540604, 'vehiclesFlowWarpedOccupancyIou': 0.664093134}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00110new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.50226915, 'vehiclesObservedIou': 0.25029275, 'vehiclesOccludedAuc': 0.008783782, 'vehiclesOccludedIou': 0.004168898, 'vehiclesFlowEpe': 5.593821, 'vehiclesFlowWarpedOccupancyAuc': 0.47034195, 'vehiclesFlowWarpedOccupancyIou': 0.30632892}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7552821, 'vehiclesObservedIou': 0.48574197, 'vehiclesOccludedAuc': 0.04536046, 'vehiclesOccludedIou': 0.014293169, 'vehiclesFlowEpe': 4.9617486, 'vehiclesFlowWarpedOccupancyAuc': 0.68650275, 'vehiclesFlowWarpedOccupancyIou': 0.6002295}
2024-05-28 11:06:33.344766: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:06:33.405695: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:06:33.406009: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.95190537, 'vehiclesObservedIou': 0.706844, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.4179735, 'vehiclesFlowWarpedOccupancyAuc': 0.8469973, 'vehiclesFlowWarpedOccupancyIou': 0.78617424}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.75431794, 'vehiclesObservedIou': 0.50464535, 'vehiclesOccludedAuc': 0.33239394, 'vehiclesOccludedIou': 0.04808784, 'vehiclesFlowEpe': 4.1500254, 'vehiclesFlowWarpedOccupancyAuc': 0.6931176, 'vehiclesFlowWarpedOccupancyIou': 0.6060325}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.79101086, 'vehiclesObservedIou': 0.46180147, 'vehiclesOccludedAuc': 0.037405886, 'vehiclesOccludedIou': 0.013759315, 'vehiclesFlowEpe': 3.1378713, 'vehiclesFlowWarpedOccupancyAuc': 0.6869288, 'vehiclesFlowWarpedOccupancyIou': 0.5795673}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.26458034, 'vehiclesObservedIou': 0.15248948, 'vehiclesOccludedAuc': 0.005628481, 'vehiclesOccludedIou': 0.0022795224, 'vehiclesFlowEpe': 2.5638912, 'vehiclesFlowWarpedOccupancyAuc': 0.35082248, 'vehiclesFlowWarpedOccupancyIou': 0.1899792}
DataLossError encountered. Skipping the corrupted record.
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.95190537, 'vehiclesObservedIou': 0.706844, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.4179735, 'vehiclesFlowWarpedOccupancyAuc': 0.8469973, 'vehiclesFlowWarpedOccupancyIou': 0.78617424}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6698942933333334, 'vehiclesObservedIou': 0.42696917, 'vehiclesOccludedAuc': 0.07159542483333334, 'vehiclesOccludedIou': 0.01376479073333333, 'vehiclesFlowEpe': 3.8042218333333335, 'vehiclesFlowWarpedOccupancyAuc': 0.6224518133333333, 'vehiclesFlowWarpedOccupancyIou': 0.5113852766666666}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00120new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.28248358, 'vehiclesObservedIou': 0.115691125, 'vehiclesOccludedAuc': 0.0007512888, 'vehiclesOccludedIou': 0.0009349887, 'vehiclesFlowEpe': 5.8546944, 'vehiclesFlowWarpedOccupancyAuc': 0.35946217, 'vehiclesFlowWarpedOccupancyIou': 0.14783797}
2024-05-28 11:06:37.540083: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:06:37.590271: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:06:37.590547: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.35668305, 'vehiclesObservedIou': 0.17491874, 'vehiclesOccludedAuc': 0.0069516758, 'vehiclesOccludedIou': 0.0020842298, 'vehiclesFlowEpe': 4.454741, 'vehiclesFlowWarpedOccupancyAuc': 0.38656405, 'vehiclesFlowWarpedOccupancyIou': 0.21660152}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.91068107, 'vehiclesObservedIou': 0.6388935, 'vehiclesOccludedAuc': 0.029749027, 'vehiclesOccludedIou': 0.011689148, 'vehiclesFlowEpe': 4.76184, 'vehiclesFlowWarpedOccupancyAuc': 0.7645926, 'vehiclesFlowWarpedOccupancyIou': 0.69441193}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7610616, 'vehiclesObservedIou': 0.3986678, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.1230037, 'vehiclesFlowWarpedOccupancyAuc': 0.6237482, 'vehiclesFlowWarpedOccupancyIou': 0.5090506}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7189694, 'vehiclesObservedIou': 0.40048805, 'vehiclesOccludedAuc': 0.0003811582, 'vehiclesOccludedIou': 0.00022983763, 'vehiclesFlowEpe': 3.8628526, 'vehiclesFlowWarpedOccupancyAuc': 0.6509106, 'vehiclesFlowWarpedOccupancyIou': 0.4979683}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.20399456, 'vehiclesObservedIou': 0.08972702, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.275019, 'vehiclesFlowWarpedOccupancyAuc': 0.25801614, 'vehiclesFlowWarpedOccupancyIou': 0.109975636}
DataLossError encountered. Skipping the corrupted record.
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.91068107, 'vehiclesObservedIou': 0.6388935, 'vehiclesOccludedAuc': 0.029749027, 'vehiclesOccludedIou': 0.011689148, 'vehiclesFlowEpe': 4.76184, 'vehiclesFlowWarpedOccupancyAuc': 0.7645926, 'vehiclesFlowWarpedOccupancyIou': 0.69441193}
Average Time: 0.0012 seconds, Average Metrics: {'vehiclesObservedAuc': 0.5389788766666667, 'vehiclesObservedIou': 0.3030643725, 'vehiclesOccludedAuc': 0.006305524966666667, 'vehiclesOccludedIou': 0.0024897006883333335, 'vehiclesFlowEpe': 4.222025116666667, 'vehiclesFlowWarpedOccupancyAuc': 0.5072156266666666, 'vehiclesFlowWarpedOccupancyIou': 0.3626409926666667}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00085new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0016 seconds, Metrics: {'vehiclesObservedAuc': 0.94236743, 'vehiclesObservedIou': 0.79722583, 'vehiclesOccludedAuc': 0.028559027, 'vehiclesOccludedIou': 0.008677699, 'vehiclesFlowEpe': 3.1359406, 'vehiclesFlowWarpedOccupancyAuc': 0.8545978, 'vehiclesFlowWarpedOccupancyIou': 0.7899646}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7781137, 'vehiclesObservedIou': 0.53247464, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.3401492, 'vehiclesFlowWarpedOccupancyAuc': 0.7319311, 'vehiclesFlowWarpedOccupancyIou': 0.6088833}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.68268144, 'vehiclesObservedIou': 0.35445002, 'vehiclesOccludedAuc': 0.17717044, 'vehiclesOccludedIou': 0.021688819, 'vehiclesFlowEpe': 2.8614793, 'vehiclesFlowWarpedOccupancyAuc': 0.65343195, 'vehiclesFlowWarpedOccupancyIou': 0.44589445}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8834921, 'vehiclesObservedIou': 0.5610845, 'vehiclesOccludedAuc': 0.025966164, 'vehiclesOccludedIou': 0.008297544, 'vehiclesFlowEpe': 2.519603, 'vehiclesFlowWarpedOccupancyAuc': 0.7302079, 'vehiclesFlowWarpedOccupancyIou': 0.61368585}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.27000007, 'vehiclesObservedIou': 0.18364795, 'vehiclesOccludedAuc': 0.00043672678, 'vehiclesOccludedIou': 0.00018656463, 'vehiclesFlowEpe': 5.342619, 'vehiclesFlowWarpedOccupancyAuc': 0.33748716, 'vehiclesFlowWarpedOccupancyIou': 0.22671905}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.6872869, 'vehiclesObservedIou': 0.48939395, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 1.9125552, 'vehiclesFlowWarpedOccupancyAuc': 0.5847892, 'vehiclesFlowWarpedOccupancyIou': 0.5662907}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7802127, 'vehiclesObservedIou': 0.4391101, 'vehiclesOccludedAuc': 0.029341392, 'vehiclesOccludedIou': 0.013061394, 'vehiclesFlowEpe': 3.6978137, 'vehiclesFlowWarpedOccupancyAuc': 0.6657681, 'vehiclesFlowWarpedOccupancyIou': 0.5480488}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.09348924, 'vehiclesObservedIou': 0.05153138, 'vehiclesOccludedAuc': 0.00093412923, 'vehiclesOccludedIou': 9.322608e-05, 'vehiclesFlowEpe': 6.3369403, 'vehiclesFlowWarpedOccupancyAuc': 0.33365518, 'vehiclesFlowWarpedOccupancyIou': 0.060757197}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.45918125, 'vehiclesObservedIou': 0.26316494, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 1.4095792, 'vehiclesFlowWarpedOccupancyAuc': 0.6655626, 'vehiclesFlowWarpedOccupancyIou': 0.32563692}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.67843217, 'vehiclesObservedIou': 0.32380933, 'vehiclesOccludedAuc': 0.02649561, 'vehiclesOccludedIou': 0.007958063, 'vehiclesFlowEpe': 3.2246408, 'vehiclesFlowWarpedOccupancyAuc': 0.71392053, 'vehiclesFlowWarpedOccupancyIou': 0.41975692}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.070823774, 'vehiclesObservedIou': 0.038040847, 'vehiclesOccludedAuc': 0.061959337, 'vehiclesOccludedIou': 0.006495172, 'vehiclesFlowEpe': 6.059424, 'vehiclesFlowWarpedOccupancyAuc': 0.14099866, 'vehiclesFlowWarpedOccupancyIou': 0.045103468}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.34932, 'vehiclesObservedIou': 0.17511994, 'vehiclesOccludedAuc': 0.073241964, 'vehiclesOccludedIou': 0.020436596, 'vehiclesFlowEpe': 5.923469, 'vehiclesFlowWarpedOccupancyAuc': 0.39045417, 'vehiclesFlowWarpedOccupancyIou': 0.19789965}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.68385863, 'vehiclesObservedIou': 0.31696877, 'vehiclesOccludedAuc': 0.044218414, 'vehiclesOccludedIou': 0.010343293, 'vehiclesFlowEpe': 9.171306, 'vehiclesFlowWarpedOccupancyAuc': 0.40511835, 'vehiclesFlowWarpedOccupancyIou': 0.37047985}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9193248, 'vehiclesObservedIou': 0.60472655, 'vehiclesOccludedAuc': 0.054885298, 'vehiclesOccludedIou': 0.013188191, 'vehiclesFlowEpe': 4.685703, 'vehiclesFlowWarpedOccupancyAuc': 0.769556, 'vehiclesFlowWarpedOccupancyIou': 0.68828285}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.3807996, 'vehiclesObservedIou': 0.19394174, 'vehiclesOccludedAuc': 0.017950207, 'vehiclesOccludedIou': 0.004451502, 'vehiclesFlowEpe': 5.6549587, 'vehiclesFlowWarpedOccupancyAuc': 0.38718513, 'vehiclesFlowWarpedOccupancyIou': 0.2182271}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6440406, 'vehiclesObservedIou': 0.3919906, 'vehiclesOccludedAuc': 0.02105734, 'vehiclesOccludedIou': 0.008083388, 'vehiclesFlowEpe': 5.220009, 'vehiclesFlowWarpedOccupancyAuc': 0.56817096, 'vehiclesFlowWarpedOccupancyIou': 0.4497651}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.6983994, 'vehiclesObservedIou': 0.40985912, 'vehiclesOccludedAuc': 0.08176647, 'vehiclesOccludedIou': 0.015388926, 'vehiclesFlowEpe': 4.2941246, 'vehiclesFlowWarpedOccupancyAuc': 0.5816035, 'vehiclesFlowWarpedOccupancyIou': 0.4716514}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.6628202, 'vehiclesObservedIou': 0.31998056, 'vehiclesOccludedAuc': 0.124315955, 'vehiclesOccludedIou': 0.030312892, 'vehiclesFlowEpe': 3.2145507, 'vehiclesFlowWarpedOccupancyAuc': 0.6820332, 'vehiclesFlowWarpedOccupancyIou': 0.35684732}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7117892, 'vehiclesObservedIou': 0.31413263, 'vehiclesOccludedAuc': 0.092757314, 'vehiclesOccludedIou': 0.026622834, 'vehiclesFlowEpe': 3.0375488, 'vehiclesFlowWarpedOccupancyAuc': 0.6094413, 'vehiclesFlowWarpedOccupancyIou': 0.34553894}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.78447527, 'vehiclesObservedIou': 0.4125868, 'vehiclesOccludedAuc': 0.0064073186, 'vehiclesOccludedIou': 0.0031254347, 'vehiclesFlowEpe': 5.420487, 'vehiclesFlowWarpedOccupancyAuc': 0.60359615, 'vehiclesFlowWarpedOccupancyIou': 0.47346926}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.80481917, 'vehiclesObservedIou': 0.46680233, 'vehiclesOccludedAuc': 0.068131186, 'vehiclesOccludedIou': 0.022565804, 'vehiclesFlowEpe': 4.899205, 'vehiclesFlowWarpedOccupancyAuc': 0.6779272, 'vehiclesFlowWarpedOccupancyIou': 0.4766815}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.1627891, 'vehiclesObservedIou': 0.08233298, 'vehiclesOccludedAuc': 0.00084106874, 'vehiclesOccludedIou': 0.0012017812, 'vehiclesFlowEpe': 8.133339, 'vehiclesFlowWarpedOccupancyAuc': 0.14510484, 'vehiclesFlowWarpedOccupancyIou': 0.062319685}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7463296, 'vehiclesObservedIou': 0.47175014, 'vehiclesOccludedAuc': 0.021875959, 'vehiclesOccludedIou': 0.008837159, 'vehiclesFlowEpe': 3.5364125, 'vehiclesFlowWarpedOccupancyAuc': 0.5944777, 'vehiclesFlowWarpedOccupancyIou': 0.54764694}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.62108916, 'vehiclesObservedIou': 0.27200398, 'vehiclesOccludedAuc': 0.12298405, 'vehiclesOccludedIou': 0.027879719, 'vehiclesFlowEpe': 2.90727, 'vehiclesFlowWarpedOccupancyAuc': 0.5717254, 'vehiclesFlowWarpedOccupancyIou': 0.27750087}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.3119468, 'vehiclesObservedIou': 0.15966398, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 4.12962, 'vehiclesFlowWarpedOccupancyAuc': 0.45169932, 'vehiclesFlowWarpedOccupancyIou': 0.19692782}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7463939, 'vehiclesObservedIou': 0.40354896, 'vehiclesOccludedAuc': 0.268817, 'vehiclesOccludedIou': 0.032967336, 'vehiclesFlowEpe': 2.9603748, 'vehiclesFlowWarpedOccupancyAuc': 0.74998116, 'vehiclesFlowWarpedOccupancyIou': 0.4524902}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.5829288, 'vehiclesObservedIou': 0.3102149, 'vehiclesOccludedAuc': 0.009623686, 'vehiclesOccludedIou': 0.0023133098, 'vehiclesFlowEpe': 5.5176077, 'vehiclesFlowWarpedOccupancyAuc': 0.48016286, 'vehiclesFlowWarpedOccupancyIou': 0.3201147}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6892151, 'vehiclesObservedIou': 0.3503781, 'vehiclesOccludedAuc': 0.0032701204, 'vehiclesOccludedIou': 0.0014767491, 'vehiclesFlowEpe': 2.6979604, 'vehiclesFlowWarpedOccupancyAuc': 0.64288807, 'vehiclesFlowWarpedOccupancyIou': 0.42262983}
2024-05-28 11:06:59.825295: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:06:59.877286: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:06:59.877573: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.4821254, 'vehiclesObservedIou': 0.28091556, 'vehiclesOccludedAuc': 0.031658884, 'vehiclesOccludedIou': 0.007850459, 'vehiclesFlowEpe': 4.0983915, 'vehiclesFlowWarpedOccupancyAuc': 0.5748976, 'vehiclesFlowWarpedOccupancyIou': 0.33812204}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.90181786, 'vehiclesObservedIou': 0.7140622, 'vehiclesOccludedAuc': 0.016179351, 'vehiclesOccludedIou': 0.0061690556, 'vehiclesFlowEpe': 9.5801115, 'vehiclesFlowWarpedOccupancyAuc': 0.7759215, 'vehiclesFlowWarpedOccupancyIou': 0.7723354}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.93158585, 'vehiclesObservedIou': 0.67921484, 'vehiclesOccludedAuc': 0.4473961, 'vehiclesOccludedIou': 0.066792436, 'vehiclesFlowEpe': 3.3339264, 'vehiclesFlowWarpedOccupancyAuc': 0.8269921, 'vehiclesFlowWarpedOccupancyIou': 0.79127663}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.2655717, 'vehiclesObservedIou': 0.12470836, 'vehiclesOccludedAuc': 0.24055542, 'vehiclesOccludedIou': 0.05538604, 'vehiclesFlowEpe': 6.117442, 'vehiclesFlowWarpedOccupancyAuc': 0.40557402, 'vehiclesFlowWarpedOccupancyIou': 0.16056374}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8094209, 'vehiclesObservedIou': 0.51104033, 'vehiclesOccludedAuc': 0.056442972, 'vehiclesOccludedIou': 0.008814855, 'vehiclesFlowEpe': 5.75544, 'vehiclesFlowWarpedOccupancyAuc': 0.554472, 'vehiclesFlowWarpedOccupancyIou': 0.48079652}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.69297236, 'vehiclesObservedIou': 0.368733, 'vehiclesOccludedAuc': 0.18230169, 'vehiclesOccludedIou': 0.018241588, 'vehiclesFlowEpe': 2.9646673, 'vehiclesFlowWarpedOccupancyAuc': 0.65152746, 'vehiclesFlowWarpedOccupancyIou': 0.41722345}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.94236743, 'vehiclesObservedIou': 0.79722583, 'vehiclesOccludedAuc': 0.028559027, 'vehiclesOccludedIou': 0.008677699, 'vehiclesFlowEpe': 3.1359406, 'vehiclesFlowWarpedOccupancyAuc': 0.8545978, 'vehiclesFlowWarpedOccupancyIou': 0.7899646}
Average Time: 0.0012 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6149974757058823, 'vehiclesObservedIou': 0.3637826428529412, 'vehiclesOccludedAuc': 0.06875119393382355, 'vehiclesOccludedIou': 0.013497289120882354, 'vehiclesFlowEpe': 4.473372623529412, 'vehiclesFlowWarpedOccupancyAuc': 0.5739076520588237, 'vehiclesFlowWarpedOccupancyIou': 0.4099862367647059}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00088new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.17930664, 'vehiclesObservedIou': 0.07781132, 'vehiclesOccludedAuc': 0.15151128, 'vehiclesOccludedIou': 0.025130015, 'vehiclesFlowEpe': 6.7221937, 'vehiclesFlowWarpedOccupancyAuc': 0.24630809, 'vehiclesFlowWarpedOccupancyIou': 0.08313219}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.44896847, 'vehiclesObservedIou': 0.17805804, 'vehiclesOccludedAuc': 0.06126052, 'vehiclesOccludedIou': 0.013812358, 'vehiclesFlowEpe': 3.1746204, 'vehiclesFlowWarpedOccupancyAuc': 0.32633594, 'vehiclesFlowWarpedOccupancyIou': 0.18202072}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.43362308, 'vehiclesObservedIou': 0.19783913, 'vehiclesOccludedAuc': 0.0015199408, 'vehiclesOccludedIou': 0.0022677474, 'vehiclesFlowEpe': 9.906975, 'vehiclesFlowWarpedOccupancyAuc': 0.22494009, 'vehiclesFlowWarpedOccupancyIou': 0.22916473}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.21589088, 'vehiclesObservedIou': 0.09909189, 'vehiclesOccludedAuc': 7.125441e-06, 'vehiclesOccludedIou': 4.3441305e-05, 'vehiclesFlowEpe': 5.2033052, 'vehiclesFlowWarpedOccupancyAuc': 0.31300062, 'vehiclesFlowWarpedOccupancyIou': 0.110372685}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.79259026, 'vehiclesObservedIou': 0.5180768, 'vehiclesOccludedAuc': 0.2698, 'vehiclesOccludedIou': 0.022452462, 'vehiclesFlowEpe': 2.3249948, 'vehiclesFlowWarpedOccupancyAuc': 0.7816911, 'vehiclesFlowWarpedOccupancyIou': 0.6274455}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8470513, 'vehiclesObservedIou': 0.5421722, 'vehiclesOccludedAuc': 0.093071766, 'vehiclesOccludedIou': 0.047941532, 'vehiclesFlowEpe': 5.6426964, 'vehiclesFlowWarpedOccupancyAuc': 0.78183484, 'vehiclesFlowWarpedOccupancyIou': 0.590398}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.6856558, 'vehiclesObservedIou': 0.35929435, 'vehiclesOccludedAuc': 0.3118443, 'vehiclesOccludedIou': 0.05119903, 'vehiclesFlowEpe': 4.3893833, 'vehiclesFlowWarpedOccupancyAuc': 0.59684694, 'vehiclesFlowWarpedOccupancyIou': 0.4978758}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9018363, 'vehiclesObservedIou': 0.63333255, 'vehiclesOccludedAuc': 0.03667531, 'vehiclesOccludedIou': 0.0137802735, 'vehiclesFlowEpe': 7.5388727, 'vehiclesFlowWarpedOccupancyAuc': 0.63031316, 'vehiclesFlowWarpedOccupancyIou': 0.6547674}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.40841174, 'vehiclesObservedIou': 0.27389342, 'vehiclesOccludedAuc': 0.12479856, 'vehiclesOccludedIou': 0.031942446, 'vehiclesFlowEpe': 3.2376711, 'vehiclesFlowWarpedOccupancyAuc': 0.6127119, 'vehiclesFlowWarpedOccupancyIou': 0.42922622}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8985589, 'vehiclesObservedIou': 0.6284822, 'vehiclesOccludedAuc': 0.020277888, 'vehiclesOccludedIou': 0.0052756416, 'vehiclesFlowEpe': 4.4362755, 'vehiclesFlowWarpedOccupancyAuc': 0.7427512, 'vehiclesFlowWarpedOccupancyIou': 0.67659825}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5660809, 'vehiclesObservedIou': 0.2856113, 'vehiclesOccludedAuc': 0.13808927, 'vehiclesOccludedIou': 0.02677028, 'vehiclesFlowEpe': 3.813685, 'vehiclesFlowWarpedOccupancyAuc': 0.56680846, 'vehiclesFlowWarpedOccupancyIou': 0.33083785}
2024-05-28 11:07:12.300172: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:07:12.351477: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:07:12.351771: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.56561404, 'vehiclesObservedIou': 0.23831353, 'vehiclesOccludedAuc': 0.08096228, 'vehiclesOccludedIou': 0.029595735, 'vehiclesFlowEpe': 3.226987, 'vehiclesFlowWarpedOccupancyAuc': 0.5569369, 'vehiclesFlowWarpedOccupancyIou': 0.3130235}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9320195, 'vehiclesObservedIou': 0.70836294, 'vehiclesOccludedAuc': 0.055541195, 'vehiclesOccludedIou': 0.022807078, 'vehiclesFlowEpe': 4.3013396, 'vehiclesFlowWarpedOccupancyAuc': 0.84442943, 'vehiclesFlowWarpedOccupancyIou': 0.78911686}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6287671, 'vehiclesObservedIou': 0.3189351, 'vehiclesOccludedAuc': 0.0116182845, 'vehiclesOccludedIou': 0.0036901364, 'vehiclesFlowEpe': 5.1957254, 'vehiclesFlowWarpedOccupancyAuc': 0.5310754, 'vehiclesFlowWarpedOccupancyIou': 0.36969534}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8548414, 'vehiclesObservedIou': 0.5754024, 'vehiclesOccludedAuc': 0.037196275, 'vehiclesOccludedIou': 0.015361734, 'vehiclesFlowEpe': 2.641902, 'vehiclesFlowWarpedOccupancyAuc': 0.8205596, 'vehiclesFlowWarpedOccupancyIou': 0.7043364}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7498073, 'vehiclesObservedIou': 0.36986417, 'vehiclesOccludedAuc': 0.18713713, 'vehiclesOccludedIou': 0.013392576, 'vehiclesFlowEpe': 8.94043, 'vehiclesFlowWarpedOccupancyAuc': 0.54791665, 'vehiclesFlowWarpedOccupancyIou': 0.45695028}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.84419525, 'vehiclesObservedIou': 0.56799823, 'vehiclesOccludedAuc': 0.03248573, 'vehiclesOccludedIou': 0.007022895, 'vehiclesFlowEpe': 4.5274425, 'vehiclesFlowWarpedOccupancyAuc': 0.71525604, 'vehiclesFlowWarpedOccupancyIou': 0.6520628}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7847229, 'vehiclesObservedIou': 0.41597325, 'vehiclesOccludedAuc': 0.33022952, 'vehiclesOccludedIou': 0.12883528, 'vehiclesFlowEpe': 5.9889445, 'vehiclesFlowWarpedOccupancyAuc': 0.5578956, 'vehiclesFlowWarpedOccupancyIou': 0.44044155}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.94422823, 'vehiclesObservedIou': 0.71199304, 'vehiclesOccludedAuc': 0.2091895, 'vehiclesOccludedIou': 0.043555047, 'vehiclesFlowEpe': 5.842443, 'vehiclesFlowWarpedOccupancyAuc': 0.77440155, 'vehiclesFlowWarpedOccupancyIou': 0.73218435}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.94422823, 'vehiclesObservedIou': 0.71199304, 'vehiclesOccludedAuc': 0.2091895, 'vehiclesOccludedIou': 0.043555047, 'vehiclesFlowEpe': 5.842443, 'vehiclesFlowWarpedOccupancyAuc': 0.77440155, 'vehiclesFlowWarpedOccupancyIou': 0.73218435}
Average Time: 0.0012 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6674826310526317, 'vehiclesObservedIou': 0.4052897821052632, 'vehiclesOccludedAuc': 0.1133271513021579, 'vehiclesOccludedIou': 0.026572405694999995, 'vehiclesFlowEpe': 5.108204584210527, 'vehiclesFlowWarpedOccupancyAuc': 0.5880007110526316, 'vehiclesFlowWarpedOccupancyIou': 0.46682370657894734}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00040new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.4449088, 'vehiclesObservedIou': 0.23980413, 'vehiclesOccludedAuc': 0.18594667, 'vehiclesOccludedIou': 0.038082387, 'vehiclesFlowEpe': 5.070247, 'vehiclesFlowWarpedOccupancyAuc': 0.51202977, 'vehiclesFlowWarpedOccupancyIou': 0.25117785}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7767911, 'vehiclesObservedIou': 0.4073693, 'vehiclesOccludedAuc': 0.0045768353, 'vehiclesOccludedIou': 0.0014880046, 'vehiclesFlowEpe': 3.1340384, 'vehiclesFlowWarpedOccupancyAuc': 0.6917109, 'vehiclesFlowWarpedOccupancyIou': 0.52451116}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.88193643, 'vehiclesObservedIou': 0.6119961, 'vehiclesOccludedAuc': 0.047707494, 'vehiclesOccludedIou': 0.008155621, 'vehiclesFlowEpe': 7.977603, 'vehiclesFlowWarpedOccupancyAuc': 0.6794416, 'vehiclesFlowWarpedOccupancyIou': 0.67286295}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.63738865, 'vehiclesObservedIou': 0.40929958, 'vehiclesOccludedAuc': 0.106389016, 'vehiclesOccludedIou': 0.019039627, 'vehiclesFlowEpe': 4.997072, 'vehiclesFlowWarpedOccupancyAuc': 0.5670497, 'vehiclesFlowWarpedOccupancyIou': 0.44093537}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6691624, 'vehiclesObservedIou': 0.3619493, 'vehiclesOccludedAuc': 0.057867832, 'vehiclesOccludedIou': 0.015483767, 'vehiclesFlowEpe': 4.713748, 'vehiclesFlowWarpedOccupancyAuc': 0.54517436, 'vehiclesFlowWarpedOccupancyIou': 0.41515988}
DataLossError encountered. Skipping the corrupted record.
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.88193643, 'vehiclesObservedIou': 0.6119961, 'vehiclesOccludedAuc': 0.047707494, 'vehiclesOccludedIou': 0.008155621, 'vehiclesFlowEpe': 7.977603, 'vehiclesFlowWarpedOccupancyAuc': 0.6794416, 'vehiclesFlowWarpedOccupancyIou': 0.67286295}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.682037476, 'vehiclesObservedIou': 0.40608368200000006, 'vehiclesOccludedAuc': 0.08049756946, 'vehiclesOccludedIou': 0.01644988132, 'vehiclesFlowEpe': 5.1785416799999995, 'vehiclesFlowWarpedOccupancyAuc': 0.599081266, 'vehiclesFlowWarpedOccupancyIou': 0.460929442}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00089new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 11:07:15.759163: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:07:15.810270: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:07:15.810546: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0014 seconds, Metrics: {'vehiclesObservedAuc': 0.4351693, 'vehiclesObservedIou': 0.1573746, 'vehiclesOccludedAuc': 0.14661406, 'vehiclesOccludedIou': 0.022396654, 'vehiclesFlowEpe': 4.392974, 'vehiclesFlowWarpedOccupancyAuc': 0.48906925, 'vehiclesFlowWarpedOccupancyIou': 0.21002841}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.6077053, 'vehiclesObservedIou': 0.30432832, 'vehiclesOccludedAuc': 0.26160154, 'vehiclesOccludedIou': 0.045233086, 'vehiclesFlowEpe': 7.761275, 'vehiclesFlowWarpedOccupancyAuc': 0.42989177, 'vehiclesFlowWarpedOccupancyIou': 0.35007778}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9064554, 'vehiclesObservedIou': 0.50485957, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 1.8708079, 'vehiclesFlowWarpedOccupancyAuc': 0.79813176, 'vehiclesFlowWarpedOccupancyIou': 0.6499535}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.14464, 'vehiclesObservedIou': 0.060917456, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 5.598282, 'vehiclesFlowWarpedOccupancyAuc': 0.22602189, 'vehiclesFlowWarpedOccupancyIou': 0.064529575}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8212556, 'vehiclesObservedIou': 0.47884005, 'vehiclesOccludedAuc': 0.314969, 'vehiclesOccludedIou': 0.04518868, 'vehiclesFlowEpe': 3.5210176, 'vehiclesFlowWarpedOccupancyAuc': 0.71772265, 'vehiclesFlowWarpedOccupancyIou': 0.61129445}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.96783227, 'vehiclesObservedIou': 0.84675866, 'vehiclesOccludedAuc': 0.064053446, 'vehiclesOccludedIou': 0.014441403, 'vehiclesFlowEpe': 4.883893, 'vehiclesFlowWarpedOccupancyAuc': 0.8627095, 'vehiclesFlowWarpedOccupancyIou': 0.91147906}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6734323, 'vehiclesObservedIou': 0.33181807, 'vehiclesOccludedAuc': 0.109450445, 'vehiclesOccludedIou': 0.018914532, 'vehiclesFlowEpe': 5.5600915, 'vehiclesFlowWarpedOccupancyAuc': 0.55936897, 'vehiclesFlowWarpedOccupancyIou': 0.40614933}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.850224, 'vehiclesObservedIou': 0.5636867, 'vehiclesOccludedAuc': 0.010581729, 'vehiclesOccludedIou': 0.0033513918, 'vehiclesFlowEpe': 7.3852034, 'vehiclesFlowWarpedOccupancyAuc': 0.68491507, 'vehiclesFlowWarpedOccupancyIou': 0.575841}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.919911, 'vehiclesObservedIou': 0.707778, 'vehiclesOccludedAuc': 0.0909363, 'vehiclesOccludedIou': 0.0141685335, 'vehiclesFlowEpe': 6.6219854, 'vehiclesFlowWarpedOccupancyAuc': 0.7530346, 'vehiclesFlowWarpedOccupancyIou': 0.73318106}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7458387, 'vehiclesObservedIou': 0.4189368, 'vehiclesOccludedAuc': 0.052716017, 'vehiclesOccludedIou': 0.016032211, 'vehiclesFlowEpe': 2.849566, 'vehiclesFlowWarpedOccupancyAuc': 0.73323077, 'vehiclesFlowWarpedOccupancyIou': 0.5345626}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.5344709, 'vehiclesObservedIou': 0.27519783, 'vehiclesOccludedAuc': 0.028305758, 'vehiclesOccludedIou': 0.00837979, 'vehiclesFlowEpe': 6.964726, 'vehiclesFlowWarpedOccupancyAuc': 0.45051426, 'vehiclesFlowWarpedOccupancyIou': 0.31887862}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9481754, 'vehiclesObservedIou': 0.69900537, 'vehiclesOccludedAuc': 0.5240141, 'vehiclesOccludedIou': 0.0487969, 'vehiclesFlowEpe': 2.3628979, 'vehiclesFlowWarpedOccupancyAuc': 0.840618, 'vehiclesFlowWarpedOccupancyIou': 0.80190796}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.2913915, 'vehiclesObservedIou': 0.1730177, 'vehiclesOccludedAuc': 0.024475312, 'vehiclesOccludedIou': 0.006967182, 'vehiclesFlowEpe': 2.3957558, 'vehiclesFlowWarpedOccupancyAuc': 0.30010378, 'vehiclesFlowWarpedOccupancyIou': 0.1397262}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.48203403, 'vehiclesObservedIou': 0.2405762, 'vehiclesOccludedAuc': 0.014249387, 'vehiclesOccludedIou': 0.0021504988, 'vehiclesFlowEpe': 7.262399, 'vehiclesFlowWarpedOccupancyAuc': 0.38664302, 'vehiclesFlowWarpedOccupancyIou': 0.30484048}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.42860335, 'vehiclesObservedIou': 0.20932041, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 6.9652624, 'vehiclesFlowWarpedOccupancyAuc': 0.28625375, 'vehiclesFlowWarpedOccupancyIou': 0.27689388}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9408193, 'vehiclesObservedIou': 0.6126607, 'vehiclesOccludedAuc': 0.021627326, 'vehiclesOccludedIou': 0.009822675, 'vehiclesFlowEpe': 6.135423, 'vehiclesFlowWarpedOccupancyAuc': 0.73071986, 'vehiclesFlowWarpedOccupancyIou': 0.700085}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.4888317, 'vehiclesObservedIou': 0.29172403, 'vehiclesOccludedAuc': 0.018173426, 'vehiclesOccludedIou': 0.0038756635, 'vehiclesFlowEpe': 6.028084, 'vehiclesFlowWarpedOccupancyAuc': 0.40678877, 'vehiclesFlowWarpedOccupancyIou': 0.32658386}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7365538, 'vehiclesObservedIou': 0.43143433, 'vehiclesOccludedAuc': 0.25741714, 'vehiclesOccludedIou': 0.017140225, 'vehiclesFlowEpe': 3.5713565, 'vehiclesFlowWarpedOccupancyAuc': 0.6692308, 'vehiclesFlowWarpedOccupancyIou': 0.57603514}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.97848, 'vehiclesObservedIou': 0.86071086, 'vehiclesOccludedAuc': 0.0023283358, 'vehiclesOccludedIou': 0.0015406071, 'vehiclesFlowEpe': 2.1891918, 'vehiclesFlowWarpedOccupancyAuc': 0.9132148, 'vehiclesFlowWarpedOccupancyIou': 0.9176649}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.22773482, 'vehiclesObservedIou': 0.10634427, 'vehiclesOccludedAuc': 0.0003315133, 'vehiclesOccludedIou': 0.00034056554, 'vehiclesFlowEpe': 5.2924, 'vehiclesFlowWarpedOccupancyAuc': 0.33214846, 'vehiclesFlowWarpedOccupancyIou': 0.10931602}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.86222327, 'vehiclesObservedIou': 0.5906366, 'vehiclesOccludedAuc': 0.02063598, 'vehiclesOccludedIou': 0.005251992, 'vehiclesFlowEpe': 4.7326765, 'vehiclesFlowWarpedOccupancyAuc': 0.71165967, 'vehiclesFlowWarpedOccupancyIou': 0.50226974}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5438406, 'vehiclesObservedIou': 0.2385689, 'vehiclesOccludedAuc': 0.0010547825, 'vehiclesOccludedIou': 0.0009007513, 'vehiclesFlowEpe': 6.6928563, 'vehiclesFlowWarpedOccupancyAuc': 0.5141155, 'vehiclesFlowWarpedOccupancyIou': 0.30403966}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.88332665, 'vehiclesObservedIou': 0.61699224, 'vehiclesOccludedAuc': 0.28211924, 'vehiclesOccludedIou': 0.07255252, 'vehiclesFlowEpe': 2.875296, 'vehiclesFlowWarpedOccupancyAuc': 0.7961309, 'vehiclesFlowWarpedOccupancyIou': 0.71959835}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9384382, 'vehiclesObservedIou': 0.68073386, 'vehiclesOccludedAuc': 0.09765881, 'vehiclesOccludedIou': 0.035585, 'vehiclesFlowEpe': 3.1748662, 'vehiclesFlowWarpedOccupancyAuc': 0.79504025, 'vehiclesFlowWarpedOccupancyIou': 0.7381002}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.822164, 'vehiclesObservedIou': 0.44790328, 'vehiclesOccludedAuc': 9.4286894e-05, 'vehiclesOccludedIou': 0.000111941285, 'vehiclesFlowEpe': 2.8159695, 'vehiclesFlowWarpedOccupancyAuc': 0.80975485, 'vehiclesFlowWarpedOccupancyIou': 0.5708354}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.63431394, 'vehiclesObservedIou': 0.31259295, 'vehiclesOccludedAuc': 0.05757384, 'vehiclesOccludedIou': 0.020742625, 'vehiclesFlowEpe': 6.09328, 'vehiclesFlowWarpedOccupancyAuc': 0.56243664, 'vehiclesFlowWarpedOccupancyIou': 0.3829142}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.85947716, 'vehiclesObservedIou': 0.5866314, 'vehiclesOccludedAuc': 0.17807183, 'vehiclesOccludedIou': 0.04851655, 'vehiclesFlowEpe': 4.275185, 'vehiclesFlowWarpedOccupancyAuc': 0.7957189, 'vehiclesFlowWarpedOccupancyIou': 0.7268185}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.15011115, 'vehiclesObservedIou': 0.062326454, 'vehiclesOccludedAuc': 0.06361387, 'vehiclesOccludedIou': 0.011769086, 'vehiclesFlowEpe': 4.311123, 'vehiclesFlowWarpedOccupancyAuc': 0.28801346, 'vehiclesFlowWarpedOccupancyIou': 0.054243628}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.97848, 'vehiclesObservedIou': 0.86071086, 'vehiclesOccludedAuc': 0.0023283358, 'vehiclesOccludedIou': 0.0015406071, 'vehiclesFlowEpe': 2.1891918, 'vehiclesFlowWarpedOccupancyAuc': 0.9132148, 'vehiclesFlowWarpedOccupancyIou': 0.9176649}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6722662014285714, 'vehiclesObservedIou': 0.4218455575, 'vehiclesOccludedAuc': 0.09438098123192859, 'vehiclesOccludedIou': 0.016934680850892857, 'vehiclesFlowEpe': 4.8065658821428565, 'vehiclesFlowWarpedOccupancyAuc': 0.6015429249999998, 'vehiclesFlowWarpedOccupancyIou': 0.48278030367857144}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00135new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 11:07:34.032486: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:07:34.083928: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:07:34.084208: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0014 seconds, Metrics: {'vehiclesObservedAuc': 0.9062696, 'vehiclesObservedIou': 0.6220875, 'vehiclesOccludedAuc': 0.046589654, 'vehiclesOccludedIou': 0.017925195, 'vehiclesFlowEpe': 3.9694352, 'vehiclesFlowWarpedOccupancyAuc': 0.79286015, 'vehiclesFlowWarpedOccupancyIou': 0.64356136}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.29012236, 'vehiclesObservedIou': 0.13496274, 'vehiclesOccludedAuc': 0.00543718, 'vehiclesOccludedIou': 0.0024283568, 'vehiclesFlowEpe': 5.112971, 'vehiclesFlowWarpedOccupancyAuc': 0.35345978, 'vehiclesFlowWarpedOccupancyIou': 0.13694297}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.6978161, 'vehiclesObservedIou': 0.3722382, 'vehiclesOccludedAuc': 0.05141436, 'vehiclesOccludedIou': 0.007458903, 'vehiclesFlowEpe': 4.9824743, 'vehiclesFlowWarpedOccupancyAuc': 0.54508287, 'vehiclesFlowWarpedOccupancyIou': 0.4250976}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6917335, 'vehiclesObservedIou': 0.33595353, 'vehiclesOccludedAuc': 0.09376494, 'vehiclesOccludedIou': 0.011664603, 'vehiclesFlowEpe': 4.469831, 'vehiclesFlowWarpedOccupancyAuc': 0.5414745, 'vehiclesFlowWarpedOccupancyIou': 0.3363616}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6283085, 'vehiclesObservedIou': 0.29846063, 'vehiclesOccludedAuc': 0.008372768, 'vehiclesOccludedIou': 0.004101876, 'vehiclesFlowEpe': 3.2867982, 'vehiclesFlowWarpedOccupancyAuc': 0.6136461, 'vehiclesFlowWarpedOccupancyIou': 0.38985592}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.36482558, 'vehiclesObservedIou': 0.19374757, 'vehiclesOccludedAuc': 0.009028115, 'vehiclesOccludedIou': 0.0035193334, 'vehiclesFlowEpe': 8.615246, 'vehiclesFlowWarpedOccupancyAuc': 0.38043854, 'vehiclesFlowWarpedOccupancyIou': 0.25435704}
DataLossError encountered. Skipping the corrupted record.
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.9062696, 'vehiclesObservedIou': 0.6220875, 'vehiclesOccludedAuc': 0.046589654, 'vehiclesOccludedIou': 0.017925195, 'vehiclesFlowEpe': 3.9694352, 'vehiclesFlowWarpedOccupancyAuc': 0.79286015, 'vehiclesFlowWarpedOccupancyIou': 0.64356136}
Average Time: 0.0012 seconds, Average Metrics: {'vehiclesObservedAuc': 0.5965126066666667, 'vehiclesObservedIou': 0.32624169500000005, 'vehiclesOccludedAuc': 0.03576783616666667, 'vehiclesOccludedIou': 0.0078497112, 'vehiclesFlowEpe': 5.072792616666667, 'vehiclesFlowWarpedOccupancyAuc': 0.53782699, 'vehiclesFlowWarpedOccupancyIou': 0.3643627483333334}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00048new.tfrecords...
2024-05-28 11:07:38.160220: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:07:38.211408: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:07:38.211688: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.60773444, 'vehiclesObservedIou': 0.29047808, 'vehiclesOccludedAuc': 0.07181633, 'vehiclesOccludedIou': 0.011412421, 'vehiclesFlowEpe': 4.8305254, 'vehiclesFlowWarpedOccupancyAuc': 0.5028689, 'vehiclesFlowWarpedOccupancyIou': 0.3018167}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.98840284, 'vehiclesObservedIou': 0.8255353, 'vehiclesOccludedAuc': 0.60546917, 'vehiclesOccludedIou': 0.13091306, 'vehiclesFlowEpe': 3.9847167, 'vehiclesFlowWarpedOccupancyAuc': 0.8256294, 'vehiclesFlowWarpedOccupancyIou': 0.6679355}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.64843667, 'vehiclesObservedIou': 0.44218302, 'vehiclesOccludedAuc': 0.034091942, 'vehiclesOccludedIou': 0.012112805, 'vehiclesFlowEpe': 2.8337479, 'vehiclesFlowWarpedOccupancyAuc': 0.6884698, 'vehiclesFlowWarpedOccupancyIou': 0.5576938}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.67348164, 'vehiclesObservedIou': 0.370827, 'vehiclesOccludedAuc': 0.23605306, 'vehiclesOccludedIou': 0.032433458, 'vehiclesFlowEpe': 4.714406, 'vehiclesFlowWarpedOccupancyAuc': 0.5311091, 'vehiclesFlowWarpedOccupancyIou': 0.36406538}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8825226, 'vehiclesObservedIou': 0.4694039, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.6505888, 'vehiclesFlowWarpedOccupancyAuc': 0.7321641, 'vehiclesFlowWarpedOccupancyIou': 0.6042896}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.80719405, 'vehiclesObservedIou': 0.38340437, 'vehiclesOccludedAuc': 0.0072558783, 'vehiclesOccludedIou': 0.0016758447, 'vehiclesFlowEpe': 3.3758135, 'vehiclesFlowWarpedOccupancyAuc': 0.6828519, 'vehiclesFlowWarpedOccupancyIou': 0.50293404}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8915722, 'vehiclesObservedIou': 0.54029644, 'vehiclesOccludedAuc': 0.5146333, 'vehiclesOccludedIou': 0.11869792, 'vehiclesFlowEpe': 2.4233022, 'vehiclesFlowWarpedOccupancyAuc': 0.731865, 'vehiclesFlowWarpedOccupancyIou': 0.55135095}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9898915, 'vehiclesObservedIou': 0.853256, 'vehiclesOccludedAuc': 0.04648097, 'vehiclesOccludedIou': 0.008586116, 'vehiclesFlowEpe': 1.9923251, 'vehiclesFlowWarpedOccupancyAuc': 0.8829315, 'vehiclesFlowWarpedOccupancyIou': 0.87810844}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.10763537, 'vehiclesObservedIou': 0.047580454, 'vehiclesOccludedAuc': 1.5853988e-05, 'vehiclesOccludedIou': 4.9258608e-05, 'vehiclesFlowEpe': 8.62889, 'vehiclesFlowWarpedOccupancyAuc': 0.14232656, 'vehiclesFlowWarpedOccupancyIou': 0.03737733}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.87164044, 'vehiclesObservedIou': 0.5691769, 'vehiclesOccludedAuc': 0.11739128, 'vehiclesOccludedIou': 0.027718049, 'vehiclesFlowEpe': 3.7025363, 'vehiclesFlowWarpedOccupancyAuc': 0.76574504, 'vehiclesFlowWarpedOccupancyIou': 0.65831834}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.94486713, 'vehiclesObservedIou': 0.692469, 'vehiclesOccludedAuc': 0.011479203, 'vehiclesOccludedIou': 0.0047825044, 'vehiclesFlowEpe': 4.911452, 'vehiclesFlowWarpedOccupancyAuc': 0.78167355, 'vehiclesFlowWarpedOccupancyIou': 0.76690674}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.90806377, 'vehiclesObservedIou': 0.70949465, 'vehiclesOccludedAuc': 0.08774427, 'vehiclesOccludedIou': 0.038279116, 'vehiclesFlowEpe': 5.103695, 'vehiclesFlowWarpedOccupancyAuc': 0.8901699, 'vehiclesFlowWarpedOccupancyIou': 0.81673324}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.6246559, 'vehiclesObservedIou': 0.342064, 'vehiclesOccludedAuc': 0.024236558, 'vehiclesOccludedIou': 0.00881385, 'vehiclesFlowEpe': 3.724036, 'vehiclesFlowWarpedOccupancyAuc': 0.63249224, 'vehiclesFlowWarpedOccupancyIou': 0.41586038}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.70958287, 'vehiclesObservedIou': 0.4197815, 'vehiclesOccludedAuc': 0.1113726, 'vehiclesOccludedIou': 0.023378318, 'vehiclesFlowEpe': 9.257519, 'vehiclesFlowWarpedOccupancyAuc': 0.5443153, 'vehiclesFlowWarpedOccupancyIou': 0.49193943}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.94177866, 'vehiclesObservedIou': 0.6919743, 'vehiclesOccludedAuc': 0.0072059818, 'vehiclesOccludedIou': 0.0027252734, 'vehiclesFlowEpe': 2.7589967, 'vehiclesFlowWarpedOccupancyAuc': 0.78813535, 'vehiclesFlowWarpedOccupancyIou': 0.74199444}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.96244586, 'vehiclesObservedIou': 0.7564401, 'vehiclesOccludedAuc': 0.07889848, 'vehiclesOccludedIou': 0.01717821, 'vehiclesFlowEpe': 5.29509, 'vehiclesFlowWarpedOccupancyAuc': 0.79053354, 'vehiclesFlowWarpedOccupancyIou': 0.7956305}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.89061445, 'vehiclesObservedIou': 0.533421, 'vehiclesOccludedAuc': 0.19371235, 'vehiclesOccludedIou': 0.034677684, 'vehiclesFlowEpe': 3.457483, 'vehiclesFlowWarpedOccupancyAuc': 0.67874366, 'vehiclesFlowWarpedOccupancyIou': 0.53716886}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.41919637, 'vehiclesObservedIou': 0.27420604, 'vehiclesOccludedAuc': 0.00549538, 'vehiclesOccludedIou': 0.0014981023, 'vehiclesFlowEpe': 5.337817, 'vehiclesFlowWarpedOccupancyAuc': 0.44071004, 'vehiclesFlowWarpedOccupancyIou': 0.2494543}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5278971, 'vehiclesObservedIou': 0.2635231, 'vehiclesOccludedAuc': 0.00411628, 'vehiclesOccludedIou': 0.0024647159, 'vehiclesFlowEpe': 5.071257, 'vehiclesFlowWarpedOccupancyAuc': 0.3574822, 'vehiclesFlowWarpedOccupancyIou': 0.20572329}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.89425325, 'vehiclesObservedIou': 0.7087365, 'vehiclesOccludedAuc': 0.0012516996, 'vehiclesOccludedIou': 0.0006441933, 'vehiclesFlowEpe': 10.276104, 'vehiclesFlowWarpedOccupancyAuc': 0.68997616, 'vehiclesFlowWarpedOccupancyIou': 0.7497008}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.95942545, 'vehiclesObservedIou': 0.7165233, 'vehiclesOccludedAuc': 0.0014688952, 'vehiclesOccludedIou': 0.0005075069, 'vehiclesFlowEpe': 3.0700932, 'vehiclesFlowWarpedOccupancyAuc': 0.8178484, 'vehiclesFlowWarpedOccupancyIou': 0.71022445}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9746986, 'vehiclesObservedIou': 0.71063036, 'vehiclesOccludedAuc': 0.007910309, 'vehiclesOccludedIou': 0.0036735986, 'vehiclesFlowEpe': 5.06364, 'vehiclesFlowWarpedOccupancyAuc': 0.72632813, 'vehiclesFlowWarpedOccupancyIou': 0.7430754}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8744112, 'vehiclesObservedIou': 0.6112686, 'vehiclesOccludedAuc': 0.17287424, 'vehiclesOccludedIou': 0.05861534, 'vehiclesFlowEpe': 3.4837203, 'vehiclesFlowWarpedOccupancyAuc': 0.8094332, 'vehiclesFlowWarpedOccupancyIou': 0.6704743}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.15510227, 'vehiclesObservedIou': 0.069916956, 'vehiclesOccludedAuc': 0.0009219326, 'vehiclesOccludedIou': 0.0013665758, 'vehiclesFlowEpe': 3.426363, 'vehiclesFlowWarpedOccupancyAuc': 0.23936737, 'vehiclesFlowWarpedOccupancyIou': 0.066988625}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7912427, 'vehiclesObservedIou': 0.61076885, 'vehiclesOccludedAuc': 0.024131812, 'vehiclesOccludedIou': 0.006650447, 'vehiclesFlowEpe': 4.9314156, 'vehiclesFlowWarpedOccupancyAuc': 0.7015026, 'vehiclesFlowWarpedOccupancyIou': 0.64851016}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.9898915, 'vehiclesObservedIou': 0.853256, 'vehiclesOccludedAuc': 0.04648097, 'vehiclesOccludedIou': 0.008586116, 'vehiclesFlowEpe': 1.9923251, 'vehiclesFlowWarpedOccupancyAuc': 0.8829315, 'vehiclesFlowWarpedOccupancyIou': 0.87810844}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.7618698932000001, 'vehiclesObservedIou': 0.5161343888, 'vehiclesOccludedAuc': 0.09464111101952, 'vehiclesOccludedIou': 0.021954174716319996, 'vehiclesFlowEpe': 4.572221348, 'vehiclesFlowWarpedOccupancyAuc': 0.6549869176, 'vehiclesFlowWarpedOccupancyIou': 0.5493709998}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00058new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 11:07:54.389505: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:07:54.440270: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:07:54.440554: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.14894266, 'vehiclesObservedIou': 0.07691069, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 4.288837, 'vehiclesFlowWarpedOccupancyAuc': 0.25018254, 'vehiclesFlowWarpedOccupancyIou': 0.07944821}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.5568542, 'vehiclesObservedIou': 0.25556034, 'vehiclesOccludedAuc': 0.16570339, 'vehiclesOccludedIou': 0.011995226, 'vehiclesFlowEpe': 3.471621, 'vehiclesFlowWarpedOccupancyAuc': 0.52502143, 'vehiclesFlowWarpedOccupancyIou': 0.29004157}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.9843336, 'vehiclesObservedIou': 0.8199004, 'vehiclesOccludedAuc': 0.0012235207, 'vehiclesOccludedIou': 0.0007997685, 'vehiclesFlowEpe': 8.672969, 'vehiclesFlowWarpedOccupancyAuc': 0.8618941, 'vehiclesFlowWarpedOccupancyIou': 0.8437077}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.15278494, 'vehiclesObservedIou': 0.060470466, 'vehiclesOccludedAuc': 0.09433674, 'vehiclesOccludedIou': 0.02185633, 'vehiclesFlowEpe': 11.002425, 'vehiclesFlowWarpedOccupancyAuc': 0.16624421, 'vehiclesFlowWarpedOccupancyIou': 0.04645159}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.09568271, 'vehiclesObservedIou': 0.053399254, 'vehiclesOccludedAuc': 0.0041224174, 'vehiclesOccludedIou': 0.001825852, 'vehiclesFlowEpe': 4.06124, 'vehiclesFlowWarpedOccupancyAuc': 0.2620983, 'vehiclesFlowWarpedOccupancyIou': 0.052998684}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8253928, 'vehiclesObservedIou': 0.37210345, 'vehiclesOccludedAuc': 0.0063062888, 'vehiclesOccludedIou': 0.0021886656, 'vehiclesFlowEpe': 5.093123, 'vehiclesFlowWarpedOccupancyAuc': 0.67302746, 'vehiclesFlowWarpedOccupancyIou': 0.484567}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.40747362, 'vehiclesObservedIou': 0.16775846, 'vehiclesOccludedAuc': 0.0021497016, 'vehiclesOccludedIou': 0.0015561717, 'vehiclesFlowEpe': 3.656775, 'vehiclesFlowWarpedOccupancyAuc': 0.44368958, 'vehiclesFlowWarpedOccupancyIou': 0.24818921}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.643944, 'vehiclesObservedIou': 0.29335308, 'vehiclesOccludedAuc': 0.00042433746, 'vehiclesOccludedIou': 8.72566e-05, 'vehiclesFlowEpe': 4.7624097, 'vehiclesFlowWarpedOccupancyAuc': 0.53303546, 'vehiclesFlowWarpedOccupancyIou': 0.36114758}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.95657444, 'vehiclesObservedIou': 0.77408475, 'vehiclesOccludedAuc': 0.020779762, 'vehiclesOccludedIou': 0.0077912263, 'vehiclesFlowEpe': 3.3420088, 'vehiclesFlowWarpedOccupancyAuc': 0.8619427, 'vehiclesFlowWarpedOccupancyIou': 0.8329282}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8308245, 'vehiclesObservedIou': 0.5731659, 'vehiclesOccludedAuc': 0.036279924, 'vehiclesOccludedIou': 0.016473057, 'vehiclesFlowEpe': 4.575527, 'vehiclesFlowWarpedOccupancyAuc': 0.7412096, 'vehiclesFlowWarpedOccupancyIou': 0.67538166}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6547303, 'vehiclesObservedIou': 0.33434585, 'vehiclesOccludedAuc': 0.2909125, 'vehiclesOccludedIou': 0.053542696, 'vehiclesFlowEpe': 4.942829, 'vehiclesFlowWarpedOccupancyAuc': 0.6029183, 'vehiclesFlowWarpedOccupancyIou': 0.41039935}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.96282554, 'vehiclesObservedIou': 0.7329144, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.2880573, 'vehiclesFlowWarpedOccupancyAuc': 0.8493392, 'vehiclesFlowWarpedOccupancyIou': 0.8311854}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8086568, 'vehiclesObservedIou': 0.47742003, 'vehiclesOccludedAuc': 0.04311551, 'vehiclesOccludedIou': 0.015443206, 'vehiclesFlowEpe': 5.6627564, 'vehiclesFlowWarpedOccupancyAuc': 0.630241, 'vehiclesFlowWarpedOccupancyIou': 0.536453}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7692447, 'vehiclesObservedIou': 0.44939396, 'vehiclesOccludedAuc': 0.07491884, 'vehiclesOccludedIou': 0.015853792, 'vehiclesFlowEpe': 3.7154918, 'vehiclesFlowWarpedOccupancyAuc': 0.6182111, 'vehiclesFlowWarpedOccupancyIou': 0.49881333}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7867991, 'vehiclesObservedIou': 0.50181586, 'vehiclesOccludedAuc': 0.00045444956, 'vehiclesOccludedIou': 5.285437e-05, 'vehiclesFlowEpe': 17.176561, 'vehiclesFlowWarpedOccupancyAuc': 0.55731046, 'vehiclesFlowWarpedOccupancyIou': 0.59158117}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.76967096, 'vehiclesObservedIou': 0.5497829, 'vehiclesOccludedAuc': 0.49517503, 'vehiclesOccludedIou': 0.07051686, 'vehiclesFlowEpe': 3.7030458, 'vehiclesFlowWarpedOccupancyAuc': 0.7342535, 'vehiclesFlowWarpedOccupancyIou': 0.62287414}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.862667, 'vehiclesObservedIou': 0.5671201, 'vehiclesOccludedAuc': 0.04345917, 'vehiclesOccludedIou': 0.008765677, 'vehiclesFlowEpe': 12.544505, 'vehiclesFlowWarpedOccupancyAuc': 0.5270201, 'vehiclesFlowWarpedOccupancyIou': 0.52221376}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.91923887, 'vehiclesObservedIou': 0.6542447, 'vehiclesOccludedAuc': 0.2395564, 'vehiclesOccludedIou': 0.050738927, 'vehiclesFlowEpe': 2.6250381, 'vehiclesFlowWarpedOccupancyAuc': 0.8252245, 'vehiclesFlowWarpedOccupancyIou': 0.76148134}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.55203164, 'vehiclesObservedIou': 0.26998752, 'vehiclesOccludedAuc': 0.27529985, 'vehiclesOccludedIou': 0.07614171, 'vehiclesFlowEpe': 4.831657, 'vehiclesFlowWarpedOccupancyAuc': 0.47837222, 'vehiclesFlowWarpedOccupancyIou': 0.3361138}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8949174, 'vehiclesObservedIou': 0.6177347, 'vehiclesOccludedAuc': 0.002220424, 'vehiclesOccludedIou': 0.0016202356, 'vehiclesFlowEpe': 2.7601886, 'vehiclesFlowWarpedOccupancyAuc': 0.7827304, 'vehiclesFlowWarpedOccupancyIou': 0.680508}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.13505249, 'vehiclesObservedIou': 0.05848026, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.0266056, 'vehiclesFlowWarpedOccupancyAuc': 0.20306855, 'vehiclesFlowWarpedOccupancyIou': 0.072171904}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6671577, 'vehiclesObservedIou': 0.3301506, 'vehiclesOccludedAuc': 0.15749037, 'vehiclesOccludedIou': 0.040635236, 'vehiclesFlowEpe': 2.4426858, 'vehiclesFlowWarpedOccupancyAuc': 0.6488551, 'vehiclesFlowWarpedOccupancyIou': 0.3868484}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.59981, 'vehiclesObservedIou': 0.17251882, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 5.31306, 'vehiclesFlowWarpedOccupancyAuc': 0.46416727, 'vehiclesFlowWarpedOccupancyIou': 0.28698942}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.47620857, 'vehiclesObservedIou': 0.22658208, 'vehiclesOccludedAuc': 0.18396398, 'vehiclesOccludedIou': 0.04018067, 'vehiclesFlowEpe': 3.519029, 'vehiclesFlowWarpedOccupancyAuc': 0.53826, 'vehiclesFlowWarpedOccupancyIou': 0.27612287}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.44902152, 'vehiclesObservedIou': 0.17311989, 'vehiclesOccludedAuc': 0.044322096, 'vehiclesOccludedIou': 0.009432465, 'vehiclesFlowEpe': 5.621157, 'vehiclesFlowWarpedOccupancyAuc': 0.4137429, 'vehiclesFlowWarpedOccupancyIou': 0.19778906}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8992325, 'vehiclesObservedIou': 0.5859336, 'vehiclesOccludedAuc': 0.018942155, 'vehiclesOccludedIou': 0.0072296103, 'vehiclesFlowEpe': 2.9973774, 'vehiclesFlowWarpedOccupancyAuc': 0.7683397, 'vehiclesFlowWarpedOccupancyIou': 0.64119726}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.92170966, 'vehiclesObservedIou': 0.6808925, 'vehiclesOccludedAuc': 0.075331986, 'vehiclesOccludedIou': 0.019933488, 'vehiclesFlowEpe': 5.3578134, 'vehiclesFlowWarpedOccupancyAuc': 0.786361, 'vehiclesFlowWarpedOccupancyIou': 0.5966311}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.77346647, 'vehiclesObservedIou': 0.4819672, 'vehiclesOccludedAuc': 0.10537252, 'vehiclesOccludedIou': 0.033624217, 'vehiclesFlowEpe': 4.37581, 'vehiclesFlowWarpedOccupancyAuc': 0.72246826, 'vehiclesFlowWarpedOccupancyIou': 0.5990688}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.12603314, 'vehiclesObservedIou': 0.04940497, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 5.5700264, 'vehiclesFlowWarpedOccupancyAuc': 0.072519265, 'vehiclesFlowWarpedOccupancyIou': 0.04555973}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5321123, 'vehiclesObservedIou': 0.18579978, 'vehiclesOccludedAuc': 0.057616968, 'vehiclesOccludedIou': 0.011620742, 'vehiclesFlowEpe': 8.128307, 'vehiclesFlowWarpedOccupancyAuc': 0.39438623, 'vehiclesFlowWarpedOccupancyIou': 0.16557021}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8665908, 'vehiclesObservedIou': 0.46679923, 'vehiclesOccludedAuc': 0.0251395, 'vehiclesOccludedIou': 0.009874274, 'vehiclesFlowEpe': 7.7525864, 'vehiclesFlowWarpedOccupancyAuc': 0.66214854, 'vehiclesFlowWarpedOccupancyIou': 0.46900633}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.95564127, 'vehiclesObservedIou': 0.68502665, 'vehiclesOccludedAuc': 0.0056343875, 'vehiclesOccludedIou': 0.0028288036, 'vehiclesFlowEpe': 1.5537692, 'vehiclesFlowWarpedOccupancyAuc': 0.86199236, 'vehiclesFlowWarpedOccupancyIou': 0.7739521}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.2545179, 'vehiclesObservedIou': 0.15268184, 'vehiclesOccludedAuc': 0.080138326, 'vehiclesOccludedIou': 0.0017525712, 'vehiclesFlowEpe': 10.110193, 'vehiclesFlowWarpedOccupancyAuc': 0.25918198, 'vehiclesFlowWarpedOccupancyIou': 0.15292855}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.76234543, 'vehiclesObservedIou': 0.5789525, 'vehiclesOccludedAuc': 0.1543255, 'vehiclesOccludedIou': 0.028743535, 'vehiclesFlowEpe': 3.5189338, 'vehiclesFlowWarpedOccupancyAuc': 0.74805593, 'vehiclesFlowWarpedOccupancyIou': 0.63040996}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9163048, 'vehiclesObservedIou': 0.62279767, 'vehiclesOccludedAuc': 0.10668566, 'vehiclesOccludedIou': 0.025983168, 'vehiclesFlowEpe': 3.257971, 'vehiclesFlowWarpedOccupancyAuc': 0.77985054, 'vehiclesFlowWarpedOccupancyIou': 0.67549056}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9372803, 'vehiclesObservedIou': 0.6693397, 'vehiclesOccludedAuc': 0.0036793149, 'vehiclesOccludedIou': 0.0011498759, 'vehiclesFlowEpe': 3.5185943, 'vehiclesFlowWarpedOccupancyAuc': 0.7625228, 'vehiclesFlowWarpedOccupancyIou': 0.70781136}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.9843336, 'vehiclesObservedIou': 0.8199004, 'vehiclesOccludedAuc': 0.0012235207, 'vehiclesOccludedIou': 0.0007997685, 'vehiclesFlowEpe': 8.672969, 'vehiclesFlowWarpedOccupancyAuc': 0.8618941, 'vehiclesFlowWarpedOccupancyIou': 0.8437077}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6626687397222222, 'vehiclesObservedIou': 0.40894205833333336, 'vehiclesOccludedAuc': 0.07819669497, 'vehiclesOccludedIou': 0.016395504657500004, 'vehiclesFlowEpe': 5.256694022222223, 'vehiclesFlowWarpedOccupancyAuc': 0.5836079606944443, 'vehiclesFlowWarpedOccupancyIou': 0.4551120085555556}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00053new.tfrecords...
2024-05-28 11:08:17.078702: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:08:17.130205: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:08:17.130479: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.84276783, 'vehiclesObservedIou': 0.4942069, 'vehiclesOccludedAuc': 0.23437689, 'vehiclesOccludedIou': 0.06431884, 'vehiclesFlowEpe': 3.5357032, 'vehiclesFlowWarpedOccupancyAuc': 0.7246741, 'vehiclesFlowWarpedOccupancyIou': 0.6120731}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.80331635, 'vehiclesObservedIou': 0.49375448, 'vehiclesOccludedAuc': 0.12073027, 'vehiclesOccludedIou': 0.028350666, 'vehiclesFlowEpe': 3.913851, 'vehiclesFlowWarpedOccupancyAuc': 0.6946131, 'vehiclesFlowWarpedOccupancyIou': 0.598977}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.80918324, 'vehiclesObservedIou': 0.50696534, 'vehiclesOccludedAuc': 0.2904652, 'vehiclesOccludedIou': 0.037267245, 'vehiclesFlowEpe': 4.754787, 'vehiclesFlowWarpedOccupancyAuc': 0.6606729, 'vehiclesFlowWarpedOccupancyIou': 0.60754913}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8237871, 'vehiclesObservedIou': 0.47854137, 'vehiclesOccludedAuc': 0.0750231, 'vehiclesOccludedIou': 0.0134476675, 'vehiclesFlowEpe': 2.8061266, 'vehiclesFlowWarpedOccupancyAuc': 0.68463016, 'vehiclesFlowWarpedOccupancyIou': 0.5604934}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.80150753, 'vehiclesObservedIou': 0.45477992, 'vehiclesOccludedAuc': 0.026541363, 'vehiclesOccludedIou': 0.012056064, 'vehiclesFlowEpe': 4.8123465, 'vehiclesFlowWarpedOccupancyAuc': 0.682164, 'vehiclesFlowWarpedOccupancyIou': 0.5390057}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.02850897, 'vehiclesObservedIou': 0.009461578, 'vehiclesOccludedAuc': 0.0012890593, 'vehiclesOccludedIou': 0.0008463142, 'vehiclesFlowEpe': 1.5151109, 'vehiclesFlowWarpedOccupancyAuc': 0.10361186, 'vehiclesFlowWarpedOccupancyIou': 0.007138366}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8672805, 'vehiclesObservedIou': 0.64151376, 'vehiclesOccludedAuc': 0.07234734, 'vehiclesOccludedIou': 0.008984073, 'vehiclesFlowEpe': 4.4302545, 'vehiclesFlowWarpedOccupancyAuc': 0.7712452, 'vehiclesFlowWarpedOccupancyIou': 0.75129247}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.38311207, 'vehiclesObservedIou': 0.22121014, 'vehiclesOccludedAuc': 0.00086400483, 'vehiclesOccludedIou': 0.00023689106, 'vehiclesFlowEpe': 4.681736, 'vehiclesFlowWarpedOccupancyAuc': 0.44705847, 'vehiclesFlowWarpedOccupancyIou': 0.25439003}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.6913683, 'vehiclesObservedIou': 0.34631875, 'vehiclesOccludedAuc': 0.09911204, 'vehiclesOccludedIou': 0.026451873, 'vehiclesFlowEpe': 3.6052456, 'vehiclesFlowWarpedOccupancyAuc': 0.6118363, 'vehiclesFlowWarpedOccupancyIou': 0.42244494}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.83111274, 'vehiclesObservedIou': 0.5272668, 'vehiclesOccludedAuc': 0.0041063232, 'vehiclesOccludedIou': 0.0027737874, 'vehiclesFlowEpe': 2.8026752, 'vehiclesFlowWarpedOccupancyAuc': 0.7408424, 'vehiclesFlowWarpedOccupancyIou': 0.59841144}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.33325338, 'vehiclesObservedIou': 0.13046937, 'vehiclesOccludedAuc': 0.13304317, 'vehiclesOccludedIou': 0.023770496, 'vehiclesFlowEpe': 3.329535, 'vehiclesFlowWarpedOccupancyAuc': 0.4866843, 'vehiclesFlowWarpedOccupancyIou': 0.12159864}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.503999, 'vehiclesObservedIou': 0.2261401, 'vehiclesOccludedAuc': 0.36304748, 'vehiclesOccludedIou': 0.03759232, 'vehiclesFlowEpe': 4.4181128, 'vehiclesFlowWarpedOccupancyAuc': 0.50963646, 'vehiclesFlowWarpedOccupancyIou': 0.3510003}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.17168412, 'vehiclesObservedIou': 0.058291234, 'vehiclesOccludedAuc': 0.0005015847, 'vehiclesOccludedIou': 3.4063785e-05, 'vehiclesFlowEpe': 6.0491, 'vehiclesFlowWarpedOccupancyAuc': 0.45032305, 'vehiclesFlowWarpedOccupancyIou': 0.061121028}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.29335576, 'vehiclesObservedIou': 0.13201457, 'vehiclesOccludedAuc': 0.05711088, 'vehiclesOccludedIou': 0.007026412, 'vehiclesFlowEpe': 4.976054, 'vehiclesFlowWarpedOccupancyAuc': 0.33314887, 'vehiclesFlowWarpedOccupancyIou': 0.16109636}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.5697983, 'vehiclesObservedIou': 0.23489146, 'vehiclesOccludedAuc': 0.0293164, 'vehiclesOccludedIou': 0.008048725, 'vehiclesFlowEpe': 6.0730686, 'vehiclesFlowWarpedOccupancyAuc': 0.37472573, 'vehiclesFlowWarpedOccupancyIou': 0.25587317}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.91438466, 'vehiclesObservedIou': 0.6305486, 'vehiclesOccludedAuc': 0.0034215064, 'vehiclesOccludedIou': 0.0021238308, 'vehiclesFlowEpe': 6.162519, 'vehiclesFlowWarpedOccupancyAuc': 0.69656396, 'vehiclesFlowWarpedOccupancyIou': 0.6729486}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9849063, 'vehiclesObservedIou': 0.829622, 'vehiclesOccludedAuc': 0.015051849, 'vehiclesOccludedIou': 0.0019410256, 'vehiclesFlowEpe': 1.704137, 'vehiclesFlowWarpedOccupancyAuc': 0.8628287, 'vehiclesFlowWarpedOccupancyIou': 0.8369126}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.82986784, 'vehiclesObservedIou': 0.509846, 'vehiclesOccludedAuc': 0.14760083, 'vehiclesOccludedIou': 0.043841567, 'vehiclesFlowEpe': 5.9312935, 'vehiclesFlowWarpedOccupancyAuc': 0.7341514, 'vehiclesFlowWarpedOccupancyIou': 0.60643864}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.32998094, 'vehiclesObservedIou': 0.13758504, 'vehiclesOccludedAuc': 0.009061077, 'vehiclesOccludedIou': 0.003116519, 'vehiclesFlowEpe': 9.168357, 'vehiclesFlowWarpedOccupancyAuc': 0.33867645, 'vehiclesFlowWarpedOccupancyIou': 0.12203266}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.96534085, 'vehiclesObservedIou': 0.7261194, 'vehiclesOccludedAuc': 0.067094885, 'vehiclesOccludedIou': 0.009086224, 'vehiclesFlowEpe': 5.9620404, 'vehiclesFlowWarpedOccupancyAuc': 0.7704129, 'vehiclesFlowWarpedOccupancyIou': 0.7158974}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.22361541, 'vehiclesObservedIou': 0.08844467, 'vehiclesOccludedAuc': 0.023869982, 'vehiclesOccludedIou': 0.0077736187, 'vehiclesFlowEpe': 5.164845, 'vehiclesFlowWarpedOccupancyAuc': 0.3561908, 'vehiclesFlowWarpedOccupancyIou': 0.09406539}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6612154, 'vehiclesObservedIou': 0.3501109, 'vehiclesOccludedAuc': 0.16177137, 'vehiclesOccludedIou': 0.031830024, 'vehiclesFlowEpe': 3.104634, 'vehiclesFlowWarpedOccupancyAuc': 0.6481474, 'vehiclesFlowWarpedOccupancyIou': 0.41009536}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9865336, 'vehiclesObservedIou': 0.7878926, 'vehiclesOccludedAuc': 0.0011294063, 'vehiclesOccludedIou': 0.0005634167, 'vehiclesFlowEpe': 4.2063923, 'vehiclesFlowWarpedOccupancyAuc': 0.9097052, 'vehiclesFlowWarpedOccupancyIou': 0.8832102}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.78641033, 'vehiclesObservedIou': 0.44737935, 'vehiclesOccludedAuc': 0.0020678795, 'vehiclesOccludedIou': 0.00073715026, 'vehiclesFlowEpe': 2.1297603, 'vehiclesFlowWarpedOccupancyAuc': 0.70824265, 'vehiclesFlowWarpedOccupancyIou': 0.5693108}
Time: 0.0014 seconds, Metrics: {'vehiclesObservedAuc': 0.66489565, 'vehiclesObservedIou': 0.3728683, 'vehiclesOccludedAuc': 0.010555837, 'vehiclesOccludedIou': 0.0050990516, 'vehiclesFlowEpe': 5.4593763, 'vehiclesFlowWarpedOccupancyAuc': 0.54777, 'vehiclesFlowWarpedOccupancyIou': 0.42178816}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7986859, 'vehiclesObservedIou': 0.5329496, 'vehiclesOccludedAuc': 0.020339025, 'vehiclesOccludedIou': 0.007139405, 'vehiclesFlowEpe': 4.6639624, 'vehiclesFlowWarpedOccupancyAuc': 0.73797804, 'vehiclesFlowWarpedOccupancyIou': 0.6392929}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.39464578, 'vehiclesObservedIou': 0.19584374, 'vehiclesOccludedAuc': 0.21767546, 'vehiclesOccludedIou': 0.056760594, 'vehiclesFlowEpe': 5.662042, 'vehiclesFlowWarpedOccupancyAuc': 0.4597138, 'vehiclesFlowWarpedOccupancyIou': 0.2804557}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.3733671, 'vehiclesObservedIou': 0.15852258, 'vehiclesOccludedAuc': 0.11947923, 'vehiclesOccludedIou': 0.023647033, 'vehiclesFlowEpe': 7.3777246, 'vehiclesFlowWarpedOccupancyAuc': 0.33192676, 'vehiclesFlowWarpedOccupancyIou': 0.16149463}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.2510062, 'vehiclesObservedIou': 0.15053444, 'vehiclesOccludedAuc': 0.6707788, 'vehiclesOccludedIou': 0.1206711, 'vehiclesFlowEpe': 2.4614773, 'vehiclesFlowWarpedOccupancyAuc': 0.54677594, 'vehiclesFlowWarpedOccupancyIou': 0.3222409}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.9865336, 'vehiclesObservedIou': 0.7878926, 'vehiclesOccludedAuc': 0.0011294063, 'vehiclesOccludedIou': 0.0005634167, 'vehiclesFlowEpe': 4.2063923, 'vehiclesFlowWarpedOccupancyAuc': 0.9097052, 'vehiclesFlowWarpedOccupancyIou': 0.8832102}
Average Time: 0.0012 seconds, Average Metrics: {'vehiclesObservedAuc': 0.617892798275862, 'vehiclesObservedIou': 0.37496872386206903, 'vehiclesOccludedAuc': 0.1026818014562069, 'vehiclesOccludedIou': 0.02019089646913793, 'vehiclesFlowEpe': 4.512492000000001, 'vehiclesFlowWarpedOccupancyAuc': 0.5836189965517242, 'vehiclesFlowWarpedOccupancyIou': 0.4358154832413793}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00097new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 11:08:35.734234: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:08:35.784997: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:08:35.785282: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7335521, 'vehiclesObservedIou': 0.40853903, 'vehiclesOccludedAuc': 0.1602185, 'vehiclesOccludedIou': 0.033340443, 'vehiclesFlowEpe': 3.8965578, 'vehiclesFlowWarpedOccupancyAuc': 0.65447456, 'vehiclesFlowWarpedOccupancyIou': 0.49338582}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.4932539, 'vehiclesObservedIou': 0.22232585, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 5.3359246, 'vehiclesFlowWarpedOccupancyAuc': 0.45611006, 'vehiclesFlowWarpedOccupancyIou': 0.2878132}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7515631, 'vehiclesObservedIou': 0.413174, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.3683984, 'vehiclesFlowWarpedOccupancyAuc': 0.6777541, 'vehiclesFlowWarpedOccupancyIou': 0.53420186}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.70419455, 'vehiclesObservedIou': 0.41437232, 'vehiclesOccludedAuc': 0.0073296973, 'vehiclesOccludedIou': 0.0045232144, 'vehiclesFlowEpe': 6.8296432, 'vehiclesFlowWarpedOccupancyAuc': 0.5175092, 'vehiclesFlowWarpedOccupancyIou': 0.46192408}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8721486, 'vehiclesObservedIou': 0.58877087, 'vehiclesOccludedAuc': 0.15487763, 'vehiclesOccludedIou': 0.035131987, 'vehiclesFlowEpe': 4.4443493, 'vehiclesFlowWarpedOccupancyAuc': 0.7718188, 'vehiclesFlowWarpedOccupancyIou': 0.6815371}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.54562104, 'vehiclesObservedIou': 0.2707852, 'vehiclesOccludedAuc': 0.31244934, 'vehiclesOccludedIou': 0.08184847, 'vehiclesFlowEpe': 3.4904296, 'vehiclesFlowWarpedOccupancyAuc': 0.5408248, 'vehiclesFlowWarpedOccupancyIou': 0.3270278}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.8721486, 'vehiclesObservedIou': 0.58877087, 'vehiclesOccludedAuc': 0.15487763, 'vehiclesOccludedIou': 0.035131987, 'vehiclesFlowEpe': 4.4443493, 'vehiclesFlowWarpedOccupancyAuc': 0.7718188, 'vehiclesFlowWarpedOccupancyIou': 0.6815371}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6833888816666667, 'vehiclesObservedIou': 0.3863278783333333, 'vehiclesOccludedAuc': 0.10581252788333334, 'vehiclesOccludedIou': 0.0258073524, 'vehiclesFlowEpe': 4.394217149999999, 'vehiclesFlowWarpedOccupancyAuc': 0.60308192, 'vehiclesFlowWarpedOccupancyIou': 0.4643149766666667}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00105new.tfrecords...
2024-05-28 11:08:39.804517: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:08:39.858548: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:08:39.858821: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0014 seconds, Metrics: {'vehiclesObservedAuc': 0.8979349, 'vehiclesObservedIou': 0.6997401, 'vehiclesOccludedAuc': 0.024070144, 'vehiclesOccludedIou': 0.010513377, 'vehiclesFlowEpe': 3.992938, 'vehiclesFlowWarpedOccupancyAuc': 0.7767385, 'vehiclesFlowWarpedOccupancyIou': 0.74977803}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9080349, 'vehiclesObservedIou': 0.6957843, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 1.5992754, 'vehiclesFlowWarpedOccupancyAuc': 0.8535418, 'vehiclesFlowWarpedOccupancyIou': 0.83015823}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.19064201, 'vehiclesObservedIou': 0.08077007, 'vehiclesOccludedAuc': 0.025959497, 'vehiclesOccludedIou': 0.0055492995, 'vehiclesFlowEpe': 5.3786163, 'vehiclesFlowWarpedOccupancyAuc': 0.2527894, 'vehiclesFlowWarpedOccupancyIou': 0.090592146}
Time: 0.0014 seconds, Metrics: {'vehiclesObservedAuc': 0.8419357, 'vehiclesObservedIou': 0.56436175, 'vehiclesOccludedAuc': 0.0019660178, 'vehiclesOccludedIou': 0.0015268812, 'vehiclesFlowEpe': 4.4907, 'vehiclesFlowWarpedOccupancyAuc': 0.7435712, 'vehiclesFlowWarpedOccupancyIou': 0.6819615}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.56440866, 'vehiclesObservedIou': 0.28669617, 'vehiclesOccludedAuc': 0.14798324, 'vehiclesOccludedIou': 0.047282502, 'vehiclesFlowEpe': 11.3326235, 'vehiclesFlowWarpedOccupancyAuc': 0.42272618, 'vehiclesFlowWarpedOccupancyIou': 0.32393187}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.3966702, 'vehiclesObservedIou': 0.16962337, 'vehiclesOccludedAuc': 0.0067174705, 'vehiclesOccludedIou': 0.003116449, 'vehiclesFlowEpe': 5.3496842, 'vehiclesFlowWarpedOccupancyAuc': 0.391923, 'vehiclesFlowWarpedOccupancyIou': 0.1818131}
DataLossError encountered. Skipping the corrupted record.
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.9080349, 'vehiclesObservedIou': 0.6957843, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 1.5992754, 'vehiclesFlowWarpedOccupancyAuc': 0.8535418, 'vehiclesFlowWarpedOccupancyIou': 0.83015823}
2024-05-28 11:08:44.014268: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:08:44.064904: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:08:44.065179: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
Average Time: 0.0012 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6332710616666666, 'vehiclesObservedIou': 0.41616262666666665, 'vehiclesOccludedAuc': 0.034449394883333324, 'vehiclesOccludedIou': 0.011331418116666665, 'vehiclesFlowEpe': 5.3573062333333334, 'vehiclesFlowWarpedOccupancyAuc': 0.5735483466666667, 'vehiclesFlowWarpedOccupancyIou': 0.4763724793333333}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00125new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6877431, 'vehiclesObservedIou': 0.4041233, 'vehiclesOccludedAuc': 0.00093610445, 'vehiclesOccludedIou': 0.0003828909, 'vehiclesFlowEpe': 3.4419665, 'vehiclesFlowWarpedOccupancyAuc': 0.6968452, 'vehiclesFlowWarpedOccupancyIou': 0.45430222}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.23395208, 'vehiclesObservedIou': 0.1221924, 'vehiclesOccludedAuc': 0.00020592705, 'vehiclesOccludedIou': 8.54269e-05, 'vehiclesFlowEpe': 5.1193166, 'vehiclesFlowWarpedOccupancyAuc': 0.31204882, 'vehiclesFlowWarpedOccupancyIou': 0.12046337}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.43754974, 'vehiclesObservedIou': 0.23681165, 'vehiclesOccludedAuc': 0.034014717, 'vehiclesOccludedIou': 0.007107365, 'vehiclesFlowEpe': 2.2872436, 'vehiclesFlowWarpedOccupancyAuc': 0.5532495, 'vehiclesFlowWarpedOccupancyIou': 0.31543115}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.87140155, 'vehiclesObservedIou': 0.4444439, 'vehiclesOccludedAuc': 0.0032177977, 'vehiclesOccludedIou': 0.0003941172, 'vehiclesFlowEpe': 2.4636455, 'vehiclesFlowWarpedOccupancyAuc': 0.69112515, 'vehiclesFlowWarpedOccupancyIou': 0.4291755}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.76559484, 'vehiclesObservedIou': 0.5329041, 'vehiclesOccludedAuc': 0.019235177, 'vehiclesOccludedIou': 0.0043199575, 'vehiclesFlowEpe': 8.685534, 'vehiclesFlowWarpedOccupancyAuc': 0.638982, 'vehiclesFlowWarpedOccupancyIou': 0.59021884}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9173188, 'vehiclesObservedIou': 0.640527, 'vehiclesOccludedAuc': 0.16898379, 'vehiclesOccludedIou': 0.0404124, 'vehiclesFlowEpe': 2.1355686, 'vehiclesFlowWarpedOccupancyAuc': 0.82160854, 'vehiclesFlowWarpedOccupancyIou': 0.73400694}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8967544, 'vehiclesObservedIou': 0.5458844, 'vehiclesOccludedAuc': 0.07518707, 'vehiclesOccludedIou': 0.028217034, 'vehiclesFlowEpe': 2.891315, 'vehiclesFlowWarpedOccupancyAuc': 0.73953474, 'vehiclesFlowWarpedOccupancyIou': 0.5876802}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.38331503, 'vehiclesObservedIou': 0.2271417, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 4.3284655, 'vehiclesFlowWarpedOccupancyAuc': 0.5528477, 'vehiclesFlowWarpedOccupancyIou': 0.29221603}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7633001, 'vehiclesObservedIou': 0.40538353, 'vehiclesOccludedAuc': 0.08830424, 'vehiclesOccludedIou': 0.018084086, 'vehiclesFlowEpe': 5.066911, 'vehiclesFlowWarpedOccupancyAuc': 0.59073883, 'vehiclesFlowWarpedOccupancyIou': 0.44212514}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6697601, 'vehiclesObservedIou': 0.31629232, 'vehiclesOccludedAuc': 0.08230717, 'vehiclesOccludedIou': 0.02118915, 'vehiclesFlowEpe': 8.557657, 'vehiclesFlowWarpedOccupancyAuc': 0.5137308, 'vehiclesFlowWarpedOccupancyIou': 0.33962783}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.85049516, 'vehiclesObservedIou': 0.5656121, 'vehiclesOccludedAuc': 0.027377078, 'vehiclesOccludedIou': 0.013698717, 'vehiclesFlowEpe': 4.490658, 'vehiclesFlowWarpedOccupancyAuc': 0.72751194, 'vehiclesFlowWarpedOccupancyIou': 0.6678291}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.41621223, 'vehiclesObservedIou': 0.21406172, 'vehiclesOccludedAuc': 0.09333136, 'vehiclesOccludedIou': 0.02288629, 'vehiclesFlowEpe': 5.1934433, 'vehiclesFlowWarpedOccupancyAuc': 0.43802786, 'vehiclesFlowWarpedOccupancyIou': 0.27169704}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9161184, 'vehiclesObservedIou': 0.62838, 'vehiclesOccludedAuc': 0.05507902, 'vehiclesOccludedIou': 0.016521396, 'vehiclesFlowEpe': 8.011732, 'vehiclesFlowWarpedOccupancyAuc': 0.55875695, 'vehiclesFlowWarpedOccupancyIou': 0.54835904}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.83699274, 'vehiclesObservedIou': 0.4371845, 'vehiclesOccludedAuc': 0.057061613, 'vehiclesOccludedIou': 0.0060034413, 'vehiclesFlowEpe': 4.717188, 'vehiclesFlowWarpedOccupancyAuc': 0.4894043, 'vehiclesFlowWarpedOccupancyIou': 0.42728025}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.32658583, 'vehiclesObservedIou': 0.10990755, 'vehiclesOccludedAuc': 0.06645545, 'vehiclesOccludedIou': 0.01397666, 'vehiclesFlowEpe': 6.489577, 'vehiclesFlowWarpedOccupancyAuc': 0.28706756, 'vehiclesFlowWarpedOccupancyIou': 0.11274904}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.67607117, 'vehiclesObservedIou': 0.35083178, 'vehiclesOccludedAuc': 0.3149919, 'vehiclesOccludedIou': 0.104026005, 'vehiclesFlowEpe': 2.776152, 'vehiclesFlowWarpedOccupancyAuc': 0.6704264, 'vehiclesFlowWarpedOccupancyIou': 0.47487313}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.61094344, 'vehiclesObservedIou': 0.3185757, 'vehiclesOccludedAuc': 0.048315488, 'vehiclesOccludedIou': 0.019325122, 'vehiclesFlowEpe': 6.4469466, 'vehiclesFlowWarpedOccupancyAuc': 0.5323604, 'vehiclesFlowWarpedOccupancyIou': 0.39107072}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.63245976, 'vehiclesObservedIou': 0.31162858, 'vehiclesOccludedAuc': 0.08604264, 'vehiclesOccludedIou': 0.026992748, 'vehiclesFlowEpe': 7.764764, 'vehiclesFlowWarpedOccupancyAuc': 0.5209519, 'vehiclesFlowWarpedOccupancyIou': 0.40659076}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8545174, 'vehiclesObservedIou': 0.50702524, 'vehiclesOccludedAuc': 0.24622092, 'vehiclesOccludedIou': 0.062157236, 'vehiclesFlowEpe': 2.5959105, 'vehiclesFlowWarpedOccupancyAuc': 0.7495622, 'vehiclesFlowWarpedOccupancyIou': 0.53701407}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8871672, 'vehiclesObservedIou': 0.5532222, 'vehiclesOccludedAuc': 0.005892611, 'vehiclesOccludedIou': 0.0022445624, 'vehiclesFlowEpe': 2.0534966, 'vehiclesFlowWarpedOccupancyAuc': 0.7465905, 'vehiclesFlowWarpedOccupancyIou': 0.628217}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.8524021, 'vehiclesObservedIou': 0.58672184, 'vehiclesOccludedAuc': 0.09467083, 'vehiclesOccludedIou': 0.030430658, 'vehiclesFlowEpe': 4.731086, 'vehiclesFlowWarpedOccupancyAuc': 0.7094446, 'vehiclesFlowWarpedOccupancyIou': 0.647373}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5342415, 'vehiclesObservedIou': 0.29212832, 'vehiclesOccludedAuc': 0.0028822136, 'vehiclesOccludedIou': 0.0010599152, 'vehiclesFlowEpe': 7.445035, 'vehiclesFlowWarpedOccupancyAuc': 0.41848558, 'vehiclesFlowWarpedOccupancyIou': 0.35562208}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.95457476, 'vehiclesObservedIou': 0.7151449, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 4.5820894, 'vehiclesFlowWarpedOccupancyAuc': 0.8090225, 'vehiclesFlowWarpedOccupancyIou': 0.7962852}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.4433688, 'vehiclesObservedIou': 0.17362516, 'vehiclesOccludedAuc': 0.02417179, 'vehiclesOccludedIou': 0.0046126824, 'vehiclesFlowEpe': 2.7459526, 'vehiclesFlowWarpedOccupancyAuc': 0.51504725, 'vehiclesFlowWarpedOccupancyIou': 0.18866953}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.41405976, 'vehiclesObservedIou': 0.21570058, 'vehiclesOccludedAuc': 0.01434285, 'vehiclesOccludedIou': 0.00407148, 'vehiclesFlowEpe': 7.462283, 'vehiclesFlowWarpedOccupancyAuc': 0.26609892, 'vehiclesFlowWarpedOccupancyIou': 0.24004368}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.71301913, 'vehiclesObservedIou': 0.4550146, 'vehiclesOccludedAuc': 0.028787285, 'vehiclesOccludedIou': 0.0021159358, 'vehiclesFlowEpe': 3.7856483, 'vehiclesFlowWarpedOccupancyAuc': 0.62703717, 'vehiclesFlowWarpedOccupancyIou': 0.4963398}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.72007734, 'vehiclesObservedIou': 0.36883992, 'vehiclesOccludedAuc': 0.04182126, 'vehiclesOccludedIou': 0.0139867915, 'vehiclesFlowEpe': 7.5650945, 'vehiclesFlowWarpedOccupancyAuc': 0.5132428, 'vehiclesFlowWarpedOccupancyIou': 0.4501424}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.87766653, 'vehiclesObservedIou': 0.59338254, 'vehiclesOccludedAuc': 0.04559587, 'vehiclesOccludedIou': 0.021462886, 'vehiclesFlowEpe': 2.9903154, 'vehiclesFlowWarpedOccupancyAuc': 0.82801336, 'vehiclesFlowWarpedOccupancyIou': 0.70571333}
Time: 0.0014 seconds, Metrics: {'vehiclesObservedAuc': 0.49957678, 'vehiclesObservedIou': 0.2578447, 'vehiclesOccludedAuc': 0.13482375, 'vehiclesOccludedIou': 0.03509213, 'vehiclesFlowEpe': 4.8987536, 'vehiclesFlowWarpedOccupancyAuc': 0.54861724, 'vehiclesFlowWarpedOccupancyIou': 0.33285978}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.92739046, 'vehiclesObservedIou': 0.61133003, 'vehiclesOccludedAuc': 0.052923672, 'vehiclesOccludedIou': 0.011468568, 'vehiclesFlowEpe': 2.228274, 'vehiclesFlowWarpedOccupancyAuc': 0.7461551, 'vehiclesFlowWarpedOccupancyIou': 0.55176616}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.95457476, 'vehiclesObservedIou': 0.7151449, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 4.5820894, 'vehiclesFlowWarpedOccupancyAuc': 0.8090225, 'vehiclesFlowWarpedOccupancyIou': 0.7962852}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6856876743333334, 'vehiclesObservedIou': 0.40472887533333335, 'vehiclesOccludedAuc': 0.06377265312666666, 'vehiclesOccludedIou': 0.01774418840333333, 'vehiclesFlowEpe': 4.79840077, 'vehiclesFlowWarpedOccupancyAuc': 0.5937511936666666, 'vehiclesFlowWarpedOccupancyIou': 0.451191411}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00090new.tfrecords...
2024-05-28 11:09:02.632508: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:09:02.683000: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:09:02.683275: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9293008, 'vehiclesObservedIou': 0.74264145, 'vehiclesOccludedAuc': 0.03323619, 'vehiclesOccludedIou': 0.008671082, 'vehiclesFlowEpe': 6.6301003, 'vehiclesFlowWarpedOccupancyAuc': 0.756309, 'vehiclesFlowWarpedOccupancyIou': 0.7221142}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7637036, 'vehiclesObservedIou': 0.4243057, 'vehiclesOccludedAuc': 0.00020249002, 'vehiclesOccludedIou': 2.6625994e-05, 'vehiclesFlowEpe': 4.443224, 'vehiclesFlowWarpedOccupancyAuc': 0.62618375, 'vehiclesFlowWarpedOccupancyIou': 0.53902173}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.98839253, 'vehiclesObservedIou': 0.89637744, 'vehiclesOccludedAuc': 0.06947552, 'vehiclesOccludedIou': 0.00840719, 'vehiclesFlowEpe': 5.638176, 'vehiclesFlowWarpedOccupancyAuc': 0.8854453, 'vehiclesFlowWarpedOccupancyIou': 0.9241033}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.92730653, 'vehiclesObservedIou': 0.6381394, 'vehiclesOccludedAuc': 0.0026122648, 'vehiclesOccludedIou': 0.0025428354, 'vehiclesFlowEpe': 1.9481101, 'vehiclesFlowWarpedOccupancyAuc': 0.8429154, 'vehiclesFlowWarpedOccupancyIou': 0.69753414}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8026198, 'vehiclesObservedIou': 0.4957513, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 5.562413, 'vehiclesFlowWarpedOccupancyAuc': 0.7182407, 'vehiclesFlowWarpedOccupancyIou': 0.6023047}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6627246, 'vehiclesObservedIou': 0.33858845, 'vehiclesOccludedAuc': 0.09463231, 'vehiclesOccludedIou': 0.0051370948, 'vehiclesFlowEpe': 7.398739, 'vehiclesFlowWarpedOccupancyAuc': 0.44094568, 'vehiclesFlowWarpedOccupancyIou': 0.37002623}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.58016837, 'vehiclesObservedIou': 0.3889143, 'vehiclesOccludedAuc': 0.35539338, 'vehiclesOccludedIou': 0.04601814, 'vehiclesFlowEpe': 4.1837935, 'vehiclesFlowWarpedOccupancyAuc': 0.6521915, 'vehiclesFlowWarpedOccupancyIou': 0.44755858}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.765467, 'vehiclesObservedIou': 0.3770079, 'vehiclesOccludedAuc': 0.016763125, 'vehiclesOccludedIou': 0.0068744, 'vehiclesFlowEpe': 9.306047, 'vehiclesFlowWarpedOccupancyAuc': 0.40230796, 'vehiclesFlowWarpedOccupancyIou': 0.4105404}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.30937064, 'vehiclesObservedIou': 0.1292181, 'vehiclesOccludedAuc': 0.0009694833, 'vehiclesOccludedIou': 0.00012556744, 'vehiclesFlowEpe': 3.6301513, 'vehiclesFlowWarpedOccupancyAuc': 0.3651994, 'vehiclesFlowWarpedOccupancyIou': 0.12975164}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5554422, 'vehiclesObservedIou': 0.26936617, 'vehiclesOccludedAuc': 0.006823545, 'vehiclesOccludedIou': 0.0032191542, 'vehiclesFlowEpe': 7.8129916, 'vehiclesFlowWarpedOccupancyAuc': 0.34272727, 'vehiclesFlowWarpedOccupancyIou': 0.2896161}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.90562785, 'vehiclesObservedIou': 0.6223545, 'vehiclesOccludedAuc': 0.025909372, 'vehiclesOccludedIou': 0.008683219, 'vehiclesFlowEpe': 7.3723574, 'vehiclesFlowWarpedOccupancyAuc': 0.69758356, 'vehiclesFlowWarpedOccupancyIou': 0.70713377}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.51079255, 'vehiclesObservedIou': 0.2518476, 'vehiclesOccludedAuc': 0.049768917, 'vehiclesOccludedIou': 0.010390252, 'vehiclesFlowEpe': 4.790624, 'vehiclesFlowWarpedOccupancyAuc': 0.55590516, 'vehiclesFlowWarpedOccupancyIou': 0.32201964}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7840833, 'vehiclesObservedIou': 0.5666667, 'vehiclesOccludedAuc': 0.09625538, 'vehiclesOccludedIou': 0.023265965, 'vehiclesFlowEpe': 5.69642, 'vehiclesFlowWarpedOccupancyAuc': 0.6685895, 'vehiclesFlowWarpedOccupancyIou': 0.5818618}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8636955, 'vehiclesObservedIou': 0.5593606, 'vehiclesOccludedAuc': 0.014040032, 'vehiclesOccludedIou': 0.0031941938, 'vehiclesFlowEpe': 2.8821273, 'vehiclesFlowWarpedOccupancyAuc': 0.7351803, 'vehiclesFlowWarpedOccupancyIou': 0.64949447}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8984602, 'vehiclesObservedIou': 0.6469661, 'vehiclesOccludedAuc': 0.21794939, 'vehiclesOccludedIou': 0.01905382, 'vehiclesFlowEpe': 3.769324, 'vehiclesFlowWarpedOccupancyAuc': 0.7874776, 'vehiclesFlowWarpedOccupancyIou': 0.7831153}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8728831, 'vehiclesObservedIou': 0.5599875, 'vehiclesOccludedAuc': 0.007595914, 'vehiclesOccludedIou': 0.0018511352, 'vehiclesFlowEpe': 6.961026, 'vehiclesFlowWarpedOccupancyAuc': 0.6246684, 'vehiclesFlowWarpedOccupancyIou': 0.44791403}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8552394, 'vehiclesObservedIou': 0.440096, 'vehiclesOccludedAuc': 0.316497, 'vehiclesOccludedIou': 0.08149056, 'vehiclesFlowEpe': 3.3205788, 'vehiclesFlowWarpedOccupancyAuc': 0.70463425, 'vehiclesFlowWarpedOccupancyIou': 0.5230691}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.96716905, 'vehiclesObservedIou': 0.760794, 'vehiclesOccludedAuc': 0.00043318357, 'vehiclesOccludedIou': 0.00010417663, 'vehiclesFlowEpe': 3.3533008, 'vehiclesFlowWarpedOccupancyAuc': 0.8640026, 'vehiclesFlowWarpedOccupancyIou': 0.8290274}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9128301, 'vehiclesObservedIou': 0.6505048, 'vehiclesOccludedAuc': 0.026381135, 'vehiclesOccludedIou': 0.007707738, 'vehiclesFlowEpe': 4.9978113, 'vehiclesFlowWarpedOccupancyAuc': 0.7416237, 'vehiclesFlowWarpedOccupancyIou': 0.6860614}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.12340567, 'vehiclesObservedIou': 0.059724405, 'vehiclesOccludedAuc': 0.023429452, 'vehiclesOccludedIou': 0.0069485013, 'vehiclesFlowEpe': 7.1737247, 'vehiclesFlowWarpedOccupancyAuc': 0.17039315, 'vehiclesFlowWarpedOccupancyIou': 0.05173863}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.21177886, 'vehiclesObservedIou': 0.15323658, 'vehiclesOccludedAuc': 0.00018768955, 'vehiclesOccludedIou': 0.00014632783, 'vehiclesFlowEpe': 6.638504, 'vehiclesFlowWarpedOccupancyAuc': 0.3732221, 'vehiclesFlowWarpedOccupancyIou': 0.18059409}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.754533, 'vehiclesObservedIou': 0.36001888, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 5.4298797, 'vehiclesFlowWarpedOccupancyAuc': 0.5796094, 'vehiclesFlowWarpedOccupancyIou': 0.47350097}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.86418426, 'vehiclesObservedIou': 0.5229239, 'vehiclesOccludedAuc': 0.06561854, 'vehiclesOccludedIou': 0.013512287, 'vehiclesFlowEpe': 3.3820293, 'vehiclesFlowWarpedOccupancyAuc': 0.68195534, 'vehiclesFlowWarpedOccupancyIou': 0.576192}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7502829, 'vehiclesObservedIou': 0.32392383, 'vehiclesOccludedAuc': 0.24669357, 'vehiclesOccludedIou': 0.03547436, 'vehiclesFlowEpe': 4.1127477, 'vehiclesFlowWarpedOccupancyAuc': 0.57484907, 'vehiclesFlowWarpedOccupancyIou': 0.448174}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7856893, 'vehiclesObservedIou': 0.48692656, 'vehiclesOccludedAuc': 0.21084379, 'vehiclesOccludedIou': 0.052824657, 'vehiclesFlowEpe': 4.063271, 'vehiclesFlowWarpedOccupancyAuc': 0.7553679, 'vehiclesFlowWarpedOccupancyIou': 0.5662626}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.822413, 'vehiclesObservedIou': 0.56325, 'vehiclesOccludedAuc': 0.27959722, 'vehiclesOccludedIou': 0.083634205, 'vehiclesFlowEpe': 2.8159125, 'vehiclesFlowWarpedOccupancyAuc': 0.8060515, 'vehiclesFlowWarpedOccupancyIou': 0.6957973}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.08879586, 'vehiclesObservedIou': 0.04776569, 'vehiclesOccludedAuc': 0.036617428, 'vehiclesOccludedIou': 0.003423775, 'vehiclesFlowEpe': 4.195628, 'vehiclesFlowWarpedOccupancyAuc': 0.25368884, 'vehiclesFlowWarpedOccupancyIou': 0.060931955}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.3831156, 'vehiclesObservedIou': 0.17146225, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 6.162729, 'vehiclesFlowWarpedOccupancyAuc': 0.38719347, 'vehiclesFlowWarpedOccupancyIou': 0.2258427}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.87477314, 'vehiclesObservedIou': 0.5979009, 'vehiclesOccludedAuc': 0.06018985, 'vehiclesOccludedIou': 0.020978749, 'vehiclesFlowEpe': 4.41551, 'vehiclesFlowWarpedOccupancyAuc': 0.77667236, 'vehiclesFlowWarpedOccupancyIou': 0.7315722}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.83814436, 'vehiclesObservedIou': 0.46735427, 'vehiclesOccludedAuc': 0.019401278, 'vehiclesOccludedIou': 0.007481426, 'vehiclesFlowEpe': 2.0055268, 'vehiclesFlowWarpedOccupancyAuc': 0.7001682, 'vehiclesFlowWarpedOccupancyIou': 0.47685152}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.19098191, 'vehiclesObservedIou': 0.12320746, 'vehiclesOccludedAuc': 0.009453734, 'vehiclesOccludedIou': 0.0033917513, 'vehiclesFlowEpe': 6.341926, 'vehiclesFlowWarpedOccupancyAuc': 0.14947194, 'vehiclesFlowWarpedOccupancyIou': 0.13311}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.78842944, 'vehiclesObservedIou': 0.42348725, 'vehiclesOccludedAuc': 0.65327203, 'vehiclesOccludedIou': 0.05779985, 'vehiclesFlowEpe': 4.050866, 'vehiclesFlowWarpedOccupancyAuc': 0.7088339, 'vehiclesFlowWarpedOccupancyIou': 0.5877074}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.710109, 'vehiclesObservedIou': 0.4072198, 'vehiclesOccludedAuc': 0.001016161, 'vehiclesOccludedIou': 0.00069113146, 'vehiclesFlowEpe': 5.5939617, 'vehiclesFlowWarpedOccupancyAuc': 0.51337063, 'vehiclesFlowWarpedOccupancyIou': 0.4714951}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.28679398, 'vehiclesObservedIou': 0.13487394, 'vehiclesOccludedAuc': 0.06613189, 'vehiclesOccludedIou': 0.009995688, 'vehiclesFlowEpe': 4.676342, 'vehiclesFlowWarpedOccupancyAuc': 0.39003715, 'vehiclesFlowWarpedOccupancyIou': 0.12629654}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.3033668, 'vehiclesObservedIou': 0.15959738, 'vehiclesOccludedAuc': 0.06949241, 'vehiclesOccludedIou': 0.020446641, 'vehiclesFlowEpe': 5.9260225, 'vehiclesFlowWarpedOccupancyAuc': 0.36551514, 'vehiclesFlowWarpedOccupancyIou': 0.14782529}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.92138517, 'vehiclesObservedIou': 0.6516779, 'vehiclesOccludedAuc': 0.02463668, 'vehiclesOccludedIou': 0.013495506, 'vehiclesFlowEpe': 3.482585, 'vehiclesFlowWarpedOccupancyAuc': 0.7970659, 'vehiclesFlowWarpedOccupancyIou': 0.7014008}
2024-05-28 11:09:25.767013: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:09:25.821252: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:09:25.821541: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.40257055, 'vehiclesObservedIou': 0.21978718, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.963553, 'vehiclesFlowWarpedOccupancyAuc': 0.34023654, 'vehiclesFlowWarpedOccupancyIou': 0.2823372}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.98839253, 'vehiclesObservedIou': 0.89637744, 'vehiclesOccludedAuc': 0.06947552, 'vehiclesOccludedIou': 0.00840719, 'vehiclesFlowEpe': 5.638176, 'vehiclesFlowWarpedOccupancyAuc': 0.8854453, 'vehiclesFlowWarpedOccupancyIou': 0.9241033}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6744872951351351, 'vehiclesObservedIou': 0.42251962662162157, 'vehiclesOccludedAuc': 0.08382487443891891, 'vehiclesOccludedIou': 0.015324540685243245, 'vehiclesFlowEpe': 4.949406332432432, 'vehiclesFlowWarpedOccupancyAuc': 0.5874549610810812, 'vehiclesFlowWarpedOccupancyIou': 0.4756729249999999}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00063new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.4867526, 'vehiclesObservedIou': 0.20325397, 'vehiclesOccludedAuc': 0.004602587, 'vehiclesOccludedIou': 0.002337418, 'vehiclesFlowEpe': 4.4105473, 'vehiclesFlowWarpedOccupancyAuc': 0.49012035, 'vehiclesFlowWarpedOccupancyIou': 0.26172382}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.6586917, 'vehiclesObservedIou': 0.34329563, 'vehiclesOccludedAuc': 0.121427976, 'vehiclesOccludedIou': 0.025974894, 'vehiclesFlowEpe': 3.2393138, 'vehiclesFlowWarpedOccupancyAuc': 0.63906515, 'vehiclesFlowWarpedOccupancyIou': 0.35041538}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9423574, 'vehiclesObservedIou': 0.76368207, 'vehiclesOccludedAuc': 0.031089334, 'vehiclesOccludedIou': 0.007237737, 'vehiclesFlowEpe': 5.4388876, 'vehiclesFlowWarpedOccupancyAuc': 0.7600065, 'vehiclesFlowWarpedOccupancyIou': 0.76128733}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8343445, 'vehiclesObservedIou': 0.50161177, 'vehiclesOccludedAuc': 0.10465042, 'vehiclesOccludedIou': 0.025207255, 'vehiclesFlowEpe': 6.3410435, 'vehiclesFlowWarpedOccupancyAuc': 0.59526056, 'vehiclesFlowWarpedOccupancyIou': 0.60903627}
Time: 0.0016 seconds, Metrics: {'vehiclesObservedAuc': 0.24952191, 'vehiclesObservedIou': 0.1298396, 'vehiclesOccludedAuc': 0.0025875887, 'vehiclesOccludedIou': 0.00040459912, 'vehiclesFlowEpe': 5.4337764, 'vehiclesFlowWarpedOccupancyAuc': 0.30339998, 'vehiclesFlowWarpedOccupancyIou': 0.13084993}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9024018, 'vehiclesObservedIou': 0.6974467, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.189961, 'vehiclesFlowWarpedOccupancyAuc': 0.8439485, 'vehiclesFlowWarpedOccupancyIou': 0.7726767}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.5467671, 'vehiclesObservedIou': 0.27951884, 'vehiclesOccludedAuc': 0.030633733, 'vehiclesOccludedIou': 0.004908071, 'vehiclesFlowEpe': 10.535106, 'vehiclesFlowWarpedOccupancyAuc': 0.37996897, 'vehiclesFlowWarpedOccupancyIou': 0.34496945}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.68932855, 'vehiclesObservedIou': 0.4864687, 'vehiclesOccludedAuc': 0.31953394, 'vehiclesOccludedIou': 0.06868846, 'vehiclesFlowEpe': 6.80959, 'vehiclesFlowWarpedOccupancyAuc': 0.7225499, 'vehiclesFlowWarpedOccupancyIou': 0.52656555}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9142422, 'vehiclesObservedIou': 0.73608744, 'vehiclesOccludedAuc': 0.018501282, 'vehiclesOccludedIou': 0.010745787, 'vehiclesFlowEpe': 1.6900957, 'vehiclesFlowWarpedOccupancyAuc': 0.8724028, 'vehiclesFlowWarpedOccupancyIou': 0.815354}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.4817052, 'vehiclesObservedIou': 0.18458603, 'vehiclesOccludedAuc': 0.022893775, 'vehiclesOccludedIou': 0.006941423, 'vehiclesFlowEpe': 5.49545, 'vehiclesFlowWarpedOccupancyAuc': 0.38147053, 'vehiclesFlowWarpedOccupancyIou': 0.26278242}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9054763, 'vehiclesObservedIou': 0.5901526, 'vehiclesOccludedAuc': 0.021096757, 'vehiclesOccludedIou': 0.011436052, 'vehiclesFlowEpe': 3.6975434, 'vehiclesFlowWarpedOccupancyAuc': 0.8144189, 'vehiclesFlowWarpedOccupancyIou': 0.65066504}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.5843171, 'vehiclesObservedIou': 0.3361312, 'vehiclesOccludedAuc': 0.048065703, 'vehiclesOccludedIou': 0.01754044, 'vehiclesFlowEpe': 5.7151213, 'vehiclesFlowWarpedOccupancyAuc': 0.5003077, 'vehiclesFlowWarpedOccupancyIou': 0.34335294}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.5709888, 'vehiclesObservedIou': 0.316925, 'vehiclesOccludedAuc': 0.057511546, 'vehiclesOccludedIou': 0.010309675, 'vehiclesFlowEpe': 5.559964, 'vehiclesFlowWarpedOccupancyAuc': 0.48952162, 'vehiclesFlowWarpedOccupancyIou': 0.3598635}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.35642648, 'vehiclesObservedIou': 0.22085603, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 4.491198, 'vehiclesFlowWarpedOccupancyAuc': 0.504052, 'vehiclesFlowWarpedOccupancyIou': 0.29379538}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.22907954, 'vehiclesObservedIou': 0.12513496, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 6.329652, 'vehiclesFlowWarpedOccupancyAuc': 0.1740008, 'vehiclesFlowWarpedOccupancyIou': 0.12768768}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.25445625, 'vehiclesObservedIou': 0.12720591, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 7.6243334, 'vehiclesFlowWarpedOccupancyAuc': 0.2792893, 'vehiclesFlowWarpedOccupancyIou': 0.15041721}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7919187, 'vehiclesObservedIou': 0.5565769, 'vehiclesOccludedAuc': 0.061351333, 'vehiclesOccludedIou': 0.013745705, 'vehiclesFlowEpe': 6.3779116, 'vehiclesFlowWarpedOccupancyAuc': 0.65599614, 'vehiclesFlowWarpedOccupancyIou': 0.5980887}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.7712693, 'vehiclesObservedIou': 0.42945004, 'vehiclesOccludedAuc': 0.22447021, 'vehiclesOccludedIou': 0.029684639, 'vehiclesFlowEpe': 3.048959, 'vehiclesFlowWarpedOccupancyAuc': 0.7141077, 'vehiclesFlowWarpedOccupancyIou': 0.49770528}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5332021, 'vehiclesObservedIou': 0.26971757, 'vehiclesOccludedAuc': 0.2658501, 'vehiclesOccludedIou': 0.043509673, 'vehiclesFlowEpe': 5.6957893, 'vehiclesFlowWarpedOccupancyAuc': 0.41269517, 'vehiclesFlowWarpedOccupancyIou': 0.3786354}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5494082, 'vehiclesObservedIou': 0.29342166, 'vehiclesOccludedAuc': 0.08447037, 'vehiclesOccludedIou': 0.02601759, 'vehiclesFlowEpe': 7.2263203, 'vehiclesFlowWarpedOccupancyAuc': 0.5006454, 'vehiclesFlowWarpedOccupancyIou': 0.4040387}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9233866, 'vehiclesObservedIou': 0.6115209, 'vehiclesOccludedAuc': 0.0027066367, 'vehiclesOccludedIou': 0.0015367211, 'vehiclesFlowEpe': 4.3062515, 'vehiclesFlowWarpedOccupancyAuc': 0.7655303, 'vehiclesFlowWarpedOccupancyIou': 0.7098018}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9269625, 'vehiclesObservedIou': 0.645787, 'vehiclesOccludedAuc': 0.020357642, 'vehiclesOccludedIou': 0.0052990494, 'vehiclesFlowEpe': 2.9165967, 'vehiclesFlowWarpedOccupancyAuc': 0.8206795, 'vehiclesFlowWarpedOccupancyIou': 0.7492813}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.85391, 'vehiclesObservedIou': 0.47988862, 'vehiclesOccludedAuc': 0.045796774, 'vehiclesOccludedIou': 0.009090281, 'vehiclesFlowEpe': 8.087537, 'vehiclesFlowWarpedOccupancyAuc': 0.70818096, 'vehiclesFlowWarpedOccupancyIou': 0.5808068}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.30134237, 'vehiclesObservedIou': 0.13749333, 'vehiclesOccludedAuc': 0.025867388, 'vehiclesOccludedIou': 0.0083117075, 'vehiclesFlowEpe': 8.122365, 'vehiclesFlowWarpedOccupancyAuc': 0.30574733, 'vehiclesFlowWarpedOccupancyIou': 0.13378389}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8057103, 'vehiclesObservedIou': 0.47861022, 'vehiclesOccludedAuc': 0.14971161, 'vehiclesOccludedIou': 0.04208109, 'vehiclesFlowEpe': 3.822611, 'vehiclesFlowWarpedOccupancyAuc': 0.69471836, 'vehiclesFlowWarpedOccupancyIou': 0.5901232}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.3475571, 'vehiclesObservedIou': 0.16411105, 'vehiclesOccludedAuc': 0.14029638, 'vehiclesOccludedIou': 0.03477552, 'vehiclesFlowEpe': 2.5946486, 'vehiclesFlowWarpedOccupancyAuc': 0.5385502, 'vehiclesFlowWarpedOccupancyIou': 0.18008646}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7778611, 'vehiclesObservedIou': 0.39923045, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 5.147462, 'vehiclesFlowWarpedOccupancyAuc': 0.6061193, 'vehiclesFlowWarpedOccupancyIou': 0.5377636}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9960676, 'vehiclesObservedIou': 0.91516453, 'vehiclesOccludedAuc': 0.059640855, 'vehiclesOccludedIou': 0.011056719, 'vehiclesFlowEpe': 3.2594109, 'vehiclesFlowWarpedOccupancyAuc': 0.88819075, 'vehiclesFlowWarpedOccupancyIou': 0.936997}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.25276452, 'vehiclesObservedIou': 0.10909057, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.2866025, 'vehiclesFlowWarpedOccupancyAuc': 0.23635532, 'vehiclesFlowWarpedOccupancyIou': 0.15203033}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.23273273, 'vehiclesObservedIou': 0.12122466, 'vehiclesOccludedAuc': 0.04088278, 'vehiclesOccludedIou': 0.008182792, 'vehiclesFlowEpe': 9.181876, 'vehiclesFlowWarpedOccupancyAuc': 0.25292656, 'vehiclesFlowWarpedOccupancyIou': 0.15511863}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8085037, 'vehiclesObservedIou': 0.5077746, 'vehiclesOccludedAuc': 0.04926146, 'vehiclesOccludedIou': 0.014263956, 'vehiclesFlowEpe': 2.8176394, 'vehiclesFlowWarpedOccupancyAuc': 0.7180547, 'vehiclesFlowWarpedOccupancyIou': 0.5807903}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9582912, 'vehiclesObservedIou': 0.68855053, 'vehiclesOccludedAuc': 0.034427088, 'vehiclesOccludedIou': 0.009026742, 'vehiclesFlowEpe': 1.7660341, 'vehiclesFlowWarpedOccupancyAuc': 0.85257673, 'vehiclesFlowWarpedOccupancyIou': 0.72525597}
2024-05-28 11:09:48.795693: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:09:48.846983: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:09:48.847279: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.19109039, 'vehiclesObservedIou': 0.06411611, 'vehiclesOccludedAuc': 0.047880948, 'vehiclesOccludedIou': 0.015944414, 'vehiclesFlowEpe': 4.9152207, 'vehiclesFlowWarpedOccupancyAuc': 0.33184835, 'vehiclesFlowWarpedOccupancyIou': 0.07013635}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7355853, 'vehiclesObservedIou': 0.4424702, 'vehiclesOccludedAuc': 0.11000376, 'vehiclesOccludedIou': 0.049237847, 'vehiclesFlowEpe': 3.520373, 'vehiclesFlowWarpedOccupancyAuc': 0.687442, 'vehiclesFlowWarpedOccupancyIou': 0.5412668}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.66243374, 'vehiclesObservedIou': 0.3179129, 'vehiclesOccludedAuc': 0.02526706, 'vehiclesOccludedIou': 0.008013405, 'vehiclesFlowEpe': 3.3676243, 'vehiclesFlowWarpedOccupancyAuc': 0.6432401, 'vehiclesFlowWarpedOccupancyIou': 0.39895585}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8913436, 'vehiclesObservedIou': 0.5661339, 'vehiclesOccludedAuc': 0.0053728996, 'vehiclesOccludedIou': 0.0019285516, 'vehiclesFlowEpe': 7.1353827, 'vehiclesFlowWarpedOccupancyAuc': 0.671013, 'vehiclesFlowWarpedOccupancyIou': 0.62308925}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.9960676, 'vehiclesObservedIou': 0.91516453, 'vehiclesOccludedAuc': 0.059640855, 'vehiclesOccludedIou': 0.011056719, 'vehiclesFlowEpe': 3.2594109, 'vehiclesFlowWarpedOccupancyAuc': 0.88819075, 'vehiclesFlowWarpedOccupancyIou': 0.936997}
Average Time: 0.0012 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6366166244444444, 'vehiclesObservedIou': 0.39556783861111117, 'vehiclesOccludedAuc': 0.060450276000000004, 'vehiclesOccludedIou': 0.014539950381111114, 'vehiclesFlowEpe': 5.072172194444445, 'vehiclesFlowWarpedOccupancyAuc': 0.5765111508333334, 'vehiclesFlowWarpedOccupancyIou': 0.4529221725}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00081new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.75391227, 'vehiclesObservedIou': 0.43859848, 'vehiclesOccludedAuc': 0.084447905, 'vehiclesOccludedIou': 0.021056782, 'vehiclesFlowEpe': 4.4306192, 'vehiclesFlowWarpedOccupancyAuc': 0.657805, 'vehiclesFlowWarpedOccupancyIou': 0.49289343}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8333369, 'vehiclesObservedIou': 0.44749764, 'vehiclesOccludedAuc': 0.0010384236, 'vehiclesOccludedIou': 0.000653942, 'vehiclesFlowEpe': 3.314137, 'vehiclesFlowWarpedOccupancyAuc': 0.56512874, 'vehiclesFlowWarpedOccupancyIou': 0.5037852}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.77103007, 'vehiclesObservedIou': 0.42712802, 'vehiclesOccludedAuc': 0.042563785, 'vehiclesOccludedIou': 0.011472039, 'vehiclesFlowEpe': 9.035473, 'vehiclesFlowWarpedOccupancyAuc': 0.53742677, 'vehiclesFlowWarpedOccupancyIou': 0.47410646}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.80153006, 'vehiclesObservedIou': 0.51378536, 'vehiclesOccludedAuc': 0.2924178, 'vehiclesOccludedIou': 0.0701536, 'vehiclesFlowEpe': 5.6825476, 'vehiclesFlowWarpedOccupancyAuc': 0.6895764, 'vehiclesFlowWarpedOccupancyIou': 0.5806001}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.896429, 'vehiclesObservedIou': 0.6342262, 'vehiclesOccludedAuc': 0.05220661, 'vehiclesOccludedIou': 0.0058365995, 'vehiclesFlowEpe': 2.9111521, 'vehiclesFlowWarpedOccupancyAuc': 0.803754, 'vehiclesFlowWarpedOccupancyIou': 0.7476568}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.21181753, 'vehiclesObservedIou': 0.09682806, 'vehiclesOccludedAuc': 0.040036745, 'vehiclesOccludedIou': 0.012612702, 'vehiclesFlowEpe': 5.958432, 'vehiclesFlowWarpedOccupancyAuc': 0.3497284, 'vehiclesFlowWarpedOccupancyIou': 0.10168868}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9267413, 'vehiclesObservedIou': 0.6536774, 'vehiclesOccludedAuc': 0.011170967, 'vehiclesOccludedIou': 0.0053008203, 'vehiclesFlowEpe': 2.9551027, 'vehiclesFlowWarpedOccupancyAuc': 0.80572236, 'vehiclesFlowWarpedOccupancyIou': 0.74033594}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.86984605, 'vehiclesObservedIou': 0.53837484, 'vehiclesOccludedAuc': 0.22892062, 'vehiclesOccludedIou': 0.050318763, 'vehiclesFlowEpe': 6.867963, 'vehiclesFlowWarpedOccupancyAuc': 0.7403476, 'vehiclesFlowWarpedOccupancyIou': 0.63114375}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9413324, 'vehiclesObservedIou': 0.6420527, 'vehiclesOccludedAuc': 0.0042276317, 'vehiclesOccludedIou': 0.0051645148, 'vehiclesFlowEpe': 3.747054, 'vehiclesFlowWarpedOccupancyAuc': 0.80098414, 'vehiclesFlowWarpedOccupancyIou': 0.7521946}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6849782, 'vehiclesObservedIou': 0.29894948, 'vehiclesOccludedAuc': 0.12541257, 'vehiclesOccludedIou': 0.03447396, 'vehiclesFlowEpe': 3.5832598, 'vehiclesFlowWarpedOccupancyAuc': 0.54376096, 'vehiclesFlowWarpedOccupancyIou': 0.36908448}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.80773675, 'vehiclesObservedIou': 0.43842983, 'vehiclesOccludedAuc': 0.022460261, 'vehiclesOccludedIou': 0.007513579, 'vehiclesFlowEpe': 7.0978384, 'vehiclesFlowWarpedOccupancyAuc': 0.5919656, 'vehiclesFlowWarpedOccupancyIou': 0.5004508}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7073561, 'vehiclesObservedIou': 0.40403056, 'vehiclesOccludedAuc': 0.00023120671, 'vehiclesOccludedIou': 0.00013210191, 'vehiclesFlowEpe': 8.601927, 'vehiclesFlowWarpedOccupancyAuc': 0.5016192, 'vehiclesFlowWarpedOccupancyIou': 0.52423185}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.492216, 'vehiclesObservedIou': 0.25916147, 'vehiclesOccludedAuc': 0.08417134, 'vehiclesOccludedIou': 0.032029904, 'vehiclesFlowEpe': 4.572099, 'vehiclesFlowWarpedOccupancyAuc': 0.56395787, 'vehiclesFlowWarpedOccupancyIou': 0.37213877}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.84173703, 'vehiclesObservedIou': 0.5044246, 'vehiclesOccludedAuc': 0.0050424603, 'vehiclesOccludedIou': 0.0036494096, 'vehiclesFlowEpe': 3.3998237, 'vehiclesFlowWarpedOccupancyAuc': 0.69611657, 'vehiclesFlowWarpedOccupancyIou': 0.60729367}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7611242, 'vehiclesObservedIou': 0.4362361, 'vehiclesOccludedAuc': 0.44110692, 'vehiclesOccludedIou': 0.09523744, 'vehiclesFlowEpe': 3.2663326, 'vehiclesFlowWarpedOccupancyAuc': 0.6600124, 'vehiclesFlowWarpedOccupancyIou': 0.4954616}
Time: 0.0016 seconds, Metrics: {'vehiclesObservedAuc': 0.43168718, 'vehiclesObservedIou': 0.22608452, 'vehiclesOccludedAuc': 0.028325006, 'vehiclesOccludedIou': 0.004554798, 'vehiclesFlowEpe': 28.406956, 'vehiclesFlowWarpedOccupancyAuc': 0.3432545, 'vehiclesFlowWarpedOccupancyIou': 0.34319612}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.57307804, 'vehiclesObservedIou': 0.34697768, 'vehiclesOccludedAuc': 0.010324777, 'vehiclesOccludedIou': 0.0036099143, 'vehiclesFlowEpe': 5.236124, 'vehiclesFlowWarpedOccupancyAuc': 0.5925149, 'vehiclesFlowWarpedOccupancyIou': 0.35677755}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.85062736, 'vehiclesObservedIou': 0.5869138, 'vehiclesOccludedAuc': 0.0020504785, 'vehiclesOccludedIou': 0.00025471766, 'vehiclesFlowEpe': 1.536707, 'vehiclesFlowWarpedOccupancyAuc': 0.83262056, 'vehiclesFlowWarpedOccupancyIou': 0.6354373}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8681661, 'vehiclesObservedIou': 0.7041806, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.4518955, 'vehiclesFlowWarpedOccupancyAuc': 0.85486406, 'vehiclesFlowWarpedOccupancyIou': 0.84694827}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.8419576, 'vehiclesObservedIou': 0.50567114, 'vehiclesOccludedAuc': 0.04497558, 'vehiclesOccludedIou': 0.009118391, 'vehiclesFlowEpe': 2.60604, 'vehiclesFlowWarpedOccupancyAuc': 0.6239476, 'vehiclesFlowWarpedOccupancyIou': 0.4504128}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.47738144, 'vehiclesObservedIou': 0.23336151, 'vehiclesOccludedAuc': 0.03891135, 'vehiclesOccludedIou': 0.013719353, 'vehiclesFlowEpe': 4.909112, 'vehiclesFlowWarpedOccupancyAuc': 0.44888276, 'vehiclesFlowWarpedOccupancyIou': 0.27094123}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8613398, 'vehiclesObservedIou': 0.6304717, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 4.275713, 'vehiclesFlowWarpedOccupancyAuc': 0.7913155, 'vehiclesFlowWarpedOccupancyIou': 0.7433317}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.5926386, 'vehiclesObservedIou': 0.37493867, 'vehiclesOccludedAuc': 0.00048367973, 'vehiclesOccludedIou': 0.00037010238, 'vehiclesFlowEpe': 4.8175864, 'vehiclesFlowWarpedOccupancyAuc': 0.5860327, 'vehiclesFlowWarpedOccupancyIou': 0.41814563}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.45282882, 'vehiclesObservedIou': 0.26066673, 'vehiclesOccludedAuc': 0.032730255, 'vehiclesOccludedIou': 0.0063742567, 'vehiclesFlowEpe': 4.410456, 'vehiclesFlowWarpedOccupancyAuc': 0.5107384, 'vehiclesFlowWarpedOccupancyIou': 0.28913704}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.28754967, 'vehiclesObservedIou': 0.13545586, 'vehiclesOccludedAuc': 0.009719534, 'vehiclesOccludedIou': 0.0043661343, 'vehiclesFlowEpe': 9.0038, 'vehiclesFlowWarpedOccupancyAuc': 0.23597199, 'vehiclesFlowWarpedOccupancyIou': 0.16941959}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5838077, 'vehiclesObservedIou': 0.25609845, 'vehiclesOccludedAuc': 0.026487764, 'vehiclesOccludedIou': 0.0076165767, 'vehiclesFlowEpe': 5.90109, 'vehiclesFlowWarpedOccupancyAuc': 0.46739477, 'vehiclesFlowWarpedOccupancyIou': 0.30773172}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.4633023, 'vehiclesObservedIou': 0.2636438, 'vehiclesOccludedAuc': 0.1039508, 'vehiclesOccludedIou': 0.015553907, 'vehiclesFlowEpe': 4.970699, 'vehiclesFlowWarpedOccupancyAuc': 0.5089505, 'vehiclesFlowWarpedOccupancyIou': 0.24625604}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.72526383, 'vehiclesObservedIou': 0.41711977, 'vehiclesOccludedAuc': 0.283193, 'vehiclesOccludedIou': 0.042124998, 'vehiclesFlowEpe': 4.467867, 'vehiclesFlowWarpedOccupancyAuc': 0.6199254, 'vehiclesFlowWarpedOccupancyIou': 0.49807492}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8730046, 'vehiclesObservedIou': 0.54381114, 'vehiclesOccludedAuc': 0.07042384, 'vehiclesOccludedIou': 0.033151954, 'vehiclesFlowEpe': 6.6476603, 'vehiclesFlowWarpedOccupancyAuc': 0.6501955, 'vehiclesFlowWarpedOccupancyIou': 0.61177063}
2024-05-28 11:10:11.294866: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:10:11.346351: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:10:11.346631: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.80775034, 'vehiclesObservedIou': 0.48032135, 'vehiclesOccludedAuc': 0.23626307, 'vehiclesOccludedIou': 0.040248495, 'vehiclesFlowEpe': 7.037746, 'vehiclesFlowWarpedOccupancyAuc': 0.7416152, 'vehiclesFlowWarpedOccupancyIou': 0.5495982}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8188991, 'vehiclesObservedIou': 0.5467036, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 6.9460993, 'vehiclesFlowWarpedOccupancyAuc': 0.74585664, 'vehiclesFlowWarpedOccupancyIou': 0.67405784}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8498889, 'vehiclesObservedIou': 0.68159, 'vehiclesOccludedAuc': 0.02258937, 'vehiclesOccludedIou': 0.006975946, 'vehiclesFlowEpe': 4.738253, 'vehiclesFlowWarpedOccupancyAuc': 0.8353849, 'vehiclesFlowWarpedOccupancyIou': 0.8008097}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.87603, 'vehiclesObservedIou': 0.62356824, 'vehiclesOccludedAuc': 0.021588419, 'vehiclesOccludedIou': 0.013895914, 'vehiclesFlowEpe': 4.25913, 'vehiclesFlowWarpedOccupancyAuc': 0.83758175, 'vehiclesFlowWarpedOccupancyIou': 0.7569405}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.40052375, 'vehiclesObservedIou': 0.22616921, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.2002816, 'vehiclesFlowWarpedOccupancyAuc': 0.60732996, 'vehiclesFlowWarpedOccupancyIou': 0.28672898}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.73009646, 'vehiclesObservedIou': 0.35553524, 'vehiclesOccludedAuc': 0.050285578, 'vehiclesOccludedIou': 0.010878604, 'vehiclesFlowEpe': 4.0417485, 'vehiclesFlowWarpedOccupancyAuc': 0.556281, 'vehiclesFlowWarpedOccupancyIou': 0.42587194}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.9413324, 'vehiclesObservedIou': 0.6420527, 'vehiclesOccludedAuc': 0.0042276317, 'vehiclesOccludedIou': 0.0051645148, 'vehiclesFlowEpe': 3.747054, 'vehiclesFlowWarpedOccupancyAuc': 0.80098414, 'vehiclesFlowWarpedOccupancyIou': 0.7521946}
Average Time: 0.0012 seconds, Average Metrics: {'vehiclesObservedAuc': 0.7047698700000001, 'vehiclesObservedIou': 0.4323623928571429, 'vehiclesOccludedAuc': 0.06907879275828571, 'vehiclesOccludedIou': 0.016240577689999997, 'vehiclesFlowEpe': 5.608249305714286, 'vehiclesFlowWarpedOccupancyAuc': 0.6256732742857143, 'vehiclesFlowWarpedOccupancyIou': 0.5021329665714286}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00079new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.18621966, 'vehiclesObservedIou': 0.12239215, 'vehiclesOccludedAuc': 0.0010923987, 'vehiclesOccludedIou': 0.0011831254, 'vehiclesFlowEpe': 4.104795, 'vehiclesFlowWarpedOccupancyAuc': 0.46388242, 'vehiclesFlowWarpedOccupancyIou': 0.15593751}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8521006, 'vehiclesObservedIou': 0.55920833, 'vehiclesOccludedAuc': 0.081042685, 'vehiclesOccludedIou': 0.027679192, 'vehiclesFlowEpe': 5.42347, 'vehiclesFlowWarpedOccupancyAuc': 0.71744365, 'vehiclesFlowWarpedOccupancyIou': 0.6205758}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.87930506, 'vehiclesObservedIou': 0.66620266, 'vehiclesOccludedAuc': 0.18981957, 'vehiclesOccludedIou': 0.04446423, 'vehiclesFlowEpe': 3.2266338, 'vehiclesFlowWarpedOccupancyAuc': 0.8135201, 'vehiclesFlowWarpedOccupancyIou': 0.7159161}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5190171, 'vehiclesObservedIou': 0.27859867, 'vehiclesOccludedAuc': 0.1383143, 'vehiclesOccludedIou': 0.020266814, 'vehiclesFlowEpe': 4.6413364, 'vehiclesFlowWarpedOccupancyAuc': 0.56688815, 'vehiclesFlowWarpedOccupancyIou': 0.28180414}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.2988256, 'vehiclesObservedIou': 0.12283038, 'vehiclesOccludedAuc': 0.00089485, 'vehiclesOccludedIou': 0.00058697327, 'vehiclesFlowEpe': 3.5325801, 'vehiclesFlowWarpedOccupancyAuc': 0.3557563, 'vehiclesFlowWarpedOccupancyIou': 0.16397184}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.81123495, 'vehiclesObservedIou': 0.5403085, 'vehiclesOccludedAuc': 0.025507212, 'vehiclesOccludedIou': 0.0056878217, 'vehiclesFlowEpe': 3.290767, 'vehiclesFlowWarpedOccupancyAuc': 0.7037683, 'vehiclesFlowWarpedOccupancyIou': 0.6433768}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.13335353, 'vehiclesObservedIou': 0.07223971, 'vehiclesOccludedAuc': 0.012786206, 'vehiclesOccludedIou': 0.0010390132, 'vehiclesFlowEpe': 2.360784, 'vehiclesFlowWarpedOccupancyAuc': 0.22599232, 'vehiclesFlowWarpedOccupancyIou': 0.09282213}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.54738885, 'vehiclesObservedIou': 0.3288284, 'vehiclesOccludedAuc': 0.04614359, 'vehiclesOccludedIou': 0.015570971, 'vehiclesFlowEpe': 5.711794, 'vehiclesFlowWarpedOccupancyAuc': 0.52319443, 'vehiclesFlowWarpedOccupancyIou': 0.41941205}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7996459, 'vehiclesObservedIou': 0.5277362, 'vehiclesOccludedAuc': 0.49597037, 'vehiclesOccludedIou': 0.09707494, 'vehiclesFlowEpe': 10.382508, 'vehiclesFlowWarpedOccupancyAuc': 0.7322895, 'vehiclesFlowWarpedOccupancyIou': 0.6879166}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.50515115, 'vehiclesObservedIou': 0.28393283, 'vehiclesOccludedAuc': 0.00070748973, 'vehiclesOccludedIou': 0.00079571566, 'vehiclesFlowEpe': 7.9081736, 'vehiclesFlowWarpedOccupancyAuc': 0.49463832, 'vehiclesFlowWarpedOccupancyIou': 0.3712789}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9575522, 'vehiclesObservedIou': 0.6917695, 'vehiclesOccludedAuc': 0.0036598425, 'vehiclesOccludedIou': 0.0018448934, 'vehiclesFlowEpe': 9.778156, 'vehiclesFlowWarpedOccupancyAuc': 0.76449066, 'vehiclesFlowWarpedOccupancyIou': 0.72202486}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.1570354, 'vehiclesObservedIou': 0.064352416, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 7.2015505, 'vehiclesFlowWarpedOccupancyAuc': 0.132656, 'vehiclesFlowWarpedOccupancyIou': 0.056519534}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.5726893, 'vehiclesObservedIou': 0.30317464, 'vehiclesOccludedAuc': 0.006620913, 'vehiclesOccludedIou': 0.0026032317, 'vehiclesFlowEpe': 6.0437, 'vehiclesFlowWarpedOccupancyAuc': 0.47582915, 'vehiclesFlowWarpedOccupancyIou': 0.36169788}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7603248, 'vehiclesObservedIou': 0.46966648, 'vehiclesOccludedAuc': 0.32726002, 'vehiclesOccludedIou': 0.053675517, 'vehiclesFlowEpe': 2.7048938, 'vehiclesFlowWarpedOccupancyAuc': 0.6963914, 'vehiclesFlowWarpedOccupancyIou': 0.5494841}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.31381434, 'vehiclesObservedIou': 0.18203285, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 6.3127236, 'vehiclesFlowWarpedOccupancyAuc': 0.4141551, 'vehiclesFlowWarpedOccupancyIou': 0.21565694}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.86777925, 'vehiclesObservedIou': 0.59542143, 'vehiclesOccludedAuc': 0.17104088, 'vehiclesOccludedIou': 0.03555925, 'vehiclesFlowEpe': 2.5670955, 'vehiclesFlowWarpedOccupancyAuc': 0.8279071, 'vehiclesFlowWarpedOccupancyIou': 0.6860838}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.50389946, 'vehiclesObservedIou': 0.25904223, 'vehiclesOccludedAuc': 0.11805854, 'vehiclesOccludedIou': 0.023187531, 'vehiclesFlowEpe': 5.0162697, 'vehiclesFlowWarpedOccupancyAuc': 0.5062269, 'vehiclesFlowWarpedOccupancyIou': 0.28903773}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.71212566, 'vehiclesObservedIou': 0.43566, 'vehiclesOccludedAuc': 0.09335181, 'vehiclesOccludedIou': 0.022588288, 'vehiclesFlowEpe': 5.025192, 'vehiclesFlowWarpedOccupancyAuc': 0.7081862, 'vehiclesFlowWarpedOccupancyIou': 0.54442394}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.62613827, 'vehiclesObservedIou': 0.307411, 'vehiclesOccludedAuc': 0.13883807, 'vehiclesOccludedIou': 0.022291066, 'vehiclesFlowEpe': 3.369819, 'vehiclesFlowWarpedOccupancyAuc': 0.4968367, 'vehiclesFlowWarpedOccupancyIou': 0.30792657}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5242749, 'vehiclesObservedIou': 0.32021856, 'vehiclesOccludedAuc': 0.03101848, 'vehiclesOccludedIou': 0.01099071, 'vehiclesFlowEpe': 3.2611053, 'vehiclesFlowWarpedOccupancyAuc': 0.5954884, 'vehiclesFlowWarpedOccupancyIou': 0.38618612}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7992289, 'vehiclesObservedIou': 0.46044114, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.8212888, 'vehiclesFlowWarpedOccupancyAuc': 0.61928266, 'vehiclesFlowWarpedOccupancyIou': 0.5769452}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.661241, 'vehiclesObservedIou': 0.31868714, 'vehiclesOccludedAuc': 0.14888273, 'vehiclesOccludedIou': 0.031034343, 'vehiclesFlowEpe': 3.5420227, 'vehiclesFlowWarpedOccupancyAuc': 0.6317888, 'vehiclesFlowWarpedOccupancyIou': 0.39833614}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.88417697, 'vehiclesObservedIou': 0.5698872, 'vehiclesOccludedAuc': 0.034104284, 'vehiclesOccludedIou': 0.009651337, 'vehiclesFlowEpe': 4.594777, 'vehiclesFlowWarpedOccupancyAuc': 0.7309369, 'vehiclesFlowWarpedOccupancyIou': 0.6328361}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7164653, 'vehiclesObservedIou': 0.35246834, 'vehiclesOccludedAuc': 0.039728485, 'vehiclesOccludedIou': 0.01266076, 'vehiclesFlowEpe': 3.0015357, 'vehiclesFlowWarpedOccupancyAuc': 0.52601177, 'vehiclesFlowWarpedOccupancyIou': 0.3571065}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.82797575, 'vehiclesObservedIou': 0.5454019, 'vehiclesOccludedAuc': 0.08711374, 'vehiclesOccludedIou': 0.024861377, 'vehiclesFlowEpe': 3.2600887, 'vehiclesFlowWarpedOccupancyAuc': 0.66411865, 'vehiclesFlowWarpedOccupancyIou': 0.5730886}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.66867465, 'vehiclesObservedIou': 0.3479871, 'vehiclesOccludedAuc': 0.0008532753, 'vehiclesOccludedIou': 0.00033312372, 'vehiclesFlowEpe': 5.1124673, 'vehiclesFlowWarpedOccupancyAuc': 0.5906663, 'vehiclesFlowWarpedOccupancyIou': 0.3965533}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9359309, 'vehiclesObservedIou': 0.68203175, 'vehiclesOccludedAuc': 0.007741292, 'vehiclesOccludedIou': 0.0026792684, 'vehiclesFlowEpe': 5.082497, 'vehiclesFlowWarpedOccupancyAuc': 0.7590448, 'vehiclesFlowWarpedOccupancyIou': 0.7234957}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8686204, 'vehiclesObservedIou': 0.51695436, 'vehiclesOccludedAuc': 0.07640926, 'vehiclesOccludedIou': 0.011098617, 'vehiclesFlowEpe': 4.2481146, 'vehiclesFlowWarpedOccupancyAuc': 0.6901209, 'vehiclesFlowWarpedOccupancyIou': 0.58059996}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7539387, 'vehiclesObservedIou': 0.47310793, 'vehiclesOccludedAuc': 0.03522585, 'vehiclesOccludedIou': 0.016780727, 'vehiclesFlowEpe': 4.265248, 'vehiclesFlowWarpedOccupancyAuc': 0.68440115, 'vehiclesFlowWarpedOccupancyIou': 0.54577553}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9020394, 'vehiclesObservedIou': 0.83579135, 'vehiclesOccludedAuc': 0.16183758, 'vehiclesOccludedIou': 0.044328712, 'vehiclesFlowEpe': 1.7289852, 'vehiclesFlowWarpedOccupancyAuc': 0.92555183, 'vehiclesFlowWarpedOccupancyIou': 0.91721904}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7503792, 'vehiclesObservedIou': 0.41218168, 'vehiclesOccludedAuc': 0.098318696, 'vehiclesOccludedIou': 0.02792664, 'vehiclesFlowEpe': 3.666938, 'vehiclesFlowWarpedOccupancyAuc': 0.67921925, 'vehiclesFlowWarpedOccupancyIou': 0.51629996}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.532356, 'vehiclesObservedIou': 0.2446417, 'vehiclesOccludedAuc': 0.016177196, 'vehiclesOccludedIou': 0.0054424433, 'vehiclesFlowEpe': 5.6163535, 'vehiclesFlowWarpedOccupancyAuc': 0.41531876, 'vehiclesFlowWarpedOccupancyIou': 0.28807566}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.71802586, 'vehiclesObservedIou': 0.41416174, 'vehiclesOccludedAuc': 0.54207677, 'vehiclesOccludedIou': 0.10244831, 'vehiclesFlowEpe': 5.40215, 'vehiclesFlowWarpedOccupancyAuc': 0.6948626, 'vehiclesFlowWarpedOccupancyIou': 0.597312}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.9575522, 'vehiclesObservedIou': 0.6917695, 'vehiclesOccludedAuc': 0.0036598425, 'vehiclesOccludedIou': 0.0018448934, 'vehiclesFlowEpe': 9.778156, 'vehiclesFlowWarpedOccupancyAuc': 0.76449066, 'vehiclesFlowWarpedOccupancyIou': 0.72202486}
Average Time: 0.0012 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6529372427272728, 'vehiclesObservedIou': 0.40317485654545454, 'vehiclesOccludedAuc': 0.09486655712818182, 'vehiclesOccludedIou': 0.020494998234848485, 'vehiclesFlowEpe': 4.703206478787879, 'vehiclesFlowWarpedOccupancyAuc': 0.6008141051515152, 'vehiclesFlowWarpedOccupancyIou': 0.46593021315151517}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00111new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 11:10:32.903340: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:10:32.955640: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:10:32.955927: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.94658566, 'vehiclesObservedIou': 0.6478285, 'vehiclesOccludedAuc': 0.004007359, 'vehiclesOccludedIou': 2.2513825e-05, 'vehiclesFlowEpe': 1.9799831, 'vehiclesFlowWarpedOccupancyAuc': 0.8059641, 'vehiclesFlowWarpedOccupancyIou': 0.65817744}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.5731784, 'vehiclesObservedIou': 0.32118648, 'vehiclesOccludedAuc': 0.00022695656, 'vehiclesOccludedIou': 0.00026617743, 'vehiclesFlowEpe': 2.1241527, 'vehiclesFlowWarpedOccupancyAuc': 0.5518631, 'vehiclesFlowWarpedOccupancyIou': 0.4119473}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.29237494, 'vehiclesObservedIou': 0.10420704, 'vehiclesOccludedAuc': 0.026229251, 'vehiclesOccludedIou': 0.006120933, 'vehiclesFlowEpe': 4.662087, 'vehiclesFlowWarpedOccupancyAuc': 0.30862784, 'vehiclesFlowWarpedOccupancyIou': 0.12418408}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.48229367, 'vehiclesObservedIou': 0.17543188, 'vehiclesOccludedAuc': 0.043626145, 'vehiclesOccludedIou': 0.01150899, 'vehiclesFlowEpe': 7.511453, 'vehiclesFlowWarpedOccupancyAuc': 0.30956435, 'vehiclesFlowWarpedOccupancyIou': 0.1809964}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.114985265, 'vehiclesObservedIou': 0.057186343, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 5.556967, 'vehiclesFlowWarpedOccupancyAuc': 0.27370602, 'vehiclesFlowWarpedOccupancyIou': 0.065344}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8111631, 'vehiclesObservedIou': 0.5485046, 'vehiclesOccludedAuc': 0.116486005, 'vehiclesOccludedIou': 0.036746405, 'vehiclesFlowEpe': 2.46896, 'vehiclesFlowWarpedOccupancyAuc': 0.75565654, 'vehiclesFlowWarpedOccupancyIou': 0.6327362}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6564878, 'vehiclesObservedIou': 0.3587169, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 4.458234, 'vehiclesFlowWarpedOccupancyAuc': 0.58908445, 'vehiclesFlowWarpedOccupancyIou': 0.49815997}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8147434, 'vehiclesObservedIou': 0.6180885, 'vehiclesOccludedAuc': 0.017094066, 'vehiclesOccludedIou': 0.004001755, 'vehiclesFlowEpe': 5.4625626, 'vehiclesFlowWarpedOccupancyAuc': 0.7769466, 'vehiclesFlowWarpedOccupancyIou': 0.7572835}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9360861, 'vehiclesObservedIou': 0.67383236, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 1.9986871, 'vehiclesFlowWarpedOccupancyAuc': 0.82782805, 'vehiclesFlowWarpedOccupancyIou': 0.7665976}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.592698, 'vehiclesObservedIou': 0.44753695, 'vehiclesOccludedAuc': 0.30643955, 'vehiclesOccludedIou': 0.051337983, 'vehiclesFlowEpe': 5.844615, 'vehiclesFlowWarpedOccupancyAuc': 0.71622247, 'vehiclesFlowWarpedOccupancyIou': 0.5656085}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8176186, 'vehiclesObservedIou': 0.4977721, 'vehiclesOccludedAuc': 0.04395859, 'vehiclesOccludedIou': 0.012515044, 'vehiclesFlowEpe': 4.0565166, 'vehiclesFlowWarpedOccupancyAuc': 0.6847881, 'vehiclesFlowWarpedOccupancyIou': 0.5838175}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7124813, 'vehiclesObservedIou': 0.33489856, 'vehiclesOccludedAuc': 0.015908595, 'vehiclesOccludedIou': 0.005494657, 'vehiclesFlowEpe': 7.947673, 'vehiclesFlowWarpedOccupancyAuc': 0.48600867, 'vehiclesFlowWarpedOccupancyIou': 0.37334463}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9215313, 'vehiclesObservedIou': 0.8139844, 'vehiclesOccludedAuc': 0.09417176, 'vehiclesOccludedIou': 0.018845344, 'vehiclesFlowEpe': 5.910991, 'vehiclesFlowWarpedOccupancyAuc': 0.86726964, 'vehiclesFlowWarpedOccupancyIou': 0.88895637}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9118773, 'vehiclesObservedIou': 0.64059854, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.4310663, 'vehiclesFlowWarpedOccupancyAuc': 0.79736483, 'vehiclesFlowWarpedOccupancyIou': 0.7406887}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.32218927, 'vehiclesObservedIou': 0.15174668, 'vehiclesOccludedAuc': 0.0068145897, 'vehiclesOccludedIou': 0.002999342, 'vehiclesFlowEpe': 2.7576895, 'vehiclesFlowWarpedOccupancyAuc': 0.4982789, 'vehiclesFlowWarpedOccupancyIou': 0.16961917}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.70538074, 'vehiclesObservedIou': 0.41515002, 'vehiclesOccludedAuc': 0.09925369, 'vehiclesOccludedIou': 0.011697985, 'vehiclesFlowEpe': 4.2046094, 'vehiclesFlowWarpedOccupancyAuc': 0.5935442, 'vehiclesFlowWarpedOccupancyIou': 0.47114673}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8245371, 'vehiclesObservedIou': 0.47363523, 'vehiclesOccludedAuc': 0.019146554, 'vehiclesOccludedIou': 0.0046265954, 'vehiclesFlowEpe': 3.7153833, 'vehiclesFlowWarpedOccupancyAuc': 0.66477454, 'vehiclesFlowWarpedOccupancyIou': 0.46802092}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9085157, 'vehiclesObservedIou': 0.59080344, 'vehiclesOccludedAuc': 0.42370558, 'vehiclesOccludedIou': 0.063107595, 'vehiclesFlowEpe': 2.6512833, 'vehiclesFlowWarpedOccupancyAuc': 0.83373487, 'vehiclesFlowWarpedOccupancyIou': 0.7571212}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8591241, 'vehiclesObservedIou': 0.53893185, 'vehiclesOccludedAuc': 0.023625223, 'vehiclesOccludedIou': 0.0074993786, 'vehiclesFlowEpe': 3.1880054, 'vehiclesFlowWarpedOccupancyAuc': 0.7317718, 'vehiclesFlowWarpedOccupancyIou': 0.58392483}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.32414368, 'vehiclesObservedIou': 0.1569226, 'vehiclesOccludedAuc': 0.01377038, 'vehiclesOccludedIou': 0.0057392963, 'vehiclesFlowEpe': 6.5157166, 'vehiclesFlowWarpedOccupancyAuc': 0.2920551, 'vehiclesFlowWarpedOccupancyIou': 0.19876787}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.70777166, 'vehiclesObservedIou': 0.44348454, 'vehiclesOccludedAuc': 0.1913685, 'vehiclesOccludedIou': 0.025575856, 'vehiclesFlowEpe': 5.245938, 'vehiclesFlowWarpedOccupancyAuc': 0.59231806, 'vehiclesFlowWarpedOccupancyIou': 0.53116894}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.41004935, 'vehiclesObservedIou': 0.23096439, 'vehiclesOccludedAuc': 0.031014502, 'vehiclesOccludedIou': 0.004839193, 'vehiclesFlowEpe': 4.0843353, 'vehiclesFlowWarpedOccupancyAuc': 0.4765659, 'vehiclesFlowWarpedOccupancyIou': 0.2531032}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.791733, 'vehiclesObservedIou': 0.45580816, 'vehiclesOccludedAuc': 0.0055251895, 'vehiclesOccludedIou': 0.0017916812, 'vehiclesFlowEpe': 7.717594, 'vehiclesFlowWarpedOccupancyAuc': 0.5597371, 'vehiclesFlowWarpedOccupancyIou': 0.52730465}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.62856936, 'vehiclesObservedIou': 0.2710894, 'vehiclesOccludedAuc': 0.03454404, 'vehiclesOccludedIou': 0.0086044585, 'vehiclesFlowEpe': 4.8597608, 'vehiclesFlowWarpedOccupancyAuc': 0.5155311, 'vehiclesFlowWarpedOccupancyIou': 0.29251024}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.4195189, 'vehiclesObservedIou': 0.18416886, 'vehiclesOccludedAuc': 0.0032524387, 'vehiclesOccludedIou': 0.0008977571, 'vehiclesFlowEpe': 7.553022, 'vehiclesFlowWarpedOccupancyAuc': 0.271124, 'vehiclesFlowWarpedOccupancyIou': 0.17243549}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.47821224, 'vehiclesObservedIou': 0.2299906, 'vehiclesOccludedAuc': 0.08979518, 'vehiclesOccludedIou': 0.021141667, 'vehiclesFlowEpe': 3.7667594, 'vehiclesFlowWarpedOccupancyAuc': 0.50077844, 'vehiclesFlowWarpedOccupancyIou': 0.28638512}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.94658566, 'vehiclesObservedIou': 0.6478285, 'vehiclesOccludedAuc': 0.004007359, 'vehiclesOccludedIou': 2.2513825e-05, 'vehiclesFlowEpe': 1.9799831, 'vehiclesFlowWarpedOccupancyAuc': 0.8059641, 'vehiclesFlowWarpedOccupancyIou': 0.65817744}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6524557667307693, 'vehiclesObservedIou': 0.3993257278076924, 'vehiclesOccludedAuc': 0.06192169786384616, 'vehiclesOccludedIou': 0.011745407975192308, 'vehiclesFlowEpe': 4.564386361538461, 'vehiclesFlowWarpedOccupancyAuc': 0.5877349526923077, 'vehiclesFlowWarpedOccupancyIou': 0.45997502115384614}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00078new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 11:10:49.665885: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:10:49.717573: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:10:49.717855: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0016 seconds, Metrics: {'vehiclesObservedAuc': 0.73828614, 'vehiclesObservedIou': 0.35599193, 'vehiclesOccludedAuc': 0.08887539, 'vehiclesOccludedIou': 0.010038942, 'vehiclesFlowEpe': 3.0160623, 'vehiclesFlowWarpedOccupancyAuc': 0.62041944, 'vehiclesFlowWarpedOccupancyIou': 0.3888764}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8110243, 'vehiclesObservedIou': 0.51005983, 'vehiclesOccludedAuc': 0.8712424, 'vehiclesOccludedIou': 0.072736986, 'vehiclesFlowEpe': 4.964422, 'vehiclesFlowWarpedOccupancyAuc': 0.6901041, 'vehiclesFlowWarpedOccupancyIou': 0.67132396}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5236374, 'vehiclesObservedIou': 0.30496782, 'vehiclesOccludedAuc': 0.026808042, 'vehiclesOccludedIou': 0.0061296676, 'vehiclesFlowEpe': 2.775322, 'vehiclesFlowWarpedOccupancyAuc': 0.58851784, 'vehiclesFlowWarpedOccupancyIou': 0.35196847}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.48629126, 'vehiclesObservedIou': 0.22355764, 'vehiclesOccludedAuc': 0.10311383, 'vehiclesOccludedIou': 0.010127446, 'vehiclesFlowEpe': 3.9103773, 'vehiclesFlowWarpedOccupancyAuc': 0.4953184, 'vehiclesFlowWarpedOccupancyIou': 0.24530941}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.17898476, 'vehiclesObservedIou': 0.0808175, 'vehiclesOccludedAuc': 0.0027536154, 'vehiclesOccludedIou': 0.001538857, 'vehiclesFlowEpe': 4.813143, 'vehiclesFlowWarpedOccupancyAuc': 0.26916042, 'vehiclesFlowWarpedOccupancyIou': 0.07517581}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.916771, 'vehiclesObservedIou': 0.7130176, 'vehiclesOccludedAuc': 0.024923265, 'vehiclesOccludedIou': 0.011063792, 'vehiclesFlowEpe': 2.2345824, 'vehiclesFlowWarpedOccupancyAuc': 0.8268807, 'vehiclesFlowWarpedOccupancyIou': 0.77796155}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8965975, 'vehiclesObservedIou': 0.5947312, 'vehiclesOccludedAuc': 0.09129836, 'vehiclesOccludedIou': 0.0471683, 'vehiclesFlowEpe': 8.353294, 'vehiclesFlowWarpedOccupancyAuc': 0.7227848, 'vehiclesFlowWarpedOccupancyIou': 0.6224626}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.3721726, 'vehiclesObservedIou': 0.16671872, 'vehiclesOccludedAuc': 0.004938275, 'vehiclesOccludedIou': 0.0018954033, 'vehiclesFlowEpe': 3.8542802, 'vehiclesFlowWarpedOccupancyAuc': 0.4323392, 'vehiclesFlowWarpedOccupancyIou': 0.11237479}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.89433324, 'vehiclesObservedIou': 0.59738344, 'vehiclesOccludedAuc': 0.039902385, 'vehiclesOccludedIou': 0.008605448, 'vehiclesFlowEpe': 3.2848995, 'vehiclesFlowWarpedOccupancyAuc': 0.76488215, 'vehiclesFlowWarpedOccupancyIou': 0.7064425}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.7812942, 'vehiclesObservedIou': 0.42878026, 'vehiclesOccludedAuc': 0.38064444, 'vehiclesOccludedIou': 0.08140115, 'vehiclesFlowEpe': 7.7415066, 'vehiclesFlowWarpedOccupancyAuc': 0.62232965, 'vehiclesFlowWarpedOccupancyIou': 0.528862}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9542654, 'vehiclesObservedIou': 0.67844546, 'vehiclesOccludedAuc': 0.008321593, 'vehiclesOccludedIou': 0.0049715624, 'vehiclesFlowEpe': 3.4506576, 'vehiclesFlowWarpedOccupancyAuc': 0.83528334, 'vehiclesFlowWarpedOccupancyIou': 0.7657957}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.56567514, 'vehiclesObservedIou': 0.24223521, 'vehiclesOccludedAuc': 0.0019706546, 'vehiclesOccludedIou': 0.001173397, 'vehiclesFlowEpe': 8.104048, 'vehiclesFlowWarpedOccupancyAuc': 0.44583797, 'vehiclesFlowWarpedOccupancyIou': 0.36630857}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.15000126, 'vehiclesObservedIou': 0.062454365, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.7461402, 'vehiclesFlowWarpedOccupancyAuc': 0.1822185, 'vehiclesFlowWarpedOccupancyIou': 0.07044126}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.6948022, 'vehiclesObservedIou': 0.38770482, 'vehiclesOccludedAuc': 0.25236756, 'vehiclesOccludedIou': 0.057136994, 'vehiclesFlowEpe': 2.842276, 'vehiclesFlowWarpedOccupancyAuc': 0.6481224, 'vehiclesFlowWarpedOccupancyIou': 0.42052457}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.99129367, 'vehiclesObservedIou': 0.85228974, 'vehiclesOccludedAuc': 0.010061935, 'vehiclesOccludedIou': 0.0025646298, 'vehiclesFlowEpe': 2.5094354, 'vehiclesFlowWarpedOccupancyAuc': 0.8988224, 'vehiclesFlowWarpedOccupancyIou': 0.908586}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.6168096, 'vehiclesObservedIou': 0.33125702, 'vehiclesOccludedAuc': 0.1416918, 'vehiclesOccludedIou': 0.014164762, 'vehiclesFlowEpe': 4.8420954, 'vehiclesFlowWarpedOccupancyAuc': 0.5603391, 'vehiclesFlowWarpedOccupancyIou': 0.3713785}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.1219454, 'vehiclesObservedIou': 0.0614671, 'vehiclesOccludedAuc': 0.0034461715, 'vehiclesOccludedIou': 0.0017814593, 'vehiclesFlowEpe': 8.571465, 'vehiclesFlowWarpedOccupancyAuc': 0.0973002, 'vehiclesFlowWarpedOccupancyIou': 0.04982918}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.78867066, 'vehiclesObservedIou': 0.4825209, 'vehiclesOccludedAuc': 0.36326143, 'vehiclesOccludedIou': 0.082657665, 'vehiclesFlowEpe': 4.043143, 'vehiclesFlowWarpedOccupancyAuc': 0.74296826, 'vehiclesFlowWarpedOccupancyIou': 0.6136122}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.86614037, 'vehiclesObservedIou': 0.6228634, 'vehiclesOccludedAuc': 0.13712217, 'vehiclesOccludedIou': 0.03592444, 'vehiclesFlowEpe': 4.9665647, 'vehiclesFlowWarpedOccupancyAuc': 0.83059055, 'vehiclesFlowWarpedOccupancyIou': 0.7129663}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.47591642, 'vehiclesObservedIou': 0.34985206, 'vehiclesOccludedAuc': 0.21206598, 'vehiclesOccludedIou': 0.054022934, 'vehiclesFlowEpe': 5.439209, 'vehiclesFlowWarpedOccupancyAuc': 0.6442045, 'vehiclesFlowWarpedOccupancyIou': 0.41727865}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.63848037, 'vehiclesObservedIou': 0.32477567, 'vehiclesOccludedAuc': 0.123975396, 'vehiclesOccludedIou': 0.03508945, 'vehiclesFlowEpe': 2.6506388, 'vehiclesFlowWarpedOccupancyAuc': 0.6382716, 'vehiclesFlowWarpedOccupancyIou': 0.36814007}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6431984, 'vehiclesObservedIou': 0.34206977, 'vehiclesOccludedAuc': 0.28553116, 'vehiclesOccludedIou': 0.07261741, 'vehiclesFlowEpe': 6.0034914, 'vehiclesFlowWarpedOccupancyAuc': 0.55683994, 'vehiclesFlowWarpedOccupancyIou': 0.4633277}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7164717, 'vehiclesObservedIou': 0.42207143, 'vehiclesOccludedAuc': 0.25827402, 'vehiclesOccludedIou': 0.048225738, 'vehiclesFlowEpe': 4.6773906, 'vehiclesFlowWarpedOccupancyAuc': 0.57325387, 'vehiclesFlowWarpedOccupancyIou': 0.43028763}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.55695844, 'vehiclesObservedIou': 0.33302313, 'vehiclesOccludedAuc': 0.0026356047, 'vehiclesOccludedIou': 0.0005426129, 'vehiclesFlowEpe': 2.8300123, 'vehiclesFlowWarpedOccupancyAuc': 0.58704674, 'vehiclesFlowWarpedOccupancyIou': 0.3169629}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9516821, 'vehiclesObservedIou': 0.72340643, 'vehiclesOccludedAuc': 0.0474231, 'vehiclesOccludedIou': 0.009864697, 'vehiclesFlowEpe': 3.191799, 'vehiclesFlowWarpedOccupancyAuc': 0.8612719, 'vehiclesFlowWarpedOccupancyIou': 0.76746744}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7619616, 'vehiclesObservedIou': 0.5573722, 'vehiclesOccludedAuc': 0.04774455, 'vehiclesOccludedIou': 0.010384232, 'vehiclesFlowEpe': 4.222214, 'vehiclesFlowWarpedOccupancyAuc': 0.76946914, 'vehiclesFlowWarpedOccupancyIou': 0.70784336}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.6315303, 'vehiclesObservedIou': 0.31915614, 'vehiclesOccludedAuc': 0.0021871598, 'vehiclesOccludedIou': 0.0011159492, 'vehiclesFlowEpe': 3.823833, 'vehiclesFlowWarpedOccupancyAuc': 0.642149, 'vehiclesFlowWarpedOccupancyIou': 0.3987053}
Time: 0.0014 seconds, Metrics: {'vehiclesObservedAuc': 0.123885974, 'vehiclesObservedIou': 0.052412983, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 5.3423605, 'vehiclesFlowWarpedOccupancyAuc': 0.18700899, 'vehiclesFlowWarpedOccupancyIou': 0.053844575}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9977959, 'vehiclesObservedIou': 0.94827557, 'vehiclesOccludedAuc': 0.32829562, 'vehiclesOccludedIou': 0.022309067, 'vehiclesFlowEpe': 2.5838518, 'vehiclesFlowWarpedOccupancyAuc': 0.9343096, 'vehiclesFlowWarpedOccupancyIou': 0.96477014}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.81385905, 'vehiclesObservedIou': 0.5048999, 'vehiclesOccludedAuc': 0.0027236925, 'vehiclesOccludedIou': 0.0011873355, 'vehiclesFlowEpe': 6.623912, 'vehiclesFlowWarpedOccupancyAuc': 0.6075315, 'vehiclesFlowWarpedOccupancyIou': 0.56064034}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5852045, 'vehiclesObservedIou': 0.28101346, 'vehiclesOccludedAuc': 0.415801, 'vehiclesOccludedIou': 0.047095668, 'vehiclesFlowEpe': 4.4659534, 'vehiclesFlowWarpedOccupancyAuc': 0.5992751, 'vehiclesFlowWarpedOccupancyIou': 0.34579325}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7753555, 'vehiclesObservedIou': 0.4522424, 'vehiclesOccludedAuc': 0.06365598, 'vehiclesOccludedIou': 0.026813967, 'vehiclesFlowEpe': 5.135138, 'vehiclesFlowWarpedOccupancyAuc': 0.7210994, 'vehiclesFlowWarpedOccupancyIou': 0.4989596}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.9977959, 'vehiclesObservedIou': 0.94827557, 'vehiclesOccludedAuc': 0.32829562, 'vehiclesOccludedIou': 0.022309067, 'vehiclesFlowEpe': 2.5838518, 'vehiclesFlowWarpedOccupancyAuc': 0.9343096, 'vehiclesFlowWarpedOccupancyIou': 0.96477014}
Average Time: 0.0012 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6569155110625, 'vehiclesObservedIou': 0.4158698468125, 'vehiclesOccludedAuc': 0.135720518109375, 'vehiclesOccludedIou': 0.024385936312500002, 'vehiclesFlowEpe': 4.50042245, 'vehiclesFlowWarpedOccupancyAuc': 0.612373459375, 'vehiclesFlowWarpedOccupancyIou': 0.47044439765625}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00068new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 11:11:10.442853: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:11:10.494015: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:11:10.494298: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0014 seconds, Metrics: {'vehiclesObservedAuc': 0.9797524, 'vehiclesObservedIou': 0.8549696, 'vehiclesOccludedAuc': 0.15844683, 'vehiclesOccludedIou': 0.026218124, 'vehiclesFlowEpe': 3.345667, 'vehiclesFlowWarpedOccupancyAuc': 0.902097, 'vehiclesFlowWarpedOccupancyIou': 0.90828526}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.80620533, 'vehiclesObservedIou': 0.44121823, 'vehiclesOccludedAuc': 0.0067073833, 'vehiclesOccludedIou': 0.0033447505, 'vehiclesFlowEpe': 4.1557045, 'vehiclesFlowWarpedOccupancyAuc': 0.6074333, 'vehiclesFlowWarpedOccupancyIou': 0.51710343}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.03684916, 'vehiclesObservedIou': 0.011198507, 'vehiclesOccludedAuc': 0.038793035, 'vehiclesOccludedIou': 0.0048577595, 'vehiclesFlowEpe': 3.5602672, 'vehiclesFlowWarpedOccupancyAuc': 0.10365903, 'vehiclesFlowWarpedOccupancyIou': 0.008293686}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7910512, 'vehiclesObservedIou': 0.30592892, 'vehiclesOccludedAuc': 0.7443621, 'vehiclesOccludedIou': 0.133251, 'vehiclesFlowEpe': 1.6825701, 'vehiclesFlowWarpedOccupancyAuc': 0.7551824, 'vehiclesFlowWarpedOccupancyIou': 0.43051836}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9311262, 'vehiclesObservedIou': 0.60032237, 'vehiclesOccludedAuc': 0.0047462434, 'vehiclesOccludedIou': 0.002262617, 'vehiclesFlowEpe': 2.5990295, 'vehiclesFlowWarpedOccupancyAuc': 0.7612353, 'vehiclesFlowWarpedOccupancyIou': 0.6648143}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.91590846, 'vehiclesObservedIou': 0.7657312, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 0.89850974, 'vehiclesFlowWarpedOccupancyAuc': 0.91705763, 'vehiclesFlowWarpedOccupancyIou': 0.83089364}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8997475, 'vehiclesObservedIou': 0.5822581, 'vehiclesOccludedAuc': 0.08771311, 'vehiclesOccludedIou': 0.026851155, 'vehiclesFlowEpe': 11.368516, 'vehiclesFlowWarpedOccupancyAuc': 0.49141663, 'vehiclesFlowWarpedOccupancyIou': 0.5868725}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.75076526, 'vehiclesObservedIou': 0.4798266, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 4.3177357, 'vehiclesFlowWarpedOccupancyAuc': 0.5937322, 'vehiclesFlowWarpedOccupancyIou': 0.4994011}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7816321, 'vehiclesObservedIou': 0.43648002, 'vehiclesOccludedAuc': 0.2680245, 'vehiclesOccludedIou': 0.041704934, 'vehiclesFlowEpe': 3.5032127, 'vehiclesFlowWarpedOccupancyAuc': 0.6287062, 'vehiclesFlowWarpedOccupancyIou': 0.5237674}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.69870484, 'vehiclesObservedIou': 0.37340906, 'vehiclesOccludedAuc': 0.38148457, 'vehiclesOccludedIou': 0.08536756, 'vehiclesFlowEpe': 3.2480423, 'vehiclesFlowWarpedOccupancyAuc': 0.64689106, 'vehiclesFlowWarpedOccupancyIou': 0.4042753}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.882473, 'vehiclesObservedIou': 0.55773526, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.4720387, 'vehiclesFlowWarpedOccupancyAuc': 0.7741559, 'vehiclesFlowWarpedOccupancyIou': 0.67158014}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6593013, 'vehiclesObservedIou': 0.29432526, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 5.3605757, 'vehiclesFlowWarpedOccupancyAuc': 0.5448046, 'vehiclesFlowWarpedOccupancyIou': 0.3964134}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9398795, 'vehiclesObservedIou': 0.6773331, 'vehiclesOccludedAuc': 0.06219705, 'vehiclesOccludedIou': 0.020624245, 'vehiclesFlowEpe': 5.7666636, 'vehiclesFlowWarpedOccupancyAuc': 0.783188, 'vehiclesFlowWarpedOccupancyIou': 0.7648054}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.97556144, 'vehiclesObservedIou': 0.7985247, 'vehiclesOccludedAuc': 0.051350582, 'vehiclesOccludedIou': 0.017263835, 'vehiclesFlowEpe': 2.1435227, 'vehiclesFlowWarpedOccupancyAuc': 0.8795762, 'vehiclesFlowWarpedOccupancyIou': 0.85784686}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.47517484, 'vehiclesObservedIou': 0.23505747, 'vehiclesOccludedAuc': 0.019814137, 'vehiclesOccludedIou': 0.0046023047, 'vehiclesFlowEpe': 4.451535, 'vehiclesFlowWarpedOccupancyAuc': 0.3968877, 'vehiclesFlowWarpedOccupancyIou': 0.3166575}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5555647, 'vehiclesObservedIou': 0.25533304, 'vehiclesOccludedAuc': 0.065596044, 'vehiclesOccludedIou': 0.015757538, 'vehiclesFlowEpe': 3.887007, 'vehiclesFlowWarpedOccupancyAuc': 0.5106551, 'vehiclesFlowWarpedOccupancyIou': 0.32901996}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.97896135, 'vehiclesObservedIou': 0.8462053, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.138473, 'vehiclesFlowWarpedOccupancyAuc': 0.8873052, 'vehiclesFlowWarpedOccupancyIou': 0.90443784}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.88486487, 'vehiclesObservedIou': 0.59729534, 'vehiclesOccludedAuc': 0.19133179, 'vehiclesOccludedIou': 0.02883954, 'vehiclesFlowEpe': 1.6365597, 'vehiclesFlowWarpedOccupancyAuc': 0.77236843, 'vehiclesFlowWarpedOccupancyIou': 0.5987311}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8695208, 'vehiclesObservedIou': 0.50932217, 'vehiclesOccludedAuc': 0.24203348, 'vehiclesOccludedIou': 0.04524254, 'vehiclesFlowEpe': 4.787121, 'vehiclesFlowWarpedOccupancyAuc': 0.66550016, 'vehiclesFlowWarpedOccupancyIou': 0.5996458}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.3076021, 'vehiclesObservedIou': 0.16802682, 'vehiclesOccludedAuc': 0.0591557, 'vehiclesOccludedIou': 0.01769452, 'vehiclesFlowEpe': 5.4611773, 'vehiclesFlowWarpedOccupancyAuc': 0.41810527, 'vehiclesFlowWarpedOccupancyIou': 0.16891325}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.99612534, 'vehiclesObservedIou': 0.87861305, 'vehiclesOccludedAuc': 0.0010671489, 'vehiclesOccludedIou': 0.0005467435, 'vehiclesFlowEpe': 0.7805778, 'vehiclesFlowWarpedOccupancyAuc': 0.8994687, 'vehiclesFlowWarpedOccupancyIou': 0.90911853}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.12885313, 'vehiclesObservedIou': 0.08640478, 'vehiclesOccludedAuc': 0.022235205, 'vehiclesOccludedIou': 0.0071818507, 'vehiclesFlowEpe': 4.696351, 'vehiclesFlowWarpedOccupancyAuc': 0.21025422, 'vehiclesFlowWarpedOccupancyIou': 0.15277827}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5913178, 'vehiclesObservedIou': 0.39547652, 'vehiclesOccludedAuc': 0.0057905335, 'vehiclesOccludedIou': 0.0012124198, 'vehiclesFlowEpe': 10.038977, 'vehiclesFlowWarpedOccupancyAuc': 0.6099938, 'vehiclesFlowWarpedOccupancyIou': 0.5373318}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.78926474, 'vehiclesObservedIou': 0.38327977, 'vehiclesOccludedAuc': 0.05871302, 'vehiclesOccludedIou': 0.024545295, 'vehiclesFlowEpe': 3.783129, 'vehiclesFlowWarpedOccupancyAuc': 0.616062, 'vehiclesFlowWarpedOccupancyIou': 0.4346696}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.42896518, 'vehiclesObservedIou': 0.23733576, 'vehiclesOccludedAuc': 0.0045821355, 'vehiclesOccludedIou': 0.0026331441, 'vehiclesFlowEpe': 4.8590636, 'vehiclesFlowWarpedOccupancyAuc': 0.42625555, 'vehiclesFlowWarpedOccupancyIou': 0.22751717}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.888367, 'vehiclesObservedIou': 0.5628734, 'vehiclesOccludedAuc': 0.0013349277, 'vehiclesOccludedIou': 0.0010525975, 'vehiclesFlowEpe': 1.5412245, 'vehiclesFlowWarpedOccupancyAuc': 0.80762887, 'vehiclesFlowWarpedOccupancyIou': 0.6745938}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.31082264, 'vehiclesObservedIou': 0.14865051, 'vehiclesOccludedAuc': 0.09735678, 'vehiclesOccludedIou': 0.010613745, 'vehiclesFlowEpe': 5.8956575, 'vehiclesFlowWarpedOccupancyAuc': 0.41583183, 'vehiclesFlowWarpedOccupancyIou': 0.1931195}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.08940966, 'vehiclesObservedIou': 0.039687946, 'vehiclesOccludedAuc': 0.11959808, 'vehiclesOccludedIou': 0.015769612, 'vehiclesFlowEpe': 4.384077, 'vehiclesFlowWarpedOccupancyAuc': 0.21145116, 'vehiclesFlowWarpedOccupancyIou': 0.043871246}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7064181, 'vehiclesObservedIou': 0.3945313, 'vehiclesOccludedAuc': 0.047158506, 'vehiclesOccludedIou': 0.020439113, 'vehiclesFlowEpe': 4.3836627, 'vehiclesFlowWarpedOccupancyAuc': 0.48224849, 'vehiclesFlowWarpedOccupancyIou': 0.4934197}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.98626834, 'vehiclesObservedIou': 0.86038524, 'vehiclesOccludedAuc': 0.035676457, 'vehiclesOccludedIou': 0.0072468095, 'vehiclesFlowEpe': 3.3960161, 'vehiclesFlowWarpedOccupancyAuc': 0.8930482, 'vehiclesFlowWarpedOccupancyIou': 0.9135169}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.3643988, 'vehiclesObservedIou': 0.13936509, 'vehiclesOccludedAuc': 0.033452556, 'vehiclesOccludedIou': 0.0061409464, 'vehiclesFlowEpe': 6.0265083, 'vehiclesFlowWarpedOccupancyAuc': 0.35799125, 'vehiclesFlowWarpedOccupancyIou': 0.12522817}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9175983, 'vehiclesObservedIou': 0.63417816, 'vehiclesOccludedAuc': 0.09790045, 'vehiclesOccludedIou': 0.017430522, 'vehiclesFlowEpe': 2.971887, 'vehiclesFlowWarpedOccupancyAuc': 0.77707434, 'vehiclesFlowWarpedOccupancyIou': 0.65672576}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.72113806, 'vehiclesObservedIou': 0.38023308, 'vehiclesOccludedAuc': 0.018983606, 'vehiclesOccludedIou': 0.0035353047, 'vehiclesFlowEpe': 3.1050484, 'vehiclesFlowWarpedOccupancyAuc': 0.54421854, 'vehiclesFlowWarpedOccupancyIou': 0.37947512}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.84410733, 'vehiclesObservedIou': 0.5018469, 'vehiclesOccludedAuc': 0.020192504, 'vehiclesOccludedIou': 0.0071839094, 'vehiclesFlowEpe': 5.703182, 'vehiclesFlowWarpedOccupancyAuc': 0.65339935, 'vehiclesFlowWarpedOccupancyIou': 0.5721112}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.2679682, 'vehiclesObservedIou': 0.110388115, 'vehiclesOccludedAuc': 0.05123298, 'vehiclesOccludedIou': 0.0055738213, 'vehiclesFlowEpe': 6.2238145, 'vehiclesFlowWarpedOccupancyAuc': 0.31508535, 'vehiclesFlowWarpedOccupancyIou': 0.11105323}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8016601, 'vehiclesObservedIou': 0.47050872, 'vehiclesOccludedAuc': 0.1715973, 'vehiclesOccludedIou': 0.014839783, 'vehiclesFlowEpe': 3.8777132, 'vehiclesFlowWarpedOccupancyAuc': 0.6809835, 'vehiclesFlowWarpedOccupancyIou': 0.53256387}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9668621, 'vehiclesObservedIou': 0.7580328, 'vehiclesOccludedAuc': 0.6560781, 'vehiclesOccludedIou': 0.053726252, 'vehiclesFlowEpe': 5.391008, 'vehiclesFlowWarpedOccupancyAuc': 0.8511974, 'vehiclesFlowWarpedOccupancyIou': 0.85899174}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.553622, 'vehiclesObservedIou': 0.26161888, 'vehiclesOccludedAuc': 0.019724958, 'vehiclesOccludedIou': 0.0077112895, 'vehiclesFlowEpe': 6.024376, 'vehiclesFlowWarpedOccupancyAuc': 0.48438504, 'vehiclesFlowWarpedOccupancyIou': 0.3413263}
2024-05-28 11:11:36.299366: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:11:36.350446: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:11:36.350725: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.65287155, 'vehiclesObservedIou': 0.35829198, 'vehiclesOccludedAuc': 0.3707094, 'vehiclesOccludedIou': 0.051649097, 'vehiclesFlowEpe': 3.063251, 'vehiclesFlowWarpedOccupancyAuc': 0.68764937, 'vehiclesFlowWarpedOccupancyIou': 0.55968106}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.99843234, 'vehiclesObservedIou': 0.8931664, 'vehiclesOccludedAuc': 0.0023375778, 'vehiclesOccludedIou': 0.0027466908, 'vehiclesFlowEpe': 1.8830864, 'vehiclesFlowWarpedOccupancyAuc': 0.9019612, 'vehiclesFlowWarpedOccupancyIou': 0.91000307}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.28374052, 'vehiclesObservedIou': 0.12893881, 'vehiclesOccludedAuc': 0.019150134, 'vehiclesOccludedIou': 0.0030879197, 'vehiclesFlowEpe': 10.778566, 'vehiclesFlowWarpedOccupancyAuc': 0.24044281, 'vehiclesFlowWarpedOccupancyIou': 0.14474303}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.99843234, 'vehiclesObservedIou': 0.8931664, 'vehiclesOccludedAuc': 0.0023375778, 'vehiclesOccludedIou': 0.0027466908, 'vehiclesFlowEpe': 1.8830864, 'vehiclesFlowWarpedOccupancyAuc': 0.9019612, 'vehiclesFlowWarpedOccupancyIou': 0.91000307}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6928989653658536, 'vehiclesObservedIou': 0.44912947019512195, 'vehiclesOccludedAuc': 0.1033324125390244, 'vehiclesOccludedIou': 0.018018275331707318, 'vehiclesFlowEpe': 4.331490376585366, 'vehiclesFlowWarpedOccupancyAuc': 0.6123558117073171, 'vehiclesFlowWarpedOccupancyIou': 0.5061979339512196}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00012new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.37623698, 'vehiclesObservedIou': 0.20876412, 'vehiclesOccludedAuc': 0.6329926, 'vehiclesOccludedIou': 0.10013007, 'vehiclesFlowEpe': 12.4330635, 'vehiclesFlowWarpedOccupancyAuc': 0.411175, 'vehiclesFlowWarpedOccupancyIou': 0.32628715}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9331067, 'vehiclesObservedIou': 0.6571641, 'vehiclesOccludedAuc': 0.011915939, 'vehiclesOccludedIou': 0.0037904351, 'vehiclesFlowEpe': 2.2173831, 'vehiclesFlowWarpedOccupancyAuc': 0.8224721, 'vehiclesFlowWarpedOccupancyIou': 0.7556316}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8774332, 'vehiclesObservedIou': 0.48532587, 'vehiclesOccludedAuc': 0.0015649556, 'vehiclesOccludedIou': 0.0011356142, 'vehiclesFlowEpe': 7.2378693, 'vehiclesFlowWarpedOccupancyAuc': 0.5702554, 'vehiclesFlowWarpedOccupancyIou': 0.54975307}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7026734, 'vehiclesObservedIou': 0.35495657, 'vehiclesOccludedAuc': 0.059837162, 'vehiclesOccludedIou': 0.019906469, 'vehiclesFlowEpe': 4.1060266, 'vehiclesFlowWarpedOccupancyAuc': 0.54031956, 'vehiclesFlowWarpedOccupancyIou': 0.3982469}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.38185522, 'vehiclesObservedIou': 0.18263671, 'vehiclesOccludedAuc': 0.03884705, 'vehiclesOccludedIou': 0.00790385, 'vehiclesFlowEpe': 4.7321277, 'vehiclesFlowWarpedOccupancyAuc': 0.45406654, 'vehiclesFlowWarpedOccupancyIou': 0.22517844}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.4461852, 'vehiclesObservedIou': 0.23859644, 'vehiclesOccludedAuc': 0.0070301713, 'vehiclesOccludedIou': 0.0036336605, 'vehiclesFlowEpe': 9.985094, 'vehiclesFlowWarpedOccupancyAuc': 0.3571468, 'vehiclesFlowWarpedOccupancyIou': 0.27480507}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.32526952, 'vehiclesObservedIou': 0.15132917, 'vehiclesOccludedAuc': 0.009214411, 'vehiclesOccludedIou': 0.0033349534, 'vehiclesFlowEpe': 9.898325, 'vehiclesFlowWarpedOccupancyAuc': 0.3278941, 'vehiclesFlowWarpedOccupancyIou': 0.14425498}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9231089, 'vehiclesObservedIou': 0.6097518, 'vehiclesOccludedAuc': 0.007148432, 'vehiclesOccludedIou': 0.0026206886, 'vehiclesFlowEpe': 4.195629, 'vehiclesFlowWarpedOccupancyAuc': 0.7586419, 'vehiclesFlowWarpedOccupancyIou': 0.6793715}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.27517885, 'vehiclesObservedIou': 0.15211204, 'vehiclesOccludedAuc': 0.69404995, 'vehiclesOccludedIou': 0.15250067, 'vehiclesFlowEpe': 3.1545599, 'vehiclesFlowWarpedOccupancyAuc': 0.57333136, 'vehiclesFlowWarpedOccupancyIou': 0.28242812}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9405856, 'vehiclesObservedIou': 0.6342838, 'vehiclesOccludedAuc': 0.11332577, 'vehiclesOccludedIou': 0.035829473, 'vehiclesFlowEpe': 2.883473, 'vehiclesFlowWarpedOccupancyAuc': 0.81323004, 'vehiclesFlowWarpedOccupancyIou': 0.74725604}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6634032, 'vehiclesObservedIou': 0.41029292, 'vehiclesOccludedAuc': 0.08730501, 'vehiclesOccludedIou': 0.015157116, 'vehiclesFlowEpe': 2.659299, 'vehiclesFlowWarpedOccupancyAuc': 0.665713, 'vehiclesFlowWarpedOccupancyIou': 0.45294648}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7546681, 'vehiclesObservedIou': 0.42227134, 'vehiclesOccludedAuc': 0.017234877, 'vehiclesOccludedIou': 0.0056622173, 'vehiclesFlowEpe': 4.2607226, 'vehiclesFlowWarpedOccupancyAuc': 0.6080452, 'vehiclesFlowWarpedOccupancyIou': 0.5249098}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.31056184, 'vehiclesObservedIou': 0.1704429, 'vehiclesOccludedAuc': 0.009120365, 'vehiclesOccludedIou': 0.003728064, 'vehiclesFlowEpe': 3.629083, 'vehiclesFlowWarpedOccupancyAuc': 0.52747595, 'vehiclesFlowWarpedOccupancyIou': 0.19697684}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.42045352, 'vehiclesObservedIou': 0.21733302, 'vehiclesOccludedAuc': 0.12736154, 'vehiclesOccludedIou': 0.03619746, 'vehiclesFlowEpe': 3.8656318, 'vehiclesFlowWarpedOccupancyAuc': 0.39349467, 'vehiclesFlowWarpedOccupancyIou': 0.27768248}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6477892, 'vehiclesObservedIou': 0.29669833, 'vehiclesOccludedAuc': 0.020626195, 'vehiclesOccludedIou': 0.006112198, 'vehiclesFlowEpe': 4.8214035, 'vehiclesFlowWarpedOccupancyAuc': 0.5503286, 'vehiclesFlowWarpedOccupancyIou': 0.35634902}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.68671274, 'vehiclesObservedIou': 0.38419157, 'vehiclesOccludedAuc': 0.34605956, 'vehiclesOccludedIou': 0.09251241, 'vehiclesFlowEpe': 6.419983, 'vehiclesFlowWarpedOccupancyAuc': 0.53703606, 'vehiclesFlowWarpedOccupancyIou': 0.40257445}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7550695, 'vehiclesObservedIou': 0.43953523, 'vehiclesOccludedAuc': 0.29311413, 'vehiclesOccludedIou': 0.03344796, 'vehiclesFlowEpe': 4.334081, 'vehiclesFlowWarpedOccupancyAuc': 0.6378058, 'vehiclesFlowWarpedOccupancyIou': 0.51406825}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.88000405, 'vehiclesObservedIou': 0.5872254, 'vehiclesOccludedAuc': 0.0038412032, 'vehiclesOccludedIou': 0.0027185518, 'vehiclesFlowEpe': 3.0855036, 'vehiclesFlowWarpedOccupancyAuc': 0.80269545, 'vehiclesFlowWarpedOccupancyIou': 0.6593359}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.45950803, 'vehiclesObservedIou': 0.2413749, 'vehiclesOccludedAuc': 0.14482307, 'vehiclesOccludedIou': 0.039875194, 'vehiclesFlowEpe': 6.7478166, 'vehiclesFlowWarpedOccupancyAuc': 0.48035383, 'vehiclesFlowWarpedOccupancyIou': 0.3163115}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8961235, 'vehiclesObservedIou': 0.5542136, 'vehiclesOccludedAuc': 0.33820125, 'vehiclesOccludedIou': 0.04941199, 'vehiclesFlowEpe': 3.857948, 'vehiclesFlowWarpedOccupancyAuc': 0.7756032, 'vehiclesFlowWarpedOccupancyIou': 0.67093503}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.4053148, 'vehiclesObservedIou': 0.17586471, 'vehiclesOccludedAuc': 0.28316426, 'vehiclesOccludedIou': 0.037861615, 'vehiclesFlowEpe': 6.471701, 'vehiclesFlowWarpedOccupancyAuc': 0.41124338, 'vehiclesFlowWarpedOccupancyIou': 0.25319272}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.61940426, 'vehiclesObservedIou': 0.24817066, 'vehiclesOccludedAuc': 0.02945986, 'vehiclesOccludedIou': 0.0076232795, 'vehiclesFlowEpe': 4.247694, 'vehiclesFlowWarpedOccupancyAuc': 0.51800513, 'vehiclesFlowWarpedOccupancyIou': 0.28296837}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.9405856, 'vehiclesObservedIou': 0.6342838, 'vehiclesOccludedAuc': 0.11332577, 'vehiclesOccludedIou': 0.035829473, 'vehiclesFlowEpe': 2.883473, 'vehiclesFlowWarpedOccupancyAuc': 0.81323004, 'vehiclesFlowWarpedOccupancyIou': 0.74725604}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6218475595454545, 'vehiclesObservedIou': 0.35556978181818183, 'vehiclesOccludedAuc': 0.14891989823181817, 'vehiclesOccludedIou': 0.03004972451818182, 'vehiclesFlowEpe': 5.238382645454545, 'vehiclesFlowWarpedOccupancyAuc': 0.5698333213636364, 'vehiclesFlowWarpedOccupancyIou': 0.42233925954545465}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00049new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 11:11:50.475704: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:11:50.526686: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:11:50.526959: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.69721794, 'vehiclesObservedIou': 0.3584351, 'vehiclesOccludedAuc': 0.023246445, 'vehiclesOccludedIou': 0.004388145, 'vehiclesFlowEpe': 3.792817, 'vehiclesFlowWarpedOccupancyAuc': 0.60541457, 'vehiclesFlowWarpedOccupancyIou': 0.42804787}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8732562, 'vehiclesObservedIou': 0.6294656, 'vehiclesOccludedAuc': 0.030080881, 'vehiclesOccludedIou': 0.010022271, 'vehiclesFlowEpe': 4.206683, 'vehiclesFlowWarpedOccupancyAuc': 0.80470955, 'vehiclesFlowWarpedOccupancyIou': 0.7313618}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.35039118, 'vehiclesObservedIou': 0.19096765, 'vehiclesOccludedAuc': 0.0009850748, 'vehiclesOccludedIou': 0.0009982933, 'vehiclesFlowEpe': 4.8086185, 'vehiclesFlowWarpedOccupancyAuc': 0.47082478, 'vehiclesFlowWarpedOccupancyIou': 0.2062287}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.3686825, 'vehiclesObservedIou': 0.2926435, 'vehiclesOccludedAuc': 0.028278906, 'vehiclesOccludedIou': 0.0063588014, 'vehiclesFlowEpe': 12.299198, 'vehiclesFlowWarpedOccupancyAuc': 0.42948562, 'vehiclesFlowWarpedOccupancyIou': 0.338483}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7921231, 'vehiclesObservedIou': 0.3678173, 'vehiclesOccludedAuc': 0.04865678, 'vehiclesOccludedIou': 0.011880491, 'vehiclesFlowEpe': 5.6743155, 'vehiclesFlowWarpedOccupancyAuc': 0.5656681, 'vehiclesFlowWarpedOccupancyIou': 0.44190457}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6056138, 'vehiclesObservedIou': 0.27794394, 'vehiclesOccludedAuc': 0.09186546, 'vehiclesOccludedIou': 0.016383477, 'vehiclesFlowEpe': 4.998026, 'vehiclesFlowWarpedOccupancyAuc': 0.47869223, 'vehiclesFlowWarpedOccupancyIou': 0.27720946}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.62382656, 'vehiclesObservedIou': 0.3952506, 'vehiclesOccludedAuc': 0.015048625, 'vehiclesOccludedIou': 0.00230197, 'vehiclesFlowEpe': 15.842522, 'vehiclesFlowWarpedOccupancyAuc': 0.43176672, 'vehiclesFlowWarpedOccupancyIou': 0.39497182}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8749466, 'vehiclesObservedIou': 0.51552784, 'vehiclesOccludedAuc': 0.20947959, 'vehiclesOccludedIou': 0.033805795, 'vehiclesFlowEpe': 13.091108, 'vehiclesFlowWarpedOccupancyAuc': 0.70671916, 'vehiclesFlowWarpedOccupancyIou': 0.5799046}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.82273453, 'vehiclesObservedIou': 0.51537544, 'vehiclesOccludedAuc': 0.08388904, 'vehiclesOccludedIou': 0.016158277, 'vehiclesFlowEpe': 4.746025, 'vehiclesFlowWarpedOccupancyAuc': 0.59400904, 'vehiclesFlowWarpedOccupancyIou': 0.5251334}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.82670593, 'vehiclesObservedIou': 0.50362134, 'vehiclesOccludedAuc': 0.24578395, 'vehiclesOccludedIou': 0.035487294, 'vehiclesFlowEpe': 2.9098258, 'vehiclesFlowWarpedOccupancyAuc': 0.7425263, 'vehiclesFlowWarpedOccupancyIou': 0.5615855}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.73859185, 'vehiclesObservedIou': 0.39982402, 'vehiclesOccludedAuc': 0.079056755, 'vehiclesOccludedIou': 0.0069596106, 'vehiclesFlowEpe': 5.2846193, 'vehiclesFlowWarpedOccupancyAuc': 0.5793111, 'vehiclesFlowWarpedOccupancyIou': 0.4696505}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6952687, 'vehiclesObservedIou': 0.31751922, 'vehiclesOccludedAuc': 0.01166996, 'vehiclesOccludedIou': 0.004434955, 'vehiclesFlowEpe': 5.955821, 'vehiclesFlowWarpedOccupancyAuc': 0.5177711, 'vehiclesFlowWarpedOccupancyIou': 0.33797193}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.12726814, 'vehiclesObservedIou': 0.06335025, 'vehiclesOccludedAuc': 0.028702307, 'vehiclesOccludedIou': 0.002464389, 'vehiclesFlowEpe': 6.5371103, 'vehiclesFlowWarpedOccupancyAuc': 0.17206387, 'vehiclesFlowWarpedOccupancyIou': 0.08077312}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.96219295, 'vehiclesObservedIou': 0.74142736, 'vehiclesOccludedAuc': 0.0667547, 'vehiclesOccludedIou': 0.027531011, 'vehiclesFlowEpe': 1.084129, 'vehiclesFlowWarpedOccupancyAuc': 0.8892157, 'vehiclesFlowWarpedOccupancyIou': 0.8489332}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.7835696, 'vehiclesObservedIou': 0.41743317, 'vehiclesOccludedAuc': 0.09707211, 'vehiclesOccludedIou': 0.029419776, 'vehiclesFlowEpe': 2.5523725, 'vehiclesFlowWarpedOccupancyAuc': 0.73788303, 'vehiclesFlowWarpedOccupancyIou': 0.52800775}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.28628573, 'vehiclesObservedIou': 0.11139352, 'vehiclesOccludedAuc': 0.14657699, 'vehiclesOccludedIou': 0.03817305, 'vehiclesFlowEpe': 3.566893, 'vehiclesFlowWarpedOccupancyAuc': 0.4386465, 'vehiclesFlowWarpedOccupancyIou': 0.13199916}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.48327613, 'vehiclesObservedIou': 0.22000808, 'vehiclesOccludedAuc': 0.10707526, 'vehiclesOccludedIou': 0.02174575, 'vehiclesFlowEpe': 4.6950912, 'vehiclesFlowWarpedOccupancyAuc': 0.4925804, 'vehiclesFlowWarpedOccupancyIou': 0.26057208}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9276111, 'vehiclesObservedIou': 0.6154367, 'vehiclesOccludedAuc': 0.07581716, 'vehiclesOccludedIou': 0.02813999, 'vehiclesFlowEpe': 3.4307647, 'vehiclesFlowWarpedOccupancyAuc': 0.8150967, 'vehiclesFlowWarpedOccupancyIou': 0.61949986}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.36928958, 'vehiclesObservedIou': 0.17132999, 'vehiclesOccludedAuc': 0.013332459, 'vehiclesOccludedIou': 0.005464541, 'vehiclesFlowEpe': 4.5002437, 'vehiclesFlowWarpedOccupancyAuc': 0.48016167, 'vehiclesFlowWarpedOccupancyIou': 0.16019395}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7504054, 'vehiclesObservedIou': 0.47795704, 'vehiclesOccludedAuc': 0.011760858, 'vehiclesOccludedIou': 0.0039538587, 'vehiclesFlowEpe': 3.5460782, 'vehiclesFlowWarpedOccupancyAuc': 0.7137998, 'vehiclesFlowWarpedOccupancyIou': 0.59379035}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.92917174, 'vehiclesObservedIou': 0.7254924, 'vehiclesOccludedAuc': 0.0022788185, 'vehiclesOccludedIou': 0.0017888348, 'vehiclesFlowEpe': 9.696472, 'vehiclesFlowWarpedOccupancyAuc': 0.8060242, 'vehiclesFlowWarpedOccupancyIou': 0.764289}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9255581, 'vehiclesObservedIou': 0.6905298, 'vehiclesOccludedAuc': 0.059601296, 'vehiclesOccludedIou': 0.020976653, 'vehiclesFlowEpe': 2.9905071, 'vehiclesFlowWarpedOccupancyAuc': 0.7876222, 'vehiclesFlowWarpedOccupancyIou': 0.7185775}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.82959366, 'vehiclesObservedIou': 0.57569623, 'vehiclesOccludedAuc': 0.010158903, 'vehiclesOccludedIou': 0.004059091, 'vehiclesFlowEpe': 4.8130155, 'vehiclesFlowWarpedOccupancyAuc': 0.7052244, 'vehiclesFlowWarpedOccupancyIou': 0.6210502}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.88619596, 'vehiclesObservedIou': 0.6198893, 'vehiclesOccludedAuc': 0.009316715, 'vehiclesOccludedIou': 0.0033416734, 'vehiclesFlowEpe': 4.397168, 'vehiclesFlowWarpedOccupancyAuc': 0.7672479, 'vehiclesFlowWarpedOccupancyIou': 0.69449914}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.2588697, 'vehiclesObservedIou': 0.11561717, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.516954, 'vehiclesFlowWarpedOccupancyAuc': 0.44863322, 'vehiclesFlowWarpedOccupancyIou': 0.14671686}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8354791, 'vehiclesObservedIou': 0.48966166, 'vehiclesOccludedAuc': 0.12647031, 'vehiclesOccludedIou': 0.02695454, 'vehiclesFlowEpe': 3.2225175, 'vehiclesFlowWarpedOccupancyAuc': 0.7014152, 'vehiclesFlowWarpedOccupancyIou': 0.57957846}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7100694, 'vehiclesObservedIou': 0.3627431, 'vehiclesOccludedAuc': 0.06173906, 'vehiclesOccludedIou': 0.018296063, 'vehiclesFlowEpe': 6.607181, 'vehiclesFlowWarpedOccupancyAuc': 0.48700702, 'vehiclesFlowWarpedOccupancyIou': 0.36199287}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.45060906, 'vehiclesObservedIou': 0.18529546, 'vehiclesOccludedAuc': 0.038433243, 'vehiclesOccludedIou': 0.00775546, 'vehiclesFlowEpe': 6.220362, 'vehiclesFlowWarpedOccupancyAuc': 0.34207866, 'vehiclesFlowWarpedOccupancyIou': 0.18416646}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.72439003, 'vehiclesObservedIou': 0.4040152, 'vehiclesOccludedAuc': 0.13096006, 'vehiclesOccludedIou': 0.028365627, 'vehiclesFlowEpe': 5.222992, 'vehiclesFlowWarpedOccupancyAuc': 0.5928658, 'vehiclesFlowWarpedOccupancyIou': 0.42399433}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.3755784, 'vehiclesObservedIou': 0.17378002, 'vehiclesOccludedAuc': 0.0695691, 'vehiclesOccludedIou': 0.02084399, 'vehiclesFlowEpe': 4.0176077, 'vehiclesFlowWarpedOccupancyAuc': 0.49003196, 'vehiclesFlowWarpedOccupancyIou': 0.18657169}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.83243316, 'vehiclesObservedIou': 0.5036855, 'vehiclesOccludedAuc': 0.020731522, 'vehiclesOccludedIou': 0.0092527345, 'vehiclesFlowEpe': 4.3164964, 'vehiclesFlowWarpedOccupancyAuc': 0.6589451, 'vehiclesFlowWarpedOccupancyIou': 0.5736224}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.703613, 'vehiclesObservedIou': 0.34879795, 'vehiclesOccludedAuc': 0.013491493, 'vehiclesOccludedIou': 0.005189545, 'vehiclesFlowEpe': 2.661128, 'vehiclesFlowWarpedOccupancyAuc': 0.645663, 'vehiclesFlowWarpedOccupancyIou': 0.42302343}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.96219295, 'vehiclesObservedIou': 0.74142736, 'vehiclesOccludedAuc': 0.0667547, 'vehiclesOccludedIou': 0.027531011, 'vehiclesFlowEpe': 1.084129, 'vehiclesFlowWarpedOccupancyAuc': 0.8892157, 'vehiclesFlowWarpedOccupancyIou': 0.8489332}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6694005884374999, 'vehiclesObservedIou': 0.3993103578125, 'vehiclesOccludedAuc': 0.06118386972812499, 'vehiclesOccludedIou': 0.014152998678125, 'vehiclesFlowEpe': 5.350145715625, 'vehiclesFlowWarpedOccupancyAuc': 0.5968470187499999, 'vehiclesFlowWarpedOccupancyIou': 0.44357203}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00066new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 11:12:10.822405: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:12:10.883260: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:12:10.883578: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.82418776, 'vehiclesObservedIou': 0.4825506, 'vehiclesOccludedAuc': 0.20179093, 'vehiclesOccludedIou': 0.033235587, 'vehiclesFlowEpe': 3.59018, 'vehiclesFlowWarpedOccupancyAuc': 0.62373227, 'vehiclesFlowWarpedOccupancyIou': 0.4283539}
Time: 0.0014 seconds, Metrics: {'vehiclesObservedAuc': 0.93121696, 'vehiclesObservedIou': 0.6207901, 'vehiclesOccludedAuc': 0.019042525, 'vehiclesOccludedIou': 0.0049981065, 'vehiclesFlowEpe': 3.7481067, 'vehiclesFlowWarpedOccupancyAuc': 0.77208734, 'vehiclesFlowWarpedOccupancyIou': 0.6656627}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.45667964, 'vehiclesObservedIou': 0.26263574, 'vehiclesOccludedAuc': 0.4039569, 'vehiclesOccludedIou': 0.063845955, 'vehiclesFlowEpe': 5.416871, 'vehiclesFlowWarpedOccupancyAuc': 0.479563, 'vehiclesFlowWarpedOccupancyIou': 0.32221222}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6897885, 'vehiclesObservedIou': 0.44854483, 'vehiclesOccludedAuc': 0.0011951122, 'vehiclesOccludedIou': 0.0010296082, 'vehiclesFlowEpe': 5.207503, 'vehiclesFlowWarpedOccupancyAuc': 0.5870822, 'vehiclesFlowWarpedOccupancyIou': 0.45986268}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5710822, 'vehiclesObservedIou': 0.3439921, 'vehiclesOccludedAuc': 0.05311771, 'vehiclesOccludedIou': 0.018847205, 'vehiclesFlowEpe': 10.569541, 'vehiclesFlowWarpedOccupancyAuc': 0.5431546, 'vehiclesFlowWarpedOccupancyIou': 0.33753633}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.61190987, 'vehiclesObservedIou': 0.32323295, 'vehiclesOccludedAuc': 0.0017798846, 'vehiclesOccludedIou': 0.002173758, 'vehiclesFlowEpe': 6.606292, 'vehiclesFlowWarpedOccupancyAuc': 0.40655997, 'vehiclesFlowWarpedOccupancyIou': 0.38840443}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.26540297, 'vehiclesObservedIou': 0.1081215, 'vehiclesOccludedAuc': 0.02249347, 'vehiclesOccludedIou': 0.007832899, 'vehiclesFlowEpe': 5.257948, 'vehiclesFlowWarpedOccupancyAuc': 0.40168816, 'vehiclesFlowWarpedOccupancyIou': 0.106828265}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.78319156, 'vehiclesObservedIou': 0.40218988, 'vehiclesOccludedAuc': 0.0058239885, 'vehiclesOccludedIou': 0.0027962257, 'vehiclesFlowEpe': 7.2775474, 'vehiclesFlowWarpedOccupancyAuc': 0.5356721, 'vehiclesFlowWarpedOccupancyIou': 0.4449218}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.64648324, 'vehiclesObservedIou': 0.314275, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 4.2107162, 'vehiclesFlowWarpedOccupancyAuc': 0.5624121, 'vehiclesFlowWarpedOccupancyIou': 0.42034945}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8815453, 'vehiclesObservedIou': 0.6012643, 'vehiclesOccludedAuc': 0.09780717, 'vehiclesOccludedIou': 0.027047407, 'vehiclesFlowEpe': 4.0910516, 'vehiclesFlowWarpedOccupancyAuc': 0.71692675, 'vehiclesFlowWarpedOccupancyIou': 0.6085317}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.815096, 'vehiclesObservedIou': 0.481241, 'vehiclesOccludedAuc': 0.0014039945, 'vehiclesOccludedIou': 0.00045699684, 'vehiclesFlowEpe': 3.9519093, 'vehiclesFlowWarpedOccupancyAuc': 0.67438096, 'vehiclesFlowWarpedOccupancyIou': 0.5541033}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.83304536, 'vehiclesObservedIou': 0.47488722, 'vehiclesOccludedAuc': 0.047894552, 'vehiclesOccludedIou': 0.014171033, 'vehiclesFlowEpe': 1.9534906, 'vehiclesFlowWarpedOccupancyAuc': 0.7650873, 'vehiclesFlowWarpedOccupancyIou': 0.5261685}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6593038, 'vehiclesObservedIou': 0.36634633, 'vehiclesOccludedAuc': 0.08336578, 'vehiclesOccludedIou': 0.028415963, 'vehiclesFlowEpe': 4.18336, 'vehiclesFlowWarpedOccupancyAuc': 0.6645845, 'vehiclesFlowWarpedOccupancyIou': 0.47028226}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.39483547, 'vehiclesObservedIou': 0.17283978, 'vehiclesOccludedAuc': 0.023765286, 'vehiclesOccludedIou': 0.0035775595, 'vehiclesFlowEpe': 6.7315993, 'vehiclesFlowWarpedOccupancyAuc': 0.32313305, 'vehiclesFlowWarpedOccupancyIou': 0.16341478}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6667986, 'vehiclesObservedIou': 0.32702482, 'vehiclesOccludedAuc': 0.4893821, 'vehiclesOccludedIou': 0.09915923, 'vehiclesFlowEpe': 2.9688706, 'vehiclesFlowWarpedOccupancyAuc': 0.59999096, 'vehiclesFlowWarpedOccupancyIou': 0.39677477}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.4972663, 'vehiclesObservedIou': 0.21615109, 'vehiclesOccludedAuc': 0.22580732, 'vehiclesOccludedIou': 0.024956647, 'vehiclesFlowEpe': 3.7607718, 'vehiclesFlowWarpedOccupancyAuc': 0.5422367, 'vehiclesFlowWarpedOccupancyIou': 0.24984674}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.16902038, 'vehiclesObservedIou': 0.07212767, 'vehiclesOccludedAuc': 0.0036125497, 'vehiclesOccludedIou': 0.0012473789, 'vehiclesFlowEpe': 3.911724, 'vehiclesFlowWarpedOccupancyAuc': 0.2898077, 'vehiclesFlowWarpedOccupancyIou': 0.08496745}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8866987, 'vehiclesObservedIou': 0.5523352, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 1.5304993, 'vehiclesFlowWarpedOccupancyAuc': 0.785268, 'vehiclesFlowWarpedOccupancyIou': 0.6816237}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.40829763, 'vehiclesObservedIou': 0.22043306, 'vehiclesOccludedAuc': 0.010055561, 'vehiclesOccludedIou': 0.0032840986, 'vehiclesFlowEpe': 4.368432, 'vehiclesFlowWarpedOccupancyAuc': 0.3313968, 'vehiclesFlowWarpedOccupancyIou': 0.2801367}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9411558, 'vehiclesObservedIou': 0.7067986, 'vehiclesOccludedAuc': 0.0026066725, 'vehiclesOccludedIou': 0.0011974503, 'vehiclesFlowEpe': 3.054742, 'vehiclesFlowWarpedOccupancyAuc': 0.819699, 'vehiclesFlowWarpedOccupancyIou': 0.77996016}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7497084, 'vehiclesObservedIou': 0.37571892, 'vehiclesOccludedAuc': 0.07916279, 'vehiclesOccludedIou': 0.01889827, 'vehiclesFlowEpe': 3.34573, 'vehiclesFlowWarpedOccupancyAuc': 0.6142777, 'vehiclesFlowWarpedOccupancyIou': 0.3545717}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.38153332, 'vehiclesObservedIou': 0.21387357, 'vehiclesOccludedAuc': 0.025282804, 'vehiclesOccludedIou': 0.0059270673, 'vehiclesFlowEpe': 5.594165, 'vehiclesFlowWarpedOccupancyAuc': 0.39661068, 'vehiclesFlowWarpedOccupancyIou': 0.26972115}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8852807, 'vehiclesObservedIou': 0.54966253, 'vehiclesOccludedAuc': 0.02243778, 'vehiclesOccludedIou': 0.010862427, 'vehiclesFlowEpe': 4.173688, 'vehiclesFlowWarpedOccupancyAuc': 0.6934693, 'vehiclesFlowWarpedOccupancyIou': 0.5889927}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.84490126, 'vehiclesObservedIou': 0.6438728, 'vehiclesOccludedAuc': 0.12174362, 'vehiclesOccludedIou': 0.020219596, 'vehiclesFlowEpe': 6.055612, 'vehiclesFlowWarpedOccupancyAuc': 0.70098627, 'vehiclesFlowWarpedOccupancyIou': 0.70665497}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5770552, 'vehiclesObservedIou': 0.21716863, 'vehiclesOccludedAuc': 0.021298414, 'vehiclesOccludedIou': 0.006678707, 'vehiclesFlowEpe': 9.418802, 'vehiclesFlowWarpedOccupancyAuc': 0.30946636, 'vehiclesFlowWarpedOccupancyIou': 0.21642089}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8647973, 'vehiclesObservedIou': 0.66810066, 'vehiclesOccludedAuc': 0.035127148, 'vehiclesOccludedIou': 0.009723723, 'vehiclesFlowEpe': 2.6053677, 'vehiclesFlowWarpedOccupancyAuc': 0.8319317, 'vehiclesFlowWarpedOccupancyIou': 0.78345877}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7977737, 'vehiclesObservedIou': 0.5023078, 'vehiclesOccludedAuc': 0.029078132, 'vehiclesOccludedIou': 0.012191551, 'vehiclesFlowEpe': 4.731346, 'vehiclesFlowWarpedOccupancyAuc': 0.71379447, 'vehiclesFlowWarpedOccupancyIou': 0.586093}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.2952129, 'vehiclesObservedIou': 0.1374148, 'vehiclesOccludedAuc': 0.013427839, 'vehiclesOccludedIou': 0.0037257513, 'vehiclesFlowEpe': 9.743308, 'vehiclesFlowWarpedOccupancyAuc': 0.28895572, 'vehiclesFlowWarpedOccupancyIou': 0.1618625}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9133331, 'vehiclesObservedIou': 0.64903474, 'vehiclesOccludedAuc': 0.14827782, 'vehiclesOccludedIou': 0.010165973, 'vehiclesFlowEpe': 9.140535, 'vehiclesFlowWarpedOccupancyAuc': 0.753933, 'vehiclesFlowWarpedOccupancyIou': 0.7372788}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6756959, 'vehiclesObservedIou': 0.3868244, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 5.304282, 'vehiclesFlowWarpedOccupancyAuc': 0.6651732, 'vehiclesFlowWarpedOccupancyIou': 0.49984843}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.59778506, 'vehiclesObservedIou': 0.25191078, 'vehiclesOccludedAuc': 0.0064962753, 'vehiclesOccludedIou': 0.0021410307, 'vehiclesFlowEpe': 12.840822, 'vehiclesFlowWarpedOccupancyAuc': 0.43770298, 'vehiclesFlowWarpedOccupancyIou': 0.26838234}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.71055543, 'vehiclesObservedIou': 0.42766908, 'vehiclesOccludedAuc': 0.12610917, 'vehiclesOccludedIou': 0.047900945, 'vehiclesFlowEpe': 4.625245, 'vehiclesFlowWarpedOccupancyAuc': 0.68424237, 'vehiclesFlowWarpedOccupancyIou': 0.5858135}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9325845, 'vehiclesObservedIou': 0.7204705, 'vehiclesOccludedAuc': 0.0830455, 'vehiclesOccludedIou': 0.028761392, 'vehiclesFlowEpe': 2.8461394, 'vehiclesFlowWarpedOccupancyAuc': 0.84607714, 'vehiclesFlowWarpedOccupancyIou': 0.7895492}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8614156, 'vehiclesObservedIou': 0.6506186, 'vehiclesOccludedAuc': 0.15998572, 'vehiclesOccludedIou': 0.05004895, 'vehiclesFlowEpe': 2.6596997, 'vehiclesFlowWarpedOccupancyAuc': 0.81347555, 'vehiclesFlowWarpedOccupancyIou': 0.74852693}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.85666364, 'vehiclesObservedIou': 0.3821701, 'vehiclesOccludedAuc': 0.0008461924, 'vehiclesOccludedIou': 0.0007329148, 'vehiclesFlowEpe': 4.7721434, 'vehiclesFlowWarpedOccupancyAuc': 0.6384602, 'vehiclesFlowWarpedOccupancyIou': 0.4921922}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.23169702, 'vehiclesObservedIou': 0.075530484, 'vehiclesOccludedAuc': 0.008771178, 'vehiclesOccludedIou': 0.0027252492, 'vehiclesFlowEpe': 4.6958303, 'vehiclesFlowWarpedOccupancyAuc': 0.23646554, 'vehiclesFlowWarpedOccupancyIou': 0.07847616}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.79104495, 'vehiclesObservedIou': 0.43056536, 'vehiclesOccludedAuc': 0.008607626, 'vehiclesOccludedIou': 0.0031920143, 'vehiclesFlowEpe': 4.2182674, 'vehiclesFlowWarpedOccupancyAuc': 0.6134429, 'vehiclesFlowWarpedOccupancyIou': 0.48341018}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.9411558, 'vehiclesObservedIou': 0.7067986, 'vehiclesOccludedAuc': 0.0026066725, 'vehiclesOccludedIou': 0.0011974503, 'vehiclesFlowEpe': 3.054742, 'vehiclesFlowWarpedOccupancyAuc': 0.819699, 'vehiclesFlowWarpedOccupancyIou': 0.77996016}
2024-05-28 11:12:34.225942: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:12:34.279919: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:12:34.280199: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6729741627027027, 'vehiclesObservedIou': 0.3994782574054053, 'vehiclesOccludedAuc': 0.06985404093783783, 'vehiclesOccludedIou': 0.015464018111891893, 'vehiclesFlowEpe': 5.112490235135136, 'vehiclesFlowWarpedOccupancyAuc': 0.5854845551351351, 'vehiclesFlowWarpedOccupancyIou': 0.45192419608108114}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00006new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7243731, 'vehiclesObservedIou': 0.41753122, 'vehiclesOccludedAuc': 0.105855525, 'vehiclesOccludedIou': 0.026429955, 'vehiclesFlowEpe': 3.9600992, 'vehiclesFlowWarpedOccupancyAuc': 0.6184757, 'vehiclesFlowWarpedOccupancyIou': 0.47308075}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.62484586, 'vehiclesObservedIou': 0.34753397, 'vehiclesOccludedAuc': 0.004259173, 'vehiclesOccludedIou': 0.0022445489, 'vehiclesFlowEpe': 5.844845, 'vehiclesFlowWarpedOccupancyAuc': 0.52266985, 'vehiclesFlowWarpedOccupancyIou': 0.3968997}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.21126786, 'vehiclesObservedIou': 0.09449914, 'vehiclesOccludedAuc': 0.0004885231, 'vehiclesOccludedIou': 0.00030667277, 'vehiclesFlowEpe': 1.5079006, 'vehiclesFlowWarpedOccupancyAuc': 0.20146634, 'vehiclesFlowWarpedOccupancyIou': 0.14318697}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.64850074, 'vehiclesObservedIou': 0.34745643, 'vehiclesOccludedAuc': 0.0069298837, 'vehiclesOccludedIou': 0.002305132, 'vehiclesFlowEpe': 8.541043, 'vehiclesFlowWarpedOccupancyAuc': 0.49526006, 'vehiclesFlowWarpedOccupancyIou': 0.40803888}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.5663029, 'vehiclesObservedIou': 0.36474395, 'vehiclesOccludedAuc': 0.363485, 'vehiclesOccludedIou': 0.07523537, 'vehiclesFlowEpe': 4.487803, 'vehiclesFlowWarpedOccupancyAuc': 0.63093114, 'vehiclesFlowWarpedOccupancyIou': 0.5087404}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.96013844, 'vehiclesObservedIou': 0.7830302, 'vehiclesOccludedAuc': 0.0723472, 'vehiclesOccludedIou': 0.013988812, 'vehiclesFlowEpe': 1.5024314, 'vehiclesFlowWarpedOccupancyAuc': 0.868869, 'vehiclesFlowWarpedOccupancyIou': 0.8640063}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.701399, 'vehiclesObservedIou': 0.33768013, 'vehiclesOccludedAuc': 0.0018588459, 'vehiclesOccludedIou': 0.000839411, 'vehiclesFlowEpe': 4.069695, 'vehiclesFlowWarpedOccupancyAuc': 0.5399885, 'vehiclesFlowWarpedOccupancyIou': 0.39803678}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.43867347, 'vehiclesObservedIou': 0.19546947, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 6.250366, 'vehiclesFlowWarpedOccupancyAuc': 0.27095455, 'vehiclesFlowWarpedOccupancyIou': 0.2578043}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8905245, 'vehiclesObservedIou': 0.62146336, 'vehiclesOccludedAuc': 0.007773361, 'vehiclesOccludedIou': 0.0019260084, 'vehiclesFlowEpe': 4.348016, 'vehiclesFlowWarpedOccupancyAuc': 0.74576306, 'vehiclesFlowWarpedOccupancyIou': 0.73920584}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.90583277, 'vehiclesObservedIou': 0.6361316, 'vehiclesOccludedAuc': 0.07195447, 'vehiclesOccludedIou': 0.020846374, 'vehiclesFlowEpe': 3.018528, 'vehiclesFlowWarpedOccupancyAuc': 0.7974305, 'vehiclesFlowWarpedOccupancyIou': 0.7833306}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.58592045, 'vehiclesObservedIou': 0.32479835, 'vehiclesOccludedAuc': 0.24668375, 'vehiclesOccludedIou': 0.07829859, 'vehiclesFlowEpe': 7.363471, 'vehiclesFlowWarpedOccupancyAuc': 0.4891132, 'vehiclesFlowWarpedOccupancyIou': 0.37265256}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.5725534, 'vehiclesObservedIou': 0.29419813, 'vehiclesOccludedAuc': 0.10782991, 'vehiclesOccludedIou': 0.016572291, 'vehiclesFlowEpe': 3.068899, 'vehiclesFlowWarpedOccupancyAuc': 0.54348516, 'vehiclesFlowWarpedOccupancyIou': 0.33383316}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8930609, 'vehiclesObservedIou': 0.57974976, 'vehiclesOccludedAuc': 0.62883186, 'vehiclesOccludedIou': 0.14243862, 'vehiclesFlowEpe': 2.6597288, 'vehiclesFlowWarpedOccupancyAuc': 0.7642304, 'vehiclesFlowWarpedOccupancyIou': 0.6348703}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.83836436, 'vehiclesObservedIou': 0.52514565, 'vehiclesOccludedAuc': 0.6077547, 'vehiclesOccludedIou': 0.13434511, 'vehiclesFlowEpe': 5.274135, 'vehiclesFlowWarpedOccupancyAuc': 0.7583167, 'vehiclesFlowWarpedOccupancyIou': 0.6927223}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.58125985, 'vehiclesObservedIou': 0.23083656, 'vehiclesOccludedAuc': 0.094682366, 'vehiclesOccludedIou': 0.016387757, 'vehiclesFlowEpe': 3.8023453, 'vehiclesFlowWarpedOccupancyAuc': 0.49556804, 'vehiclesFlowWarpedOccupancyIou': 0.21128555}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.87103516, 'vehiclesObservedIou': 0.5398762, 'vehiclesOccludedAuc': 0.19166797, 'vehiclesOccludedIou': 0.04463563, 'vehiclesFlowEpe': 4.4532022, 'vehiclesFlowWarpedOccupancyAuc': 0.73771644, 'vehiclesFlowWarpedOccupancyIou': 0.6012802}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8206546, 'vehiclesObservedIou': 0.4674759, 'vehiclesOccludedAuc': 0.009831983, 'vehiclesOccludedIou': 0.005027527, 'vehiclesFlowEpe': 1.7209399, 'vehiclesFlowWarpedOccupancyAuc': 0.73361146, 'vehiclesFlowWarpedOccupancyIou': 0.5546356}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6346842, 'vehiclesObservedIou': 0.30587345, 'vehiclesOccludedAuc': 0.05896319, 'vehiclesOccludedIou': 0.006197976, 'vehiclesFlowEpe': 3.0822108, 'vehiclesFlowWarpedOccupancyAuc': 0.58628494, 'vehiclesFlowWarpedOccupancyIou': 0.35122156}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9195588, 'vehiclesObservedIou': 0.64181846, 'vehiclesOccludedAuc': 0.005601883, 'vehiclesOccludedIou': 0.00344736, 'vehiclesFlowEpe': 5.9227047, 'vehiclesFlowWarpedOccupancyAuc': 0.6991824, 'vehiclesFlowWarpedOccupancyIou': 0.67238194}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7141669, 'vehiclesObservedIou': 0.40325323, 'vehiclesOccludedAuc': 0.0010181256, 'vehiclesOccludedIou': 0.0009579916, 'vehiclesFlowEpe': 4.577861, 'vehiclesFlowWarpedOccupancyAuc': 0.59556365, 'vehiclesFlowWarpedOccupancyIou': 0.49939412}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6780473, 'vehiclesObservedIou': 0.32184756, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.9144707, 'vehiclesFlowWarpedOccupancyAuc': 0.66373396, 'vehiclesFlowWarpedOccupancyIou': 0.47212657}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9248414, 'vehiclesObservedIou': 0.6911961, 'vehiclesOccludedAuc': 0.485038, 'vehiclesOccludedIou': 0.112776294, 'vehiclesFlowEpe': 4.6179204, 'vehiclesFlowWarpedOccupancyAuc': 0.81658965, 'vehiclesFlowWarpedOccupancyIou': 0.7463493}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.26886788, 'vehiclesObservedIou': 0.1265746, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 4.352169, 'vehiclesFlowWarpedOccupancyAuc': 0.36691815, 'vehiclesFlowWarpedOccupancyIou': 0.20972353}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.92541116, 'vehiclesObservedIou': 0.64713085, 'vehiclesOccludedAuc': 0.0285895, 'vehiclesOccludedIou': 0.009198932, 'vehiclesFlowEpe': 2.2814212, 'vehiclesFlowWarpedOccupancyAuc': 0.7736617, 'vehiclesFlowWarpedOccupancyIou': 0.7330852}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.96013844, 'vehiclesObservedIou': 0.7830302, 'vehiclesOccludedAuc': 0.0723472, 'vehiclesOccludedIou': 0.013988812, 'vehiclesFlowEpe': 1.5024314, 'vehiclesFlowWarpedOccupancyAuc': 0.868869, 'vehiclesFlowWarpedOccupancyIou': 0.8640063}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.7041785416666667, 'vehiclesObservedIou': 0.4268880945833333, 'vehiclesOccludedAuc': 0.1292268841375, 'vehiclesOccludedIou': 0.02976693177791667, 'vehiclesFlowEpe': 4.150925258333333, 'vehiclesFlowWarpedOccupancyAuc': 0.6131576895833334, 'vehiclesFlowWarpedOccupancyIou': 0.50241218375}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00061new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 11:12:49.748668: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:12:49.799471: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:12:49.799744: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0017 seconds, Metrics: {'vehiclesObservedAuc': 0.17613778, 'vehiclesObservedIou': 0.060863037, 'vehiclesOccludedAuc': 0.019734476, 'vehiclesOccludedIou': 0.003978206, 'vehiclesFlowEpe': 5.0789394, 'vehiclesFlowWarpedOccupancyAuc': 0.19655216, 'vehiclesFlowWarpedOccupancyIou': 0.05169368}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.871167, 'vehiclesObservedIou': 0.6129049, 'vehiclesOccludedAuc': 0.012869803, 'vehiclesOccludedIou': 0.0066296626, 'vehiclesFlowEpe': 2.1421156, 'vehiclesFlowWarpedOccupancyAuc': 0.752171, 'vehiclesFlowWarpedOccupancyIou': 0.67161345}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.3256439, 'vehiclesObservedIou': 0.12692042, 'vehiclesOccludedAuc': 0.0012021142, 'vehiclesOccludedIou': 0.0013184891, 'vehiclesFlowEpe': 5.390497, 'vehiclesFlowWarpedOccupancyAuc': 0.3372447, 'vehiclesFlowWarpedOccupancyIou': 0.113673426}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.991893, 'vehiclesObservedIou': 0.8509123, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.5057318, 'vehiclesFlowWarpedOccupancyAuc': 0.8685142, 'vehiclesFlowWarpedOccupancyIou': 0.9110834}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6648653, 'vehiclesObservedIou': 0.36491457, 'vehiclesOccludedAuc': 0.430141, 'vehiclesOccludedIou': 0.060220107, 'vehiclesFlowEpe': 6.656539, 'vehiclesFlowWarpedOccupancyAuc': 0.5363629, 'vehiclesFlowWarpedOccupancyIou': 0.48460817}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6502813, 'vehiclesObservedIou': 0.26924562, 'vehiclesOccludedAuc': 0.42364144, 'vehiclesOccludedIou': 0.0993835, 'vehiclesFlowEpe': 7.519532, 'vehiclesFlowWarpedOccupancyAuc': 0.5564194, 'vehiclesFlowWarpedOccupancyIou': 0.3718364}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.81100947, 'vehiclesObservedIou': 0.45336288, 'vehiclesOccludedAuc': 0.12450437, 'vehiclesOccludedIou': 0.0191481, 'vehiclesFlowEpe': 3.979526, 'vehiclesFlowWarpedOccupancyAuc': 0.68311566, 'vehiclesFlowWarpedOccupancyIou': 0.55360246}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.951697, 'vehiclesObservedIou': 0.6865103, 'vehiclesOccludedAuc': 0.02880467, 'vehiclesOccludedIou': 0.009210131, 'vehiclesFlowEpe': 3.0781245, 'vehiclesFlowWarpedOccupancyAuc': 0.80404896, 'vehiclesFlowWarpedOccupancyIou': 0.72879577}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.89573437, 'vehiclesObservedIou': 0.5964054, 'vehiclesOccludedAuc': 0.3003628, 'vehiclesOccludedIou': 0.05084368, 'vehiclesFlowEpe': 3.0904408, 'vehiclesFlowWarpedOccupancyAuc': 0.77208763, 'vehiclesFlowWarpedOccupancyIou': 0.66988856}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.68570215, 'vehiclesObservedIou': 0.33132797, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 4.8663425, 'vehiclesFlowWarpedOccupancyAuc': 0.59167963, 'vehiclesFlowWarpedOccupancyIou': 0.433182}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6063138, 'vehiclesObservedIou': 0.39566785, 'vehiclesOccludedAuc': 0.17137727, 'vehiclesOccludedIou': 0.035371494, 'vehiclesFlowEpe': 3.421553, 'vehiclesFlowWarpedOccupancyAuc': 0.65150726, 'vehiclesFlowWarpedOccupancyIou': 0.46758083}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6549022, 'vehiclesObservedIou': 0.32833856, 'vehiclesOccludedAuc': 0.059755247, 'vehiclesOccludedIou': 0.0083049415, 'vehiclesFlowEpe': 4.2561913, 'vehiclesFlowWarpedOccupancyAuc': 0.57122374, 'vehiclesFlowWarpedOccupancyIou': 0.34924316}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.45497096, 'vehiclesObservedIou': 0.2677505, 'vehiclesOccludedAuc': 0.034610648, 'vehiclesOccludedIou': 0.0070859445, 'vehiclesFlowEpe': 5.7989755, 'vehiclesFlowWarpedOccupancyAuc': 0.38281858, 'vehiclesFlowWarpedOccupancyIou': 0.2327159}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9067903, 'vehiclesObservedIou': 0.62260175, 'vehiclesOccludedAuc': 0.11996638, 'vehiclesOccludedIou': 0.012650996, 'vehiclesFlowEpe': 4.1583185, 'vehiclesFlowWarpedOccupancyAuc': 0.71509814, 'vehiclesFlowWarpedOccupancyIou': 0.63197964}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6571972, 'vehiclesObservedIou': 0.34413567, 'vehiclesOccludedAuc': 0.03173507, 'vehiclesOccludedIou': 0.0046775066, 'vehiclesFlowEpe': 4.3457246, 'vehiclesFlowWarpedOccupancyAuc': 0.5636097, 'vehiclesFlowWarpedOccupancyIou': 0.42045683}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8641101, 'vehiclesObservedIou': 0.52610576, 'vehiclesOccludedAuc': 0.27852684, 'vehiclesOccludedIou': 0.054618362, 'vehiclesFlowEpe': 4.2355046, 'vehiclesFlowWarpedOccupancyAuc': 0.7075552, 'vehiclesFlowWarpedOccupancyIou': 0.56830287}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.5571777, 'vehiclesObservedIou': 0.25355893, 'vehiclesOccludedAuc': 0.054497782, 'vehiclesOccludedIou': 0.0077257436, 'vehiclesFlowEpe': 4.806597, 'vehiclesFlowWarpedOccupancyAuc': 0.47804174, 'vehiclesFlowWarpedOccupancyIou': 0.27803606}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.932787, 'vehiclesObservedIou': 0.72709197, 'vehiclesOccludedAuc': 0.0013901546, 'vehiclesOccludedIou': 0.0006357871, 'vehiclesFlowEpe': 4.025508, 'vehiclesFlowWarpedOccupancyAuc': 0.83006865, 'vehiclesFlowWarpedOccupancyIou': 0.7840769}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9656155, 'vehiclesObservedIou': 0.82291436, 'vehiclesOccludedAuc': 0.005940394, 'vehiclesOccludedIou': 0.0022989183, 'vehiclesFlowEpe': 3.1367974, 'vehiclesFlowWarpedOccupancyAuc': 0.83805144, 'vehiclesFlowWarpedOccupancyIou': 0.8526689}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.45768175, 'vehiclesObservedIou': 0.17312787, 'vehiclesOccludedAuc': 0.010302232, 'vehiclesOccludedIou': 0.005090255, 'vehiclesFlowEpe': 6.7559285, 'vehiclesFlowWarpedOccupancyAuc': 0.28331372, 'vehiclesFlowWarpedOccupancyIou': 0.13111222}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.99153465, 'vehiclesObservedIou': 0.8999394, 'vehiclesOccludedAuc': 0.3541635, 'vehiclesOccludedIou': 0.021030514, 'vehiclesFlowEpe': 1.7146869, 'vehiclesFlowWarpedOccupancyAuc': 0.9356893, 'vehiclesFlowWarpedOccupancyIou': 0.96558374}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8064037, 'vehiclesObservedIou': 0.47114354, 'vehiclesOccludedAuc': 0.01170782, 'vehiclesOccludedIou': 0.0053933985, 'vehiclesFlowEpe': 1.6638538, 'vehiclesFlowWarpedOccupancyAuc': 0.5477134, 'vehiclesFlowWarpedOccupancyIou': 0.5360288}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6509917, 'vehiclesObservedIou': 0.28433365, 'vehiclesOccludedAuc': 0.0025741344, 'vehiclesOccludedIou': 0.0007769661, 'vehiclesFlowEpe': 4.027556, 'vehiclesFlowWarpedOccupancyAuc': 0.3993194, 'vehiclesFlowWarpedOccupancyIou': 0.38954926}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8547941, 'vehiclesObservedIou': 0.55235124, 'vehiclesOccludedAuc': 0.13753574, 'vehiclesOccludedIou': 0.022199713, 'vehiclesFlowEpe': 4.632544, 'vehiclesFlowWarpedOccupancyAuc': 0.6876009, 'vehiclesFlowWarpedOccupancyIou': 0.6535853}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6810158, 'vehiclesObservedIou': 0.33647794, 'vehiclesOccludedAuc': 0.032470014, 'vehiclesOccludedIou': 0.01028797, 'vehiclesFlowEpe': 8.021387, 'vehiclesFlowWarpedOccupancyAuc': 0.5976775, 'vehiclesFlowWarpedOccupancyIou': 0.46939194}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.4953465, 'vehiclesObservedIou': 0.24613234, 'vehiclesOccludedAuc': 0.029202826, 'vehiclesOccludedIou': 0.005917898, 'vehiclesFlowEpe': 5.962577, 'vehiclesFlowWarpedOccupancyAuc': 0.45793876, 'vehiclesFlowWarpedOccupancyIou': 0.31160924}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.15133272, 'vehiclesObservedIou': 0.06800053, 'vehiclesOccludedAuc': 0.00045943543, 'vehiclesOccludedIou': 2.2909753e-05, 'vehiclesFlowEpe': 3.776429, 'vehiclesFlowWarpedOccupancyAuc': 0.1555751, 'vehiclesFlowWarpedOccupancyIou': 0.05916458}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.4196534, 'vehiclesObservedIou': 0.2059339, 'vehiclesOccludedAuc': 0.07817094, 'vehiclesOccludedIou': 0.014676859, 'vehiclesFlowEpe': 5.2115297, 'vehiclesFlowWarpedOccupancyAuc': 0.39514908, 'vehiclesFlowWarpedOccupancyIou': 0.2487906}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.64608693, 'vehiclesObservedIou': 0.32657725, 'vehiclesOccludedAuc': 0.06979191, 'vehiclesOccludedIou': 0.01776346, 'vehiclesFlowEpe': 4.4297724, 'vehiclesFlowWarpedOccupancyAuc': 0.5366685, 'vehiclesFlowWarpedOccupancyIou': 0.34197012}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.94089675, 'vehiclesObservedIou': 0.6900271, 'vehiclesOccludedAuc': 0.026650338, 'vehiclesOccludedIou': 0.00487167, 'vehiclesFlowEpe': 2.4710982, 'vehiclesFlowWarpedOccupancyAuc': 0.82778585, 'vehiclesFlowWarpedOccupancyIou': 0.7723484}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9397939, 'vehiclesObservedIou': 0.6992873, 'vehiclesOccludedAuc': 0.041734256, 'vehiclesOccludedIou': 0.012659742, 'vehiclesFlowEpe': 4.803332, 'vehiclesFlowWarpedOccupancyAuc': 0.7391144, 'vehiclesFlowWarpedOccupancyIou': 0.7032796}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9392187, 'vehiclesObservedIou': 0.757863, 'vehiclesOccludedAuc': 0.0070435097, 'vehiclesOccludedIou': 0.004276137, 'vehiclesFlowEpe': 8.800892, 'vehiclesFlowWarpedOccupancyAuc': 0.6856969, 'vehiclesFlowWarpedOccupancyIou': 0.74317944}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.71935856, 'vehiclesObservedIou': 0.3762524, 'vehiclesOccludedAuc': 0.06023954, 'vehiclesOccludedIou': 0.017709373, 'vehiclesFlowEpe': 5.7258477, 'vehiclesFlowWarpedOccupancyAuc': 0.6022139, 'vehiclesFlowWarpedOccupancyIou': 0.41218156}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.68108505, 'vehiclesObservedIou': 0.32557315, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.0315118, 'vehiclesFlowWarpedOccupancyAuc': 0.7090695, 'vehiclesFlowWarpedOccupancyIou': 0.44631797}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.84778666, 'vehiclesObservedIou': 0.5547063, 'vehiclesOccludedAuc': 0.13730527, 'vehiclesOccludedIou': 0.019578503, 'vehiclesFlowEpe': 4.127691, 'vehiclesFlowWarpedOccupancyAuc': 0.71033865, 'vehiclesFlowWarpedOccupancyIou': 0.6088231}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.23869891, 'vehiclesObservedIou': 0.15288813, 'vehiclesOccludedAuc': 0.3832911, 'vehiclesOccludedIou': 0.03497092, 'vehiclesFlowEpe': 7.453279, 'vehiclesFlowWarpedOccupancyAuc': 0.37682313, 'vehiclesFlowWarpedOccupancyIou': 0.26025254}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.79168224, 'vehiclesObservedIou': 0.4249929, 'vehiclesOccludedAuc': 0.1274613, 'vehiclesOccludedIou': 0.0302707, 'vehiclesFlowEpe': 2.5943663, 'vehiclesFlowWarpedOccupancyAuc': 0.68092656, 'vehiclesFlowWarpedOccupancyIou': 0.4851964}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.35050273, 'vehiclesObservedIou': 0.15120225, 'vehiclesOccludedAuc': 0.102953315, 'vehiclesOccludedIou': 0.015282972, 'vehiclesFlowEpe': 5.55367, 'vehiclesFlowWarpedOccupancyAuc': 0.3681268, 'vehiclesFlowWarpedOccupancyIou': 0.14485721}
2024-05-28 11:13:15.538532: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:13:15.593259: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:13:15.593608: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5629953, 'vehiclesObservedIou': 0.31891075, 'vehiclesOccludedAuc': 0.0015649418, 'vehiclesOccludedIou': 0.0007509064, 'vehiclesFlowEpe': 4.876941, 'vehiclesFlowWarpedOccupancyAuc': 0.52294207, 'vehiclesFlowWarpedOccupancyIou': 0.3455202}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.94984907, 'vehiclesObservedIou': 0.7074157, 'vehiclesOccludedAuc': 0.17742315, 'vehiclesOccludedIou': 0.041373506, 'vehiclesFlowEpe': 1.6477005, 'vehiclesFlowWarpedOccupancyAuc': 0.8545877, 'vehiclesFlowWarpedOccupancyIou': 0.7541934}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9508644, 'vehiclesObservedIou': 0.7662994, 'vehiclesOccludedAuc': 0.027937919, 'vehiclesOccludedIou': 0.008977684, 'vehiclesFlowEpe': 6.3532596, 'vehiclesFlowWarpedOccupancyAuc': 0.7178316, 'vehiclesFlowWarpedOccupancyIou': 0.71481866}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.991893, 'vehiclesObservedIou': 0.8509123, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.5057318, 'vehiclesFlowWarpedOccupancyAuc': 0.8685142, 'vehiclesFlowWarpedOccupancyIou': 0.9110834}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6997943792682927, 'vehiclesObservedIou': 0.44221875090243906, 'vehiclesOccludedAuc': 0.09558643049097561, 'vehiclesOccludedIou': 0.016536186001292683, 'vehiclesFlowEpe': 4.539727119512195, 'vehiclesFlowWarpedOccupancyAuc': 0.6006895953658538, 'vehiclesFlowWarpedOccupancyIou': 0.48958030941463415}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00114new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.8714718, 'vehiclesObservedIou': 0.56801707, 'vehiclesOccludedAuc': 0.0064566555, 'vehiclesOccludedIou': 0.003552054, 'vehiclesFlowEpe': 8.967821, 'vehiclesFlowWarpedOccupancyAuc': 0.7139517, 'vehiclesFlowWarpedOccupancyIou': 0.6510354}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8533203, 'vehiclesObservedIou': 0.50361264, 'vehiclesOccludedAuc': 0.08240847, 'vehiclesOccludedIou': 0.020969447, 'vehiclesFlowEpe': 3.3099506, 'vehiclesFlowWarpedOccupancyAuc': 0.69164044, 'vehiclesFlowWarpedOccupancyIou': 0.5771103}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.69634783, 'vehiclesObservedIou': 0.47971407, 'vehiclesOccludedAuc': 0.0027731275, 'vehiclesOccludedIou': 0.0016761685, 'vehiclesFlowEpe': 3.0684698, 'vehiclesFlowWarpedOccupancyAuc': 0.7120993, 'vehiclesFlowWarpedOccupancyIou': 0.6536023}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6044127, 'vehiclesObservedIou': 0.32089132, 'vehiclesOccludedAuc': 0.056049515, 'vehiclesOccludedIou': 0.0152224805, 'vehiclesFlowEpe': 6.4146614, 'vehiclesFlowWarpedOccupancyAuc': 0.5421174, 'vehiclesFlowWarpedOccupancyIou': 0.43781653}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.32414967, 'vehiclesObservedIou': 0.10999145, 'vehiclesOccludedAuc': 0.109632134, 'vehiclesOccludedIou': 0.018945104, 'vehiclesFlowEpe': 3.432611, 'vehiclesFlowWarpedOccupancyAuc': 0.49159905, 'vehiclesFlowWarpedOccupancyIou': 0.1160144}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.87162983, 'vehiclesObservedIou': 0.38449892, 'vehiclesOccludedAuc': 0.07929925, 'vehiclesOccludedIou': 0.013722535, 'vehiclesFlowEpe': 4.155939, 'vehiclesFlowWarpedOccupancyAuc': 0.62643087, 'vehiclesFlowWarpedOccupancyIou': 0.409527}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.98252857, 'vehiclesObservedIou': 0.81542236, 'vehiclesOccludedAuc': 0.011073617, 'vehiclesOccludedIou': 0.003832788, 'vehiclesFlowEpe': 3.140922, 'vehiclesFlowWarpedOccupancyAuc': 0.86301136, 'vehiclesFlowWarpedOccupancyIou': 0.852909}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.23607965, 'vehiclesObservedIou': 0.102557085, 'vehiclesOccludedAuc': 0.00016007357, 'vehiclesOccludedIou': 0.00027577986, 'vehiclesFlowEpe': 3.5980768, 'vehiclesFlowWarpedOccupancyAuc': 0.47805065, 'vehiclesFlowWarpedOccupancyIou': 0.11385996}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6681395, 'vehiclesObservedIou': 0.39496997, 'vehiclesOccludedAuc': 0.16579932, 'vehiclesOccludedIou': 0.041579537, 'vehiclesFlowEpe': 3.570579, 'vehiclesFlowWarpedOccupancyAuc': 0.60556144, 'vehiclesFlowWarpedOccupancyIou': 0.4544556}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.48627388, 'vehiclesObservedIou': 0.24895406, 'vehiclesOccludedAuc': 0.004500222, 'vehiclesOccludedIou': 0.0017367189, 'vehiclesFlowEpe': 8.376848, 'vehiclesFlowWarpedOccupancyAuc': 0.3520081, 'vehiclesFlowWarpedOccupancyIou': 0.28003034}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.598893, 'vehiclesObservedIou': 0.29991272, 'vehiclesOccludedAuc': 0.06169808, 'vehiclesOccludedIou': 0.012568871, 'vehiclesFlowEpe': 3.7481754, 'vehiclesFlowWarpedOccupancyAuc': 0.5400152, 'vehiclesFlowWarpedOccupancyIou': 0.400272}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.14745316, 'vehiclesObservedIou': 0.056366928, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 5.4145775, 'vehiclesFlowWarpedOccupancyAuc': 0.17302392, 'vehiclesFlowWarpedOccupancyIou': 0.05334166}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.76960856, 'vehiclesObservedIou': 0.5245476, 'vehiclesOccludedAuc': 0.032867555, 'vehiclesOccludedIou': 0.009623099, 'vehiclesFlowEpe': 3.2543755, 'vehiclesFlowWarpedOccupancyAuc': 0.7623121, 'vehiclesFlowWarpedOccupancyIou': 0.5843737}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9811562, 'vehiclesObservedIou': 0.90917116, 'vehiclesOccludedAuc': 0.00020790275, 'vehiclesOccludedIou': 0.0002283894, 'vehiclesFlowEpe': 3.0932655, 'vehiclesFlowWarpedOccupancyAuc': 0.8884747, 'vehiclesFlowWarpedOccupancyIou': 0.9434262}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.80617565, 'vehiclesObservedIou': 0.46814618, 'vehiclesOccludedAuc': 0.046548963, 'vehiclesOccludedIou': 0.008683969, 'vehiclesFlowEpe': 2.8381388, 'vehiclesFlowWarpedOccupancyAuc': 0.66141117, 'vehiclesFlowWarpedOccupancyIou': 0.46995556}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.4181838, 'vehiclesObservedIou': 0.22126894, 'vehiclesOccludedAuc': 0.066625245, 'vehiclesOccludedIou': 0.01967299, 'vehiclesFlowEpe': 5.9186583, 'vehiclesFlowWarpedOccupancyAuc': 0.372308, 'vehiclesFlowWarpedOccupancyIou': 0.30149385}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.91312504, 'vehiclesObservedIou': 0.6244487, 'vehiclesOccludedAuc': 0.04591545, 'vehiclesOccludedIou': 0.015239607, 'vehiclesFlowEpe': 3.186574, 'vehiclesFlowWarpedOccupancyAuc': 0.7690988, 'vehiclesFlowWarpedOccupancyIou': 0.6833143}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.81802464, 'vehiclesObservedIou': 0.49222443, 'vehiclesOccludedAuc': 0.27390593, 'vehiclesOccludedIou': 0.055474997, 'vehiclesFlowEpe': 5.0618687, 'vehiclesFlowWarpedOccupancyAuc': 0.6286217, 'vehiclesFlowWarpedOccupancyIou': 0.5451999}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.75569886, 'vehiclesObservedIou': 0.42949012, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.3709257, 'vehiclesFlowWarpedOccupancyAuc': 0.64824, 'vehiclesFlowWarpedOccupancyIou': 0.5597955}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.558871, 'vehiclesObservedIou': 0.26034194, 'vehiclesOccludedAuc': 0.0009677203, 'vehiclesOccludedIou': 0.0008637236, 'vehiclesFlowEpe': 7.4966955, 'vehiclesFlowWarpedOccupancyAuc': 0.47865766, 'vehiclesFlowWarpedOccupancyIou': 0.3546538}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9616519, 'vehiclesObservedIou': 0.7925502, 'vehiclesOccludedAuc': 0.007834687, 'vehiclesOccludedIou': 0.0033515748, 'vehiclesFlowEpe': 6.2009206, 'vehiclesFlowWarpedOccupancyAuc': 0.8274954, 'vehiclesFlowWarpedOccupancyIou': 0.8212391}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9543569, 'vehiclesObservedIou': 0.73604655, 'vehiclesOccludedAuc': 0.006199958, 'vehiclesOccludedIou': 0.0025179612, 'vehiclesFlowEpe': 4.249349, 'vehiclesFlowWarpedOccupancyAuc': 0.80282384, 'vehiclesFlowWarpedOccupancyIou': 0.71224415}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.91840065, 'vehiclesObservedIou': 0.5555879, 'vehiclesOccludedAuc': 0.02621034, 'vehiclesOccludedIou': 0.009221946, 'vehiclesFlowEpe': 5.1053224, 'vehiclesFlowWarpedOccupancyAuc': 0.7180325, 'vehiclesFlowWarpedOccupancyIou': 0.55069476}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.9751732, 'vehiclesObservedIou': 0.83546764, 'vehiclesOccludedAuc': 0.0001966855, 'vehiclesOccludedIou': 6.132517e-05, 'vehiclesFlowEpe': 2.2306068, 'vehiclesFlowWarpedOccupancyAuc': 0.88234395, 'vehiclesFlowWarpedOccupancyIou': 0.8851272}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5810731, 'vehiclesObservedIou': 0.35344797, 'vehiclesOccludedAuc': 0.0068077156, 'vehiclesOccludedIou': 0.002361417, 'vehiclesFlowEpe': 11.050735, 'vehiclesFlowWarpedOccupancyAuc': 0.44276175, 'vehiclesFlowWarpedOccupancyIou': 0.41996917}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.690187, 'vehiclesObservedIou': 0.38241175, 'vehiclesOccludedAuc': 0.021779757, 'vehiclesOccludedIou': 0.004003538, 'vehiclesFlowEpe': 4.411063, 'vehiclesFlowWarpedOccupancyAuc': 0.5646377, 'vehiclesFlowWarpedOccupancyIou': 0.38953438}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.79611063, 'vehiclesObservedIou': 0.44948563, 'vehiclesOccludedAuc': 0.09266034, 'vehiclesOccludedIou': 0.01301872, 'vehiclesFlowEpe': 2.451022, 'vehiclesFlowWarpedOccupancyAuc': 0.75531584, 'vehiclesFlowWarpedOccupancyIou': 0.5600146}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6892211, 'vehiclesObservedIou': 0.44179767, 'vehiclesOccludedAuc': 0.13907684, 'vehiclesOccludedIou': 0.035902735, 'vehiclesFlowEpe': 3.5784016, 'vehiclesFlowWarpedOccupancyAuc': 0.740292, 'vehiclesFlowWarpedOccupancyIou': 0.5430837}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.98252857, 'vehiclesObservedIou': 0.81542236, 'vehiclesOccludedAuc': 0.011073617, 'vehiclesOccludedIou': 0.003832788, 'vehiclesFlowEpe': 3.140922, 'vehiclesFlowWarpedOccupancyAuc': 0.86301136, 'vehiclesFlowWarpedOccupancyIou': 0.852909}
2024-05-28 11:13:33.295748: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:13:33.347411: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:13:33.347693: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.7117042185714287, 'vehiclesObservedIou': 0.4557622490357142, 'vehiclesOccludedAuc': 0.04813055549, 'vehiclesOccludedIou': 0.011225266997499999, 'vehiclesFlowEpe': 4.632019782142857, 'vehiclesFlowWarpedOccupancyAuc': 0.6332977335714286, 'vehiclesFlowWarpedOccupancyIou': 0.5115747985714286}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00051new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0023 seconds, Metrics: {'vehiclesObservedAuc': 0.33884585, 'vehiclesObservedIou': 0.13222162, 'vehiclesOccludedAuc': 0.043079264, 'vehiclesOccludedIou': 0.007925492, 'vehiclesFlowEpe': 6.7077227, 'vehiclesFlowWarpedOccupancyAuc': 0.33481094, 'vehiclesFlowWarpedOccupancyIou': 0.14899331}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.95413375, 'vehiclesObservedIou': 0.7615457, 'vehiclesOccludedAuc': 0.00092014606, 'vehiclesOccludedIou': 0.0002878423, 'vehiclesFlowEpe': 3.635232, 'vehiclesFlowWarpedOccupancyAuc': 0.84425765, 'vehiclesFlowWarpedOccupancyIou': 0.8187012}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.16581132, 'vehiclesObservedIou': 0.1308359, 'vehiclesOccludedAuc': 5.9851693e-05, 'vehiclesOccludedIou': 1.4510708e-06, 'vehiclesFlowEpe': 2.13884, 'vehiclesFlowWarpedOccupancyAuc': 0.18000339, 'vehiclesFlowWarpedOccupancyIou': 0.14335422}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.10595591, 'vehiclesObservedIou': 0.04767643, 'vehiclesOccludedAuc': 0.059370685, 'vehiclesOccludedIou': 0.012166049, 'vehiclesFlowEpe': 3.7163887, 'vehiclesFlowWarpedOccupancyAuc': 0.25783855, 'vehiclesFlowWarpedOccupancyIou': 0.05219016}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7362271, 'vehiclesObservedIou': 0.4056688, 'vehiclesOccludedAuc': 0.061491273, 'vehiclesOccludedIou': 0.01612946, 'vehiclesFlowEpe': 6.45693, 'vehiclesFlowWarpedOccupancyAuc': 0.5727492, 'vehiclesFlowWarpedOccupancyIou': 0.47855958}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5541817, 'vehiclesObservedIou': 0.29247984, 'vehiclesOccludedAuc': 0.046067026, 'vehiclesOccludedIou': 0.0072313496, 'vehiclesFlowEpe': 5.6002626, 'vehiclesFlowWarpedOccupancyAuc': 0.42154872, 'vehiclesFlowWarpedOccupancyIou': 0.32902023}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8083028, 'vehiclesObservedIou': 0.4978414, 'vehiclesOccludedAuc': 0.06898727, 'vehiclesOccludedIou': 0.02252934, 'vehiclesFlowEpe': 3.8863833, 'vehiclesFlowWarpedOccupancyAuc': 0.668652, 'vehiclesFlowWarpedOccupancyIou': 0.53726333}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6571873, 'vehiclesObservedIou': 0.34170312, 'vehiclesOccludedAuc': 0.08248348, 'vehiclesOccludedIou': 0.018587967, 'vehiclesFlowEpe': 5.1934385, 'vehiclesFlowWarpedOccupancyAuc': 0.5570387, 'vehiclesFlowWarpedOccupancyIou': 0.45124832}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.548525, 'vehiclesObservedIou': 0.28979212, 'vehiclesOccludedAuc': 0.01395095, 'vehiclesOccludedIou': 0.0043862564, 'vehiclesFlowEpe': 3.9859385, 'vehiclesFlowWarpedOccupancyAuc': 0.53665614, 'vehiclesFlowWarpedOccupancyIou': 0.32423612}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8446806, 'vehiclesObservedIou': 0.5459832, 'vehiclesOccludedAuc': 0.04206328, 'vehiclesOccludedIou': 0.018051093, 'vehiclesFlowEpe': 3.83023, 'vehiclesFlowWarpedOccupancyAuc': 0.70292944, 'vehiclesFlowWarpedOccupancyIou': 0.6281443}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.6910417, 'vehiclesObservedIou': 0.35012397, 'vehiclesOccludedAuc': 0.020609774, 'vehiclesOccludedIou': 0.0054656644, 'vehiclesFlowEpe': 2.8838167, 'vehiclesFlowWarpedOccupancyAuc': 0.5918387, 'vehiclesFlowWarpedOccupancyIou': 0.42652804}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.67378247, 'vehiclesObservedIou': 0.43773615, 'vehiclesOccludedAuc': 0.21154429, 'vehiclesOccludedIou': 0.016964165, 'vehiclesFlowEpe': 5.7113085, 'vehiclesFlowWarpedOccupancyAuc': 0.71065974, 'vehiclesFlowWarpedOccupancyIou': 0.5753745}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6578661, 'vehiclesObservedIou': 0.3299767, 'vehiclesOccludedAuc': 0.1962444, 'vehiclesOccludedIou': 0.0618189, 'vehiclesFlowEpe': 6.2113137, 'vehiclesFlowWarpedOccupancyAuc': 0.638072, 'vehiclesFlowWarpedOccupancyIou': 0.40696952}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.24043371, 'vehiclesObservedIou': 0.10530923, 'vehiclesOccludedAuc': 0.02740368, 'vehiclesOccludedIou': 0.005393727, 'vehiclesFlowEpe': 7.133425, 'vehiclesFlowWarpedOccupancyAuc': 0.29152137, 'vehiclesFlowWarpedOccupancyIou': 0.104885675}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.1894129, 'vehiclesObservedIou': 0.07136025, 'vehiclesOccludedAuc': 0.068532206, 'vehiclesOccludedIou': 0.006059447, 'vehiclesFlowEpe': 8.2696495, 'vehiclesFlowWarpedOccupancyAuc': 0.18596698, 'vehiclesFlowWarpedOccupancyIou': 0.063807465}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.85047084, 'vehiclesObservedIou': 0.5023847, 'vehiclesOccludedAuc': 0.1352912, 'vehiclesOccludedIou': 0.00930867, 'vehiclesFlowEpe': 2.2790534, 'vehiclesFlowWarpedOccupancyAuc': 0.73550224, 'vehiclesFlowWarpedOccupancyIou': 0.6193226}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.97356915, 'vehiclesObservedIou': 0.70092624, 'vehiclesOccludedAuc': 0.024113262, 'vehiclesOccludedIou': 0.0063558654, 'vehiclesFlowEpe': 3.715949, 'vehiclesFlowWarpedOccupancyAuc': 0.7959866, 'vehiclesFlowWarpedOccupancyIou': 0.69183356}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6344284, 'vehiclesObservedIou': 0.3594848, 'vehiclesOccludedAuc': 0.037048813, 'vehiclesOccludedIou': 0.0076747304, 'vehiclesFlowEpe': 3.7338662, 'vehiclesFlowWarpedOccupancyAuc': 0.59496605, 'vehiclesFlowWarpedOccupancyIou': 0.42030373}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9556513, 'vehiclesObservedIou': 0.8583856, 'vehiclesOccludedAuc': 0.0011532237, 'vehiclesOccludedIou': 0.00022355333, 'vehiclesFlowEpe': 2.250276, 'vehiclesFlowWarpedOccupancyAuc': 0.89857036, 'vehiclesFlowWarpedOccupancyIou': 0.9105892}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8352163, 'vehiclesObservedIou': 0.5079644, 'vehiclesOccludedAuc': 0.03457771, 'vehiclesOccludedIou': 0.011882091, 'vehiclesFlowEpe': 2.9385686, 'vehiclesFlowWarpedOccupancyAuc': 0.7557068, 'vehiclesFlowWarpedOccupancyIou': 0.58802813}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.4571676, 'vehiclesObservedIou': 0.27292874, 'vehiclesOccludedAuc': 0.07108122, 'vehiclesOccludedIou': 0.014904653, 'vehiclesFlowEpe': 7.2885675, 'vehiclesFlowWarpedOccupancyAuc': 0.50213367, 'vehiclesFlowWarpedOccupancyIou': 0.36609563}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7778016, 'vehiclesObservedIou': 0.43179068, 'vehiclesOccludedAuc': 0.2601811, 'vehiclesOccludedIou': 0.08412313, 'vehiclesFlowEpe': 4.0372243, 'vehiclesFlowWarpedOccupancyAuc': 0.656868, 'vehiclesFlowWarpedOccupancyIou': 0.5356143}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.52230823, 'vehiclesObservedIou': 0.26191506, 'vehiclesOccludedAuc': 0.023364741, 'vehiclesOccludedIou': 0.0044125365, 'vehiclesFlowEpe': 10.233776, 'vehiclesFlowWarpedOccupancyAuc': 0.41903242, 'vehiclesFlowWarpedOccupancyIou': 0.30882913}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.84152067, 'vehiclesObservedIou': 0.5068962, 'vehiclesOccludedAuc': 0.21391876, 'vehiclesOccludedIou': 0.091671124, 'vehiclesFlowEpe': 4.483881, 'vehiclesFlowWarpedOccupancyAuc': 0.7454453, 'vehiclesFlowWarpedOccupancyIou': 0.65261894}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.97356915, 'vehiclesObservedIou': 0.70092624, 'vehiclesOccludedAuc': 0.024113262, 'vehiclesOccludedIou': 0.0063558654, 'vehiclesFlowEpe': 3.715949, 'vehiclesFlowWarpedOccupancyAuc': 0.7959866, 'vehiclesFlowWarpedOccupancyIou': 0.69183356}
Average Time: 0.0012 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6256050958333333, 'vehiclesObservedIou': 0.38095545208333337, 'vehiclesOccludedAuc': 0.07264740022720832, 'vehiclesOccludedIou': 0.018064773225033335, 'vehiclesFlowEpe': 4.8467517375, 'vehiclesFlowWarpedOccupancyAuc': 0.5666147899999999, 'vehiclesFlowWarpedOccupancyIou': 0.44093796625}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00096new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 11:13:48.905474: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:13:48.957498: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:13:48.957785: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.74398327, 'vehiclesObservedIou': 0.45848247, 'vehiclesOccludedAuc': 0.0085331835, 'vehiclesOccludedIou': 0.0021705744, 'vehiclesFlowEpe': 3.222595, 'vehiclesFlowWarpedOccupancyAuc': 0.6699497, 'vehiclesFlowWarpedOccupancyIou': 0.54959035}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6027003, 'vehiclesObservedIou': 0.2576369, 'vehiclesOccludedAuc': 0.03407022, 'vehiclesOccludedIou': 0.006642008, 'vehiclesFlowEpe': 5.5777984, 'vehiclesFlowWarpedOccupancyAuc': 0.49126512, 'vehiclesFlowWarpedOccupancyIou': 0.27128312}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8588009, 'vehiclesObservedIou': 0.5689768, 'vehiclesOccludedAuc': 0.08266115, 'vehiclesOccludedIou': 0.0315582, 'vehiclesFlowEpe': 7.3471985, 'vehiclesFlowWarpedOccupancyAuc': 0.7543004, 'vehiclesFlowWarpedOccupancyIou': 0.63654304}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.15361767, 'vehiclesObservedIou': 0.062355753, 'vehiclesOccludedAuc': 0.0007461366, 'vehiclesOccludedIou': 0.0013913586, 'vehiclesFlowEpe': 2.4602168, 'vehiclesFlowWarpedOccupancyAuc': 0.36271363, 'vehiclesFlowWarpedOccupancyIou': 0.07910727}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.59529203, 'vehiclesObservedIou': 0.29028675, 'vehiclesOccludedAuc': 0.1623432, 'vehiclesOccludedIou': 0.043058727, 'vehiclesFlowEpe': 2.4645224, 'vehiclesFlowWarpedOccupancyAuc': 0.661304, 'vehiclesFlowWarpedOccupancyIou': 0.43540287}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8586722, 'vehiclesObservedIou': 0.49140635, 'vehiclesOccludedAuc': 0.03721239, 'vehiclesOccludedIou': 0.017445195, 'vehiclesFlowEpe': 4.707154, 'vehiclesFlowWarpedOccupancyAuc': 0.6865808, 'vehiclesFlowWarpedOccupancyIou': 0.56158084}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7245495, 'vehiclesObservedIou': 0.40281308, 'vehiclesOccludedAuc': 0.054592516, 'vehiclesOccludedIou': 0.026336951, 'vehiclesFlowEpe': 4.4528565, 'vehiclesFlowWarpedOccupancyAuc': 0.67314065, 'vehiclesFlowWarpedOccupancyIou': 0.4750338}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7229175, 'vehiclesObservedIou': 0.4691749, 'vehiclesOccludedAuc': 0.2657136, 'vehiclesOccludedIou': 0.05804963, 'vehiclesFlowEpe': 3.4988391, 'vehiclesFlowWarpedOccupancyAuc': 0.63251513, 'vehiclesFlowWarpedOccupancyIou': 0.5296956}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.5998433, 'vehiclesObservedIou': 0.3459285, 'vehiclesOccludedAuc': 0.0037580095, 'vehiclesOccludedIou': 0.0011332119, 'vehiclesFlowEpe': 2.0702295, 'vehiclesFlowWarpedOccupancyAuc': 0.69295985, 'vehiclesFlowWarpedOccupancyIou': 0.4228829}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9414097, 'vehiclesObservedIou': 0.72575974, 'vehiclesOccludedAuc': 0.12800393, 'vehiclesOccludedIou': 0.030980466, 'vehiclesFlowEpe': 1.4484082, 'vehiclesFlowWarpedOccupancyAuc': 0.7956225, 'vehiclesFlowWarpedOccupancyIou': 0.5797687}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8836132, 'vehiclesObservedIou': 0.536481, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.7875714, 'vehiclesFlowWarpedOccupancyAuc': 0.7826688, 'vehiclesFlowWarpedOccupancyIou': 0.6497694}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.82451135, 'vehiclesObservedIou': 0.56904, 'vehiclesOccludedAuc': 0.2803034, 'vehiclesOccludedIou': 0.032402523, 'vehiclesFlowEpe': 7.967536, 'vehiclesFlowWarpedOccupancyAuc': 0.6674345, 'vehiclesFlowWarpedOccupancyIou': 0.54754776}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.42748764, 'vehiclesObservedIou': 0.18847063, 'vehiclesOccludedAuc': 0.22949387, 'vehiclesOccludedIou': 0.04495574, 'vehiclesFlowEpe': 3.841308, 'vehiclesFlowWarpedOccupancyAuc': 0.55324286, 'vehiclesFlowWarpedOccupancyIou': 0.21342982}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.5499003, 'vehiclesObservedIou': 0.24598324, 'vehiclesOccludedAuc': 0.124749936, 'vehiclesOccludedIou': 0.02354429, 'vehiclesFlowEpe': 4.2518663, 'vehiclesFlowWarpedOccupancyAuc': 0.5163093, 'vehiclesFlowWarpedOccupancyIou': 0.3110443}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.55127764, 'vehiclesObservedIou': 0.32686177, 'vehiclesOccludedAuc': 0.0067351917, 'vehiclesOccludedIou': 0.0024175008, 'vehiclesFlowEpe': 7.983194, 'vehiclesFlowWarpedOccupancyAuc': 0.4580453, 'vehiclesFlowWarpedOccupancyIou': 0.3725047}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.99690557, 'vehiclesObservedIou': 0.9077371, 'vehiclesOccludedAuc': 0.0007536886, 'vehiclesOccludedIou': 0.0019649046, 'vehiclesFlowEpe': 2.4909482, 'vehiclesFlowWarpedOccupancyAuc': 0.9170263, 'vehiclesFlowWarpedOccupancyIou': 0.925453}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5980256, 'vehiclesObservedIou': 0.3321318, 'vehiclesOccludedAuc': 0.27084234, 'vehiclesOccludedIou': 0.029023495, 'vehiclesFlowEpe': 5.8895698, 'vehiclesFlowWarpedOccupancyAuc': 0.530347, 'vehiclesFlowWarpedOccupancyIou': 0.40070456}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8541147, 'vehiclesObservedIou': 0.5102821, 'vehiclesOccludedAuc': 0.012489368, 'vehiclesOccludedIou': 0.0034406069, 'vehiclesFlowEpe': 5.142284, 'vehiclesFlowWarpedOccupancyAuc': 0.6879877, 'vehiclesFlowWarpedOccupancyIou': 0.5936241}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.31211472, 'vehiclesObservedIou': 0.19956729, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.851901, 'vehiclesFlowWarpedOccupancyAuc': 0.54721975, 'vehiclesFlowWarpedOccupancyIou': 0.27838826}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7667945, 'vehiclesObservedIou': 0.4485597, 'vehiclesOccludedAuc': 0.031148016, 'vehiclesOccludedIou': 0.013184562, 'vehiclesFlowEpe': 5.654826, 'vehiclesFlowWarpedOccupancyAuc': 0.6331921, 'vehiclesFlowWarpedOccupancyIou': 0.510256}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.77815557, 'vehiclesObservedIou': 0.42597404, 'vehiclesOccludedAuc': 0.35986996, 'vehiclesOccludedIou': 0.08060201, 'vehiclesFlowEpe': 7.1735625, 'vehiclesFlowWarpedOccupancyAuc': 0.57991666, 'vehiclesFlowWarpedOccupancyIou': 0.5118905}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9457391, 'vehiclesObservedIou': 0.6526342, 'vehiclesOccludedAuc': 0.011498717, 'vehiclesOccludedIou': 0.0068362397, 'vehiclesFlowEpe': 3.3237574, 'vehiclesFlowWarpedOccupancyAuc': 0.862152, 'vehiclesFlowWarpedOccupancyIou': 0.7334436}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.67448175, 'vehiclesObservedIou': 0.33253905, 'vehiclesOccludedAuc': 0.33160037, 'vehiclesOccludedIou': 0.058883436, 'vehiclesFlowEpe': 7.5771046, 'vehiclesFlowWarpedOccupancyAuc': 0.6161643, 'vehiclesFlowWarpedOccupancyIou': 0.40977475}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7986895, 'vehiclesObservedIou': 0.44100034, 'vehiclesOccludedAuc': 0.025672004, 'vehiclesOccludedIou': 0.0075352034, 'vehiclesFlowEpe': 7.360423, 'vehiclesFlowWarpedOccupancyAuc': 0.47982472, 'vehiclesFlowWarpedOccupancyIou': 0.4272448}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.8677555, 'vehiclesObservedIou': 0.5317608, 'vehiclesOccludedAuc': 0.16234963, 'vehiclesOccludedIou': 0.037301626, 'vehiclesFlowEpe': 3.9967465, 'vehiclesFlowWarpedOccupancyAuc': 0.68904734, 'vehiclesFlowWarpedOccupancyIou': 0.66186196}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9320787, 'vehiclesObservedIou': 0.659365, 'vehiclesOccludedAuc': 0.007942231, 'vehiclesOccludedIou': 0.0030345204, 'vehiclesFlowEpe': 4.1153603, 'vehiclesFlowWarpedOccupancyAuc': 0.8255476, 'vehiclesFlowWarpedOccupancyIou': 0.7345883}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.84383243, 'vehiclesObservedIou': 0.5319989, 'vehiclesOccludedAuc': 0.06375019, 'vehiclesOccludedIou': 0.013086235, 'vehiclesFlowEpe': 6.546875, 'vehiclesFlowWarpedOccupancyAuc': 0.65361685, 'vehiclesFlowWarpedOccupancyIou': 0.6530338}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.4669289, 'vehiclesObservedIou': 0.21372475, 'vehiclesOccludedAuc': 0.08005603, 'vehiclesOccludedIou': 0.016936436, 'vehiclesFlowEpe': 4.5387144, 'vehiclesFlowWarpedOccupancyAuc': 0.50426763, 'vehiclesFlowWarpedOccupancyIou': 0.22575797}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5229872, 'vehiclesObservedIou': 0.27851412, 'vehiclesOccludedAuc': 0.096097566, 'vehiclesOccludedIou': 0.01340512, 'vehiclesFlowEpe': 4.3898706, 'vehiclesFlowWarpedOccupancyAuc': 0.49041831, 'vehiclesFlowWarpedOccupancyIou': 0.27513254}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5901716, 'vehiclesObservedIou': 0.33999693, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 5.0404453, 'vehiclesFlowWarpedOccupancyAuc': 0.5615961, 'vehiclesFlowWarpedOccupancyIou': 0.37201092}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.99690557, 'vehiclesObservedIou': 0.9077371, 'vehiclesOccludedAuc': 0.0007536886, 'vehiclesOccludedIou': 0.0019649046, 'vehiclesFlowEpe': 2.4909482, 'vehiclesFlowWarpedOccupancyAuc': 0.9170263, 'vehiclesFlowWarpedOccupancyIou': 0.925453}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6995783946666668, 'vehiclesObservedIou': 0.4248481334333334, 'vehiclesOccludedAuc': 0.09576622813, 'vehiclesOccludedIou': 0.020244025689999997, 'vehiclesFlowEpe': 4.672456089999999, 'vehiclesFlowWarpedOccupancyAuc': 0.6325458966666666, 'vehiclesFlowWarpedOccupancyIou': 0.4782783176666666}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00022new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 11:14:07.987303: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:14:08.038858: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:14:08.039133: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.85046107, 'vehiclesObservedIou': 0.539368, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 6.981836, 'vehiclesFlowWarpedOccupancyAuc': 0.71554065, 'vehiclesFlowWarpedOccupancyIou': 0.65454054}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.22151259, 'vehiclesObservedIou': 0.0703829, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 4.337007, 'vehiclesFlowWarpedOccupancyAuc': 0.19572076, 'vehiclesFlowWarpedOccupancyIou': 0.07179573}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.72487354, 'vehiclesObservedIou': 0.28773728, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 6.8026676, 'vehiclesFlowWarpedOccupancyAuc': 0.5317651, 'vehiclesFlowWarpedOccupancyIou': 0.37593046}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.92020446, 'vehiclesObservedIou': 0.7021228, 'vehiclesOccludedAuc': 0.053139694, 'vehiclesOccludedIou': 0.017141165, 'vehiclesFlowEpe': 3.7401433, 'vehiclesFlowWarpedOccupancyAuc': 0.80068886, 'vehiclesFlowWarpedOccupancyIou': 0.7259368}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.46437752, 'vehiclesObservedIou': 0.2770641, 'vehiclesOccludedAuc': 0.03913789, 'vehiclesOccludedIou': 0.0074625886, 'vehiclesFlowEpe': 4.899129, 'vehiclesFlowWarpedOccupancyAuc': 0.50058657, 'vehiclesFlowWarpedOccupancyIou': 0.31750637}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.26410547, 'vehiclesObservedIou': 0.11551191, 'vehiclesOccludedAuc': 0.06781247, 'vehiclesOccludedIou': 0.0118252225, 'vehiclesFlowEpe': 2.1328263, 'vehiclesFlowWarpedOccupancyAuc': 0.43299407, 'vehiclesFlowWarpedOccupancyIou': 0.124221675}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.19969274, 'vehiclesObservedIou': 0.08070393, 'vehiclesOccludedAuc': 0.024866749, 'vehiclesOccludedIou': 0.006236905, 'vehiclesFlowEpe': 5.995574, 'vehiclesFlowWarpedOccupancyAuc': 0.32293367, 'vehiclesFlowWarpedOccupancyIou': 0.083465494}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8669676, 'vehiclesObservedIou': 0.57540506, 'vehiclesOccludedAuc': 0.046918906, 'vehiclesOccludedIou': 0.005369777, 'vehiclesFlowEpe': 4.6927075, 'vehiclesFlowWarpedOccupancyAuc': 0.6857687, 'vehiclesFlowWarpedOccupancyIou': 0.6577169}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.10536172, 'vehiclesObservedIou': 0.04891433, 'vehiclesOccludedAuc': 0.0027024234, 'vehiclesOccludedIou': 0.002610203, 'vehiclesFlowEpe': 5.1235557, 'vehiclesFlowWarpedOccupancyAuc': 0.16882774, 'vehiclesFlowWarpedOccupancyIou': 0.04980726}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.70056725, 'vehiclesObservedIou': 0.35653466, 'vehiclesOccludedAuc': 0.10549163, 'vehiclesOccludedIou': 0.009126553, 'vehiclesFlowEpe': 7.5052223, 'vehiclesFlowWarpedOccupancyAuc': 0.61780566, 'vehiclesFlowWarpedOccupancyIou': 0.50469255}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8853755, 'vehiclesObservedIou': 0.58659464, 'vehiclesOccludedAuc': 0.0020546517, 'vehiclesOccludedIou': 0.0012712763, 'vehiclesFlowEpe': 4.0473146, 'vehiclesFlowWarpedOccupancyAuc': 0.7428247, 'vehiclesFlowWarpedOccupancyIou': 0.66017526}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.4015851, 'vehiclesObservedIou': 0.14034265, 'vehiclesOccludedAuc': 0.0067072436, 'vehiclesOccludedIou': 0.002906189, 'vehiclesFlowEpe': 5.386573, 'vehiclesFlowWarpedOccupancyAuc': 0.39212704, 'vehiclesFlowWarpedOccupancyIou': 0.15449743}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.4501885, 'vehiclesObservedIou': 0.24099925, 'vehiclesOccludedAuc': 0.00066296034, 'vehiclesOccludedIou': 0.00017765415, 'vehiclesFlowEpe': 4.1559916, 'vehiclesFlowWarpedOccupancyAuc': 0.5737614, 'vehiclesFlowWarpedOccupancyIou': 0.2731486}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.5410616, 'vehiclesObservedIou': 0.2534602, 'vehiclesOccludedAuc': 0.04581276, 'vehiclesOccludedIou': 0.02023971, 'vehiclesFlowEpe': 4.6294713, 'vehiclesFlowWarpedOccupancyAuc': 0.5460114, 'vehiclesFlowWarpedOccupancyIou': 0.3111042}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.55268925, 'vehiclesObservedIou': 0.26805726, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.7710683, 'vehiclesFlowWarpedOccupancyAuc': 0.60249466, 'vehiclesFlowWarpedOccupancyIou': 0.3435044}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.26316112, 'vehiclesObservedIou': 0.17301477, 'vehiclesOccludedAuc': 0.022624688, 'vehiclesOccludedIou': 0.004179716, 'vehiclesFlowEpe': 6.449198, 'vehiclesFlowWarpedOccupancyAuc': 0.33342007, 'vehiclesFlowWarpedOccupancyIou': 0.1824734}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.35411653, 'vehiclesObservedIou': 0.20352733, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.145288, 'vehiclesFlowWarpedOccupancyAuc': 0.5908785, 'vehiclesFlowWarpedOccupancyIou': 0.24054334}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5615388, 'vehiclesObservedIou': 0.2924105, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 7.0110106, 'vehiclesFlowWarpedOccupancyAuc': 0.48615044, 'vehiclesFlowWarpedOccupancyIou': 0.41128352}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.86007124, 'vehiclesObservedIou': 0.5690744, 'vehiclesOccludedAuc': 0.07984224, 'vehiclesOccludedIou': 0.009977604, 'vehiclesFlowEpe': 3.8631072, 'vehiclesFlowWarpedOccupancyAuc': 0.7064375, 'vehiclesFlowWarpedOccupancyIou': 0.65569127}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.3137178, 'vehiclesObservedIou': 0.07969862, 'vehiclesOccludedAuc': 0.027114647, 'vehiclesOccludedIou': 0.0050428486, 'vehiclesFlowEpe': 6.292113, 'vehiclesFlowWarpedOccupancyAuc': 0.29602095, 'vehiclesFlowWarpedOccupancyIou': 0.093387224}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7400297, 'vehiclesObservedIou': 0.5105119, 'vehiclesOccludedAuc': 0.0010710395, 'vehiclesOccludedIou': 0.00032275374, 'vehiclesFlowEpe': 3.0733287, 'vehiclesFlowWarpedOccupancyAuc': 0.7112655, 'vehiclesFlowWarpedOccupancyIou': 0.5638827}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.53534997, 'vehiclesObservedIou': 0.29509875, 'vehiclesOccludedAuc': 0.0010650919, 'vehiclesOccludedIou': 0.0011992978, 'vehiclesFlowEpe': 5.696677, 'vehiclesFlowWarpedOccupancyAuc': 0.4496119, 'vehiclesFlowWarpedOccupancyIou': 0.33000237}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.43052176, 'vehiclesObservedIou': 0.2746842, 'vehiclesOccludedAuc': 0.24525514, 'vehiclesOccludedIou': 0.016861055, 'vehiclesFlowEpe': 3.9525988, 'vehiclesFlowWarpedOccupancyAuc': 0.57747066, 'vehiclesFlowWarpedOccupancyIou': 0.41492662}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.4551725, 'vehiclesObservedIou': 0.16473639, 'vehiclesOccludedAuc': 0.004202154, 'vehiclesOccludedIou': 0.0023547022, 'vehiclesFlowEpe': 4.9781823, 'vehiclesFlowWarpedOccupancyAuc': 0.4480494, 'vehiclesFlowWarpedOccupancyIou': 0.19837072}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.90315425, 'vehiclesObservedIou': 0.6372001, 'vehiclesOccludedAuc': 0.077486, 'vehiclesOccludedIou': 0.019013636, 'vehiclesFlowEpe': 5.8426027, 'vehiclesFlowWarpedOccupancyAuc': 0.79053503, 'vehiclesFlowWarpedOccupancyIou': 0.70769966}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.88303846, 'vehiclesObservedIou': 0.61789167, 'vehiclesOccludedAuc': 0.42895028, 'vehiclesOccludedIou': 0.09894956, 'vehiclesFlowEpe': 5.217429, 'vehiclesFlowWarpedOccupancyAuc': 0.70459956, 'vehiclesFlowWarpedOccupancyIou': 0.6603943}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.23266777, 'vehiclesObservedIou': 0.117667444, 'vehiclesOccludedAuc': 0.057298794, 'vehiclesOccludedIou': 0.012119294, 'vehiclesFlowEpe': 6.300498, 'vehiclesFlowWarpedOccupancyAuc': 0.4079219, 'vehiclesFlowWarpedOccupancyIou': 0.13788381}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7762004, 'vehiclesObservedIou': 0.5034993, 'vehiclesOccludedAuc': 0.044804737, 'vehiclesOccludedIou': 0.0038909162, 'vehiclesFlowEpe': 8.174095, 'vehiclesFlowWarpedOccupancyAuc': 0.5623186, 'vehiclesFlowWarpedOccupancyIou': 0.55771625}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5215055, 'vehiclesObservedIou': 0.26976135, 'vehiclesOccludedAuc': 0.504283, 'vehiclesOccludedIou': 0.058316987, 'vehiclesFlowEpe': 2.387701, 'vehiclesFlowWarpedOccupancyAuc': 0.6507415, 'vehiclesFlowWarpedOccupancyIou': 0.3991356}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.91115046, 'vehiclesObservedIou': 0.6114237, 'vehiclesOccludedAuc': 0.0043166243, 'vehiclesOccludedIou': 0.0018740419, 'vehiclesFlowEpe': 1.8736598, 'vehiclesFlowWarpedOccupancyAuc': 0.79501456, 'vehiclesFlowWarpedOccupancyIou': 0.7111418}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.54164493, 'vehiclesObservedIou': 0.3966303, 'vehiclesOccludedAuc': 0.17094752, 'vehiclesOccludedIou': 0.027170662, 'vehiclesFlowEpe': 5.9759536, 'vehiclesFlowWarpedOccupancyAuc': 0.59431887, 'vehiclesFlowWarpedOccupancyIou': 0.5572854}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.92020446, 'vehiclesObservedIou': 0.7021228, 'vehiclesOccludedAuc': 0.053139694, 'vehiclesOccludedIou': 0.017141165, 'vehiclesFlowEpe': 3.7401433, 'vehiclesFlowWarpedOccupancyAuc': 0.80068886, 'vehiclesFlowWarpedOccupancyIou': 0.7259368}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.5623246806451614, 'vehiclesObservedIou': 0.3309686998064516, 'vehiclesOccludedAuc': 0.06659901076580645, 'vehiclesOccludedIou': 0.011149687677096775, 'vehiclesFlowEpe': 4.917242909677419, 'vehiclesFlowWarpedOccupancyAuc': 0.5462776103225805, 'vehiclesFlowWarpedOccupancyIou': 0.3912858597741935}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00000new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 11:14:28.506933: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:14:28.623941: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:14:28.624261: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.1586817, 'vehiclesObservedIou': 0.10020507, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.033534, 'vehiclesFlowWarpedOccupancyAuc': 0.30887824, 'vehiclesFlowWarpedOccupancyIou': 0.116684906}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7437556, 'vehiclesObservedIou': 0.339905, 'vehiclesOccludedAuc': 0.0074006645, 'vehiclesOccludedIou': 0.003730045, 'vehiclesFlowEpe': 5.2366114, 'vehiclesFlowWarpedOccupancyAuc': 0.5924695, 'vehiclesFlowWarpedOccupancyIou': 0.4044567}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.36739358, 'vehiclesObservedIou': 0.21367715, 'vehiclesOccludedAuc': 0.00022904464, 'vehiclesOccludedIou': 1.1144773e-05, 'vehiclesFlowEpe': 6.994301, 'vehiclesFlowWarpedOccupancyAuc': 0.34647012, 'vehiclesFlowWarpedOccupancyIou': 0.2539929}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.90218663, 'vehiclesObservedIou': 0.42083198, 'vehiclesOccludedAuc': 0.011160666, 'vehiclesOccludedIou': 0.0031195944, 'vehiclesFlowEpe': 7.7148075, 'vehiclesFlowWarpedOccupancyAuc': 0.6077234, 'vehiclesFlowWarpedOccupancyIou': 0.42666206}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8703068, 'vehiclesObservedIou': 0.5755157, 'vehiclesOccludedAuc': 0.033979505, 'vehiclesOccludedIou': 0.014093946, 'vehiclesFlowEpe': 5.2276382, 'vehiclesFlowWarpedOccupancyAuc': 0.6617082, 'vehiclesFlowWarpedOccupancyIou': 0.5725324}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.0849055, 'vehiclesObservedIou': 0.04180702, 'vehiclesOccludedAuc': 0.006675444, 'vehiclesOccludedIou': 0.0019289529, 'vehiclesFlowEpe': 9.217859, 'vehiclesFlowWarpedOccupancyAuc': 0.11971039, 'vehiclesFlowWarpedOccupancyIou': 0.04327172}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.72216, 'vehiclesObservedIou': 0.5122379, 'vehiclesOccludedAuc': 0.048005775, 'vehiclesOccludedIou': 0.010801743, 'vehiclesFlowEpe': 5.460872, 'vehiclesFlowWarpedOccupancyAuc': 0.6605696, 'vehiclesFlowWarpedOccupancyIou': 0.6100839}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.25284255, 'vehiclesObservedIou': 0.08889621, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 9.138478, 'vehiclesFlowWarpedOccupancyAuc': 0.14977576, 'vehiclesFlowWarpedOccupancyIou': 0.07622671}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.69960725, 'vehiclesObservedIou': 0.37899673, 'vehiclesOccludedAuc': 0.0695549, 'vehiclesOccludedIou': 0.019226966, 'vehiclesFlowEpe': 2.647974, 'vehiclesFlowWarpedOccupancyAuc': 0.6572423, 'vehiclesFlowWarpedOccupancyIou': 0.40772918}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.48917168, 'vehiclesObservedIou': 0.28141016, 'vehiclesOccludedAuc': 0.015300622, 'vehiclesOccludedIou': 0.0040918794, 'vehiclesFlowEpe': 7.616308, 'vehiclesFlowWarpedOccupancyAuc': 0.41962358, 'vehiclesFlowWarpedOccupancyIou': 0.33107075}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.88999933, 'vehiclesObservedIou': 0.5629667, 'vehiclesOccludedAuc': 0.05063404, 'vehiclesOccludedIou': 0.005919421, 'vehiclesFlowEpe': 2.4945076, 'vehiclesFlowWarpedOccupancyAuc': 0.7209614, 'vehiclesFlowWarpedOccupancyIou': 0.54407036}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.56456375, 'vehiclesObservedIou': 0.31555477, 'vehiclesOccludedAuc': 0.007889382, 'vehiclesOccludedIou': 0.0034668099, 'vehiclesFlowEpe': 6.0641484, 'vehiclesFlowWarpedOccupancyAuc': 0.4594583, 'vehiclesFlowWarpedOccupancyIou': 0.34871927}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.91042686, 'vehiclesObservedIou': 0.61628735, 'vehiclesOccludedAuc': 0.07057488, 'vehiclesOccludedIou': 0.018796105, 'vehiclesFlowEpe': 3.9031737, 'vehiclesFlowWarpedOccupancyAuc': 0.71743006, 'vehiclesFlowWarpedOccupancyIou': 0.6586168}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9638013, 'vehiclesObservedIou': 0.789308, 'vehiclesOccludedAuc': 0.07113779, 'vehiclesOccludedIou': 0.029700918, 'vehiclesFlowEpe': 3.0496514, 'vehiclesFlowWarpedOccupancyAuc': 0.8671515, 'vehiclesFlowWarpedOccupancyIou': 0.8249551}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9823514, 'vehiclesObservedIou': 0.8420436, 'vehiclesOccludedAuc': 0.0007700709, 'vehiclesOccludedIou': 0.00073975447, 'vehiclesFlowEpe': 2.3371935, 'vehiclesFlowWarpedOccupancyAuc': 0.89360213, 'vehiclesFlowWarpedOccupancyIou': 0.9033529}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.88123536, 'vehiclesObservedIou': 0.5885939, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 6.1793633, 'vehiclesFlowWarpedOccupancyAuc': 0.84594345, 'vehiclesFlowWarpedOccupancyIou': 0.7010952}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.42315456, 'vehiclesObservedIou': 0.32746887, 'vehiclesOccludedAuc': 0.0360663, 'vehiclesOccludedIou': 0.014497481, 'vehiclesFlowEpe': 2.997202, 'vehiclesFlowWarpedOccupancyAuc': 0.59669447, 'vehiclesFlowWarpedOccupancyIou': 0.31179705}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7335589, 'vehiclesObservedIou': 0.32140046, 'vehiclesOccludedAuc': 0.14073892, 'vehiclesOccludedIou': 0.034676895, 'vehiclesFlowEpe': 8.234229, 'vehiclesFlowWarpedOccupancyAuc': 0.4830986, 'vehiclesFlowWarpedOccupancyIou': 0.30532566}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9421557, 'vehiclesObservedIou': 0.65713096, 'vehiclesOccludedAuc': 0.006278475, 'vehiclesOccludedIou': 0.0035764296, 'vehiclesFlowEpe': 4.966231, 'vehiclesFlowWarpedOccupancyAuc': 0.76781315, 'vehiclesFlowWarpedOccupancyIou': 0.70531845}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.23547065, 'vehiclesObservedIou': 0.10097386, 'vehiclesOccludedAuc': 0.0035192738, 'vehiclesOccludedIou': 0.0012964397, 'vehiclesFlowEpe': 2.2642102, 'vehiclesFlowWarpedOccupancyAuc': 0.3311321, 'vehiclesFlowWarpedOccupancyIou': 0.12890597}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.5743977, 'vehiclesObservedIou': 0.326167, 'vehiclesOccludedAuc': 0.25797948, 'vehiclesOccludedIou': 0.047200304, 'vehiclesFlowEpe': 4.7698603, 'vehiclesFlowWarpedOccupancyAuc': 0.5904041, 'vehiclesFlowWarpedOccupancyIou': 0.4208462}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.4595042, 'vehiclesObservedIou': 0.21132903, 'vehiclesOccludedAuc': 0.0027132072, 'vehiclesOccludedIou': 4.8196373e-05, 'vehiclesFlowEpe': 4.106863, 'vehiclesFlowWarpedOccupancyAuc': 0.4260957, 'vehiclesFlowWarpedOccupancyIou': 0.25491586}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.82971895, 'vehiclesObservedIou': 0.5929388, 'vehiclesOccludedAuc': 0.0010708435, 'vehiclesOccludedIou': 0.0007151254, 'vehiclesFlowEpe': 6.4480066, 'vehiclesFlowWarpedOccupancyAuc': 0.67803365, 'vehiclesFlowWarpedOccupancyIou': 0.6683963}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.35368115, 'vehiclesObservedIou': 0.1853045, 'vehiclesOccludedAuc': 0.03607793, 'vehiclesOccludedIou': 0.015152131, 'vehiclesFlowEpe': 6.4521875, 'vehiclesFlowWarpedOccupancyAuc': 0.35535964, 'vehiclesFlowWarpedOccupancyIou': 0.17651135}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.95128596, 'vehiclesObservedIou': 0.70906353, 'vehiclesOccludedAuc': 0.046727248, 'vehiclesOccludedIou': 0.0031963, 'vehiclesFlowEpe': 5.586387, 'vehiclesFlowWarpedOccupancyAuc': 0.7985804, 'vehiclesFlowWarpedOccupancyIou': 0.7971355}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.82025915, 'vehiclesObservedIou': 0.5184991, 'vehiclesOccludedAuc': 0.19224608, 'vehiclesOccludedIou': 0.037961874, 'vehiclesFlowEpe': 8.05839, 'vehiclesFlowWarpedOccupancyAuc': 0.7121162, 'vehiclesFlowWarpedOccupancyIou': 0.57137686}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.53203845, 'vehiclesObservedIou': 0.3817512, 'vehiclesOccludedAuc': 0.10700872, 'vehiclesOccludedIou': 0.021377053, 'vehiclesFlowEpe': 4.4861712, 'vehiclesFlowWarpedOccupancyAuc': 0.5129993, 'vehiclesFlowWarpedOccupancyIou': 0.38828242}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.64594233, 'vehiclesObservedIou': 0.33827966, 'vehiclesOccludedAuc': 0.018506661, 'vehiclesOccludedIou': 0.006403636, 'vehiclesFlowEpe': 4.6709814, 'vehiclesFlowWarpedOccupancyAuc': 0.4965377, 'vehiclesFlowWarpedOccupancyIou': 0.3963928}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.662233, 'vehiclesObservedIou': 0.2911526, 'vehiclesOccludedAuc': 0.33868372, 'vehiclesOccludedIou': 0.049458954, 'vehiclesFlowEpe': 8.579804, 'vehiclesFlowWarpedOccupancyAuc': 0.46555495, 'vehiclesFlowWarpedOccupancyIou': 0.39744434}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.9823514, 'vehiclesObservedIou': 0.8420436, 'vehiclesOccludedAuc': 0.0007700709, 'vehiclesOccludedIou': 0.00073975447, 'vehiclesFlowEpe': 2.3371935, 'vehiclesFlowWarpedOccupancyAuc': 0.89360213, 'vehiclesFlowWarpedOccupancyIou': 0.9033529}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6429927582758622, 'vehiclesObservedIou': 0.4010240279310345, 'vehiclesOccludedAuc': 0.05451481526, 'vehiclesOccludedIou': 0.01210993444537931, 'vehiclesFlowEpe': 5.44610152413793, 'vehiclesFlowWarpedOccupancyAuc': 0.5601082031034484, 'vehiclesFlowWarpedOccupancyIou': 0.43952309020689645}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00013new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 11:14:47.036013: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:14:47.102710: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:14:47.103030: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.20515801, 'vehiclesObservedIou': 0.11167756, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 5.6473484, 'vehiclesFlowWarpedOccupancyAuc': 0.38252592, 'vehiclesFlowWarpedOccupancyIou': 0.120603934}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.5346663, 'vehiclesObservedIou': 0.25862998, 'vehiclesOccludedAuc': 0.050012704, 'vehiclesOccludedIou': 0.012214303, 'vehiclesFlowEpe': 6.3034873, 'vehiclesFlowWarpedOccupancyAuc': 0.4961132, 'vehiclesFlowWarpedOccupancyIou': 0.3134812}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.49413326, 'vehiclesObservedIou': 0.3000974, 'vehiclesOccludedAuc': 0.04062558, 'vehiclesOccludedIou': 0.007521252, 'vehiclesFlowEpe': 3.8007998, 'vehiclesFlowWarpedOccupancyAuc': 0.56409234, 'vehiclesFlowWarpedOccupancyIou': 0.42405537}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.9496686, 'vehiclesObservedIou': 0.75308824, 'vehiclesOccludedAuc': 0.0093199685, 'vehiclesOccludedIou': 0.004091587, 'vehiclesFlowEpe': 8.777239, 'vehiclesFlowWarpedOccupancyAuc': 0.77558136, 'vehiclesFlowWarpedOccupancyIou': 0.7733592}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.81468356, 'vehiclesObservedIou': 0.4988214, 'vehiclesOccludedAuc': 0.050196953, 'vehiclesOccludedIou': 0.006048827, 'vehiclesFlowEpe': 5.288298, 'vehiclesFlowWarpedOccupancyAuc': 0.638843, 'vehiclesFlowWarpedOccupancyIou': 0.52233505}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.47875336, 'vehiclesObservedIou': 0.22430432, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 6.9019566, 'vehiclesFlowWarpedOccupancyAuc': 0.36268035, 'vehiclesFlowWarpedOccupancyIou': 0.24412799}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.6513306, 'vehiclesObservedIou': 0.32550856, 'vehiclesOccludedAuc': 0.0815721, 'vehiclesOccludedIou': 0.014241088, 'vehiclesFlowEpe': 6.2250957, 'vehiclesFlowWarpedOccupancyAuc': 0.41024905, 'vehiclesFlowWarpedOccupancyIou': 0.41155428}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.87039006, 'vehiclesObservedIou': 0.5353002, 'vehiclesOccludedAuc': 0.01544186, 'vehiclesOccludedIou': 0.0072493227, 'vehiclesFlowEpe': 4.7253847, 'vehiclesFlowWarpedOccupancyAuc': 0.7414408, 'vehiclesFlowWarpedOccupancyIou': 0.632946}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7194434, 'vehiclesObservedIou': 0.38926175, 'vehiclesOccludedAuc': 0.0029105898, 'vehiclesOccludedIou': 0.0014514235, 'vehiclesFlowEpe': 2.7092614, 'vehiclesFlowWarpedOccupancyAuc': 0.6581706, 'vehiclesFlowWarpedOccupancyIou': 0.45842367}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9437238, 'vehiclesObservedIou': 0.7234208, 'vehiclesOccludedAuc': 0.010715685, 'vehiclesOccludedIou': 0.0027417988, 'vehiclesFlowEpe': 3.6255026, 'vehiclesFlowWarpedOccupancyAuc': 0.840278, 'vehiclesFlowWarpedOccupancyIou': 0.7943091}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8338247, 'vehiclesObservedIou': 0.50127786, 'vehiclesOccludedAuc': 0.062258855, 'vehiclesOccludedIou': 0.02185217, 'vehiclesFlowEpe': 6.6921597, 'vehiclesFlowWarpedOccupancyAuc': 0.67640585, 'vehiclesFlowWarpedOccupancyIou': 0.5861105}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9451985, 'vehiclesObservedIou': 0.7674682, 'vehiclesOccludedAuc': 0.0011235799, 'vehiclesOccludedIou': 0.0006310977, 'vehiclesFlowEpe': 8.582949, 'vehiclesFlowWarpedOccupancyAuc': 0.77137834, 'vehiclesFlowWarpedOccupancyIou': 0.83488804}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.24149744, 'vehiclesObservedIou': 0.086306125, 'vehiclesOccludedAuc': 0.0014668257, 'vehiclesOccludedIou': 0.0012964486, 'vehiclesFlowEpe': 8.882073, 'vehiclesFlowWarpedOccupancyAuc': 0.21182676, 'vehiclesFlowWarpedOccupancyIou': 0.07584478}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.9175694, 'vehiclesObservedIou': 0.7275231, 'vehiclesOccludedAuc': 0.0036604654, 'vehiclesOccludedIou': 0.0017984465, 'vehiclesFlowEpe': 6.56904, 'vehiclesFlowWarpedOccupancyAuc': 0.75637704, 'vehiclesFlowWarpedOccupancyIou': 0.7499738}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.4656797, 'vehiclesObservedIou': 0.18489605, 'vehiclesOccludedAuc': 0.0007316237, 'vehiclesOccludedIou': 0.0009366041, 'vehiclesFlowEpe': 3.3219786, 'vehiclesFlowWarpedOccupancyAuc': 0.4743176, 'vehiclesFlowWarpedOccupancyIou': 0.21553434}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.58354557, 'vehiclesObservedIou': 0.32164523, 'vehiclesOccludedAuc': 0.038614754, 'vehiclesOccludedIou': 0.010869148, 'vehiclesFlowEpe': 3.4654138, 'vehiclesFlowWarpedOccupancyAuc': 0.63429326, 'vehiclesFlowWarpedOccupancyIou': 0.4544295}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.16405293, 'vehiclesObservedIou': 0.07037855, 'vehiclesOccludedAuc': 0.00084285723, 'vehiclesOccludedIou': 0.0012875022, 'vehiclesFlowEpe': 8.273945, 'vehiclesFlowWarpedOccupancyAuc': 0.35889068, 'vehiclesFlowWarpedOccupancyIou': 0.098815426}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7949698, 'vehiclesObservedIou': 0.38955772, 'vehiclesOccludedAuc': 0.28056428, 'vehiclesOccludedIou': 0.072855055, 'vehiclesFlowEpe': 3.1866436, 'vehiclesFlowWarpedOccupancyAuc': 0.6638355, 'vehiclesFlowWarpedOccupancyIou': 0.43586573}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.65538496, 'vehiclesObservedIou': 0.30261433, 'vehiclesOccludedAuc': 0.018902045, 'vehiclesOccludedIou': 0.0014532572, 'vehiclesFlowEpe': 4.9306874, 'vehiclesFlowWarpedOccupancyAuc': 0.5183952, 'vehiclesFlowWarpedOccupancyIou': 0.2212961}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8694972, 'vehiclesObservedIou': 0.58783436, 'vehiclesOccludedAuc': 0.26604897, 'vehiclesOccludedIou': 0.05691326, 'vehiclesFlowEpe': 7.3738637, 'vehiclesFlowWarpedOccupancyAuc': 0.68142176, 'vehiclesFlowWarpedOccupancyIou': 0.6896553}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.72730505, 'vehiclesObservedIou': 0.34850058, 'vehiclesOccludedAuc': 0.08204274, 'vehiclesOccludedIou': 0.022107016, 'vehiclesFlowEpe': 5.277336, 'vehiclesFlowWarpedOccupancyAuc': 0.5506624, 'vehiclesFlowWarpedOccupancyIou': 0.42310724}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.37439075, 'vehiclesObservedIou': 0.16398704, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 13.178135, 'vehiclesFlowWarpedOccupancyAuc': 0.3208563, 'vehiclesFlowWarpedOccupancyIou': 0.21299785}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.1610277, 'vehiclesObservedIou': 0.07327743, 'vehiclesOccludedAuc': 0.2514041, 'vehiclesOccludedIou': 0.040207013, 'vehiclesFlowEpe': 5.848858, 'vehiclesFlowWarpedOccupancyAuc': 0.32194647, 'vehiclesFlowWarpedOccupancyIou': 0.08492456}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7997227, 'vehiclesObservedIou': 0.48266926, 'vehiclesOccludedAuc': 0.032923818, 'vehiclesOccludedIou': 0.012561933, 'vehiclesFlowEpe': 5.150572, 'vehiclesFlowWarpedOccupancyAuc': 0.68295455, 'vehiclesFlowWarpedOccupancyIou': 0.5681798}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7226606, 'vehiclesObservedIou': 0.37484765, 'vehiclesOccludedAuc': 0.016102443, 'vehiclesOccludedIou': 0.0073404214, 'vehiclesFlowEpe': 6.95235, 'vehiclesFlowWarpedOccupancyAuc': 0.5132351, 'vehiclesFlowWarpedOccupancyIou': 0.43592477}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.839844, 'vehiclesObservedIou': 0.5281686, 'vehiclesOccludedAuc': 0.0068376167, 'vehiclesOccludedIou': 0.0036265056, 'vehiclesFlowEpe': 3.7490087, 'vehiclesFlowWarpedOccupancyAuc': 0.68225276, 'vehiclesFlowWarpedOccupancyIou': 0.6209834}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7242197, 'vehiclesObservedIou': 0.38283843, 'vehiclesOccludedAuc': 0.001870743, 'vehiclesOccludedIou': 0.0008991042, 'vehiclesFlowEpe': 6.5111637, 'vehiclesFlowWarpedOccupancyAuc': 0.50412655, 'vehiclesFlowWarpedOccupancyIou': 0.47290146}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.31396273, 'vehiclesObservedIou': 0.13862321, 'vehiclesOccludedAuc': 0.072114035, 'vehiclesOccludedIou': 0.019310774, 'vehiclesFlowEpe': 6.7871857, 'vehiclesFlowWarpedOccupancyAuc': 0.31192756, 'vehiclesFlowWarpedOccupancyIou': 0.14174695}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.93420583, 'vehiclesObservedIou': 0.65028644, 'vehiclesOccludedAuc': 0.015404365, 'vehiclesOccludedIou': 0.0052593173, 'vehiclesFlowEpe': 3.1943617, 'vehiclesFlowWarpedOccupancyAuc': 0.7880379, 'vehiclesFlowWarpedOccupancyIou': 0.74236536}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.3787629, 'vehiclesObservedIou': 0.21098943, 'vehiclesOccludedAuc': 0.36793363, 'vehiclesOccludedIou': 0.041892353, 'vehiclesFlowEpe': 4.9653244, 'vehiclesFlowWarpedOccupancyAuc': 0.5832082, 'vehiclesFlowWarpedOccupancyIou': 0.30039328}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.84016234, 'vehiclesObservedIou': 0.49976018, 'vehiclesOccludedAuc': 0.044529576, 'vehiclesOccludedIou': 0.013756272, 'vehiclesFlowEpe': 3.3371227, 'vehiclesFlowWarpedOccupancyAuc': 0.7069618, 'vehiclesFlowWarpedOccupancyIou': 0.561872}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.6145936, 'vehiclesObservedIou': 0.3412247, 'vehiclesOccludedAuc': 0.21112227, 'vehiclesOccludedIou': 0.01921716, 'vehiclesFlowEpe': 3.9141097, 'vehiclesFlowWarpedOccupancyAuc': 0.44942576, 'vehiclesFlowWarpedOccupancyIou': 0.40042847}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.9496686, 'vehiclesObservedIou': 0.75308824, 'vehiclesOccludedAuc': 0.0093199685, 'vehiclesOccludedIou': 0.004091587, 'vehiclesFlowEpe': 8.777239, 'vehiclesFlowWarpedOccupancyAuc': 0.77558136, 'vehiclesFlowWarpedOccupancyIou': 0.7733592}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6426259078125, 'vehiclesObservedIou': 0.38296202140624996, 'vehiclesOccludedAuc': 0.06366546977906251, 'vehiclesOccludedIou': 0.0128634519, 'vehiclesFlowEpe': 5.754645465625, 'vehiclesFlowWarpedOccupancyAuc': 0.56352224875, 'vehiclesFlowWarpedOccupancyIou': 0.4382323265625}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00148new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


2024-05-28 11:15:07.732027: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:15:07.796839: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:15:07.797155: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.15923533, 'vehiclesObservedIou': 0.08186237, 'vehiclesOccludedAuc': 0.05882915, 'vehiclesOccludedIou': 0.010002977, 'vehiclesFlowEpe': 6.329837, 'vehiclesFlowWarpedOccupancyAuc': 0.21916005, 'vehiclesFlowWarpedOccupancyIou': 0.08915843}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.6823013, 'vehiclesObservedIou': 0.35528195, 'vehiclesOccludedAuc': 0.26445454, 'vehiclesOccludedIou': 0.052080005, 'vehiclesFlowEpe': 6.633375, 'vehiclesFlowWarpedOccupancyAuc': 0.52673805, 'vehiclesFlowWarpedOccupancyIou': 0.40497282}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7194161, 'vehiclesObservedIou': 0.45968077, 'vehiclesOccludedAuc': 0.009640819, 'vehiclesOccludedIou': 0.0034742635, 'vehiclesFlowEpe': 8.640269, 'vehiclesFlowWarpedOccupancyAuc': 0.5598439, 'vehiclesFlowWarpedOccupancyIou': 0.4938811}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.92023146, 'vehiclesObservedIou': 0.6364275, 'vehiclesOccludedAuc': 0.025762716, 'vehiclesOccludedIou': 0.010237671, 'vehiclesFlowEpe': 5.269127, 'vehiclesFlowWarpedOccupancyAuc': 0.7535768, 'vehiclesFlowWarpedOccupancyIou': 0.710153}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.97967756, 'vehiclesObservedIou': 0.8451274, 'vehiclesOccludedAuc': 0.043759584, 'vehiclesOccludedIou': 0.016492995, 'vehiclesFlowEpe': 2.5437622, 'vehiclesFlowWarpedOccupancyAuc': 0.89202744, 'vehiclesFlowWarpedOccupancyIou': 0.9204698}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8133395, 'vehiclesObservedIou': 0.48152542, 'vehiclesOccludedAuc': 0.48443118, 'vehiclesOccludedIou': 0.111797445, 'vehiclesFlowEpe': 2.8873796, 'vehiclesFlowWarpedOccupancyAuc': 0.65615773, 'vehiclesFlowWarpedOccupancyIou': 0.53707206}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8131518, 'vehiclesObservedIou': 0.45736933, 'vehiclesOccludedAuc': 0.0059315558, 'vehiclesOccludedIou': 0.002713932, 'vehiclesFlowEpe': 3.219118, 'vehiclesFlowWarpedOccupancyAuc': 0.7094135, 'vehiclesFlowWarpedOccupancyIou': 0.5774036}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.4668017, 'vehiclesObservedIou': 0.1851226, 'vehiclesOccludedAuc': 0.070875525, 'vehiclesOccludedIou': 0.012366696, 'vehiclesFlowEpe': 8.968869, 'vehiclesFlowWarpedOccupancyAuc': 0.33089817, 'vehiclesFlowWarpedOccupancyIou': 0.18017331}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.70720494, 'vehiclesObservedIou': 0.4239036, 'vehiclesOccludedAuc': 0.18011181, 'vehiclesOccludedIou': 0.044790734, 'vehiclesFlowEpe': 3.1917143, 'vehiclesFlowWarpedOccupancyAuc': 0.69066674, 'vehiclesFlowWarpedOccupancyIou': 0.4892934}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.5338814, 'vehiclesObservedIou': 0.26629138, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 4.2906637, 'vehiclesFlowWarpedOccupancyAuc': 0.5030498, 'vehiclesFlowWarpedOccupancyIou': 0.35139665}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8238716, 'vehiclesObservedIou': 0.56664443, 'vehiclesOccludedAuc': 0.07734917, 'vehiclesOccludedIou': 0.018372333, 'vehiclesFlowEpe': 7.7034903, 'vehiclesFlowWarpedOccupancyAuc': 0.6440546, 'vehiclesFlowWarpedOccupancyIou': 0.6466385}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.1299842, 'vehiclesObservedIou': 0.06162206, 'vehiclesOccludedAuc': 0.04232913, 'vehiclesOccludedIou': 0.005030025, 'vehiclesFlowEpe': 5.6812115, 'vehiclesFlowWarpedOccupancyAuc': 0.27945784, 'vehiclesFlowWarpedOccupancyIou': 0.062011458}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.10666479, 'vehiclesObservedIou': 0.047906257, 'vehiclesOccludedAuc': 0.114274085, 'vehiclesOccludedIou': 0.010447705, 'vehiclesFlowEpe': 4.4438143, 'vehiclesFlowWarpedOccupancyAuc': 0.14481477, 'vehiclesFlowWarpedOccupancyIou': 0.05049493}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7478362, 'vehiclesObservedIou': 0.39500475, 'vehiclesOccludedAuc': 0.053007465, 'vehiclesOccludedIou': 0.009634006, 'vehiclesFlowEpe': 3.8208494, 'vehiclesFlowWarpedOccupancyAuc': 0.6264726, 'vehiclesFlowWarpedOccupancyIou': 0.39770532}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7029861, 'vehiclesObservedIou': 0.373415, 'vehiclesOccludedAuc': 0.016412636, 'vehiclesOccludedIou': 0.005317454, 'vehiclesFlowEpe': 3.7128344, 'vehiclesFlowWarpedOccupancyAuc': 0.627075, 'vehiclesFlowWarpedOccupancyIou': 0.43001425}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.22279778, 'vehiclesObservedIou': 0.08821611, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 5.7316847, 'vehiclesFlowWarpedOccupancyAuc': 0.28292167, 'vehiclesFlowWarpedOccupancyIou': 0.10065845}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.30718, 'vehiclesObservedIou': 0.09443009, 'vehiclesOccludedAuc': 0.001727737, 'vehiclesOccludedIou': 0.0011663347, 'vehiclesFlowEpe': 3.2680426, 'vehiclesFlowWarpedOccupancyAuc': 0.40109152, 'vehiclesFlowWarpedOccupancyIou': 0.099057585}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9750693, 'vehiclesObservedIou': 0.77475375, 'vehiclesOccludedAuc': 0.2927029, 'vehiclesOccludedIou': 0.04092568, 'vehiclesFlowEpe': 1.7907073, 'vehiclesFlowWarpedOccupancyAuc': 0.8726553, 'vehiclesFlowWarpedOccupancyIou': 0.8629154}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7733687, 'vehiclesObservedIou': 0.49659878, 'vehiclesOccludedAuc': 0.017577363, 'vehiclesOccludedIou': 0.004009711, 'vehiclesFlowEpe': 15.897791, 'vehiclesFlowWarpedOccupancyAuc': 0.4983111, 'vehiclesFlowWarpedOccupancyIou': 0.5003504}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8059593, 'vehiclesObservedIou': 0.43399867, 'vehiclesOccludedAuc': 0.06406879, 'vehiclesOccludedIou': 0.012871978, 'vehiclesFlowEpe': 3.134036, 'vehiclesFlowWarpedOccupancyAuc': 0.59627706, 'vehiclesFlowWarpedOccupancyIou': 0.4719196}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8365122, 'vehiclesObservedIou': 0.56433034, 'vehiclesOccludedAuc': 0.0035596874, 'vehiclesOccludedIou': 0.00048475375, 'vehiclesFlowEpe': 3.5314572, 'vehiclesFlowWarpedOccupancyAuc': 0.75224215, 'vehiclesFlowWarpedOccupancyIou': 0.6170106}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5733464, 'vehiclesObservedIou': 0.2665224, 'vehiclesOccludedAuc': 0.025081309, 'vehiclesOccludedIou': 0.008058046, 'vehiclesFlowEpe': 4.2360907, 'vehiclesFlowWarpedOccupancyAuc': 0.526986, 'vehiclesFlowWarpedOccupancyIou': 0.3087018}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8354886, 'vehiclesObservedIou': 0.43178216, 'vehiclesOccludedAuc': 0.07556332, 'vehiclesOccludedIou': 0.017514352, 'vehiclesFlowEpe': 4.1422796, 'vehiclesFlowWarpedOccupancyAuc': 0.625667, 'vehiclesFlowWarpedOccupancyIou': 0.47096506}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.1661532, 'vehiclesObservedIou': 0.078562185, 'vehiclesOccludedAuc': 0.0076733595, 'vehiclesOccludedIou': 0.0025776057, 'vehiclesFlowEpe': 19.315292, 'vehiclesFlowWarpedOccupancyAuc': 0.13942462, 'vehiclesFlowWarpedOccupancyIou': 0.07799566}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.64023757, 'vehiclesObservedIou': 0.2796677, 'vehiclesOccludedAuc': 0.014490053, 'vehiclesOccludedIou': 0.00349192, 'vehiclesFlowEpe': 3.6842866, 'vehiclesFlowWarpedOccupancyAuc': 0.5520799, 'vehiclesFlowWarpedOccupancyIou': 0.28197882}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.4031008, 'vehiclesObservedIou': 0.18961562, 'vehiclesOccludedAuc': 0.016875979, 'vehiclesOccludedIou': 0.0035652467, 'vehiclesFlowEpe': 10.586016, 'vehiclesFlowWarpedOccupancyAuc': 0.31531188, 'vehiclesFlowWarpedOccupancyIou': 0.13287802}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.86665785, 'vehiclesObservedIou': 0.49319747, 'vehiclesOccludedAuc': 0.018645955, 'vehiclesOccludedIou': 0.0055870353, 'vehiclesFlowEpe': 4.229373, 'vehiclesFlowWarpedOccupancyAuc': 0.68374914, 'vehiclesFlowWarpedOccupancyIou': 0.57529545}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.57181334, 'vehiclesObservedIou': 0.2794854, 'vehiclesOccludedAuc': 0.009311436, 'vehiclesOccludedIou': 0.00438129, 'vehiclesFlowEpe': 8.697389, 'vehiclesFlowWarpedOccupancyAuc': 0.4154452, 'vehiclesFlowWarpedOccupancyIou': 0.30955148}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9263962, 'vehiclesObservedIou': 0.672296, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.5265534, 'vehiclesFlowWarpedOccupancyAuc': 0.834127, 'vehiclesFlowWarpedOccupancyIou': 0.79275787}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.75618917, 'vehiclesObservedIou': 0.34995663, 'vehiclesOccludedAuc': 0.10275099, 'vehiclesOccludedIou': 0.027944354, 'vehiclesFlowEpe': 2.9019446, 'vehiclesFlowWarpedOccupancyAuc': 0.6788043, 'vehiclesFlowWarpedOccupancyIou': 0.39211956}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.14612924, 'vehiclesObservedIou': 0.06945792, 'vehiclesOccludedAuc': 0.04030943, 'vehiclesOccludedIou': 0.008814028, 'vehiclesFlowEpe': 6.405436, 'vehiclesFlowWarpedOccupancyAuc': 0.36307877, 'vehiclesFlowWarpedOccupancyIou': 0.07919515}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8932582, 'vehiclesObservedIou': 0.6234662, 'vehiclesOccludedAuc': 0.030562831, 'vehiclesOccludedIou': 0.009975981, 'vehiclesFlowEpe': 4.0766716, 'vehiclesFlowWarpedOccupancyAuc': 0.7820056, 'vehiclesFlowWarpedOccupancyIou': 0.70630133}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.25240472, 'vehiclesObservedIou': 0.090972945, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.2206867, 'vehiclesFlowWarpedOccupancyAuc': 0.43091556, 'vehiclesFlowWarpedOccupancyIou': 0.11359651}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.73926646, 'vehiclesObservedIou': 0.4056233, 'vehiclesOccludedAuc': 0.03543236, 'vehiclesOccludedIou': 0.007036341, 'vehiclesFlowEpe': 3.6166732, 'vehiclesFlowWarpedOccupancyAuc': 0.6390832, 'vehiclesFlowWarpedOccupancyIou': 0.5551322}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.89221483, 'vehiclesObservedIou': 0.6215325, 'vehiclesOccludedAuc': 0.17631535, 'vehiclesOccludedIou': 0.0374685, 'vehiclesFlowEpe': 3.5099492, 'vehiclesFlowWarpedOccupancyAuc': 0.78349745, 'vehiclesFlowWarpedOccupancyIou': 0.73434305}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.42808104, 'vehiclesObservedIou': 0.15663011, 'vehiclesOccludedAuc': 0.23552725, 'vehiclesOccludedIou': 0.052552946, 'vehiclesFlowEpe': 2.4004846, 'vehiclesFlowWarpedOccupancyAuc': 0.4794444, 'vehiclesFlowWarpedOccupancyIou': 0.2414851}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.75855285, 'vehiclesObservedIou': 0.41606283, 'vehiclesOccludedAuc': 0.057112027, 'vehiclesOccludedIou': 0.012471428, 'vehiclesFlowEpe': 6.552574, 'vehiclesFlowWarpedOccupancyAuc': 0.582266, 'vehiclesFlowWarpedOccupancyIou': 0.48280555}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.68037504, 'vehiclesObservedIou': 0.37577572, 'vehiclesOccludedAuc': 0.08798231, 'vehiclesOccludedIou': 0.027344229, 'vehiclesFlowEpe': 5.809572, 'vehiclesFlowWarpedOccupancyAuc': 0.59894943, 'vehiclesFlowWarpedOccupancyIou': 0.4952255}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8695129, 'vehiclesObservedIou': 0.49148533, 'vehiclesOccludedAuc': 0.0068811523, 'vehiclesOccludedIou': 0.0044320496, 'vehiclesFlowEpe': 3.9982204, 'vehiclesFlowWarpedOccupancyAuc': 0.62712365, 'vehiclesFlowWarpedOccupancyIou': 0.50353956}
2024-05-28 11:15:34.203358: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:15:34.279109: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:15:34.279484: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6174063, 'vehiclesObservedIou': 0.31716168, 'vehiclesOccludedAuc': 0.48119208, 'vehiclesOccludedIou': 0.10497021, 'vehiclesFlowEpe': 5.546353, 'vehiclesFlowWarpedOccupancyAuc': 0.6213147, 'vehiclesFlowWarpedOccupancyIou': 0.464953}
Time: 0.0014 seconds, Metrics: {'vehiclesObservedAuc': 0.681355, 'vehiclesObservedIou': 0.34118876, 'vehiclesOccludedAuc': 0.01488307, 'vehiclesOccludedIou': 0.0067687673, 'vehiclesFlowEpe': 7.7928476, 'vehiclesFlowWarpedOccupancyAuc': 0.48108158, 'vehiclesFlowWarpedOccupancyIou': 0.40135995}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.97967756, 'vehiclesObservedIou': 0.8451274, 'vehiclesOccludedAuc': 0.043759584, 'vehiclesOccludedIou': 0.016492995, 'vehiclesFlowEpe': 2.5437622, 'vehiclesFlowWarpedOccupancyAuc': 0.89202744, 'vehiclesFlowWarpedOccupancyIou': 0.9204698}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6323270968292684, 'vehiclesObservedIou': 0.366828180902439, 'vehiclesOccludedAuc': 0.07959502695121952, 'vehiclesOccludedIou': 0.017491976306097563, 'vehiclesFlowEpe': 5.486310407317073, 'vehiclesFlowWarpedOccupancyAuc': 0.5543234431707318, 'vehiclesFlowWarpedOccupancyIou': 0.41738856787804884}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00052new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.47386447, 'vehiclesObservedIou': 0.21307178, 'vehiclesOccludedAuc': 0.002864495, 'vehiclesOccludedIou': 0.0017437834, 'vehiclesFlowEpe': 9.184018, 'vehiclesFlowWarpedOccupancyAuc': 0.27551776, 'vehiclesFlowWarpedOccupancyIou': 0.25369567}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5598733, 'vehiclesObservedIou': 0.34846273, 'vehiclesOccludedAuc': 0.21278007, 'vehiclesOccludedIou': 0.039355695, 'vehiclesFlowEpe': 3.1658711, 'vehiclesFlowWarpedOccupancyAuc': 0.6688454, 'vehiclesFlowWarpedOccupancyIou': 0.50794}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7693902, 'vehiclesObservedIou': 0.40499213, 'vehiclesOccludedAuc': 0.06313813, 'vehiclesOccludedIou': 0.0175987, 'vehiclesFlowEpe': 2.8873115, 'vehiclesFlowWarpedOccupancyAuc': 0.65259427, 'vehiclesFlowWarpedOccupancyIou': 0.4505982}
2024-05-28 11:15:37.820285: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:15:37.884648: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:15:37.884962: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8906371, 'vehiclesObservedIou': 0.62109566, 'vehiclesOccludedAuc': 0.09984311, 'vehiclesOccludedIou': 0.010130241, 'vehiclesFlowEpe': 6.9394546, 'vehiclesFlowWarpedOccupancyAuc': 0.6902463, 'vehiclesFlowWarpedOccupancyIou': 0.63344777}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.5411576, 'vehiclesObservedIou': 0.27037326, 'vehiclesOccludedAuc': 0.023378802, 'vehiclesOccludedIou': 0.0070273774, 'vehiclesFlowEpe': 6.149732, 'vehiclesFlowWarpedOccupancyAuc': 0.43270943, 'vehiclesFlowWarpedOccupancyIou': 0.31097093}
DataLossError encountered. Skipping the corrupted record.
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.8906371, 'vehiclesObservedIou': 0.62109566, 'vehiclesOccludedAuc': 0.09984311, 'vehiclesOccludedIou': 0.010130241, 'vehiclesFlowEpe': 6.9394546, 'vehiclesFlowWarpedOccupancyAuc': 0.6902463, 'vehiclesFlowWarpedOccupancyIou': 0.63344777}
Average Time: 0.0012 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6469845340000001, 'vehiclesObservedIou': 0.371599112, 'vehiclesOccludedAuc': 0.08040092139999999, 'vehiclesOccludedIou': 0.015171159359999997, 'vehiclesFlowEpe': 5.6652774400000006, 'vehiclesFlowWarpedOccupancyAuc': 0.543982632, 'vehiclesFlowWarpedOccupancyIou': 0.431330514}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00141new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.914584, 'vehiclesObservedIou': 0.5917775, 'vehiclesOccludedAuc': 0.56965685, 'vehiclesOccludedIou': 0.14830142, 'vehiclesFlowEpe': 3.1817303, 'vehiclesFlowWarpedOccupancyAuc': 0.75070745, 'vehiclesFlowWarpedOccupancyIou': 0.71192044}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.24611716, 'vehiclesObservedIou': 0.14362514, 'vehiclesOccludedAuc': 0.038293265, 'vehiclesOccludedIou': 0.0062129507, 'vehiclesFlowEpe': 3.37368, 'vehiclesFlowWarpedOccupancyAuc': 0.49211738, 'vehiclesFlowWarpedOccupancyIou': 0.16671279}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7240241, 'vehiclesObservedIou': 0.3872063, 'vehiclesOccludedAuc': 0.1547804, 'vehiclesOccludedIou': 0.0215032, 'vehiclesFlowEpe': 1.9645841, 'vehiclesFlowWarpedOccupancyAuc': 0.7485027, 'vehiclesFlowWarpedOccupancyIou': 0.3985827}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.4530256, 'vehiclesObservedIou': 0.19935705, 'vehiclesOccludedAuc': 0.13844305, 'vehiclesOccludedIou': 0.026961777, 'vehiclesFlowEpe': 6.8014407, 'vehiclesFlowWarpedOccupancyAuc': 0.392019, 'vehiclesFlowWarpedOccupancyIou': 0.2711599}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6032503, 'vehiclesObservedIou': 0.31139806, 'vehiclesOccludedAuc': 0.19533737, 'vehiclesOccludedIou': 0.0230458, 'vehiclesFlowEpe': 3.0887287, 'vehiclesFlowWarpedOccupancyAuc': 0.60871613, 'vehiclesFlowWarpedOccupancyIou': 0.40592486}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.2687391, 'vehiclesObservedIou': 0.14941952, 'vehiclesOccludedAuc': 0.027356176, 'vehiclesOccludedIou': 0.01078283, 'vehiclesFlowEpe': 10.971821, 'vehiclesFlowWarpedOccupancyAuc': 0.33287722, 'vehiclesFlowWarpedOccupancyIou': 0.22385041}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7252465, 'vehiclesObservedIou': 0.42982492, 'vehiclesOccludedAuc': 0.019889321, 'vehiclesOccludedIou': 0.007748459, 'vehiclesFlowEpe': 3.0444813, 'vehiclesFlowWarpedOccupancyAuc': 0.63383853, 'vehiclesFlowWarpedOccupancyIou': 0.44939035}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9758722, 'vehiclesObservedIou': 0.8812052, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 16.208616, 'vehiclesFlowWarpedOccupancyAuc': 0.9068717, 'vehiclesFlowWarpedOccupancyIou': 0.9311433}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8671544, 'vehiclesObservedIou': 0.6422601, 'vehiclesOccludedAuc': 0.3426375, 'vehiclesOccludedIou': 0.060286418, 'vehiclesFlowEpe': 6.5875635, 'vehiclesFlowWarpedOccupancyAuc': 0.7994899, 'vehiclesFlowWarpedOccupancyIou': 0.7093231}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7230002, 'vehiclesObservedIou': 0.36510915, 'vehiclesOccludedAuc': 0.011154737, 'vehiclesOccludedIou': 0.005114216, 'vehiclesFlowEpe': 3.36128, 'vehiclesFlowWarpedOccupancyAuc': 0.6896554, 'vehiclesFlowWarpedOccupancyIou': 0.4597992}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.73919123, 'vehiclesObservedIou': 0.36345327, 'vehiclesOccludedAuc': 0.02240793, 'vehiclesOccludedIou': 0.007332517, 'vehiclesFlowEpe': 3.9425368, 'vehiclesFlowWarpedOccupancyAuc': 0.594045, 'vehiclesFlowWarpedOccupancyIou': 0.40759268}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.4899855, 'vehiclesObservedIou': 0.2337228, 'vehiclesOccludedAuc': 0.109854706, 'vehiclesOccludedIou': 0.0230236, 'vehiclesFlowEpe': 4.410782, 'vehiclesFlowWarpedOccupancyAuc': 0.4917837, 'vehiclesFlowWarpedOccupancyIou': 0.2964412}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5618739, 'vehiclesObservedIou': 0.36574897, 'vehiclesOccludedAuc': 0.034430712, 'vehiclesOccludedIou': 0.013099972, 'vehiclesFlowEpe': 8.879516, 'vehiclesFlowWarpedOccupancyAuc': 0.48819408, 'vehiclesFlowWarpedOccupancyIou': 0.4046426}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.69716305, 'vehiclesObservedIou': 0.4287461, 'vehiclesOccludedAuc': 0.17482539, 'vehiclesOccludedIou': 0.030963987, 'vehiclesFlowEpe': 3.6479976, 'vehiclesFlowWarpedOccupancyAuc': 0.64712423, 'vehiclesFlowWarpedOccupancyIou': 0.47850716}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.77615154, 'vehiclesObservedIou': 0.41297835, 'vehiclesOccludedAuc': 0.096992865, 'vehiclesOccludedIou': 0.024882399, 'vehiclesFlowEpe': 4.2704253, 'vehiclesFlowWarpedOccupancyAuc': 0.62846315, 'vehiclesFlowWarpedOccupancyIou': 0.5379396}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.80655134, 'vehiclesObservedIou': 0.57287574, 'vehiclesOccludedAuc': 0.014976508, 'vehiclesOccludedIou': 0.0058945282, 'vehiclesFlowEpe': 4.731332, 'vehiclesFlowWarpedOccupancyAuc': 0.70160395, 'vehiclesFlowWarpedOccupancyIou': 0.5944924}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7189373, 'vehiclesObservedIou': 0.29462728, 'vehiclesOccludedAuc': 0.0034899414, 'vehiclesOccludedIou': 0.0005999318, 'vehiclesFlowEpe': 2.9454687, 'vehiclesFlowWarpedOccupancyAuc': 0.5889481, 'vehiclesFlowWarpedOccupancyIou': 0.29367015}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.593084, 'vehiclesObservedIou': 0.3068426, 'vehiclesOccludedAuc': 0.01940842, 'vehiclesOccludedIou': 0.0041367994, 'vehiclesFlowEpe': 3.5554533, 'vehiclesFlowWarpedOccupancyAuc': 0.57213944, 'vehiclesFlowWarpedOccupancyIou': 0.3364839}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.785793, 'vehiclesObservedIou': 0.41431797, 'vehiclesOccludedAuc': 0.007036763, 'vehiclesOccludedIou': 0.003467221, 'vehiclesFlowEpe': 2.6956859, 'vehiclesFlowWarpedOccupancyAuc': 0.6981997, 'vehiclesFlowWarpedOccupancyIou': 0.4834512}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.88489455, 'vehiclesObservedIou': 0.5887387, 'vehiclesOccludedAuc': 0.06888163, 'vehiclesOccludedIou': 0.008801846, 'vehiclesFlowEpe': 3.1692433, 'vehiclesFlowWarpedOccupancyAuc': 0.74739945, 'vehiclesFlowWarpedOccupancyIou': 0.61986214}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.09979089, 'vehiclesObservedIou': 0.07258487, 'vehiclesOccludedAuc': 0.01178833, 'vehiclesOccludedIou': 0.001357249, 'vehiclesFlowEpe': 2.6481133, 'vehiclesFlowWarpedOccupancyAuc': 0.20107548, 'vehiclesFlowWarpedOccupancyIou': 0.1207558}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9788359, 'vehiclesObservedIou': 0.82336247, 'vehiclesOccludedAuc': 0.035287753, 'vehiclesOccludedIou': 0.0076749567, 'vehiclesFlowEpe': 2.1825266, 'vehiclesFlowWarpedOccupancyAuc': 0.8942199, 'vehiclesFlowWarpedOccupancyIou': 0.85529053}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7444511, 'vehiclesObservedIou': 0.39044413, 'vehiclesOccludedAuc': 0.03944888, 'vehiclesOccludedIou': 0.006305927, 'vehiclesFlowEpe': 4.369484, 'vehiclesFlowWarpedOccupancyAuc': 0.5326446, 'vehiclesFlowWarpedOccupancyIou': 0.25139365}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.97375506, 'vehiclesObservedIou': 0.8068198, 'vehiclesOccludedAuc': 0.011144069, 'vehiclesOccludedIou': 0.0039605866, 'vehiclesFlowEpe': 2.4592915, 'vehiclesFlowWarpedOccupancyAuc': 0.8746185, 'vehiclesFlowWarpedOccupancyIou': 0.8317483}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.34332803, 'vehiclesObservedIou': 0.18564178, 'vehiclesOccludedAuc': 0.0010090625, 'vehiclesOccludedIou': 0.0019217683, 'vehiclesFlowEpe': 7.2803755, 'vehiclesFlowWarpedOccupancyAuc': 0.28069022, 'vehiclesFlowWarpedOccupancyIou': 0.21382421}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.79131365, 'vehiclesObservedIou': 0.5036894, 'vehiclesOccludedAuc': 0.43699518, 'vehiclesOccludedIou': 0.07815681, 'vehiclesFlowEpe': 4.045124, 'vehiclesFlowWarpedOccupancyAuc': 0.60149777, 'vehiclesFlowWarpedOccupancyIou': 0.5286577}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.14382578, 'vehiclesObservedIou': 0.06891322, 'vehiclesOccludedAuc': 0.0012488056, 'vehiclesOccludedIou': 0.00083261996, 'vehiclesFlowEpe': 7.7186856, 'vehiclesFlowWarpedOccupancyAuc': 0.24484156, 'vehiclesFlowWarpedOccupancyIou': 0.069545135}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.79963905, 'vehiclesObservedIou': 0.4107237, 'vehiclesOccludedAuc': 0.22006074, 'vehiclesOccludedIou': 0.056084387, 'vehiclesFlowEpe': 2.9909704, 'vehiclesFlowWarpedOccupancyAuc': 0.718064, 'vehiclesFlowWarpedOccupancyIou': 0.52866757}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.605918, 'vehiclesObservedIou': 0.31530538, 'vehiclesOccludedAuc': 0.059194017, 'vehiclesOccludedIou': 0.01820048, 'vehiclesFlowEpe': 6.596704, 'vehiclesFlowWarpedOccupancyAuc': 0.5103377, 'vehiclesFlowWarpedOccupancyIou': 0.36804247}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8258045, 'vehiclesObservedIou': 0.4914394, 'vehiclesOccludedAuc': 0.013368839, 'vehiclesOccludedIou': 0.005539049, 'vehiclesFlowEpe': 4.98563, 'vehiclesFlowWarpedOccupancyAuc': 0.6944878, 'vehiclesFlowWarpedOccupancyIou': 0.5778091}
2024-05-28 11:15:58.650993: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:15:58.709574: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:15:58.709873: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5248096, 'vehiclesObservedIou': 0.38864705, 'vehiclesOccludedAuc': 0.00096796476, 'vehiclesOccludedIou': 0.0011411812, 'vehiclesFlowEpe': 2.9545155, 'vehiclesFlowWarpedOccupancyAuc': 0.553738, 'vehiclesFlowWarpedOccupancyIou': 0.45159343}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.33822322, 'vehiclesObservedIou': 0.17674933, 'vehiclesOccludedAuc': 0.2368121, 'vehiclesOccludedIou': 0.015981086, 'vehiclesFlowEpe': 7.0807633, 'vehiclesFlowWarpedOccupancyAuc': 0.36832047, 'vehiclesFlowWarpedOccupancyIou': 0.241745}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.58450073, 'vehiclesObservedIou': 0.3282743, 'vehiclesOccludedAuc': 0.12869826, 'vehiclesOccludedIou': 0.018445037, 'vehiclesFlowEpe': 5.199305, 'vehiclesFlowWarpedOccupancyAuc': 0.60451204, 'vehiclesFlowWarpedOccupancyIou': 0.50351447}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.9788359, 'vehiclesObservedIou': 0.82336247, 'vehiclesOccludedAuc': 0.035287753, 'vehiclesOccludedIou': 0.0076749567, 'vehiclesFlowEpe': 2.1825266, 'vehiclesFlowWarpedOccupancyAuc': 0.8942199, 'vehiclesFlowWarpedOccupancyIou': 0.85529053}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6457222569696969, 'vehiclesObservedIou': 0.3953281681818182, 'vehiclesOccludedAuc': 0.0983599253109091, 'vehiclesOccludedIou': 0.01962912151090909, 'vehiclesFlowEpe': 4.889207733333333, 'vehiclesFlowWarpedOccupancyAuc': 0.5936892196969697, 'vehiclesFlowWarpedOccupancyIou': 0.4461659831818182}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00030new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.6915864, 'vehiclesObservedIou': 0.53633845, 'vehiclesOccludedAuc': 0.1512734, 'vehiclesOccludedIou': 0.038192626, 'vehiclesFlowEpe': 3.1743982, 'vehiclesFlowWarpedOccupancyAuc': 0.7656472, 'vehiclesFlowWarpedOccupancyIou': 0.59157026}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.3618719, 'vehiclesObservedIou': 0.18988813, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 4.999243, 'vehiclesFlowWarpedOccupancyAuc': 0.43356216, 'vehiclesFlowWarpedOccupancyIou': 0.2944241}
2024-05-28 11:16:02.203230: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:16:02.262333: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:16:02.262712: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.16354121, 'vehiclesObservedIou': 0.07756186, 'vehiclesOccludedAuc': 0.031146578, 'vehiclesOccludedIou': 0.007373318, 'vehiclesFlowEpe': 5.7840385, 'vehiclesFlowWarpedOccupancyAuc': 0.28673708, 'vehiclesFlowWarpedOccupancyIou': 0.09088257}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.4312154, 'vehiclesObservedIou': 0.19744337, 'vehiclesOccludedAuc': 0.0083153285, 'vehiclesOccludedIou': 0.0022929045, 'vehiclesFlowEpe': 5.9027185, 'vehiclesFlowWarpedOccupancyAuc': 0.47684452, 'vehiclesFlowWarpedOccupancyIou': 0.23278925}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.24752276, 'vehiclesObservedIou': 0.11856609, 'vehiclesOccludedAuc': 0.016872926, 'vehiclesOccludedIou': 0.0046988255, 'vehiclesFlowEpe': 3.6562092, 'vehiclesFlowWarpedOccupancyAuc': 0.19032936, 'vehiclesFlowWarpedOccupancyIou': 0.12566364}
DataLossError encountered. Skipping the corrupted record.
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.6915864, 'vehiclesObservedIou': 0.53633845, 'vehiclesOccludedAuc': 0.1512734, 'vehiclesOccludedIou': 0.038192626, 'vehiclesFlowEpe': 3.1743982, 'vehiclesFlowWarpedOccupancyAuc': 0.7656472, 'vehiclesFlowWarpedOccupancyIou': 0.59157026}
Average Time: 0.0012 seconds, Average Metrics: {'vehiclesObservedAuc': 0.379147534, 'vehiclesObservedIou': 0.22395958000000005, 'vehiclesOccludedAuc': 0.0415216465, 'vehiclesOccludedIou': 0.0105115348, 'vehiclesFlowEpe': 4.70332148, 'vehiclesFlowWarpedOccupancyAuc': 0.43062406400000003, 'vehiclesFlowWarpedOccupancyIou': 0.267065964}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00108new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8587182, 'vehiclesObservedIou': 0.50815755, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.7265456, 'vehiclesFlowWarpedOccupancyAuc': 0.7136325, 'vehiclesFlowWarpedOccupancyIou': 0.647671}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.22867763, 'vehiclesObservedIou': 0.09498309, 'vehiclesOccludedAuc': 0.110691875, 'vehiclesOccludedIou': 0.022294192, 'vehiclesFlowEpe': 7.5421987, 'vehiclesFlowWarpedOccupancyAuc': 0.2883301, 'vehiclesFlowWarpedOccupancyIou': 0.088646896}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7632726, 'vehiclesObservedIou': 0.43673626, 'vehiclesOccludedAuc': 0.124296896, 'vehiclesOccludedIou': 0.028522205, 'vehiclesFlowEpe': 6.18872, 'vehiclesFlowWarpedOccupancyAuc': 0.46631593, 'vehiclesFlowWarpedOccupancyIou': 0.4308352}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.89611375, 'vehiclesObservedIou': 0.5338741, 'vehiclesOccludedAuc': 0.037395377, 'vehiclesOccludedIou': 0.0071781757, 'vehiclesFlowEpe': 3.966427, 'vehiclesFlowWarpedOccupancyAuc': 0.7211391, 'vehiclesFlowWarpedOccupancyIou': 0.5901904}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9648789, 'vehiclesObservedIou': 0.7516944, 'vehiclesOccludedAuc': 0.022663582, 'vehiclesOccludedIou': 0.006986601, 'vehiclesFlowEpe': 9.864201, 'vehiclesFlowWarpedOccupancyAuc': 0.8033089, 'vehiclesFlowWarpedOccupancyIou': 0.8406664}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.54519707, 'vehiclesObservedIou': 0.24305736, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.9684641, 'vehiclesFlowWarpedOccupancyAuc': 0.38804883, 'vehiclesFlowWarpedOccupancyIou': 0.36760744}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.69743025, 'vehiclesObservedIou': 0.39177692, 'vehiclesOccludedAuc': 0.08979668, 'vehiclesOccludedIou': 0.018218214, 'vehiclesFlowEpe': 3.5127115, 'vehiclesFlowWarpedOccupancyAuc': 0.6460596, 'vehiclesFlowWarpedOccupancyIou': 0.43782488}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.67437154, 'vehiclesObservedIou': 0.35846823, 'vehiclesOccludedAuc': 0.074535474, 'vehiclesOccludedIou': 0.019542454, 'vehiclesFlowEpe': 2.865989, 'vehiclesFlowWarpedOccupancyAuc': 0.6736777, 'vehiclesFlowWarpedOccupancyIou': 0.43806392}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8044867, 'vehiclesObservedIou': 0.5597611, 'vehiclesOccludedAuc': 0.18754584, 'vehiclesOccludedIou': 0.012169294, 'vehiclesFlowEpe': 3.3984094, 'vehiclesFlowWarpedOccupancyAuc': 0.74738926, 'vehiclesFlowWarpedOccupancyIou': 0.6955432}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8143558, 'vehiclesObservedIou': 0.48374498, 'vehiclesOccludedAuc': 0.03344285, 'vehiclesOccludedIou': 0.011773477, 'vehiclesFlowEpe': 6.1265807, 'vehiclesFlowWarpedOccupancyAuc': 0.63420975, 'vehiclesFlowWarpedOccupancyIou': 0.55172944}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7322627, 'vehiclesObservedIou': 0.4365031, 'vehiclesOccludedAuc': 0.10661572, 'vehiclesOccludedIou': 0.021117354, 'vehiclesFlowEpe': 5.501547, 'vehiclesFlowWarpedOccupancyAuc': 0.609341, 'vehiclesFlowWarpedOccupancyIou': 0.42635554}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.50683355, 'vehiclesObservedIou': 0.3206992, 'vehiclesOccludedAuc': 0.05638859, 'vehiclesOccludedIou': 0.0171322, 'vehiclesFlowEpe': 7.186741, 'vehiclesFlowWarpedOccupancyAuc': 0.5076843, 'vehiclesFlowWarpedOccupancyIou': 0.36885104}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9300757, 'vehiclesObservedIou': 0.5928888, 'vehiclesOccludedAuc': 0.009431273, 'vehiclesOccludedIou': 0.0039074216, 'vehiclesFlowEpe': 2.6865377, 'vehiclesFlowWarpedOccupancyAuc': 0.7756952, 'vehiclesFlowWarpedOccupancyIou': 0.6584225}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.7699913, 'vehiclesObservedIou': 0.5152416, 'vehiclesOccludedAuc': 0.21212478, 'vehiclesOccludedIou': 0.056748122, 'vehiclesFlowEpe': 5.288826, 'vehiclesFlowWarpedOccupancyAuc': 0.6949774, 'vehiclesFlowWarpedOccupancyIou': 0.53251517}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9093722, 'vehiclesObservedIou': 0.58662546, 'vehiclesOccludedAuc': 0.019218488, 'vehiclesOccludedIou': 0.007798194, 'vehiclesFlowEpe': 4.8611455, 'vehiclesFlowWarpedOccupancyAuc': 0.7852251, 'vehiclesFlowWarpedOccupancyIou': 0.731889}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.50212497, 'vehiclesObservedIou': 0.25157425, 'vehiclesOccludedAuc': 0.06403507, 'vehiclesOccludedIou': 0.018696068, 'vehiclesFlowEpe': 4.1041994, 'vehiclesFlowWarpedOccupancyAuc': 0.5168508, 'vehiclesFlowWarpedOccupancyIou': 0.28040755}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.88415134, 'vehiclesObservedIou': 0.65901774, 'vehiclesOccludedAuc': 0.04320456, 'vehiclesOccludedIou': 0.008753644, 'vehiclesFlowEpe': 4.9222426, 'vehiclesFlowWarpedOccupancyAuc': 0.75600374, 'vehiclesFlowWarpedOccupancyIou': 0.68263996}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8758941, 'vehiclesObservedIou': 0.52782035, 'vehiclesOccludedAuc': 0.0010303577, 'vehiclesOccludedIou': 0.00042564672, 'vehiclesFlowEpe': 5.8689604, 'vehiclesFlowWarpedOccupancyAuc': 0.6809989, 'vehiclesFlowWarpedOccupancyIou': 0.6113322}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.13849069, 'vehiclesObservedIou': 0.06604328, 'vehiclesOccludedAuc': 0.0018275309, 'vehiclesOccludedIou': 0.0013624129, 'vehiclesFlowEpe': 10.366053, 'vehiclesFlowWarpedOccupancyAuc': 0.14486006, 'vehiclesFlowWarpedOccupancyIou': 0.06331481}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6817486, 'vehiclesObservedIou': 0.36824703, 'vehiclesOccludedAuc': 0.02922332, 'vehiclesOccludedIou': 0.0063068727, 'vehiclesFlowEpe': 5.437586, 'vehiclesFlowWarpedOccupancyAuc': 0.6240552, 'vehiclesFlowWarpedOccupancyIou': 0.34910598}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8483999, 'vehiclesObservedIou': 0.55549634, 'vehiclesOccludedAuc': 0.0928127, 'vehiclesOccludedIou': 0.031505823, 'vehiclesFlowEpe': 5.309951, 'vehiclesFlowWarpedOccupancyAuc': 0.74859846, 'vehiclesFlowWarpedOccupancyIou': 0.5922644}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6999953, 'vehiclesObservedIou': 0.3502705, 'vehiclesOccludedAuc': 0.02235657, 'vehiclesOccludedIou': 0.0062532113, 'vehiclesFlowEpe': 4.4445815, 'vehiclesFlowWarpedOccupancyAuc': 0.64146745, 'vehiclesFlowWarpedOccupancyIou': 0.47569937}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.80821913, 'vehiclesObservedIou': 0.51951927, 'vehiclesOccludedAuc': 0.00408713, 'vehiclesOccludedIou': 0.001685577, 'vehiclesFlowEpe': 7.7010593, 'vehiclesFlowWarpedOccupancyAuc': 0.57018435, 'vehiclesFlowWarpedOccupancyIou': 0.56555843}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8741811, 'vehiclesObservedIou': 0.53006727, 'vehiclesOccludedAuc': 0.045936964, 'vehiclesOccludedIou': 0.01752484, 'vehiclesFlowEpe': 6.2700663, 'vehiclesFlowWarpedOccupancyAuc': 0.6657922, 'vehiclesFlowWarpedOccupancyIou': 0.6144848}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.60620135, 'vehiclesObservedIou': 0.27154058, 'vehiclesOccludedAuc': 0.0049768225, 'vehiclesOccludedIou': 0.0016958602, 'vehiclesFlowEpe': 3.6669796, 'vehiclesFlowWarpedOccupancyAuc': 0.54975736, 'vehiclesFlowWarpedOccupancyIou': 0.3368469}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5380634, 'vehiclesObservedIou': 0.21503928, 'vehiclesOccludedAuc': 0.12261229, 'vehiclesOccludedIou': 0.019468818, 'vehiclesFlowEpe': 5.1127176, 'vehiclesFlowWarpedOccupancyAuc': 0.56400234, 'vehiclesFlowWarpedOccupancyIou': 0.19882937}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.4599401, 'vehiclesObservedIou': 0.2221952, 'vehiclesOccludedAuc': 0.15036748, 'vehiclesOccludedIou': 0.020374127, 'vehiclesFlowEpe': 4.4415755, 'vehiclesFlowWarpedOccupancyAuc': 0.4227452, 'vehiclesFlowWarpedOccupancyIou': 0.22650635}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.25239384, 'vehiclesObservedIou': 0.10107734, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 12.154179, 'vehiclesFlowWarpedOccupancyAuc': 0.11466266, 'vehiclesFlowWarpedOccupancyIou': 0.08330725}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.9648789, 'vehiclesObservedIou': 0.7516944, 'vehiclesOccludedAuc': 0.022663582, 'vehiclesOccludedIou': 0.006986601, 'vehiclesFlowEpe': 9.864201, 'vehiclesFlowWarpedOccupancyAuc': 0.8033089, 'vehiclesFlowWarpedOccupancyIou': 0.8406664}
2024-05-28 11:16:20.016393: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:16:20.073280: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:16:20.073575: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6880657753571429, 'vehiclesObservedIou': 0.4090043064285714, 'vehiclesOccludedAuc': 0.059522079289285705, 'vehiclesOccludedIou': 0.013122885897142859, 'vehiclesFlowEpe': 5.588756978571429, 'vehiclesFlowWarpedOccupancyAuc': 0.5876790496428572, 'vehiclesFlowWarpedOccupancyIou': 0.4602539070000001}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00032new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0014 seconds, Metrics: {'vehiclesObservedAuc': 0.7531892, 'vehiclesObservedIou': 0.40770265, 'vehiclesOccludedAuc': 0.10489247, 'vehiclesOccludedIou': 0.024005605, 'vehiclesFlowEpe': 2.6665387, 'vehiclesFlowWarpedOccupancyAuc': 0.64909285, 'vehiclesFlowWarpedOccupancyIou': 0.48190916}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.62277555, 'vehiclesObservedIou': 0.31774348, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.3013632, 'vehiclesFlowWarpedOccupancyAuc': 0.6028668, 'vehiclesFlowWarpedOccupancyIou': 0.4001923}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.91250354, 'vehiclesObservedIou': 0.59523886, 'vehiclesOccludedAuc': 0.002051697, 'vehiclesOccludedIou': 0.0008823498, 'vehiclesFlowEpe': 1.927566, 'vehiclesFlowWarpedOccupancyAuc': 0.78569794, 'vehiclesFlowWarpedOccupancyIou': 0.7033683}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7358814, 'vehiclesObservedIou': 0.4650611, 'vehiclesOccludedAuc': 0.0038266773, 'vehiclesOccludedIou': 0.0021011527, 'vehiclesFlowEpe': 5.199357, 'vehiclesFlowWarpedOccupancyAuc': 0.6202017, 'vehiclesFlowWarpedOccupancyIou': 0.5151181}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7070674, 'vehiclesObservedIou': 0.42766598, 'vehiclesOccludedAuc': 0.020011745, 'vehiclesOccludedIou': 0.0052167457, 'vehiclesFlowEpe': 5.248855, 'vehiclesFlowWarpedOccupancyAuc': 0.6168856, 'vehiclesFlowWarpedOccupancyIou': 0.4475978}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.7179742, 'vehiclesObservedIou': 0.46615225, 'vehiclesOccludedAuc': 0.007197408, 'vehiclesOccludedIou': 0.0024728242, 'vehiclesFlowEpe': 3.9421434, 'vehiclesFlowWarpedOccupancyAuc': 0.5956162, 'vehiclesFlowWarpedOccupancyIou': 0.48049375}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.76850295, 'vehiclesObservedIou': 0.4094919, 'vehiclesOccludedAuc': 0.08664408, 'vehiclesOccludedIou': 0.021514105, 'vehiclesFlowEpe': 3.9067554, 'vehiclesFlowWarpedOccupancyAuc': 0.63674754, 'vehiclesFlowWarpedOccupancyIou': 0.46236882}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.57254225, 'vehiclesObservedIou': 0.34155196, 'vehiclesOccludedAuc': 0.22019243, 'vehiclesOccludedIou': 0.023811731, 'vehiclesFlowEpe': 4.8496695, 'vehiclesFlowWarpedOccupancyAuc': 0.6020081, 'vehiclesFlowWarpedOccupancyIou': 0.55722904}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.8067553, 'vehiclesObservedIou': 0.4523967, 'vehiclesOccludedAuc': 0.21661477, 'vehiclesOccludedIou': 0.054264363, 'vehiclesFlowEpe': 9.947044, 'vehiclesFlowWarpedOccupancyAuc': 0.6022772, 'vehiclesFlowWarpedOccupancyIou': 0.48930946}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.62220025, 'vehiclesObservedIou': 0.26625657, 'vehiclesOccludedAuc': 0.0063571306, 'vehiclesOccludedIou': 0.002219659, 'vehiclesFlowEpe': 7.5601187, 'vehiclesFlowWarpedOccupancyAuc': 0.47684848, 'vehiclesFlowWarpedOccupancyIou': 0.31793705}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.95019764, 'vehiclesObservedIou': 0.6092991, 'vehiclesOccludedAuc': 0.006804296, 'vehiclesOccludedIou': 0.0033525936, 'vehiclesFlowEpe': 3.349926, 'vehiclesFlowWarpedOccupancyAuc': 0.7377909, 'vehiclesFlowWarpedOccupancyIou': 0.61098766}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9973705, 'vehiclesObservedIou': 0.92346394, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.1397111, 'vehiclesFlowWarpedOccupancyAuc': 0.91357225, 'vehiclesFlowWarpedOccupancyIou': 0.9547869}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8376917, 'vehiclesObservedIou': 0.614439, 'vehiclesOccludedAuc': 0.02578919, 'vehiclesOccludedIou': 0.014161215, 'vehiclesFlowEpe': 4.3516145, 'vehiclesFlowWarpedOccupancyAuc': 0.7475835, 'vehiclesFlowWarpedOccupancyIou': 0.6779659}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6924248, 'vehiclesObservedIou': 0.4179287, 'vehiclesOccludedAuc': 0.17410135, 'vehiclesOccludedIou': 0.03196478, 'vehiclesFlowEpe': 3.3488677, 'vehiclesFlowWarpedOccupancyAuc': 0.62139946, 'vehiclesFlowWarpedOccupancyIou': 0.4447406}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8776464, 'vehiclesObservedIou': 0.44210598, 'vehiclesOccludedAuc': 0.03995021, 'vehiclesOccludedIou': 0.007049417, 'vehiclesFlowEpe': 2.7551887, 'vehiclesFlowWarpedOccupancyAuc': 0.7000067, 'vehiclesFlowWarpedOccupancyIou': 0.4229636}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.71116185, 'vehiclesObservedIou': 0.46286693, 'vehiclesOccludedAuc': 0.3437025, 'vehiclesOccludedIou': 0.048760004, 'vehiclesFlowEpe': 2.8300254, 'vehiclesFlowWarpedOccupancyAuc': 0.7500109, 'vehiclesFlowWarpedOccupancyIou': 0.62977296}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.75973165, 'vehiclesObservedIou': 0.38418776, 'vehiclesOccludedAuc': 0.09632209, 'vehiclesOccludedIou': 0.03409644, 'vehiclesFlowEpe': 3.477717, 'vehiclesFlowWarpedOccupancyAuc': 0.6106796, 'vehiclesFlowWarpedOccupancyIou': 0.4383818}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9854981, 'vehiclesObservedIou': 0.79521286, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.3037765, 'vehiclesFlowWarpedOccupancyAuc': 0.8868342, 'vehiclesFlowWarpedOccupancyIou': 0.8872562}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.37179458, 'vehiclesObservedIou': 0.125902, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 4.7162457, 'vehiclesFlowWarpedOccupancyAuc': 0.44179505, 'vehiclesFlowWarpedOccupancyIou': 0.14982688}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.84207135, 'vehiclesObservedIou': 0.57936317, 'vehiclesOccludedAuc': 0.0072061364, 'vehiclesOccludedIou': 0.0032109888, 'vehiclesFlowEpe': 4.1739235, 'vehiclesFlowWarpedOccupancyAuc': 0.7473599, 'vehiclesFlowWarpedOccupancyIou': 0.6387568}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8307892, 'vehiclesObservedIou': 0.4941927, 'vehiclesOccludedAuc': 0.091130525, 'vehiclesOccludedIou': 0.014287274, 'vehiclesFlowEpe': 6.4022465, 'vehiclesFlowWarpedOccupancyAuc': 0.59743726, 'vehiclesFlowWarpedOccupancyIou': 0.51754326}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.5509795, 'vehiclesObservedIou': 0.25432608, 'vehiclesOccludedAuc': 0.03047052, 'vehiclesOccludedIou': 0.014649807, 'vehiclesFlowEpe': 6.373785, 'vehiclesFlowWarpedOccupancyAuc': 0.4401319, 'vehiclesFlowWarpedOccupancyIou': 0.31257164}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.99091727, 'vehiclesObservedIou': 0.8454383, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.1430888, 'vehiclesFlowWarpedOccupancyAuc': 0.8977557, 'vehiclesFlowWarpedOccupancyIou': 0.90538895}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9612853, 'vehiclesObservedIou': 0.7261152, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 1.5703663, 'vehiclesFlowWarpedOccupancyAuc': 0.88139373, 'vehiclesFlowWarpedOccupancyIou': 0.80750185}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8456979, 'vehiclesObservedIou': 0.4015896, 'vehiclesOccludedAuc': 0.7349975, 'vehiclesOccludedIou': 0.21150555, 'vehiclesFlowEpe': 6.3459835, 'vehiclesFlowWarpedOccupancyAuc': 0.7716413, 'vehiclesFlowWarpedOccupancyIou': 0.47749257}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7850514, 'vehiclesObservedIou': 0.40116796, 'vehiclesOccludedAuc': 0.0024381503, 'vehiclesOccludedIou': 0.0011367679, 'vehiclesFlowEpe': 2.3429396, 'vehiclesFlowWarpedOccupancyAuc': 0.74460447, 'vehiclesFlowWarpedOccupancyIou': 0.51137024}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.20026687, 'vehiclesObservedIou': 0.051906355, 'vehiclesOccludedAuc': 0.04408181, 'vehiclesOccludedIou': 0.007146691, 'vehiclesFlowEpe': 10.745512, 'vehiclesFlowWarpedOccupancyAuc': 0.19737133, 'vehiclesFlowWarpedOccupancyIou': 0.037084766}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.79995257, 'vehiclesObservedIou': 0.47006422, 'vehiclesOccludedAuc': 0.062945545, 'vehiclesOccludedIou': 0.009417515, 'vehiclesFlowEpe': 4.780718, 'vehiclesFlowWarpedOccupancyAuc': 0.60296625, 'vehiclesFlowWarpedOccupancyIou': 0.55351734}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.33698913, 'vehiclesObservedIou': 0.16625243, 'vehiclesOccludedAuc': 0.16058141, 'vehiclesOccludedIou': 0.03326909, 'vehiclesFlowEpe': 5.4284797, 'vehiclesFlowWarpedOccupancyAuc': 0.3856306, 'vehiclesFlowWarpedOccupancyIou': 0.1709656}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.9973705, 'vehiclesObservedIou': 0.92346394, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.1397111, 'vehiclesFlowWarpedOccupancyAuc': 0.91357225, 'vehiclesFlowWarpedOccupancyIou': 0.9547869}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.7429968879310344, 'vehiclesObservedIou': 0.45914081844827587, 'vehiclesOccludedAuc': 0.08580378071034482, 'vehiclesOccludedIou': 0.019672298920689654, 'vehiclesFlowEpe': 4.4527422896551725, 'vehiclesFlowWarpedOccupancyAuc': 0.650489910689655, 'vehiclesFlowWarpedOccupancyIou': 0.5173930791724138}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00074new.tfrecords...
2024-05-28 11:16:38.494527: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:16:38.551002: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:16:38.551295: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.27126798, 'vehiclesObservedIou': 0.11689808, 'vehiclesOccludedAuc': 0.08638426, 'vehiclesOccludedIou': 0.01674936, 'vehiclesFlowEpe': 7.866432, 'vehiclesFlowWarpedOccupancyAuc': 0.31949475, 'vehiclesFlowWarpedOccupancyIou': 0.105748735}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6584652, 'vehiclesObservedIou': 0.3871384, 'vehiclesOccludedAuc': 0.6858457, 'vehiclesOccludedIou': 0.086380266, 'vehiclesFlowEpe': 4.1704817, 'vehiclesFlowWarpedOccupancyAuc': 0.6708472, 'vehiclesFlowWarpedOccupancyIou': 0.608864}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9182443, 'vehiclesObservedIou': 0.5654974, 'vehiclesOccludedAuc': 0.059709072, 'vehiclesOccludedIou': 0.026487447, 'vehiclesFlowEpe': 3.8297126, 'vehiclesFlowWarpedOccupancyAuc': 0.76407254, 'vehiclesFlowWarpedOccupancyIou': 0.7013286}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.79337317, 'vehiclesObservedIou': 0.49313796, 'vehiclesOccludedAuc': 0.0558588, 'vehiclesOccludedIou': 0.018619888, 'vehiclesFlowEpe': 3.297881, 'vehiclesFlowWarpedOccupancyAuc': 0.649887, 'vehiclesFlowWarpedOccupancyIou': 0.55448407}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.6760541, 'vehiclesObservedIou': 0.28555977, 'vehiclesOccludedAuc': 0.046587475, 'vehiclesOccludedIou': 0.008050665, 'vehiclesFlowEpe': 8.099731, 'vehiclesFlowWarpedOccupancyAuc': 0.368243, 'vehiclesFlowWarpedOccupancyIou': 0.24581124}
DataLossError encountered. Skipping the corrupted record.
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.9182443, 'vehiclesObservedIou': 0.5654974, 'vehiclesOccludedAuc': 0.059709072, 'vehiclesOccludedIou': 0.026487447, 'vehiclesFlowEpe': 3.8297126, 'vehiclesFlowWarpedOccupancyAuc': 0.76407254, 'vehiclesFlowWarpedOccupancyIou': 0.7013286}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.66348095, 'vehiclesObservedIou': 0.369646322, 'vehiclesOccludedAuc': 0.1868770614, 'vehiclesOccludedIou': 0.031257525200000004, 'vehiclesFlowEpe': 5.452847660000001, 'vehiclesFlowWarpedOccupancyAuc': 0.554508898, 'vehiclesFlowWarpedOccupancyIou': 0.44324732899999997}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00008new.tfrecords...
2024-05-28 11:16:41.976704: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:16:42.034306: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:16:42.034604: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0017 seconds, Metrics: {'vehiclesObservedAuc': 0.76575243, 'vehiclesObservedIou': 0.42224735, 'vehiclesOccludedAuc': 0.024026792, 'vehiclesOccludedIou': 0.009096093, 'vehiclesFlowEpe': 3.6478, 'vehiclesFlowWarpedOccupancyAuc': 0.69878644, 'vehiclesFlowWarpedOccupancyIou': 0.5008319}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.60513735, 'vehiclesObservedIou': 0.27201167, 'vehiclesOccludedAuc': 0.051496584, 'vehiclesOccludedIou': 0.011392918, 'vehiclesFlowEpe': 3.0062556, 'vehiclesFlowWarpedOccupancyAuc': 0.52858716, 'vehiclesFlowWarpedOccupancyIou': 0.30477908}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.28356376, 'vehiclesObservedIou': 0.10789788, 'vehiclesOccludedAuc': 0.011651352, 'vehiclesOccludedIou': 0.0044776467, 'vehiclesFlowEpe': 3.2286563, 'vehiclesFlowWarpedOccupancyAuc': 0.567466, 'vehiclesFlowWarpedOccupancyIou': 0.12139179}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6287379, 'vehiclesObservedIou': 0.31909347, 'vehiclesOccludedAuc': 0.0006410414, 'vehiclesOccludedIou': 0.00021591719, 'vehiclesFlowEpe': 8.441308, 'vehiclesFlowWarpedOccupancyAuc': 0.539726, 'vehiclesFlowWarpedOccupancyIou': 0.43806207}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.82937443, 'vehiclesObservedIou': 0.41210625, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 11.31438, 'vehiclesFlowWarpedOccupancyAuc': 0.60952103, 'vehiclesFlowWarpedOccupancyIou': 0.57957757}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7402741, 'vehiclesObservedIou': 0.38318628, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.7253625, 'vehiclesFlowWarpedOccupancyAuc': 0.6596805, 'vehiclesFlowWarpedOccupancyIou': 0.48865607}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.73679805, 'vehiclesObservedIou': 0.4402936, 'vehiclesOccludedAuc': 0.21512796, 'vehiclesOccludedIou': 0.063138135, 'vehiclesFlowEpe': 6.4206905, 'vehiclesFlowWarpedOccupancyAuc': 0.6124532, 'vehiclesFlowWarpedOccupancyIou': 0.55003333}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.88394535, 'vehiclesObservedIou': 0.6489152, 'vehiclesOccludedAuc': 0.01077971, 'vehiclesOccludedIou': 0.0053848294, 'vehiclesFlowEpe': 2.9187682, 'vehiclesFlowWarpedOccupancyAuc': 0.7801477, 'vehiclesFlowWarpedOccupancyIou': 0.7357323}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7805854, 'vehiclesObservedIou': 0.42253605, 'vehiclesOccludedAuc': 0.07533163, 'vehiclesOccludedIou': 0.015053408, 'vehiclesFlowEpe': 6.7110147, 'vehiclesFlowWarpedOccupancyAuc': 0.5661775, 'vehiclesFlowWarpedOccupancyIou': 0.44640535}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.6645972, 'vehiclesObservedIou': 0.35057655, 'vehiclesOccludedAuc': 0.110390574, 'vehiclesOccludedIou': 0.013905617, 'vehiclesFlowEpe': 3.813489, 'vehiclesFlowWarpedOccupancyAuc': 0.5579976, 'vehiclesFlowWarpedOccupancyIou': 0.39995626}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.72736967, 'vehiclesObservedIou': 0.3905522, 'vehiclesOccludedAuc': 0.67204356, 'vehiclesOccludedIou': 0.2574455, 'vehiclesFlowEpe': 4.4426455, 'vehiclesFlowWarpedOccupancyAuc': 0.66234016, 'vehiclesFlowWarpedOccupancyIou': 0.48664004}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.1260818, 'vehiclesObservedIou': 0.077483885, 'vehiclesOccludedAuc': 0.0018109253, 'vehiclesOccludedIou': 0.0013970179, 'vehiclesFlowEpe': 6.4853516, 'vehiclesFlowWarpedOccupancyAuc': 0.31422293, 'vehiclesFlowWarpedOccupancyIou': 0.11385546}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.53897864, 'vehiclesObservedIou': 0.26165932, 'vehiclesOccludedAuc': 0.00864119, 'vehiclesOccludedIou': 0.003421488, 'vehiclesFlowEpe': 2.638156, 'vehiclesFlowWarpedOccupancyAuc': 0.59599555, 'vehiclesFlowWarpedOccupancyIou': 0.29557735}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6277765, 'vehiclesObservedIou': 0.31189066, 'vehiclesOccludedAuc': 0.051193826, 'vehiclesOccludedIou': 0.014345656, 'vehiclesFlowEpe': 4.80281, 'vehiclesFlowWarpedOccupancyAuc': 0.47298095, 'vehiclesFlowWarpedOccupancyIou': 0.35800537}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.987921, 'vehiclesObservedIou': 0.82554555, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.629868, 'vehiclesFlowWarpedOccupancyAuc': 0.8955893, 'vehiclesFlowWarpedOccupancyIou': 0.9082765}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.77245575, 'vehiclesObservedIou': 0.5236192, 'vehiclesOccludedAuc': 0.006801499, 'vehiclesOccludedIou': 0.0037048594, 'vehiclesFlowEpe': 5.6766047, 'vehiclesFlowWarpedOccupancyAuc': 0.63542056, 'vehiclesFlowWarpedOccupancyIou': 0.5865196}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.93104947, 'vehiclesObservedIou': 0.65135336, 'vehiclesOccludedAuc': 0.11191302, 'vehiclesOccludedIou': 0.04496102, 'vehiclesFlowEpe': 4.51819, 'vehiclesFlowWarpedOccupancyAuc': 0.80509746, 'vehiclesFlowWarpedOccupancyIou': 0.705084}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8439336, 'vehiclesObservedIou': 0.5624091, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 8.312412, 'vehiclesFlowWarpedOccupancyAuc': 0.6393234, 'vehiclesFlowWarpedOccupancyIou': 0.67798615}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.986838, 'vehiclesObservedIou': 0.87862056, 'vehiclesOccludedAuc': 0.018884687, 'vehiclesOccludedIou': 0.006329919, 'vehiclesFlowEpe': 1.9294589, 'vehiclesFlowWarpedOccupancyAuc': 0.9017841, 'vehiclesFlowWarpedOccupancyIou': 0.9283184}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.39671978, 'vehiclesObservedIou': 0.20123197, 'vehiclesOccludedAuc': 0.6231231, 'vehiclesOccludedIou': 0.045683958, 'vehiclesFlowEpe': 3.4751005, 'vehiclesFlowWarpedOccupancyAuc': 0.50770265, 'vehiclesFlowWarpedOccupancyIou': 0.2663527}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.59954005, 'vehiclesObservedIou': 0.36881056, 'vehiclesOccludedAuc': 0.29989678, 'vehiclesOccludedIou': 0.029533463, 'vehiclesFlowEpe': 3.8470938, 'vehiclesFlowWarpedOccupancyAuc': 0.56421894, 'vehiclesFlowWarpedOccupancyIou': 0.386499}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.87796557, 'vehiclesObservedIou': 0.56953365, 'vehiclesOccludedAuc': 0.004741009, 'vehiclesOccludedIou': 0.002288374, 'vehiclesFlowEpe': 4.294014, 'vehiclesFlowWarpedOccupancyAuc': 0.72900677, 'vehiclesFlowWarpedOccupancyIou': 0.6541909}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.58747864, 'vehiclesObservedIou': 0.33408523, 'vehiclesOccludedAuc': 0.05982463, 'vehiclesOccludedIou': 0.026323002, 'vehiclesFlowEpe': 6.170552, 'vehiclesFlowWarpedOccupancyAuc': 0.5284578, 'vehiclesFlowWarpedOccupancyIou': 0.4142752}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.49424952, 'vehiclesObservedIou': 0.23314664, 'vehiclesOccludedAuc': 0.018164795, 'vehiclesOccludedIou': 0.006397609, 'vehiclesFlowEpe': 7.009785, 'vehiclesFlowWarpedOccupancyAuc': 0.3967196, 'vehiclesFlowWarpedOccupancyIou': 0.28235137}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.4396679, 'vehiclesObservedIou': 0.20459437, 'vehiclesOccludedAuc': 0.25389478, 'vehiclesOccludedIou': 0.048718054, 'vehiclesFlowEpe': 7.7434764, 'vehiclesFlowWarpedOccupancyAuc': 0.28201643, 'vehiclesFlowWarpedOccupancyIou': 0.22340648}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6599399, 'vehiclesObservedIou': 0.3332054, 'vehiclesOccludedAuc': 0.03099272, 'vehiclesOccludedIou': 0.007928569, 'vehiclesFlowEpe': 4.6972136, 'vehiclesFlowWarpedOccupancyAuc': 0.41887248, 'vehiclesFlowWarpedOccupancyIou': 0.36123967}
Time: 0.0013 seconds, Metrics: {'vehiclesObservedAuc': 0.9398776, 'vehiclesObservedIou': 0.7092233, 'vehiclesOccludedAuc': 0.00018166947, 'vehiclesOccludedIou': 0.00015062556, 'vehiclesFlowEpe': 3.3036366, 'vehiclesFlowWarpedOccupancyAuc': 0.7997876, 'vehiclesFlowWarpedOccupancyIou': 0.79989034}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8368785, 'vehiclesObservedIou': 0.53401524, 'vehiclesOccludedAuc': 0.0053699864, 'vehiclesOccludedIou': 0.0028254641, 'vehiclesFlowEpe': 2.0240133, 'vehiclesFlowWarpedOccupancyAuc': 0.7444674, 'vehiclesFlowWarpedOccupancyIou': 0.61819077}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.6308658, 'vehiclesObservedIou': 0.33914512, 'vehiclesOccludedAuc': 0.1729203, 'vehiclesOccludedIou': 0.03888296, 'vehiclesFlowEpe': 3.4325936, 'vehiclesFlowWarpedOccupancyAuc': 0.59220713, 'vehiclesFlowWarpedOccupancyIou': 0.42955738}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.23106407, 'vehiclesObservedIou': 0.1023898, 'vehiclesOccludedAuc': 0.008468005, 'vehiclesOccludedIou': 0.0028035948, 'vehiclesFlowEpe': 4.6399193, 'vehiclesFlowWarpedOccupancyAuc': 0.40889004, 'vehiclesFlowWarpedOccupancyIou': 0.1258544}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.8241357, 'vehiclesObservedIou': 0.41583428, 'vehiclesOccludedAuc': 0.07572142, 'vehiclesOccludedIou': 0.01728498, 'vehiclesFlowEpe': 4.29178, 'vehiclesFlowWarpedOccupancyAuc': 0.63685304, 'vehiclesFlowWarpedOccupancyIou': 0.43628493}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.76487184, 'vehiclesObservedIou': 0.42576796, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 3.4236653, 'vehiclesFlowWarpedOccupancyAuc': 0.646948, 'vehiclesFlowWarpedOccupancyIou': 0.5453902}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.3980383, 'vehiclesObservedIou': 0.19687358, 'vehiclesOccludedAuc': 0.0062957304, 'vehiclesOccludedIou': 0.0027056667, 'vehiclesFlowEpe': 4.7688417, 'vehiclesFlowWarpedOccupancyAuc': 0.30396464, 'vehiclesFlowWarpedOccupancyIou': 0.23841815}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.96819866, 'vehiclesObservedIou': 0.7461649, 'vehiclesOccludedAuc': 0.010455906, 'vehiclesOccludedIou': 0.0042440766, 'vehiclesFlowEpe': 2.9392967, 'vehiclesFlowWarpedOccupancyAuc': 0.8638702, 'vehiclesFlowWarpedOccupancyIou': 0.8328363}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.85002625, 'vehiclesObservedIou': 0.52351505, 'vehiclesOccludedAuc': 0.0046671, 'vehiclesOccludedIou': 0.0021631005, 'vehiclesFlowEpe': 5.849203, 'vehiclesFlowWarpedOccupancyAuc': 0.6863375, 'vehiclesFlowWarpedOccupancyIou': 0.5704149}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.987921, 'vehiclesObservedIou': 0.82554555, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 2.629868, 'vehiclesFlowWarpedOccupancyAuc': 0.8955893, 'vehiclesFlowWarpedOccupancyIou': 0.9082765}
2024-05-28 11:17:04.395902: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:17:04.551190: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
2024-05-28 11:17:04.551497: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype string and shape [1]
	 [[{{node Placeholder/_0}}]]
Average Time: 0.0012 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6845910994285713, 'vehiclesObservedIou': 0.4142724338571429, 'vehiclesOccludedAuc': 0.08415577948485714, 'vehiclesOccludedIou': 0.019777243481428574, 'vehiclesFlowEpe': 4.75924018, 'vehiclesFlowWarpedOccupancyAuc': 0.6043890788571429, 'vehiclesFlowWarpedOccupancyIou': 0.4803097508571428}
Creating submission for test shard /raid/STrajNet/preprocessed_data/val/00095new.tfrecords...
<_BatchDataset element_spec={'centerlines': TensorSpec(shape=(None, 256, 10, 7), dtype=tf.float32, name=None), 'actors': TensorSpec(shape=(None, 48, 11, 8), dtype=tf.float32, name=None), 'occl_actors': TensorSpec(shape=(None, 16, 11, 8), dtype=tf.float32, name=None), 'gt_flow': TensorSpec(shape=(None, 8, 256, 256, 2), dtype=tf.float32, name=None), 'origin_flow': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'ogm': TensorSpec(shape=(None, 512, 512, 11, 2), dtype=tf.float32, name=None), 'gt_obs_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'gt_occ_ogm': TensorSpec(shape=(None, 8, 256, 256, 1), dtype=tf.float32, name=None), 'map_image': TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), 'vec_flow': TensorSpec(shape=(None, 512, 512, 2), dtype=tf.float32, name=None)}>


<_BatchDataset element_spec={'roadgraph_samples/dir': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'roadgraph_samples/id': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/type': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/valid': TensorSpec(shape=(None, 20000, 1), dtype=tf.int64, name=None), 'roadgraph_samples/xyz': TensorSpec(shape=(None, 20000, 3), dtype=tf.float32, name=None), 'scenario/id': TensorSpec(shape=(None,), dtype=tf.string, name=None), 'state/current/bbox_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/height': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/length': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/timestamp_micros': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/valid': TensorSpec(shape=(None, 128, 1), dtype=tf.int64, name=None), 'state/current/vel_yaw': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/velocity_y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/width': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/x': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/y': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/current/z': TensorSpec(shape=(None, 128, 1), dtype=tf.float32, name=None), 'state/future/bbox_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/height': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/length': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/timestamp_micros': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/valid': TensorSpec(shape=(None, 128, 80), dtype=tf.int64, name=None), 'state/future/vel_yaw': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/velocity_y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/width': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/x': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/y': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/future/z': TensorSpec(shape=(None, 128, 80), dtype=tf.float32, name=None), 'state/id': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'state/is_sdc': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/past/bbox_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/height': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/length': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/timestamp_micros': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/valid': TensorSpec(shape=(None, 128, 10), dtype=tf.int64, name=None), 'state/past/vel_yaw': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/velocity_y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/width': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/x': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/y': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/past/z': TensorSpec(shape=(None, 128, 10), dtype=tf.float32, name=None), 'state/tracks_to_predict': TensorSpec(shape=(None, 128), dtype=tf.int64, name=None), 'state/type': TensorSpec(shape=(None, 128), dtype=tf.float32, name=None), 'traffic_light_state/current/state': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/valid': TensorSpec(shape=(None, 1, 16), dtype=tf.int64, name=None), 'traffic_light_state/current/x': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/y': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/current/z': TensorSpec(shape=(None, 1, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/state': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/valid': TensorSpec(shape=(None, 10, 16), dtype=tf.int64, name=None), 'traffic_light_state/past/x': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/y': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None), 'traffic_light_state/past/z': TensorSpec(shape=(None, 10, 16), dtype=tf.float32, name=None)}>
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.85951763, 'vehiclesObservedIou': 0.62155, 'vehiclesOccludedAuc': 0.21224226, 'vehiclesOccludedIou': 0.037208267, 'vehiclesFlowEpe': 3.942603, 'vehiclesFlowWarpedOccupancyAuc': 0.73226696, 'vehiclesFlowWarpedOccupancyIou': 0.53795457}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.5728967, 'vehiclesObservedIou': 0.2581476, 'vehiclesOccludedAuc': 0.15716839, 'vehiclesOccludedIou': 0.03524118, 'vehiclesFlowEpe': 6.817623, 'vehiclesFlowWarpedOccupancyAuc': 0.46467227, 'vehiclesFlowWarpedOccupancyIou': 0.301604}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.30070725, 'vehiclesObservedIou': 0.18890834, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 5.873618, 'vehiclesFlowWarpedOccupancyAuc': 0.39904034, 'vehiclesFlowWarpedOccupancyIou': 0.21966551}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.92471075, 'vehiclesObservedIou': 0.66807353, 'vehiclesOccludedAuc': 0.05044843, 'vehiclesOccludedIou': 0.016390143, 'vehiclesFlowEpe': 5.6240544, 'vehiclesFlowWarpedOccupancyAuc': 0.74065673, 'vehiclesFlowWarpedOccupancyIou': 0.6960279}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8796092, 'vehiclesObservedIou': 0.6970718, 'vehiclesOccludedAuc': 0.09926285, 'vehiclesOccludedIou': 0.01813625, 'vehiclesFlowEpe': 4.868248, 'vehiclesFlowWarpedOccupancyAuc': 0.79725856, 'vehiclesFlowWarpedOccupancyIou': 0.7134427}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.59163356, 'vehiclesObservedIou': 0.28392404, 'vehiclesOccludedAuc': 0.0268901, 'vehiclesOccludedIou': 0.006100909, 'vehiclesFlowEpe': 2.968237, 'vehiclesFlowWarpedOccupancyAuc': 0.6147652, 'vehiclesFlowWarpedOccupancyIou': 0.358866}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9773812, 'vehiclesObservedIou': 0.76632404, 'vehiclesOccludedAuc': 0.016121939, 'vehiclesOccludedIou': 0.0047977595, 'vehiclesFlowEpe': 9.556391, 'vehiclesFlowWarpedOccupancyAuc': 0.6575226, 'vehiclesFlowWarpedOccupancyIou': 0.7309573}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.97033983, 'vehiclesObservedIou': 0.6939422, 'vehiclesOccludedAuc': 0.1574089, 'vehiclesOccludedIou': 0.048798025, 'vehiclesFlowEpe': 3.5853884, 'vehiclesFlowWarpedOccupancyAuc': 0.8150438, 'vehiclesFlowWarpedOccupancyIou': 0.6513129}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.48927978, 'vehiclesObservedIou': 0.21866289, 'vehiclesOccludedAuc': 0.0814434, 'vehiclesOccludedIou': 0.02024785, 'vehiclesFlowEpe': 3.593993, 'vehiclesFlowWarpedOccupancyAuc': 0.5616759, 'vehiclesFlowWarpedOccupancyIou': 0.25824082}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.11066792, 'vehiclesObservedIou': 0.06328046, 'vehiclesOccludedAuc': 0.0015063878, 'vehiclesOccludedIou': 0.0016587434, 'vehiclesFlowEpe': 6.5327177, 'vehiclesFlowWarpedOccupancyAuc': 0.17341764, 'vehiclesFlowWarpedOccupancyIou': 0.057447784}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.76611835, 'vehiclesObservedIou': 0.50532925, 'vehiclesOccludedAuc': 0.012889116, 'vehiclesOccludedIou': 0.0026952145, 'vehiclesFlowEpe': 9.080952, 'vehiclesFlowWarpedOccupancyAuc': 0.5163212, 'vehiclesFlowWarpedOccupancyIou': 0.5552932}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.49375987, 'vehiclesObservedIou': 0.30047435, 'vehiclesOccludedAuc': 0.3179567, 'vehiclesOccludedIou': 0.04908529, 'vehiclesFlowEpe': 5.580045, 'vehiclesFlowWarpedOccupancyAuc': 0.55385005, 'vehiclesFlowWarpedOccupancyIou': 0.43901068}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.6478145, 'vehiclesObservedIou': 0.41600573, 'vehiclesOccludedAuc': 0.04910543, 'vehiclesOccludedIou': 0.012664862, 'vehiclesFlowEpe': 6.399722, 'vehiclesFlowWarpedOccupancyAuc': 0.588527, 'vehiclesFlowWarpedOccupancyIou': 0.46434906}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.66980493, 'vehiclesObservedIou': 0.3582806, 'vehiclesOccludedAuc': 0.08801876, 'vehiclesOccludedIou': 0.010059265, 'vehiclesFlowEpe': 3.4849179, 'vehiclesFlowWarpedOccupancyAuc': 0.6413654, 'vehiclesFlowWarpedOccupancyIou': 0.4459013}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.38127074, 'vehiclesObservedIou': 0.1640173, 'vehiclesOccludedAuc': 0.07674741, 'vehiclesOccludedIou': 0.014438442, 'vehiclesFlowEpe': 6.2428083, 'vehiclesFlowWarpedOccupancyAuc': 0.4091339, 'vehiclesFlowWarpedOccupancyIou': 0.2125983}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.81486005, 'vehiclesObservedIou': 0.46179995, 'vehiclesOccludedAuc': 0.07595656, 'vehiclesOccludedIou': 0.013918078, 'vehiclesFlowEpe': 5.3593187, 'vehiclesFlowWarpedOccupancyAuc': 0.54696083, 'vehiclesFlowWarpedOccupancyIou': 0.41141713}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.8653986, 'vehiclesObservedIou': 0.5499675, 'vehiclesOccludedAuc': 0.20824975, 'vehiclesOccludedIou': 0.034042727, 'vehiclesFlowEpe': 2.2696652, 'vehiclesFlowWarpedOccupancyAuc': 0.7829487, 'vehiclesFlowWarpedOccupancyIou': 0.6353945}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.68330514, 'vehiclesObservedIou': 0.39879647, 'vehiclesOccludedAuc': 0.0, 'vehiclesOccludedIou': 0.0, 'vehiclesFlowEpe': 4.909901, 'vehiclesFlowWarpedOccupancyAuc': 0.5382233, 'vehiclesFlowWarpedOccupancyIou': 0.4583664}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.45500544, 'vehiclesObservedIou': 0.21217759, 'vehiclesOccludedAuc': 0.03374298, 'vehiclesOccludedIou': 0.010068023, 'vehiclesFlowEpe': 4.2246, 'vehiclesFlowWarpedOccupancyAuc': 0.47668108, 'vehiclesFlowWarpedOccupancyIou': 0.25505173}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.40345958, 'vehiclesObservedIou': 0.22747853, 'vehiclesOccludedAuc': 0.034913868, 'vehiclesOccludedIou': 0.007841609, 'vehiclesFlowEpe': 4.994909, 'vehiclesFlowWarpedOccupancyAuc': 0.48904815, 'vehiclesFlowWarpedOccupancyIou': 0.21935701}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.7461723, 'vehiclesObservedIou': 0.5352569, 'vehiclesOccludedAuc': 0.12223521, 'vehiclesOccludedIou': 0.027149718, 'vehiclesFlowEpe': 7.93596, 'vehiclesFlowWarpedOccupancyAuc': 0.72770846, 'vehiclesFlowWarpedOccupancyIou': 0.67395705}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.86659056, 'vehiclesObservedIou': 0.560995, 'vehiclesOccludedAuc': 0.007617365, 'vehiclesOccludedIou': 0.0033864942, 'vehiclesFlowEpe': 2.6421912, 'vehiclesFlowWarpedOccupancyAuc': 0.76398754, 'vehiclesFlowWarpedOccupancyIou': 0.64559877}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.9543698, 'vehiclesObservedIou': 0.70379585, 'vehiclesOccludedAuc': 0.01475705, 'vehiclesOccludedIou': 0.004081059, 'vehiclesFlowEpe': 5.9578056, 'vehiclesFlowWarpedOccupancyAuc': 0.7392062, 'vehiclesFlowWarpedOccupancyIou': 0.6828916}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.9247723, 'vehiclesObservedIou': 0.64903486, 'vehiclesOccludedAuc': 0.0055342945, 'vehiclesOccludedIou': 0.0022847299, 'vehiclesFlowEpe': 5.078274, 'vehiclesFlowWarpedOccupancyAuc': 0.77548987, 'vehiclesFlowWarpedOccupancyIou': 0.75687194}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.46099317, 'vehiclesObservedIou': 0.240895, 'vehiclesOccludedAuc': 0.0021829712, 'vehiclesOccludedIou': 0.0010613736, 'vehiclesFlowEpe': 2.3564806, 'vehiclesFlowWarpedOccupancyAuc': 0.6137234, 'vehiclesFlowWarpedOccupancyIou': 0.32932758}
Time: 0.0011 seconds, Metrics: {'vehiclesObservedAuc': 0.6822713, 'vehiclesObservedIou': 0.36034694, 'vehiclesOccludedAuc': 0.0029199154, 'vehiclesOccludedIou': 0.0020618232, 'vehiclesFlowEpe': 6.964838, 'vehiclesFlowWarpedOccupancyAuc': 0.56391823, 'vehiclesFlowWarpedOccupancyIou': 0.43617147}
Time: 0.0012 seconds, Metrics: {'vehiclesObservedAuc': 0.6975712, 'vehiclesObservedIou': 0.3718988, 'vehiclesOccludedAuc': 0.04972341, 'vehiclesOccludedIou': 0.007654587, 'vehiclesFlowEpe': 3.681357, 'vehiclesFlowWarpedOccupancyAuc': 0.60571873, 'vehiclesFlowWarpedOccupancyIou': 0.42046538}
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.9773812, 'vehiclesObservedIou': 0.76632404, 'vehiclesOccludedAuc': 0.016121939, 'vehiclesOccludedIou': 0.0047977595, 'vehiclesFlowEpe': 9.556391, 'vehiclesFlowWarpedOccupancyAuc': 0.6575226, 'vehiclesFlowWarpedOccupancyIou': 0.7309573}
Average Time: 0.0011 seconds, Average Metrics: {'vehiclesObservedAuc': 0.6737141351851851, 'vehiclesObservedIou': 0.42505316740740745, 'vehiclesOccludedAuc': 0.0705571647, 'vehiclesOccludedIou': 0.01448416378888889, 'vehiclesFlowEpe': 5.204689592592592, 'vehiclesFlowWarpedOccupancyAuc': 0.6033011866666667, 'vehiclesFlowWarpedOccupancyIou': 0.4654645401481481}
Total Count: 3615
Best Time: inf seconds, Best Metrics: {'vehiclesObservedAuc': 0.99999577, 'vehiclesObservedIou': 0.95749885, 'vehiclesOccludedAuc': 0.0016288334, 'vehiclesOccludedIou': 0.0009244057, 'vehiclesFlowEpe': 0.28945667, 'vehiclesFlowWarpedOccupancyAuc': 0.9488617, 'vehiclesFlowWarpedOccupancyIou': 0.97707814}
Overall Average Time: 0.0011 seconds, Overall Average Metrics: {'vehiclesObservedAuc': 0.6711601574300713, 'vehiclesObservedIou': 0.4124218854911699, 'vehiclesOccludedAuc': 0.07978580600700265, 'vehiclesOccludedIou': 0.017107879208299773, 'vehiclesFlowEpe': 4.902522148769305, 'vehiclesFlowWarpedOccupancyAuc': 0.5994508890010785, 'vehiclesFlowWarpedOccupancyIou': 0.4690250973415553}
